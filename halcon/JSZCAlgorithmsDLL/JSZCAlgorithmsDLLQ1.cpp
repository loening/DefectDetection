#include <ostream>		
#include "Halconcpp.h"
//#include <opencv2/opencv.hpp>
#include <string.h>
#include "JSZCAlgorithmsDLLQ1.h" 
//#include <QObject>
using namespace std;
using namespace HalconCpp;
//using namespace cv;


// 定义导出函数
JSZCAlgorithmsDLLQ1::JSZCAlgorithmsDLLQ1()
{
	//ErrMessage = (char*)malloc(sizeof(char)*1000);
	//strcpy(ErrMessage, "");

}

JSZCAlgorithmsDLLQ1::~JSZCAlgorithmsDLLQ1()
{
	//free(ErrMessage);	
}

#pragma region universalFunction  

void  JSZCAlgorithmsDLLQ1::clearVec()
{
	// 异常信息
	//memset(ErrMessage, 0, sizeof(char) * 1000);
	// 异常标志位
	reg = 0;
	VeErrMessage.clear();
}
#pragma endregion  

#pragma region ChengduJabilQ1

int JSZCAlgorithmsDLLQ1::HotRole(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_Image, ho_Ellipse, ho_reg, ho_ImageAffineTrans;
	HObject  ho_RegionAffineTrans, ho_ImageZoomed, ho_RegionZoom;
	HObject  ho_RegionMoved8, ho_RegionErosion3, ho_ImageReduced;
	HObject  ho_RegionTrans, ho_RegionErosion4, ho_ImageClosing4;
	HObject  ho_ImageSub7, ho_Region6, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions17, ho_SelectedRegions18, ho_ImageSub2;
	HObject  ho_Region4, ho_ConnectedRegions11, ho_SelectedRegions15;
	HObject  ho_PolarTransImage, ho_ImageClosing7, ho_ImageScaled4;
	HObject  ho_Region11, ho_RegionClosing2, ho_RegionDilation7;
	HObject  ho_RegionMoved6, ho_RegionDifference10, ho_ConnectedRegions10;
	HObject  ho_SortedRegions, ho_RegionTrans7, ho_RegionErosion8;
	HObject  ho_RegionMoved9, ho_ImageSub5, ho_Region1, ho_RegionIntersection5;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions10, ho_SelectedRegions14;
	HObject  ho_RegionDifference3, ho_RegionMoved5, ho_ee, ho_ObjectSelected;
	HObject  ho_RegionDifference4, ho_XYTransRegion, ho_RegionZoom1;
	HObject  ho_RegionAffineTrans1, ho_ConnectedRegions9, ho_SelectedRegions5;
	HObject  ho_RegionMoved2, ho_RegionDifference2, ho_ImageSub4;
	HObject  ho_Region12, ho_RegionIntersection10, ho_ConnectedRegions;
	HObject  ho_SelectedRegions, ho_e, ho_RegionIntersection2;
	HObject  ho_RegionMoved3, ho_ImageOpening, ho_ImageClosing;
	HObject  ho_ImageClosing3, ho_ImageSub1, ho_Region, ho_ConnectedRegions3;
	HObject  ho_RegionOpening, ho_ConnectedRegions4, ho_SelectedRegions3;
	HObject  ho_SelectedRegions4, ho_SelectedRegions7, ho_RegionUnion;
	HObject  ho_ConnectedRegions5, ho_RegionZoom2, ho_RegionAffineTrans2;
	HObject  ho_RegionMoved4, ho_RegionDifference6, ho_RegionErosion5;
	HObject  ho_RegionDifference7, ho_RegionTrans6, ho_RegionUnion3;
	HObject  ho_RegionErosion6, ho_RegionDifference8, ho_RegionIntersection8;
	HObject  ho_RegionUnion2, ho_RegionErosion7, ho_RegionDilation6;
	HObject  ho_ImageReduced6, ho_ImageMedian2, ho_ImageScaled3;
	HObject  ho_Region9, ho_RegionDifference9, ho_Region10, ho_RegionIntersection9;
	HObject  ho_RegionUnion4, ho_RegionIntersection4, ho_ConnectedRegions8;
	HObject  ho_SelectedRegions13, ho_SelectedRegions12, ho_RegionUnion5;
	HObject  ho_ImageClosing5, ho_ImageClosing6, ho_ImageSub3;
	HObject  ho_Region8, ho_RegionIntersection3, ho_ConnectedRegions7;
	HObject  ho_SelectedRegions11, ho_RegionMoved7, ho_ImageClosing8;
	HObject  ho_ImageSub6, ho_Region5, ho_ConnectedRegions12;
	HObject  ho_SelectedRegions16, ho_Rectangle, ho_RegionMoved;
	HObject  ho_SelectedRegions8, ho_RegionDifference, ho_SelectedRegions9;
	HObject  ho_RegionErosion, ho_RegionMoved1, ho_RegionDifference1;
	HObject  ho_RegionErosion1, ho_RegionDilation, ho_ImageReduced1;
	HObject  ho_ImageClosing2, ho_ImageScaled1, ho_Region3, ho_RegionIntersection1;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions2, ho_SelectedRegions6;
	HObject  ho_RegionErosion9, ho_ImageClosing1, ho_ImageSub;
	HObject  ho_Region2, ho_RegionErosion2, ho_RegionErosion10;
	HObject  ho_RegionIntersection, ho_ConnectedRegions1, ho_SelectedRegions1;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_a, hv_ra, hv_rb, hv_phi, hv_Area2;
	HTuple  hv_Row2, hv_Column2, hv_HomMat2DIdentity, hv_HomMat2DIdentity1;
	HTuple  hv_HomMat2DRotate, hv_HomMat2DRotate1, hv_GenParamValue;
	HTuple  hv_os, hv_scal, hv_scal1, hv_move, hv_Number2, hv_Area3;
	HTuple  hv_Row3, hv_Column3, hv_Width1, hv_Height1, hv_Number3;
	HTuple  hv_Index1, hv_Area1, hv_Row1, hv_Column1, hv_Number;
	HTuple  hv_Number1, hv_Mean, hv_Deviation1, hv_Width, hv_Height;
	HTuple  hv_Value, hv_R1LenVal, hv_Rval, hv_Sin, hv_Cos;
	HTuple  hv_Deviation, hv_Exception;

	try
	{
		hv_a = 0;
		ho_Image = hv_dd.TupleGetDictObject("image");
		ho_Ellipse = hv_dd.TupleGetDictObject("region");
		GenEmptyObj(&ho_reg);
		EllipticAxis(ho_Ellipse, &hv_ra, &hv_rb, &hv_phi);
		AreaCenter(ho_Ellipse, &hv_Area2, &hv_Row2, &hv_Column2);

		HomMat2dIdentity(&hv_HomMat2DIdentity);
		HomMat2dIdentity(&hv_HomMat2DIdentity1);
		HomMat2dRotate(hv_HomMat2DIdentity, -hv_phi, hv_Row2, hv_Column2, &hv_HomMat2DRotate);
		HomMat2dRotate(hv_HomMat2DIdentity1, hv_phi, hv_Row2, hv_Column2, &hv_HomMat2DRotate1);
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		hv_os.Clear();
		hv_os[0] = 170;
		hv_os[1] = 170;
		hv_scal.Clear();
		hv_scal[0] = 2;
		hv_scal[1] = -100;
		hv_scal1.Clear();
		hv_scal1[0] = 2;
		hv_scal1[1] = -70;
		hv_move.Clear();
		hv_move[0] = -150;
		hv_move[1] = -10;
		if (0 != (int((hv_GenParamValue.TupleFind("os")) >= 0)))
		{
			hv_os = hv_dd.TupleGetDictTuple("os");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal")) >= 0)))
		{
			hv_scal = hv_dd.TupleGetDictTuple("scal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal1")) >= 0)))
		{
			hv_scal1 = hv_dd.TupleGetDictTuple("scal1");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
		{
			hv_move = hv_dd.TupleGetDictTuple("move");
		}
		if (0 != (HTuple(int((HTuple(10).TupleRad())>hv_phi)).TupleAnd(int(hv_phi>(HTuple(-10).TupleRad())))))
		{

			AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
				"false");
			AffineTransRegion(ho_Ellipse, &ho_RegionAffineTrans, hv_HomMat2DRotate, "nearest_neighbor");

			ZoomImageFactor(ho_ImageAffineTrans, &ho_ImageZoomed, hv_rb / hv_ra, 1, "constant");
			ZoomRegion(ho_RegionAffineTrans, &ho_RegionZoom, hv_rb / hv_ra, 1);

			MoveRegion(ho_RegionZoom, &ho_RegionMoved8, -150, 0);

			ErosionCircle(ho_RegionZoom, &ho_RegionErosion3, 8);
			ReduceDomain(ho_ImageZoomed, ho_RegionErosion3, &ho_ImageReduced);
			//
			ShapeTrans(ho_RegionErosion3, &ho_RegionTrans, "rectangle1");
			ErosionRectangle1(ho_RegionTrans, &ho_RegionErosion4, 180, 1);
			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing4, 3, 10);
			SubImage(ho_ImageReduced, ho_ImageClosing4, &ho_ImageSub7, 12, 128);
			Threshold(ho_ImageSub7, &ho_Region6, 0, 30);
			Intersection(ho_Region6, ho_RegionErosion4, &ho_Region6);
			Difference(ho_Region6, ho_RegionMoved8, &ho_Region6);
			Connection(ho_Region6, &ho_ConnectedRegions13);
			SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions17, (HTuple("circularity").Append("inner_radius")),
				"and", (HTuple(0).Append(1)), (HTuple(0.15).Append(5)));
			SelectShape(ho_SelectedRegions17, &ho_SelectedRegions18, "phi", "and", HTuple(-60).TupleRad(),
				HTuple(60).TupleRad());
			Difference(ho_SelectedRegions17, ho_SelectedRegions18, &ho_SelectedRegions17
				);

			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing4, 10, 10);
			SubImage(ho_ImageReduced, ho_ImageClosing4, &ho_ImageSub2, 3, 128);
			Threshold(ho_ImageSub2, &ho_Region4, 0, 50);
			Connection(ho_Region4, &ho_ConnectedRegions11);
			SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions15, (HTuple("area").Append("circularity")),
				"and", (HTuple(10).Append(0.3)), (HTuple(1110).Append(1)));
			CountObj(ho_SelectedRegions15, &hv_Number2);
			if (0 != (int(hv_Number2<20)))
			{
				hv_a = 1;
			}
			AreaCenter(ho_RegionZoom, &hv_Area3, &hv_Row3, &hv_Column3);
			GetImageSize(ho_ImageZoomed, &hv_Width1, &hv_Height1);
			PolarTransImageExt(ho_ImageZoomed, &ho_PolarTransImage, hv_Row3, hv_Column3,
				HTuple(120).TupleRad(), HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1,
				"nearest_neighbor");

			GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing7, 3, 550);
			ScaleImage(ho_ImageClosing7, &ho_ImageScaled4, HTuple(hv_scal[0]), HTuple(hv_scal[1]));
			Threshold(ho_ImageScaled4, &ho_Region11, 0, 30);
			FillUp(ho_Region11, &ho_Region11);
			ClosingRectangle1(ho_Region11, &ho_RegionClosing2, 500, 50);
			OpeningRectangle1(ho_RegionClosing2, &ho_RegionClosing2, 400, 1);
			ShapeTrans(ho_RegionClosing2, &ho_RegionClosing2, "convex");
			DilationCircle(ho_RegionClosing2, &ho_RegionDilation7, 8);

			//检测裂纹
			if (0 != hv_a)
			{

				MoveRegion(ho_RegionDilation7, &ho_RegionMoved6, -170, 0);
				Difference(ho_RegionMoved6, ho_RegionDilation7, &ho_RegionDifference10);
				Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
				SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
					3200, 99999);
				SortRegion(ho_RegionDifference10, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_RegionDifference10, 1);
				ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
				ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 2000, 1);
				Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
					);
				MoveRegion(ho_RegionDifference10, &ho_RegionMoved9, -5, 0);

				SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub5, 3.8, 128);
				Threshold(ho_ImageSub5, &ho_Region1, 0, 30);
				Intersection(ho_RegionMoved9, ho_Region1, &ho_RegionIntersection5);
				Connection(ho_RegionIntersection5, &ho_ConnectedRegions6);
				//select_shape (ConnectedRegions6, SelectedRegions10, ['height','circularity','inner_radius'], 'and', [20,0,0.1], [9999,0.3,20])
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, (((HTuple("height").Append("circularity")).Append("inner_radius")).Append("area")),
					"and", (((HTuple(20).Append(0)).Append(0.1)).Append(10)), (((HTuple(9999).Append(0.3)).Append(20)).Append(2000)));
				SelectShape(ho_SelectedRegions10, &ho_SelectedRegions14, "phi", "and", HTuple(-5).TupleRad(),
					HTuple(5).TupleRad());
				Difference(ho_SelectedRegions10, ho_SelectedRegions14, &ho_RegionDifference3
					);

				MoveRegion(ho_RegionDifference10, &ho_RegionMoved5, -20, 0);
				CountObj(ho_RegionDifference3, &hv_Number3);
				GenEmptyObj(&ho_ee);
				{
					HTuple end_val102 = hv_Number3;
					HTuple step_val102 = 1;
					for (hv_Index1 = 1; hv_Index1.Continue(end_val102, step_val102); hv_Index1 += step_val102)
					{
						SelectObj(ho_RegionDifference3, &ho_ObjectSelected, hv_Index1);
						Difference(ho_ObjectSelected, ho_RegionMoved5, &ho_RegionDifference4);
						AreaCenter(ho_RegionDifference4, &hv_Area1, &hv_Row1, &hv_Column1);
						if (0 != hv_Area1)
						{
							ConcatObj(ho_ee, ho_ObjectSelected, &ho_ee);
						}
					}
				}


				PolarTransRegionInv(ho_ee, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
					HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
					"nearest_neighbor");
				//union2 (XYTransRegion, SelectedRegions17, XYTransRegion)
				ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
				AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
					"nearest_neighbor");
				Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 10,
					999999);
				ConcatObj(hv_dt.TupleGetDictObject("105"), ho_SelectedRegions5, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "105");
				ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);

			}
			//检测脱落
			MoveRegion(ho_RegionDilation7, &ho_RegionMoved6, -70, 0);
			Difference(ho_RegionMoved6, ho_RegionDilation7, &ho_RegionDifference10);
			Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
			SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
				3200, 99999);
			SortRegion(ho_RegionDifference10, &ho_SortedRegions, "first_point", "true",
				"row");
			SelectObj(ho_SortedRegions, &ho_RegionDifference10, 1);
			ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
			ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 1900, 1);
			Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
				);
			MoveRegion(ho_RegionDifference10, &ho_RegionMoved2, -10, 0);
			Difference(ho_RegionDifference10, ho_RegionMoved2, &ho_RegionDifference2);

			SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub4, 1.5, 128);
			Threshold(ho_ImageSub4, &ho_Region12, 0, 30);
			Intersection(ho_Region12, ho_RegionDifference10, &ho_RegionIntersection10);
			Connection(ho_RegionIntersection10, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20, 9999999);
			CountObj(ho_SelectedRegions, &hv_Number);
			GenEmptyObj(&ho_e);
			{
				HTuple end_val143 = hv_Number;
				HTuple step_val143 = 1;
				for (hv_Index1 = 1; hv_Index1.Continue(end_val143, step_val143); hv_Index1 += step_val143)
				{
					SelectObj(ho_SelectedRegions, &ho_ObjectSelected, hv_Index1);
					Intersection(ho_ObjectSelected, ho_RegionDifference2, &ho_RegionIntersection2
						);
					AreaCenter(ho_RegionIntersection2, &hv_Area1, &hv_Row1, &hv_Column1);
					if (0 != hv_Area1)
					{
						ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
					}
				}
			}
			//检测刀纹
			ErosionCircle(ho_RegionZoom, &ho_RegionErosion3, 15);
			MoveRegion(ho_RegionErosion3, &ho_RegionMoved3, -160, 0);
			ReduceDomain(ho_ImageZoomed, ho_RegionErosion3, &ho_ImageReduced);
			GrayOpeningRect(ho_ImageReduced, &ho_ImageOpening, 1, 1);
			GrayClosingRect(ho_ImageOpening, &ho_ImageClosing, 5, 1);
			GrayClosingRect(ho_ImageClosing, &ho_ImageClosing3, 10, 30);
			SubImage(ho_ImageClosing, ho_ImageClosing3, &ho_ImageSub1, 13, 128);
			Threshold(ho_ImageSub1, &ho_Region, 0, 30);
			Intersection(ho_Region, ho_RegionErosion4, &ho_Region);

			Difference(ho_Region, ho_RegionMoved3, &ho_Region);
			Connection(ho_Region, &ho_ConnectedRegions3);
			OpeningRectangle1(ho_ConnectedRegions3, &ho_RegionOpening, 1, 5);
			Connection(ho_RegionOpening, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions3, ((HTuple("height").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(40).Append(2)).Append(0)), ((HTuple(99999).Append(10.5)).Append(0.2)));
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions4, "phi", "and", HTuple(45).TupleRad(),
				HTuple(90).TupleRad());
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions7, "phi", "and", HTuple(-90).TupleRad(),
				HTuple(-45).TupleRad());
			Union2(ho_SelectedRegions7, ho_SelectedRegions4, &ho_RegionUnion);
			Connection(ho_RegionUnion, &ho_ConnectedRegions5);
			CountObj(ho_ConnectedRegions5, &hv_Number1);
			if (0 != (HTuple(int(hv_Number1>2)).TupleAnd(int(hv_a == 1))))
			{
				ZoomRegion(ho_ConnectedRegions5, &ho_RegionZoom2, hv_ra / hv_rb, 1);
				AffineTransRegion(ho_RegionZoom2, &ho_RegionAffineTrans2, hv_HomMat2DRotate1,
					"nearest_neighbor");
				ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionAffineTrans2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
				ConcatObj(ho_reg, ho_RegionAffineTrans2, &ho_reg);
			}

			PolarTransRegionInv(ho_e, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
				HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
				"nearest_neighbor");

			ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
			AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
				"nearest_neighbor");
			Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
			SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 10,
				999999);
			ConcatObj(hv_dt.TupleGetDictObject("102"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
			ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);

			MoveRegion(ho_Ellipse, &ho_RegionMoved4, HTuple(hv_move[0]), HTuple(hv_move[1]));
			Difference(ho_Ellipse, ho_RegionMoved4, &ho_RegionDifference6);
			ErosionCircle(ho_RegionDifference6, &ho_RegionDifference6, 10);

			//********************
			ErosionCircle(ho_RegionDifference6, &ho_RegionErosion5, 5);
			Difference(ho_RegionDifference6, ho_RegionErosion5, &ho_RegionDifference7);
			ShapeTrans(ho_RegionDifference7, &ho_RegionTrans6, "rectangle1");
			Union1(ho_RegionTrans6, &ho_RegionUnion3);
			ErosionRectangle1(ho_RegionUnion3, &ho_RegionErosion6, 150, 1);
			Difference(ho_RegionUnion3, ho_RegionErosion6, &ho_RegionDifference8);
			Intersection(ho_RegionDifference8, ho_RegionDifference7, &ho_RegionIntersection8
				);


			Union1(ho_RegionDifference6, &ho_RegionUnion2);
			Intensity(ho_RegionUnion2, ho_Image, &hv_Mean, &hv_Deviation1);
			if (0 != (HTuple(int(hv_Mean<90)).TupleAnd(int(hv_a == 1))))
			{
				ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionUnion2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
				ConcatObj(ho_reg, ho_RegionUnion2, &ho_reg);
			}


			ErosionCircle(ho_RegionUnion2, &ho_RegionErosion7, 15);
			DilationCircle(ho_RegionUnion2, &ho_RegionDilation6, 15);
			ReduceDomain(ho_Image, ho_RegionDilation6, &ho_ImageReduced6);
			MedianRect(ho_ImageReduced6, &ho_ImageMedian2, 10, 10);
			ScaleImage(ho_ImageMedian2, &ho_ImageScaled3, 1.5, -30);
			Threshold(ho_ImageScaled3, &ho_Region9, 0, 60);

			Difference(ho_Region9, ho_RegionIntersection8, &ho_RegionDifference9);
			Threshold(ho_ImageScaled3, &ho_Region10, 0, 10);
			Intersection(ho_Region10, ho_RegionIntersection8, &ho_RegionIntersection9);
			Union2(ho_RegionDifference9, ho_RegionIntersection9, &ho_RegionUnion4);

			Intersection(ho_RegionUnion4, ho_RegionDifference6, &ho_RegionIntersection4
				);
			Connection(ho_RegionIntersection4, &ho_ConnectedRegions8);
			SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions13, ((HTuple("area").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(100).Append(5)).Append(0.0000005)), ((HTuple(99999).Append(999)).Append(1)));
			SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions12, ((HTuple("area").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(100).Append(2)).Append(0.035)), ((HTuple(99999).Append(999)).Append(1)));
			if (0 != hv_a)
			{

				Union2(ho_SelectedRegions13, ho_SelectedRegions12, &ho_RegionUnion5);
				ConcatObj(hv_dt.TupleGetDictObject("102"), ho_RegionUnion5, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
				ConcatObj(ho_reg, ho_RegionUnion5, &ho_reg);

			}
			//横纹
			GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing5, 1, 1);
			GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing6, 20, 5);
			SubImage(ho_ImageClosing5, ho_ImageClosing6, &ho_ImageSub3, 3, 128);
			Threshold(ho_ImageSub3, &ho_Region8, 0, 50);
			Intersection(ho_Region8, ho_RegionErosion7, &ho_RegionIntersection3);

			Connection(ho_RegionIntersection3, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions11, (((HTuple("area").Append("circularity")).Append("phi")).Append("contlength")),
				"and", ((HTuple(100).Append(0.00000000001)).TupleConcat(HTuple(-50).TupleRad())).TupleConcat(150),
				((HTuple(99999).Append(0.3)).TupleConcat(HTuple(50).TupleRad())).TupleConcat(9999999));
			ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions11, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
			ConcatObj(ho_reg, ho_SelectedRegions11, &ho_reg);
		}
		else
		{

			AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
				"false");
			AffineTransRegion(ho_Ellipse, &ho_RegionAffineTrans, hv_HomMat2DRotate, "nearest_neighbor");

			ZoomImageFactor(ho_ImageAffineTrans, &ho_ImageZoomed, hv_rb / hv_ra, 1, "constant");
			ZoomRegion(ho_RegionAffineTrans, &ho_RegionZoom, hv_rb / hv_ra, 1);
			MoveRegion(ho_RegionZoom, &ho_RegionMoved7, -150, 1);
			ErosionCircle(ho_RegionZoom, &ho_RegionErosion3, 5);
			ReduceDomain(ho_ImageZoomed, ho_RegionErosion3, &ho_ImageReduced);
			//
			ShapeTrans(ho_RegionErosion3, &ho_RegionTrans, "rectangle1");
			ErosionRectangle1(ho_RegionTrans, &ho_RegionErosion4, 180, 1);
			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing4, 3, 8);
			SubImage(ho_ImageReduced, ho_ImageClosing4, &ho_ImageSub7, 14, 128);
			Threshold(ho_ImageSub7, &ho_Region6, 0, 30);
			Intersection(ho_Region6, ho_RegionErosion4, &ho_Region6);
			Difference(ho_Region6, ho_RegionMoved7, &ho_Region6);
			Connection(ho_Region6, &ho_ConnectedRegions13);
			SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions17, (HTuple("circularity").Append("inner_radius")),
				"and", (HTuple(0).Append(1)), (HTuple(0.15).Append(5)));
			SelectShape(ho_SelectedRegions17, &ho_SelectedRegions18, "phi", "and", HTuple(-70).TupleRad(),
				HTuple(70).TupleRad());
			Difference(ho_SelectedRegions17, ho_SelectedRegions18, &ho_SelectedRegions17
				);

			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing4, 10, 10);
			SubImage(ho_ImageReduced, ho_ImageClosing4, &ho_ImageSub2, 3, 128);
			Threshold(ho_ImageSub2, &ho_Region4, 0, 50);
			Connection(ho_Region4, &ho_ConnectedRegions11);
			SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions15, (HTuple("area").Append("circularity")),
				"and", (HTuple(10).Append(0.3)), (HTuple(1110).Append(1)));
			CountObj(ho_SelectedRegions15, &hv_Number2);
			if (0 != (int(hv_Number2<30)))
			{
				hv_a = 1;
			}
			if (0 != hv_a)
			{
				//检测漏热钻
				GrayOpeningRect(ho_ImageReduced, &ho_ImageOpening, 2, 1);
				GrayClosingRect(ho_ImageOpening, &ho_ImageClosing, 8, 1);
				GrayClosingRect(ho_ImageClosing, &ho_ImageClosing3, 10, 30);

				GrayClosingRect(ho_ImageClosing3, &ho_ImageClosing8, 150, 80);
				SubImage(ho_ImageClosing3, ho_ImageClosing8, &ho_ImageSub6, 6, 128);
				Threshold(ho_ImageSub6, &ho_Region5, 0, 30);

				Connection(ho_Region5, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions16, ((HTuple("area").Append("width")).Append("inner_radius")),
					"and", ((HTuple(5000).Append(350)).Append(10)), ((HTuple(99999).Append(9999)).Append(999)));
				ZoomRegion(ho_SelectedRegions16, &ho_SelectedRegions16, hv_ra / hv_rb, 1);
				AffineTransRegion(ho_SelectedRegions16, &ho_RegionAffineTrans2, hv_HomMat2DRotate1,
					"nearest_neighbor");
				ConcatObj(hv_dt.TupleGetDictObject("106"), ho_RegionAffineTrans2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "106");
				ConcatObj(ho_reg, ho_RegionAffineTrans2, &ho_reg);

				//检测刀纹
				SubImage(ho_ImageClosing, ho_ImageClosing3, &ho_ImageSub1, 10, 128);
				Threshold(ho_ImageSub1, &ho_Region, 0, 30);
				Intersection(ho_Region, ho_RegionErosion4, &ho_Region);
				Connection(ho_Region, &ho_ConnectedRegions3);
				OpeningRectangle1(ho_ConnectedRegions3, &ho_RegionOpening, 1, 5);
				Connection(ho_RegionOpening, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions3, ((HTuple("height").Append("inner_radius")).Append("circularity")),
					"and", ((HTuple(40).Append(2)).Append(0)), ((HTuple(99999).Append(10.5)).Append(0.2)));
				SelectShape(ho_SelectedRegions3, &ho_SelectedRegions4, "phi", "and", HTuple(45).TupleRad(),
					HTuple(90).TupleRad());
				SelectShape(ho_SelectedRegions3, &ho_SelectedRegions7, "phi", "and", HTuple(-90).TupleRad(),
					HTuple(-45).TupleRad());
				Union2(ho_SelectedRegions7, ho_SelectedRegions4, &ho_RegionUnion);
				Connection(ho_RegionUnion, &ho_ConnectedRegions5);
				CountObj(ho_ConnectedRegions5, &hv_Number1);
				if (0 != (int(hv_Number1>3)))
				{
					ZoomRegion(ho_ConnectedRegions5, &ho_RegionZoom2, hv_ra / hv_rb, 1);
					AffineTransRegion(ho_RegionZoom2, &ho_RegionAffineTrans2, hv_HomMat2DRotate1,
						"nearest_neighbor");
					ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionAffineTrans2, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
					ConcatObj(ho_reg, ho_RegionAffineTrans2, &ho_reg);
				}

			}
			//*
			AreaCenter(ho_RegionZoom, &hv_Area3, &hv_Row3, &hv_Column3);
			GetImageSize(ho_ImageZoomed, &hv_Width1, &hv_Height1);
			PolarTransImageExt(ho_ImageZoomed, &ho_PolarTransImage, hv_Row3, hv_Column3,
				HTuple(120).TupleRad(), HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1,
				"nearest_neighbor");

			GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing7, 1, 450);
			ScaleImage(ho_ImageClosing7, &ho_ImageScaled4, HTuple(hv_scal1[0]), HTuple(hv_scal1[1]));
			Threshold(ho_ImageScaled4, &ho_Region11, 0, 30);
			FillUp(ho_Region11, &ho_Region11);
			ClosingRectangle1(ho_Region11, &ho_RegionClosing2, 500, 20);
			OpeningRectangle1(ho_RegionClosing2, &ho_RegionClosing2, 400, 1);

			GetImageSize(ho_ImageScaled4, &hv_Width, &hv_Height);
			GenRectangle1(&ho_Rectangle, 400, 0, hv_Height, hv_Width);
			Intersection(ho_RegionClosing2, ho_Rectangle, &ho_RegionClosing2);
			ShapeTrans(ho_RegionClosing2, &ho_RegionClosing2, "convex");
			DilationCircle(ho_RegionClosing2, &ho_RegionDilation7, 13);
			//检测裂纹
			if (0 != hv_a)
			{
				MoveRegion(ho_RegionDilation7, &ho_RegionMoved, -200, 0);
				Difference(ho_RegionMoved, ho_RegionDilation7, &ho_RegionDifference10);
				Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
				SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
					3200, 99999);
				ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
				ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 1500, 1);
				Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
					);

				SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub5, 3, 128);
				Threshold(ho_ImageSub5, &ho_Region1, 0, 30);
				Intersection(ho_RegionDifference10, ho_Region1, &ho_RegionIntersection5);
				Connection(ho_RegionIntersection5, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, (HTuple("height").Append("circularity")),
					"and", (HTuple(15).Append(0)), (HTuple(99999).Append(0.3)));
				SelectShape(ho_SelectedRegions10, &ho_SelectedRegions14, "phi", "and", HTuple(-30).TupleRad(),
					HTuple(30).TupleRad());
				Difference(ho_SelectedRegions10, ho_SelectedRegions14, &ho_RegionDifference3
					);

				MoveRegion(ho_RegionDifference10, &ho_RegionMoved2, -10, 0);
				Difference(ho_RegionDifference10, ho_RegionMoved2, &ho_RegionDifference2);


				Connection(ho_RegionDifference3, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20,
					9999999);
				CountObj(ho_SelectedRegions, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val364 = hv_Number;
					HTuple step_val364 = 1;
					for (hv_Index1 = 1; hv_Index1.Continue(end_val364, step_val364); hv_Index1 += step_val364)
					{
						SelectObj(ho_SelectedRegions, &ho_ObjectSelected, hv_Index1);
						Intersection(ho_ObjectSelected, ho_RegionDifference2, &ho_RegionIntersection2
							);
						AreaCenter(ho_RegionIntersection2, &hv_Area1, &hv_Row1, &hv_Column1);
						if (0 != hv_Area1)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				PolarTransRegionInv(ho_e, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
					HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
					"nearest_neighbor");
				//union2 (XYTransRegion, SelectedRegions17, XYTransRegion)
				ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
				AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
					"nearest_neighbor");
				Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 10,
					999999);
				ConcatObj(hv_dt.TupleGetDictObject("105"), ho_SelectedRegions5, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "105");
				ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);

			}
			//检测脱落
			if (0 != hv_a)
			{

				MoveRegion(ho_RegionDilation7, &ho_RegionMoved6, -70, 0);
				Difference(ho_RegionMoved6, ho_RegionDilation7, &ho_RegionDifference10);
				Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
				SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
					3200, 99999);
				ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
				ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 1850, 1);
				Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
					);
				MoveRegion(ho_RegionDifference10, &ho_RegionMoved2, -10, 0);
				Difference(ho_RegionDifference10, ho_RegionMoved2, &ho_RegionDifference2);

				SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub4, 2, 128);
				Threshold(ho_ImageSub4, &ho_Region12, 0, 40);
				Intersection(ho_Region12, ho_RegionDifference10, &ho_RegionIntersection10
					);
				Connection(ho_RegionIntersection10, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(20).Append(10)), (HTuple(9999999).Append(999)));
				CountObj(ho_SelectedRegions, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val403 = hv_Number;
					HTuple step_val403 = 1;
					for (hv_Index1 = 1; hv_Index1.Continue(end_val403, step_val403); hv_Index1 += step_val403)
					{
						SelectObj(ho_SelectedRegions, &ho_ObjectSelected, hv_Index1);
						Intersection(ho_ObjectSelected, ho_RegionDifference2, &ho_RegionIntersection2
							);
						AreaCenter(ho_RegionIntersection2, &hv_Area1, &hv_Row1, &hv_Column1);
						if (0 != hv_Area1)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				SelectShape(ho_e, &ho_SelectedRegions8, "width", "and", 10, 500);
				Difference(ho_e, ho_SelectedRegions8, &ho_RegionDifference);
				SelectShape(ho_RegionDifference, &ho_SelectedRegions9, "inner_radius", "and",
					15, 99999);
				Union2(ho_SelectedRegions8, ho_SelectedRegions9, &ho_e);

				PolarTransRegionInv(ho_e, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
					HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
					"nearest_neighbor");

				ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
				AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
					"nearest_neighbor");
				Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 20,
					999999);
				//10.15 add-zjy区分裂纹与脱落
				RegionFeatures(ho_SelectedRegions5, "area", &hv_Value);
				RegionFeatures(ho_SelectedRegions5, "rect2_len1", &hv_R1LenVal);
				RegionFeatures(ho_SelectedRegions5, "inner_radius", &hv_Rval);
				if (0 != (int((hv_Value.TupleLength())>0)))
				{
					if (0 != (HTuple(HTuple(int(hv_Value<200)).TupleAnd(int(hv_Rval<3))).TupleAnd(int((hv_R1LenVal.TupleMax())<15))))
					{
						ConcatObj(hv_dt.TupleGetDictObject("105"), ho_SelectedRegions5, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, hv_dt, "105");
					}
					else
					{
						ConcatObj(hv_dt.TupleGetDictObject("102"), ho_SelectedRegions5, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
					}
				}

				ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);

			}
			//*****
			//*****
			ErosionCircle(ho_Ellipse, &ho_RegionErosion, 13);
			TupleSin(hv_phi, &hv_Sin);
			TupleCos(hv_phi, &hv_Cos);

			MoveRegion(ho_Ellipse, &ho_RegionMoved1, (-HTuple(hv_os[0]))*hv_Cos, (-HTuple(hv_os[1]))*hv_Sin);

			Difference(ho_RegionErosion, ho_RegionMoved1, &ho_RegionDifference1);
			ErosionCircle(ho_RegionDifference1, &ho_RegionErosion1, 15);
			Intensity(ho_RegionErosion1, ho_Image, &hv_Mean, &hv_Deviation);
			if (0 != (int(hv_Mean<95)))
			{
				ConcatObj(hv_dt.TupleGetDictObject("103"), ho_RegionErosion1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
				ConcatObj(ho_reg, ho_RegionErosion1, &ho_reg);
			}

			DilationCircle(ho_RegionDifference1, &ho_RegionDilation, 15);
			ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced1);
			//检测大缺陷
			GrayClosingRect(ho_ImageReduced1, &ho_ImageClosing2, 5, 5);
			ScaleImage(ho_ImageClosing2, &ho_ImageScaled1, 1.5, -50);
			Threshold(ho_ImageScaled1, &ho_Region3, 0, 30);
			Intersection(ho_Region3, ho_RegionErosion, &ho_RegionIntersection1);
			Connection(ho_RegionIntersection1, &ho_ConnectedRegions2);
			SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, "area", "and", 300,
				99999);
			SelectGray(ho_SelectedRegions2, ho_Image, &ho_SelectedRegions6, "mean", "and",
				0, 80);
			//8.29 add-zjy 未见光 误判太多 修改过滤
			ErosionCircle(ho_RegionErosion, &ho_RegionErosion9, 7);
			SelectShapeProto(ho_SelectedRegions6, ho_RegionErosion9, &ho_SelectedRegions6,
				"overlaps_rel", 40, 100);

			ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions6, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
			ConcatObj(ho_reg, ho_SelectedRegions6, &ho_reg);

			//检测内部
			if (0 != hv_a)
			{

				GrayClosingRect(ho_ImageReduced1, &ho_ImageClosing1, 30, 30);
				SubImage(ho_ImageReduced1, ho_ImageClosing1, &ho_ImageSub, 5, 128);

				Threshold(ho_ImageSub, &ho_Region2, 0, 30);
				ErosionRectangle1(ho_RegionDifference1, &ho_RegionErosion2, 25, 5);
				ErosionCircle(ho_RegionErosion2, &ho_RegionErosion10, 1.5);
				Intersection(ho_Region2, ho_RegionErosion2, &ho_RegionIntersection);
				Connection(ho_RegionIntersection, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, (HTuple("area").Append("contlength")),
					"and", (HTuple(100).Append(150)), (HTuple(9999999).Append(9999999)));
				//减少边缘刀纹误判
				SelectShapeProto(ho_SelectedRegions1, ho_RegionErosion10, &ho_SelectedRegions1,
					"overlaps_rel", 90, 100);
				ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
				ConcatObj(ho_reg, ho_SelectedRegions1, &ho_reg);

			}
		}
		SetDictObject(ho_reg, hv_dd, "resreg");
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "HotRole error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}


int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84LumenRoleDefects2Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple hv_AlgorithmConfig,
	HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Ellipse, ho_Ellipse1, ho_Reg, ho_EmptyRegion;
	HObject  ho_ROI_0, ho_ImageReduced1, ho_ImageOpening, ho_ImageClosing1;
	HObject  ho_ImageOpening3, ho_ImageScaled1, ho_Region, ho_ConnectedRegions2;
	HObject  ho_SelectedRegions2, ho_ObjectSelected1, ho_RegionTrans6;
	HObject  ho_PolarTransImage, ho_ImageOpening4, ho_ImageClosing2;
	HObject  ho_Region2, ho_ConnectedRegions3, ho_SelectedRegions3;
	HObject  ho_SortedRegions, ho_ObjectSelected2, ho_ImageSub;
	HObject  ho_Region4, ho_RegionMoved5, ho_RegionIntersection;
	HObject  ho_ConnectedRegions8, ho_SelectedRegions7, ho_RegionOpening2;
	HObject  ho_RegionDifference2, ho_ConnectedRegions4, ho_SelectedRegions4;
	HObject  ho_RegionMoved4, ho_RegionMoved41, ho_RegionDifference3;
	HObject  ho_RegionTrans7, ho_ImageReduced3, ho_Region5, ho_ConnectedRegions9;
	HObject  ho_SelectedRegions8, ho_rr, ho_Rectangle, ho_Rectangle1;
	HObject  ho_Rectangle2, ho_Rectangle3, ho_Rectangle4, ho_RegionUnion1;
	HObject  ho_RegionIntersection1, ho_RegionIntersection2;
	HObject  ho_RegionIntersection3, ho_RegionIntersection4;
	HObject  ho_XYTransRegion, ho_ConnectedRegions5, ho_SelectedRegions5;
	HObject  ho_RegionTrans8, ho_RegionUnion2, ho_ImageReduced2;
	HObject  ho_Region3, ho_RegionDifference4, ho_ConnectedRegions7;
	HObject  ho_RegionErosion, ho_SelectedRegions6, ho_ImageReduced;
	HObject  ho_ImageMedian, ho_ImageClosing, ho_ImageScaled;
	HObject  ho_Region1, ho_RegionFillUp, ho_RegionClosing, ho_Rectangle5;
	HObject  ho_RegionOpening, ho_ConnectedRegions1, ho_SelectedRegions43;
	HObject  ho_SelectedRegions, ho_RegionMoved7, ho_RegionDifference7;
	HObject  ho_RegionErosion1, ho_ImageClosing3, ho_RegionDynThresh;
	HObject  ho_ConnectedRegions10, ho_SelectedRegions9, ho_RegionTrans2;
	HObject  ho_RegionMoved, ho_RegionDifference, ho_RegionTrans3;
	HObject  ho_RegionTrans1, ho_Region10, ho_RegionTrans11;
	HObject  ho_Region9, ho_ConnectedRegions19, ho_RegionOpening4;
	HObject  ho_SelectedRegions20, ho_RegionErosion8, ho_ImageReduced9;
	HObject  ho_ImageClosing6, ho_RegionDynThresh4, ho_ConnectedRegions15;
	HObject  ho_RegionErosion6, ho_SelectedRegions17, ho_SelectedRegions18;
	HObject  ho_RegionDilation, ho_ImageReduced6, ho_Region8;
	HObject  ho_ConnectedRegions24, ho_SelectedRegions29, ho_RegionTrans13;
	HObject  ho_RegionErosion9, ho_ImageClosing7, ho_RegionDynThresh7;
	HObject  ho_ConnectedRegions23, ho_SelectedRegions26, ho_SelectedRegions27;
	HObject  ho_SelectedRegions28, ho_ImageReduced16, ho_RegionMoved6;
	HObject  ho_RegionDifference6, ho_RegionErosion10, ho_ImageClosing9;
	HObject  ho_RegionDynThresh9, ho_ConnectedRegions28, ho_SelectedRegions34;
	HObject  ho_SelectedRegions36, ho_SelectedRegions35, ho_ImageEllipse;
	HObject  ho_RegionFillUp1, ho_RegionOpening3, ho_ConnectedRegions17;
	HObject  ho_RegionTrans10, ho_RegionErosion7, ho_ImageReduced4;
	HObject  ho_Region6, ho_ConnectedRegions13, ho_RegionErosion4;
	HObject  ho_SelectedRegions14, ho_RegionMoved11, ho_RegionDifference11;
	HObject  ho_ImageReduced10, ho_Region12, ho_ConnectedRegions18;
	HObject  ho_SelectedRegions19, ho_SelectedRegions21, ho_RegionTrans12;
	HObject  ho_RegionDifference12, ho_ConnectedRegions22, ho_SelectedRegions25;
	HObject  ho_ImageReduced12, ho_RegionMoved10, ho_RegionDifference10;
	HObject  ho_RegionTrans9, ho_RegionDynThresh6, ho_ConnectedRegions21;
	HObject  ho_SelectedRegions24, ho_RegionUnion4, ho_ImageReduced5;
	HObject  ho_ImageOpening1, ho_ImageOpening2, ho_ImageSub2;
	HObject  ho_Region7, ho_RegionClosing1, ho_RegionOpening1;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions10, ho_RegionUnion;
	HObject  ho_RegionTrans5, ho_RegionMoved1, ho_e, ho_ObjectSelected;
	HObject  ho_RegionDifference1, ho_RegionTrans, ho_RegionMoved2;
	HObject  ho_RegionDifference5, ho_RegionTrans4, ho_RegionDilation5;
	HObject  ho_RegionMoved3, ho_RegionDifference15, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions45, ho_ImageReduced11, ho_Region11;
	HObject  ho_ConnectedRegions20, ho_SelectedRegions23, ho_myEll;
	HObject  ho_RegionMoved8, ho_RegionDifference8, ho_ImageReduced7;
	HObject  ho_ImageResult, ho_RegionDynThresh2, ho_ConnectedRegions12;
	HObject  ho_RegionErosion3, ho_SelectedRegions13, ho_ImageClosing4;
	HObject  ho_RegionDynThresh1, ho_ConnectedRegions11, ho_SelectedRegions11;
	HObject  ho_SelectedRegions12, ho_RegionDifference13, ho_SelectedRegions37;
	HObject  ho_SelectedRegions38, ho_RegionClosing3, ho_ConnectedRegions29;
	HObject  ho_SelectedRegions39, ho_Region16, ho_RegionOpening6;
	HObject  ho_RegionDifference14, ho_ConnectedRegions32, ho_SelectedRegions44;
	HObject  ho_ConnectedRegions, ho_SelectedRegions1, ho_RegionMoved9;
	HObject  ho_RegionDifference9, ho_ImageReduced8, ho_ImageClosing5;
	HObject  ho_ImageMax, ho_RegionDynThresh3, ho_ConnectedRegions14;
	HObject  ho_SelectedRegions15, ho_RegionErosion5, ho_SelectedRegions16;
	HObject  ho_ImageResult1, ho_RegionDynThresh5, ho_ImageReduced13;
	HObject  ho_Region13, ho_RegionClosing2, ho_ConnectedRegions16;
	HObject  ho_SelectedRegions22, ho_RegionOpening5, ho_ConnectedRegions25;
	HObject  ho_SelectedRegions30, ho_RectangleC1, ho_RectangleC2;
	HObject  ho_RegionUnionC, ho_ImageReduced14, ho_Region14;
	HObject  ho_ConnectedRegions26, ho_SelectedRegions31, ho_EllipseSector;
	HObject  ho_RegionErosion2, ho_ImageReduced15, ho_ImageClosing8;
	HObject  ho_RegionDynThresh8, ho_ConnectedRegions27, ho_SelectedRegions32;
	HObject  ho_SelectedRegions33, ho_ObjectsConcat, ho_ImageReduced17;
	HObject  ho_Region15, ho_ConnectedRegions30, ho_SelectedRegions40;
	HObject  ho_Ellipse2, ho_RegionErosion11, ho_ImageReduced18;
	HObject  ho_ImageClosing10, ho_RegionDynThresh10, ho_ConnectedRegions31;
	HObject  ho_SelectedRegions41, ho_SelectedRegions42, ho_SelectedRegions114;
	HObject  ho_ConnectedRegions167, ho_RegionUnion67, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_ac, hv_S, hv_C, hv_I, hv_GenParamValue;
	HTuple  hv_GenParamValue1, hv_GenParamValue2, hv_GenParamValue3;
	HTuple  hv_GenParamValue4, hv_Index, hv_f, hv_Number3, hv_Index3;
	HTuple  hv_sta, hv_end, hv_Area3, hv_Row2, hv_Column2, hv_Width1;
	HTuple  hv_Height1, hv_Number5, hv_Row11, hv_Column11, hv_Row21;
	HTuple  hv_Column21, hv_Number7, hv_Number2, hv_Value, hv_Area;
	HTuple  hv_Row, hv_Column, hv_Ra, hv_Rb, hv_Phi, hv_el;
	HTuple  hv_dd, hv_Row1, hv_valR, hv_Number10, hv_Number11;
	HTuple  hv_r1, hv_Mean, hv_Deviation, hv_Mean1, hv_Deviation1;
	HTuple  hv_Number, hv_Index2, hv_Area2, hv_Row4, hv_Column4;
	HTuple  hv_Number1, hv_Height, hv_Width, hv_Ratio, hv_Area1;
	HTuple  hv_Column1, hv_Number4, hv_Index1, hv_Value1, hv_Mval;
	HTuple  hv_Min, hv_Max, hv_Range, hv_RVal, hv_Area5, hv_Row7;
	HTuple  hv_Column7, hv_aVal, hv_NumberReg, hv_Area4, hv_Row3;
	HTuple  hv_Column3, hv_Wval, hv_RowD1, hv_ColumnD1, hv_RowD2;
	HTuple  hv_ColumnD2, hv_NumberC, hv_Row6, hv_Column6, hv_Radius;
	HTuple  hv_Width2, hv_Height2, hv_NumReg, hv_Index5, hv_NumberTmp;
	HTuple  hv_Row5, hv_Column5, hv_Radius1, hv_Index10, hv_Number6;
	HTuple  hv_Number8, hv_Number39, hv_Exception, hv___Tmp_Ctrl_Dict_Init_0;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1, hv___Tmp_Ctrl_Dict_Init_2;
	HTuple  hv___Tmp_Ctrl_Dict_Init_3, hv___Tmp_Ctrl_Dict_Init_4;
	HTuple  hv___Tmp_Ctrl_Dict_Init_5, hv___Tmp_Ctrl_Dict_Init_6;
	HTuple  hv___Tmp_Ctrl_Dict_Init_7, hv___Tmp_Ctrl_0;

	try
	{
		//[101] := 间隙
		//[102] := 脱落
		//[103] := 未见光
		//[104] := 刀纹
		//[105] := 裂纹
		//[106] := 漏热钻
		//[107] := H2脱落
		//字典参数操作
		//读：1
		//写：-1
		//无操作：0
		hv_ac = 1;

		hv_S = hv_StaNum + "";
		hv_C = hv_CamNum + "";
		hv_I = hv_ImageNum + "";
		if (0 != (int(hv_ac == -1)))
		{
			GetDictParam(hv_AlgorithmConfig, "keys", HTuple(), &hv_GenParamValue);
			if (0 != (int((hv_GenParamValue.TupleFind("Station"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
				SetDictTuple(hv_AlgorithmConfig, "Station", hv___Tmp_Ctrl_Dict_Init_0);
				hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			}
			GetDictParam(hv_AlgorithmConfig.TupleGetDictTuple("Station"), "keys", HTuple(),
				&hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind(hv_S))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
				SetDictTuple(hv_AlgorithmConfig.TupleGetDictTuple("Station"), hv_S, hv___Tmp_Ctrl_Dict_Init_1);
				hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
				SetDictTuple((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S),
					"Camera", hv___Tmp_Ctrl_Dict_Init_2);
				hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
			}
			GetDictParam(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
				"keys", HTuple(), &hv_GenParamValue2);
			if (0 != (int((hv_GenParamValue2.TupleFind(hv_C))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
				SetDictTuple(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
					hv_C, hv___Tmp_Ctrl_Dict_Init_3);
				hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
				SetDictTuple((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C),
					"Image", hv___Tmp_Ctrl_Dict_Init_4);
				hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
			}
			GetDictParam(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
				"keys", HTuple(), &hv_GenParamValue3);
			if (0 != (int((hv_GenParamValue3.TupleFind(hv_I))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
				SetDictTuple(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
					hv_I, hv___Tmp_Ctrl_Dict_Init_5);
				hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);
			}
			GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
				"keys", HTuple(), &hv_GenParamValue4);
			if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
				SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"Ellipse", hv___Tmp_Ctrl_Dict_Init_6);
				hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
			}
			if (0 != (int((hv_GenParamValue4.TupleFind("HotRole"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_7);
				SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"HotRole", hv___Tmp_Ctrl_Dict_Init_7);
				hv___Tmp_Ctrl_Dict_Init_7 = HTuple(HNULL);
			}

		}

		GenEmptyObj(&ho_Ellipse);
		GenEmptyObj(&ho_Ellipse1);
		GenEmptyObj(&ho_Reg);
		CreateDict(&(*hv_dt));

		GenEmptyRegion(&ho_EmptyRegion);
		for (hv_Index = 101; hv_Index <= 107; hv_Index += 1)
		{
			hv_f = hv_Index + "";
			SetDictObject(ho_EmptyRegion, (*hv_dt), hv_f);
		}
		if (0 != (HTuple(int(hv_StaNum == 2)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 1)))
			{
				GenEmptyObj(&ho___Tmp_Obj_0);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");

				GenRectangle1(&ho_ROI_0, 838.699, 472.52, 2179.15, 3765.8);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				GrayOpeningRect(ho_ImageReduced1, &ho_ImageOpening, 30, 30);
				GrayClosingRect(ho_ImageOpening, &ho_ImageClosing1, 1, 1);
				GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening3, 80, 80);
				ScaleImage(ho_ImageOpening3, &ho_ImageScaled1, 1.8, -30);
				Threshold(ho_ImageScaled1, &ho_Region, 200, 255);
				//threshold (ImageOpening3, Region, 210, 255)
				Connection(ho_Region, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.7)), (HTuple(9999999).Append(1)));
				CountObj(ho_SelectedRegions2, &hv_Number3);
				if (0 != (int(hv_Number3 != 2)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
				else
				{
					SortRegion(ho_SelectedRegions2, &ho_SelectedRegions2, "first_point", "true",
						"column");
					{
						HTuple end_val93 = hv_Number3;
						HTuple step_val93 = 1;
						for (hv_Index3 = 1; hv_Index3.Continue(end_val93, step_val93); hv_Index3 += step_val93)
						{
							if (0 != (int(hv_Index3 == 1)))
							{
								hv_sta = 0;
								hv_end = 360;
							}
							else
							{
								hv_sta = 0;
								hv_end = 360;
							}
							SelectObj(ho_SelectedRegions2, &ho_ObjectSelected1, hv_Index3);
							ShapeTrans(ho_ObjectSelected1, &ho_RegionTrans6, "convex");

							AreaCenter(ho_RegionTrans6, &hv_Area3, &hv_Row2, &hv_Column2);
							GetImageSize(ho_Image, &hv_Width1, &hv_Height1);

							PolarTransImageExt(ho_ImageReduced1, &ho_PolarTransImage, hv_Row2, hv_Column2,
								hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
								"nearest_neighbor");
							GrayOpeningRect(ho_PolarTransImage, &ho_ImageOpening4, 50, 100);
							GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing2, 1, 100);
							Threshold(ho_ImageOpening4, &ho_Region2, 180, 255);
							Connection(ho_Region2, &ho_ConnectedRegions3);
							SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions3, "width", "and",
								4000, 99999);
							CountObj(ho_SelectedRegions3, &hv_Number5);
							if (0 != hv_Number5)
							{
								SortRegion(ho_SelectedRegions3, &ho_SortedRegions, "first_point", "true",
									"row");
								SelectObj(ho_SortedRegions, &ho_ObjectSelected2, 1);
								//检测凸起
								SubImage(ho_ImageOpening4, ho_ImageClosing2, &ho_ImageSub, 2.5, 128);
								Threshold(ho_ImageSub, &ho_Region4, 0, 30);
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved5, -3, 0);
								Intersection(ho_RegionMoved5, ho_Region4, &ho_RegionIntersection);
								Connection(ho_RegionIntersection, &ho_ConnectedRegions8);
								SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions7, "area", "and",
									300, 99999);
								//检测缺口
								OpeningRectangle1(ho_SortedRegions, &ho_RegionOpening2, 500, 10);
								Difference(ho_SortedRegions, ho_RegionOpening2, &ho_RegionDifference2
									);
								Connection(ho_RegionDifference2, &ho_ConnectedRegions4);
								SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions4, (HTuple("area").Append("height")),
									"and", (HTuple(3000).Append(25)), (HTuple(99999).Append(9999)));
								//检测间隙
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved4, 20, 0);
								MoveRegion(ho_RegionMoved4, &ho_RegionMoved41, 100, 0);
								Difference(ho_RegionMoved41, ho_RegionMoved4, &ho_RegionDifference3
									);

								ShapeTrans(ho_RegionDifference3, &ho_RegionTrans7, "rectangle1");

								ReduceDomain(ho_PolarTransImage, ho_RegionTrans7, &ho_ImageReduced3
									);
								Threshold(ho_ImageReduced3, &ho_Region5, 0, 50);
								Intersection(ho_Region5, ho_RegionDifference3, &ho_Region5);
								Connection(ho_Region5, &ho_ConnectedRegions9);
								SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and",
									50, 9999999999);
								Union1(ho_SelectedRegions8, &ho_SelectedRegions8);
								GenEmptyObj(&ho_rr);
								SmallestRectangle1(ho_RegionDifference3, &hv_Row11, &hv_Column11, &hv_Row21,
									&hv_Column21);
								//30
								GenRectangle1(&ho_Rectangle, hv_Row11, hv_Column11, hv_Row21, hv_Column21*((HTuple(30).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle1, hv_Row11, hv_Column21*((HTuple(30).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(150).TupleReal()) / 360));
								//60
								GenRectangle1(&ho_Rectangle2, hv_Row11, hv_Column21*((HTuple(150).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(210).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle3, hv_Row11, hv_Column21*((HTuple(210).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(330).TupleReal()) / 360));
								//30
								GenRectangle1(&ho_Rectangle4, hv_Row11, hv_Column21*((HTuple(330).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(360).TupleReal()) / 360));

								Union2(ho_Rectangle, ho_Rectangle4, &ho_RegionUnion1);
								//
								Intersection(ho_RegionUnion1, ho_SelectedRegions8, &ho_RegionIntersection1
									);
								//
								Intersection(ho_Rectangle1, ho_SelectedRegions8, &ho_RegionIntersection2
									);
								//
								Intersection(ho_Rectangle2, ho_SelectedRegions8, &ho_RegionIntersection3
									);
								//
								Intersection(ho_Rectangle3, ho_SelectedRegions8, &ho_RegionIntersection4
									);
								//
								//
								ConcatObj(ho_rr, ho_RegionIntersection1, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection2, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection3, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection4, &ho_rr);
								//**
								Union2(ho_SelectedRegions4, ho_SelectedRegions7, &ho_SelectedRegions4
									);
								PolarTransRegionInv(ho_SelectedRegions4, &ho_XYTransRegion, hv_Row2,
									hv_Column2, hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1,
									hv_Height1, hv_Width1, hv_Height1, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions5);
								SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
									150, 99999);
								//concat_obj (dt.['101'], SelectedRegions5, dt.['101'])

								PolarTransRegionInv(ho_rr, &ho_XYTransRegion, hv_Row2, hv_Column2,
									hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
									hv_Width1, hv_Height1, "nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_XYTransRegion, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
							}
						}
					}
				}
				CountObj((*hv_dt).TupleGetDictObject("101"), &hv_Number7);
				if (0 != (int(hv_Number7 == 0)))
				{
					GenEmptyRegion(&ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				GenEmptyObj(&ho___Tmp_Obj_0);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");

				GenRectangle1(&ho_ROI_0, 838.699, 472.52, 2179.15, 3765.8);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				GrayOpeningRect(ho_ImageReduced1, &ho_ImageOpening, 30, 30);
				GrayClosingRect(ho_ImageOpening, &ho_ImageClosing1, 1, 1);
				GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening3, 80, 80);
				ScaleImage(ho_ImageOpening3, &ho_ImageScaled1, 1.8, -50);
				Threshold(ho_ImageScaled1, &ho_Region, 200, 255);
				Connection(ho_Region, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.7)), (HTuple(9999999).Append(1)));
				CountObj(ho_SelectedRegions2, &hv_Number3);
				if (0 != (int(hv_Number3 != 2)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
				else
				{
					SortRegion(ho_SelectedRegions2, &ho_SelectedRegions2, "first_point", "true",
						"column");
					{
						HTuple end_val208 = hv_Number3;
						HTuple step_val208 = 1;
						for (hv_Index3 = 1; hv_Index3.Continue(end_val208, step_val208); hv_Index3 += step_val208)
						{
							if (0 != (int(hv_Index3 == 1)))
							{
								hv_sta = 0;
								hv_end = 360;
							}
							else
							{
								hv_sta = 0;
								hv_end = 360;
							}
							SelectObj(ho_SelectedRegions2, &ho_ObjectSelected1, hv_Index3);
							ShapeTrans(ho_ObjectSelected1, &ho_RegionTrans6, "convex");

							AreaCenter(ho_RegionTrans6, &hv_Area3, &hv_Row2, &hv_Column2);
							GetImageSize(ho_Image, &hv_Width1, &hv_Height1);

							PolarTransImageExt(ho_ImageReduced1, &ho_PolarTransImage, hv_Row2, hv_Column2,
								hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
								"nearest_neighbor");
							GrayOpeningRect(ho_PolarTransImage, &ho_ImageOpening4, 50, 100);
							GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing2, 1, 100);
							Threshold(ho_ImageOpening4, &ho_Region2, 180, 255);
							Connection(ho_Region2, &ho_ConnectedRegions3);
							SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions3, "width", "and",
								4000, 99999);
							CountObj(ho_SelectedRegions3, &hv_Number5);
							if (0 != hv_Number5)
							{

								SortRegion(ho_SelectedRegions3, &ho_SortedRegions, "first_point", "true",
									"row");
								SelectObj(ho_SortedRegions, &ho_ObjectSelected2, 1);
								//检测凸起
								SubImage(ho_ImageOpening4, ho_ImageClosing2, &ho_ImageSub, 2.5, 128);
								Threshold(ho_ImageSub, &ho_Region4, 0, 30);
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved5, -3, 0);
								Intersection(ho_RegionMoved5, ho_Region4, &ho_RegionIntersection);
								Connection(ho_RegionIntersection, &ho_ConnectedRegions8);
								SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions7, "area", "and",
									300, 99999);
								//检测缺口
								OpeningRectangle1(ho_SortedRegions, &ho_RegionOpening2, 500, 10);
								Difference(ho_SortedRegions, ho_RegionOpening2, &ho_RegionDifference2
									);
								Connection(ho_RegionDifference2, &ho_ConnectedRegions4);
								SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions4, (HTuple("area").Append("height")),
									"and", (HTuple(3000).Append(25)), (HTuple(99999).Append(9999)));
								//检测间隙
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved4, 20, 0);
								MoveRegion(ho_RegionMoved4, &ho_RegionMoved41, 100, 0);
								Difference(ho_RegionMoved41, ho_RegionMoved4, &ho_RegionDifference3
									);

								ShapeTrans(ho_RegionDifference3, &ho_RegionTrans7, "rectangle1");

								ReduceDomain(ho_PolarTransImage, ho_RegionTrans7, &ho_ImageReduced3
									);

								Threshold(ho_ImageReduced3, &ho_Region5, 0, 50);
								Intersection(ho_Region5, ho_RegionDifference3, &ho_Region5);
								Connection(ho_Region5, &ho_ConnectedRegions9);
								SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and",
									50, 9999999999);
								Union1(ho_SelectedRegions8, &ho_SelectedRegions8);
								GenEmptyObj(&ho_rr);
								SmallestRectangle1(ho_RegionDifference3, &hv_Row11, &hv_Column11, &hv_Row21,
									&hv_Column21);
								//30
								GenRectangle1(&ho_Rectangle, hv_Row11, hv_Column11, hv_Row21, hv_Column21*((HTuple(30).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle1, hv_Row11, hv_Column21*((HTuple(30).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(150).TupleReal()) / 360));
								//60
								GenRectangle1(&ho_Rectangle2, hv_Row11, hv_Column21*((HTuple(150).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(210).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle3, hv_Row11, hv_Column21*((HTuple(210).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(330).TupleReal()) / 360));
								//30
								GenRectangle1(&ho_Rectangle4, hv_Row11, hv_Column21*((HTuple(330).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(360).TupleReal()) / 360));

								Union2(ho_Rectangle, ho_Rectangle4, &ho_RegionUnion1);
								//
								Intersection(ho_RegionUnion1, ho_SelectedRegions8, &ho_RegionIntersection1
									);
								//
								Intersection(ho_Rectangle1, ho_SelectedRegions8, &ho_RegionIntersection2
									);
								//
								Intersection(ho_Rectangle2, ho_SelectedRegions8, &ho_RegionIntersection3
									);
								//
								Intersection(ho_Rectangle3, ho_SelectedRegions8, &ho_RegionIntersection4
									);
								//
								//
								ConcatObj(ho_rr, ho_RegionIntersection1, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection2, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection3, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection4, &ho_rr);
								//**
								Union2(ho_SelectedRegions4, ho_SelectedRegions7, &ho_SelectedRegions4
									);

								PolarTransRegionInv(ho_SelectedRegions4, &ho_XYTransRegion, hv_Row2,
									hv_Column2, hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1,
									hv_Height1, hv_Width1, hv_Height1, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions5);
								SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
									150, 99999);
								//concat_obj (dt.['101'], SelectedRegions5, dt.['101'])
								PolarTransRegionInv(ho_rr, &ho_XYTransRegion, hv_Row2, hv_Column2,
									hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
									hv_Width1, hv_Height1, "nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_XYTransRegion, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
							}
						}
					}
				}
				CountObj((*hv_dt).TupleGetDictObject("101"), &hv_Number7);
				if (0 != (int(hv_Number7 == 0)))
				{
					GenEmptyRegion(&ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				GenEmptyObj(&ho___Tmp_Obj_0);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");

				GenRectangle1(&ho_ROI_0, 838.699, 472.52, 2179.15, 3765.8);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				GrayOpeningRect(ho_ImageReduced1, &ho_ImageOpening, 30, 30);
				GrayClosingRect(ho_ImageOpening, &ho_ImageClosing1, 1, 1);
				GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening3, 80, 80);
				ScaleImage(ho_ImageOpening3, &ho_ImageScaled1, 1.8, -30);
				Threshold(ho_ImageScaled1, &ho_Region, 200, 255);
				Connection(ho_Region, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.7)), (HTuple(9999999).Append(1)));
				CountObj(ho_SelectedRegions2, &hv_Number3);
				if (0 != (int(hv_Number3 != 2)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
				else
				{
					//8.22 add-zjy 脱落
					ShapeTrans(ho_SelectedRegions2, &ho_RegionTrans8, "ellipse");
					Union1(ho_RegionTrans8, &ho_RegionUnion2);
					ReduceDomain(ho_ImageReduced1, ho_RegionUnion2, &ho_ImageReduced2);
					Threshold(ho_ImageReduced2, &ho_Region3, 200, 255);
					Difference(ho_RegionUnion2, ho_Region3, &ho_RegionDifference4);
					Connection(ho_RegionDifference4, &ho_ConnectedRegions7);
					ErosionCircle(ho_RegionUnion2, &ho_RegionErosion, 9);
					SelectShapeProto(ho_ConnectedRegions7, ho_RegionErosion, &ho_SelectedRegions6,
						"overlaps_rel", 10, 100);
					SelectShape(ho_SelectedRegions6, &ho_SelectedRegions6, "area", "and", 150,
						9999999);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions6, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					SortRegion(ho_SelectedRegions2, &ho_SelectedRegions2, "first_point", "true",
						"column");
					{
						HTuple end_val338 = hv_Number3;
						HTuple step_val338 = 1;
						for (hv_Index3 = 1; hv_Index3.Continue(end_val338, step_val338); hv_Index3 += step_val338)
						{
							if (0 != (int(hv_Index3 == 1)))
							{
								hv_sta = 0;
								hv_end = 360;
							}
							else
							{
								hv_sta = 0;
								hv_end = 360;
							}
							SelectObj(ho_SelectedRegions2, &ho_ObjectSelected1, hv_Index3);
							ShapeTrans(ho_ObjectSelected1, &ho_RegionTrans6, "convex");

							AreaCenter(ho_RegionTrans6, &hv_Area3, &hv_Row2, &hv_Column2);
							GetImageSize(ho_Image, &hv_Width1, &hv_Height1);

							PolarTransImageExt(ho_ImageReduced1, &ho_PolarTransImage, hv_Row2, hv_Column2,
								hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
								"nearest_neighbor");
							GrayOpeningRect(ho_PolarTransImage, &ho_ImageOpening4, 50, 100);
							GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing2, 1, 100);
							Threshold(ho_ImageOpening4, &ho_Region2, 180, 255);
							Connection(ho_Region2, &ho_ConnectedRegions3);
							SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions3, "width", "and",
								4000, 99999);
							CountObj(ho_SelectedRegions3, &hv_Number5);
							if (0 != hv_Number5)
							{
								SortRegion(ho_SelectedRegions3, &ho_SortedRegions, "first_point", "true",
									"row");
								SelectObj(ho_SortedRegions, &ho_ObjectSelected2, 1);
								//检测凸起
								SubImage(ho_ImageOpening4, ho_ImageClosing2, &ho_ImageSub, 2.5, 128);
								Threshold(ho_ImageSub, &ho_Region4, 0, 30);
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved5, -3, 0);
								Intersection(ho_RegionMoved5, ho_Region4, &ho_RegionIntersection);
								Connection(ho_RegionIntersection, &ho_ConnectedRegions8);
								SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions7, "area", "and",
									300, 99999);
								//检测缺口
								OpeningRectangle1(ho_SortedRegions, &ho_RegionOpening2, 500, 10);
								Difference(ho_SortedRegions, ho_RegionOpening2, &ho_RegionDifference2
									);
								Connection(ho_RegionDifference2, &ho_ConnectedRegions4);
								SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions4, (HTuple("area").Append("height")),
									"and", (HTuple(3000).Append(25)), (HTuple(99999).Append(9999)));
								//检测间隙
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved4, 20, 0);
								MoveRegion(ho_RegionMoved4, &ho_RegionMoved41, 100, 0);
								Difference(ho_RegionMoved41, ho_RegionMoved4, &ho_RegionDifference3
									);

								ShapeTrans(ho_RegionDifference3, &ho_RegionTrans7, "rectangle1");

								ReduceDomain(ho_PolarTransImage, ho_RegionTrans7, &ho_ImageReduced3
									);

								Threshold(ho_ImageReduced3, &ho_Region5, 0, 50);
								Intersection(ho_Region5, ho_RegionDifference3, &ho_Region5);
								Connection(ho_Region5, &ho_ConnectedRegions9);
								SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and",
									50, 9999999999);
								Union1(ho_SelectedRegions8, &ho_SelectedRegions8);
								GenEmptyObj(&ho_rr);
								SmallestRectangle1(ho_RegionDifference3, &hv_Row11, &hv_Column11, &hv_Row21,
									&hv_Column21);
								//30
								GenRectangle1(&ho_Rectangle, hv_Row11, hv_Column11, hv_Row21, hv_Column21*((HTuple(30).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle1, hv_Row11, hv_Column21*((HTuple(30).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(150).TupleReal()) / 360));
								//60
								GenRectangle1(&ho_Rectangle2, hv_Row11, hv_Column21*((HTuple(150).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(210).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle3, hv_Row11, hv_Column21*((HTuple(210).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(330).TupleReal()) / 360));
								//30
								GenRectangle1(&ho_Rectangle4, hv_Row11, hv_Column21*((HTuple(330).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(360).TupleReal()) / 360));

								Union2(ho_Rectangle, ho_Rectangle4, &ho_RegionUnion1);
								//
								Intersection(ho_RegionUnion1, ho_SelectedRegions8, &ho_RegionIntersection1
									);
								//
								Intersection(ho_Rectangle1, ho_SelectedRegions8, &ho_RegionIntersection2
									);
								//
								Intersection(ho_Rectangle2, ho_SelectedRegions8, &ho_RegionIntersection3
									);
								//
								Intersection(ho_Rectangle3, ho_SelectedRegions8, &ho_RegionIntersection4
									);
								//
								//
								ConcatObj(ho_rr, ho_RegionIntersection1, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection2, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection3, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection4, &ho_rr);
								//**
								Union2(ho_SelectedRegions4, ho_SelectedRegions7, &ho_SelectedRegions4
									);

								PolarTransRegionInv(ho_SelectedRegions4, &ho_XYTransRegion, hv_Row2,
									hv_Column2, hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1,
									hv_Height1, hv_Width1, hv_Height1, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions5);
								SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
									150, 99999);
								//concat_obj (dt.['101'], SelectedRegions5, dt.['101'])

								PolarTransRegionInv(ho_rr, &ho_XYTransRegion, hv_Row2, hv_Column2,
									hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
									hv_Width1, hv_Height1, "nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_XYTransRegion, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
							}
						}
					}
				}
				CountObj((*hv_dt).TupleGetDictObject("101"), &hv_Number7);
				if (0 != (int(hv_Number7 == 0)))
				{
					GenEmptyRegion(&ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				GenRectangle1(&ho_ROI_0, 800, 1500, 1984, 2714.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(50).TupleRad(), 90, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShapeStd(ho_ConnectedRegions1, &ho_SelectedRegions43, "max_area", 70);
				ShapeTrans(ho_SelectedRegions43, &ho_SelectedRegions, "ellipse");

				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					//9.03 add-zjy 刀纹检测
					ReduceDomain(ho_ImageMedian, ho_SelectedRegions, &ho_ImageReduced);
					MoveRegion(ho_SelectedRegions, &ho_RegionMoved7, -115, -175);
					Difference(ho_SelectedRegions, ho_RegionMoved7, &ho_RegionDifference7);
					ErosionCircle(ho_RegionDifference7, &ho_RegionErosion1, 5);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing3, 55, 55);
					DynThreshold(ho_ImageClosing, ho_ImageClosing3, &ho_RegionDynThresh, 12,
						"dark");
					ClosingCircle(ho_RegionDynThresh, &ho_RegionDynThresh, 3.5);
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions10);
					RegionFeatures(ho_RegionErosion1, "row1", &hv_Value);
					SelectShape(ho_ConnectedRegions10, &ho_ConnectedRegions10, ((HTuple("area").Append("row")).Append("height")),
						"and", (HTuple(250).TupleConcat(hv_Value + 200)).TupleConcat(90), ((HTuple(999999).Append(4096)).Append(999)));
					SelectGray(ho_ConnectedRegions10, ho_Image, &ho_ConnectedRegions10, "mean",
						"and", 0, 150);
					SelectShapeProto(ho_ConnectedRegions10, ho_RegionErosion1, &ho_SelectedRegions9,
						"overlaps_rel", 97, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions9, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");

					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//9.24 add 脱落(小)-102
					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageReduced);
					Threshold(ho_ImageReduced, &ho_Region10, 70, 255);
					ShapeTrans(ho_Region10, &ho_RegionTrans11, "convex");
					Threshold(ho_ImageReduced, &ho_Region9, 0, 20);
					Connection(ho_Region9, &ho_ConnectedRegions19);
					OpeningCircle(ho_ConnectedRegions19, &ho_RegionOpening4, 3);
					Connection(ho_RegionOpening4, &ho_RegionOpening4);
					SelectShape(ho_RegionOpening4, &ho_RegionOpening4, ((HTuple("area").Append("height")).Append("rect2_len1")),
						"and", ((HTuple(50).Append(3)).Append(0)), ((HTuple(9999).Append(150)).Append(40)));
					SelectShapeProto(ho_RegionOpening4, ho_RegionTrans11, &ho_SelectedRegions20,
						"overlaps_rel", 40, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions20, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.97);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 230.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", 182.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}

					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);
					SetDictTuple(hv_dd, "os", (HTuple(230).Append(200)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}

				//10.17 add-zjy  边缘容易误判为102脱落  再此筛选屏蔽
				SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
					"and", 3.1, 99);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
				ErosionCircle(ho_RegionTrans1, &ho_RegionErosion8, 3.5);
				SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion8, &ho___Tmp_Obj_0,
					"overlaps_rel", 40, 100);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				GenRectangle1(&ho_ROI_0, 800, 1500, 1990, 2620);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);


				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					//9.16 add-zjy  BD脱落
					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageReduced9);
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing6, 25, 25);
					DynThreshold(ho_ImageReduced9, ho_ImageClosing6, &ho_RegionDynThresh4,
						55, "dark");
					Connection(ho_RegionDynThresh4, &ho_ConnectedRegions15);
					ErosionCircle(ho_RegionTrans1, &ho_RegionErosion6, 5);
					SelectShapeProto(ho_ConnectedRegions15, ho_RegionErosion6, &ho_SelectedRegions17,
						"overlaps_rel", 98, 100);
					SelectShape(ho_SelectedRegions17, &ho_SelectedRegions18, "area", "and",
						500, 99999);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions18, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.96);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 232.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", 180.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(230).Append(200)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				GenRectangle1(&ho_ROI_0, 800, 1416.64, 1984, 2614.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -90);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				SelectShapeStd(ho_SelectedRegions, &ho_SelectedRegions, "max_area", 70);
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//11.3 add-zjy BD裂纹
					DilationCircle(ho_RegionTrans1, &ho_RegionDilation, 15);
					RegionFeatures(ho_RegionDilation, "row1", &hv_Row1);
					ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
					Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
					Connection(ho_Region8, &ho_ConnectedRegions24);
					SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
					ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 3.5);
					GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
					DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
						11, "dark");
					Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
					hv_valR = hv_Row1.TupleMean();
					//边缘处裂纹
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
						"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 50, 99);
					SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
						"mean", "and", 50, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
					//内部裂纹
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("rect2_len1")),
						"and", ((HTuple(2).Append(50)).Append(50)), ((HTuple(999).Append(999)).Append(999)));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 100, 100);
					SelectGray(ho_SelectedRegions27, ho_Image, &ho_SelectedRegions29, (HTuple("mean").Append("min")),
						"and", (HTuple(0).Append(0)), (HTuple(120).Append(90)));
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions29, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.95);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 230.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", 182.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));


					//字典
					CreateDict(&hv_dd);
					SetDictTuple(hv_dd, "os", (HTuple(190).Append(200)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-90)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				GenRectangle1(&ho_ROI_0, 1031.4, 1491.25, 2049.38, 2700.93);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(50).TupleRad(), 80, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					//10.12 add 刀纹 104
					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageReduced16);
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved6, -110, -160);
					Difference(ho_RegionTrans1, ho_RegionMoved6, &ho_RegionDifference6);
					ErosionCircle(ho_RegionDifference6, &ho_RegionErosion10, 3.5);
					GrayClosingRect(ho_ImageReduced16, &ho_ImageClosing9, 15, 15);
					DynThreshold(ho_ImageReduced16, ho_ImageClosing9, &ho_RegionDynThresh9,
						20, "dark");
					Connection(ho_RegionDynThresh9, &ho_ConnectedRegions28);
					SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions34, ((HTuple("area").Append("height")).Append("inner_radius")),
						"and", ((HTuple(150).Append(60)).Append(0)), ((HTuple(99999).Append(999)).Append(10)));
					SelectGray(ho_SelectedRegions34, ho_ImageReduced16, &ho_SelectedRegions36,
						"mean", "and", 0, 180);
					SelectShapeProto(ho_SelectedRegions36, ho_RegionErosion10, &ho_SelectedRegions35,
						"overlaps_rel", 100, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions35, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.97);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 234.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", 178.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-90)));
					SetDictTuple(hv_dd, "os", (HTuple(190).Append(180)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				GenRectangle1(&ho_ROI_0, 1010, 1616, 1984, 2700);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//10.10 add-zjy 边缘裂纹 105
					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageEllipse);
					ErosionCircle(ho_RegionTrans1, &ho_RegionErosion9, 3.5);
					GrayClosingRect(ho_ImageEllipse, &ho_ImageClosing7, 3, 15);
					DynThreshold(ho_ImageEllipse, ho_ImageClosing7, &ho_RegionDynThresh7, 11,
						"dark");
					Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("rect2_phi")),
						"and", ((HTuple(2).Append(50)).Append(-2)), ((HTuple(999).Append(299)).Append(0)));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 50, 99);
					SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
						"mean", "and", 50, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");


					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.96);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 233.5);
					SetDictTuple(hv_el, "r", -19.5);
					SetDictTuple(hv_el, "c", 182.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(190).Append(200)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
				//10.7 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
				//椭圆位置
				Threshold(ho_ImageReduced, &ho_Region8, 60, 255);
				FillUp(ho_Region8, &ho_RegionFillUp1);
				OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				CountObj(ho_ConnectedRegions17, &hv_Number10);
				if (0 != (int(hv_Number10 == 0)))
				{
					Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				}
				ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
				ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
				CountObj(ho_RegionTrans10, &hv_Number10);
				if (0 != hv_Number10)
				{
					//选择与椭圆有交集的区域
					SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
						"and", 2.1, 999);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
						&ho___Tmp_Obj_0, "overlaps_rel", 60, 100);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
				}
			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				GenRectangle1(&ho_ROI_0, 1010.85, 1616.64, 2084, 2614.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//9.15 add-zjy 面积大脱落
					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageReduced4);
					Threshold(ho_ImageReduced4, &ho_Region6, 0, 90);
					Connection(ho_Region6, &ho_ConnectedRegions13);
					ErosionCircle(ho_RegionTrans1, &ho_RegionErosion4, 9);
					SelectShapeProto(ho_ConnectedRegions13, ho_RegionErosion4, &ho_SelectedRegions14,
						"overlaps_abs", 15000, 999999);
					SelectShape(ho_SelectedRegions14, &ho_SelectedRegions14, "height", "and",
						250, 9999);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions14, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					//12.12 add-zjy BD裂纹
					DilationCircle(ho_RegionTrans1, &ho_RegionDilation, 15);
					RegionFeatures(ho_RegionDilation, "row1", &hv_Row1);
					ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
					Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
					Connection(ho_Region8, &ho_ConnectedRegions24);
					SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
					ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 5);
					GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
					DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
						11, "dark");
					Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
					hv_valR = hv_Row1.TupleMean();
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
						"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 50, 99);
					SelectGray(ho_SelectedRegions27, ho_ImageClosing, &ho_SelectedRegions28,
						(HTuple("mean").Append("min")), "and", (HTuple(50).Append(0)), (HTuple(255).Append(75)));
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
					CountObj(ho_SelectedRegions28, &hv_Number11);
					if (0 != hv_Number11)
					{
						// stop(...); only in hdevelop
					}


					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.99);
					SetDictTuple(hv_el, "ra", 285);
					SetDictTuple(hv_el, "rb", 232.5);
					SetDictTuple(hv_el, "r", -20.5);
					SetDictTuple(hv_el, "c", 180.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(180).Append(200)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				GenRectangle1(&ho_ROI_0, 977.019, 1754.7, 2141.45, 2909.66);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -60);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(-50).TupleRad(), 70, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					//9.24 add-zjy bd未见光
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved11, -100, 150);
					Difference(ho_RegionTrans1, ho_RegionMoved11, &ho_RegionDifference11);
					RegionFeatures(ho_RegionDifference11, "row1", &hv_r1);
					ReduceDomain(ho_Image, ho_RegionDifference11, &ho_ImageReduced10);
					ErosionCircle(ho_RegionDifference11, &ho_RegionErosion8, 3.5);
					Intensity(ho_RegionErosion8, ho_ImageReduced10, &hv_Mean, &hv_Deviation);
					Threshold(ho_ImageReduced10, &ho_Region12, 0, hv_Mean - 60);
					Connection(ho_Region12, &ho_ConnectedRegions18);
					SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions19, (HTuple("area").Append("row1")),
						"and", HTuple(500).TupleConcat(hv_r1 + 15), (HTuple(999999).Append(9999)));
					SelectGray(ho_SelectedRegions19, ho_ImageReduced10, &ho_SelectedRegions19,
						"mean", "and", 0, 80);
					SelectShapeProto(ho_SelectedRegions19, ho_RegionErosion8, &ho_SelectedRegions21,
						"overlaps_rel", 70, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_SelectedRegions21, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");

					//11.1 add-zjy BD裂纹
					DilationCircle(ho_RegionTrans1, &ho_RegionDilation, 15);
					RegionFeatures(ho_RegionDilation, "row1", &hv_Row1);
					ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
					Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
					Connection(ho_Region8, &ho_ConnectedRegions24);
					SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
					ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 3.5);
					GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
					DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
						11, "dark");
					Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
					hv_valR = hv_Row1.TupleMean();
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
						"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 50, 99);
					SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
						"mean", "and", 50, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.94);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 233.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", -175.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(190).Append(190)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}

				//10.7 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
				//椭圆位置
				Threshold(ho_ImageReduced, &ho_Region8, 60, 255);
				FillUp(ho_Region8, &ho_RegionFillUp1);
				OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				GenRectangle2(&ho_Rectangle5, hv_Row, hv_Column, hv_Phi, 100, 20);
				Opening(ho_ConnectedRegions17, ho_Rectangle5, &ho_ConnectedRegions17);
				CountObj(ho_ConnectedRegions17, &hv_Number10);
				if (0 != (int(hv_Number10 == 0)))
				{
					Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				}
				ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
				ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
				CountObj(ho_RegionTrans10, &hv_Number10);
				if (0 != hv_Number10)
				{
					//选择与椭圆有交集的区域
					SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
						"and", 2.1, 999);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
						&ho___Tmp_Obj_0, "overlaps_rel", 60, 100);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
				}
			}
			if (0 != (int(hv_ImageNum == 11)))
			{
				GenRectangle1(&ho_ROI_0, 967.911, 1646.68, 1997.76, 2688.23);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.97);
					SetDictTuple(hv_el, "ra", 285);
					SetDictTuple(hv_el, "rb", 232.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", -173.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(200).Append(160)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				GenRectangle1(&ho_ROI_0, 938.654, 1675.93, 1945.1, 2664.83);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);

				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(-50).TupleRad(), 70, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				//10.8 add-zjy
				ShapeTrans(ho_SelectedRegions, &ho_RegionTrans12, "ellipse");
				Difference(ho_RegionTrans12, ho_SelectedRegions, &ho_RegionDifference12);
				Connection(ho_RegionDifference12, &ho_ConnectedRegions22);
				SelectShape(ho_ConnectedRegions22, &ho_SelectedRegions25, "inner_radius",
					"and", 9, 99999);
				ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_SelectedRegions25, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");

				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);


					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.96);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 230.5);
					SetDictTuple(hv_el, "r", -19.5);
					SetDictTuple(hv_el, "c", -175.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);
					SetDictTuple(hv_dd, "os", (HTuple(200).Append(170)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				GenRectangle1(&ho_ROI_0, 897.694, 1623.27, 1974.36, 2623.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					ReduceDomain(ho_Image, ho_RegionTrans1, &ho_ImageReduced12);
					//10.9 add-zjy 刀纹
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved7, -120, 140);
					Difference(ho_RegionTrans1, ho_RegionMoved7, &ho_RegionDifference7);
					ErosionCircle(ho_RegionDifference7, &ho_RegionErosion1, 5);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing3, 55, 55);
					DynThreshold(ho_ImageReduced, ho_ImageClosing3, &ho_RegionDynThresh, 35,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions10);
					RegionFeatures(ho_RegionErosion1, "row1", &hv_Value);
					SelectShape(ho_ConnectedRegions10, &ho_ConnectedRegions10, (((HTuple("area").Append("row")).Append("height")).Append("inner_radius")),
						"and", (HTuple(250).TupleConcat(hv_Value + 200)).TupleConcat((HTuple(90).Append(0))),
						(((HTuple(999999).Append(4096)).Append(999)).Append(6.5)));
					Intensity(ho_RegionErosion1, ho_Image, &hv_Mean1, &hv_Deviation1);
					SelectGray(ho_ConnectedRegions10, ho_Image, &ho_ConnectedRegions10, "mean",
						"and", 0, hv_Mean1 - 20);
					SelectShapeProto(ho_ConnectedRegions10, ho_RegionErosion1, &ho_SelectedRegions9,
						"overlaps_rel", 97, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions9, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.97);
					SetDictTuple(hv_el, "ra", 285);
					SetDictTuple(hv_el, "rb", 233.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", -176.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(200).Append(170)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
					//9.25 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10 == 0)))
					{
						Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
							&ho___Tmp_Obj_0, "overlaps_rel", 60, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				GenRectangle1(&ho_ROI_0, 958.035, 1720, 1988.43, 2610);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);
				Threshold(ho_ImageScaled, &ho_Region1, 50, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(-55).TupleRad(), 70, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//8.27 add zjy 脱落
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved10, -120, 170);
					Difference(ho_RegionTrans1, ho_RegionMoved10, &ho_RegionDifference10);
					ReduceDomain(ho_ImageMedian, ho_RegionDifference10, &ho_ImageReduced);
					ErosionCircle(ho_RegionDifference10, &ho_RegionErosion1, 5);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing3, 55, 55);
					DynThreshold(ho_ImageClosing, ho_ImageClosing3, &ho_RegionDynThresh, 25,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions10);
					SelectShape(ho_ConnectedRegions10, &ho_ConnectedRegions10, "area", "and",
						210, 999999);
					SelectShapeProto(ho_ConnectedRegions10, ho_RegionErosion1, &ho_SelectedRegions9,
						"overlaps_rel", 97, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions9, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");


					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.97);
					SetDictTuple(hv_el, "ra", 286);
					SetDictTuple(hv_el, "rb", 233.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", -175.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(250).Append(170)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));

					//9.25 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10 == 0)))
					{
						Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
							&ho___Tmp_Obj_0, "overlaps_rel", 60, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				GenRectangle1(&ho_ROI_0, 889.155, 1616.98, 2045.68, 2635.37);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(-55).TupleRad(), 70, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));

				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					//8.27 add zjy 刀纹

					ShapeTrans(ho_SelectedRegions, &ho_RegionTrans9, "ellipse");
					ReduceDomain(ho_ImageMedian, ho_RegionTrans9, &ho_ImageReduced);
					MoveRegion(ho_RegionTrans9, &ho_RegionMoved7, -125, 175);
					Difference(ho_SelectedRegions, ho_RegionMoved7, &ho_RegionDifference7);
					ErosionCircle(ho_RegionDifference7, &ho_RegionErosion1, 5);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing3, 55, 55);
					DynThreshold(ho_ImageClosing, ho_ImageClosing3, &ho_RegionDynThresh, 12,
						"dark");
					ClosingCircle(ho_RegionDynThresh, &ho_RegionDynThresh, 3.5);
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions10);
					RegionFeatures(ho_RegionErosion1, "row1", &hv_Value);
					SelectShape(ho_ConnectedRegions10, &ho_ConnectedRegions10, ((HTuple("area").Append("row1")).Append("height")),
						"and", (HTuple(250).TupleConcat(hv_Value + 200)).TupleConcat(100), ((HTuple(999999).Append(4096)).Append(999)));
					SelectGray(ho_ConnectedRegions10, ho_Image, &ho_ConnectedRegions10, "mean",
						"and", 0, 150);
					//10.7 add-zjy 刀纹深
					DynThreshold(ho_ImageReduced, ho_ImageClosing3, &ho_RegionDynThresh6, 40,
						"dark");
					Connection(ho_RegionDynThresh6, &ho_ConnectedRegions21);
					SelectShape(ho_ConnectedRegions21, &ho_SelectedRegions24, (HTuple("area").Append("height")),
						"and", (HTuple(250).Append(100)), (HTuple(999999).Append(999)));

					Union2(ho_SelectedRegions24, ho_ConnectedRegions10, &ho_RegionUnion4);
					Connection(ho_RegionUnion4, &ho_RegionUnion4);
					SelectShapeProto(ho_RegionUnion4, ho_RegionErosion1, &ho_SelectedRegions9,
						"overlaps_rel", 97, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions9, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");


					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -0.97);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 233.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", -177.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(270).Append(190)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				GenRectangle1(&ho_ROI_0, 1079, 1090, 1997, 3100);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(550)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val1597 = hv_Number;
					HTuple step_val1597 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val1597, step_val1597); hv_Index2 += step_val1597)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(414)));
					SetDictTuple(hv_el, "move", (HTuple(207).Append(0)));
					SetDictTuple(hv_el, "r", 0);
					SetDictTuple(hv_el, "c", 5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));

					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);

					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);
					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val1639 = hv_Number4;
						HTuple step_val1639 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val1639, step_val1639); hv_Index1 += step_val1639)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//10.10 add-zjy 裂纹
							DilationCircle(ho_Ellipse, &ho_RegionDilation, 15);
							ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
							Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
							Connection(ho_Region8, &ho_ConnectedRegions24);
							SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
								70);
							ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
							ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 3.5);
							GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
							DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
								11, "dark");
							Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
							hv_valR = hv_Row1.TupleMean();
							SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
								"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
								"overlaps_rel", 50, 99);
							SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
								"mean", "and", 50, 255);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
							//24.1.5  add 裂纹 105
							Difference(ho_RegionTrans13, ho_SelectedRegions29, &ho_RegionDifference15
								);
							Connection(ho_RegionDifference15, &ho_ConnectedRegions33);
							RegionFeatures(ho_RegionTrans13, "row", &hv_Value1);
							SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions45, ((HTuple("area").Append("row")).Append("inner_radius")),
								"and", (HTuple(100).TupleConcat(hv_Value1 + 25)).TupleConcat(4), ((HTuple(99999).Append(9999)).Append(99)));
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions45, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-130)));
							SetDictTuple(hv_dd, "move", (HTuple(-180).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
					//10.3 add-zjy  返修料 边缘扩大 容易误判为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced5, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10<2)))
					{
						Threshold(ho_ImageReduced5, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionTrans10,
							&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				GenRectangle1(&ho_ROI_0, 1014.72, 605.123, 1986.06, 3665.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val1729 = hv_Number;
					HTuple step_val1729 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val1729, step_val1729); hv_Index2 += step_val1729)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(420)));
					SetDictTuple(hv_el, "move", (HTuple(210).Append(3)));
					SetDictTuple(hv_el, "r", 0);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));
					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);
					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);
					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val1769 = hv_Number4;
						HTuple step_val1769 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val1769, step_val1769); hv_Index1 += step_val1769)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);

							//10.16 add-zjy 裂纹
							DilationCircle(ho_Ellipse, &ho_RegionDilation, 15);
							ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
							Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
							Connection(ho_Region8, &ho_ConnectedRegions24);
							SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
								70);
							ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
							ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 5);
							GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
							DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
								11, "dark");
							Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
							hv_valR = hv_Row1.TupleMean();
							SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
								"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
								"overlaps_rel", 50, 99);
							SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
								"mean", "and", 50, 255);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-120)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));
						}
					}
					//9.16 add-zjy  返修料 边缘扩大 容易误判为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced5, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10<2)))
					{
						Threshold(ho_ImageReduced5, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionTrans10,
							&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				GenRectangle1(&ho_ROI_0, 1014.72, 505.123, 2100, 3665.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val1851 = hv_Number;
					HTuple step_val1851 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val1851, step_val1851); hv_Index2 += step_val1851)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(420)));
					SetDictTuple(hv_el, "move", (HTuple(210).Append(0)));
					SetDictTuple(hv_el, "r", 0);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));

					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);

					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val1894 = hv_Number4;
						HTuple step_val1894 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val1894, step_val1894); hv_Index1 += step_val1894)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//9.07 add-zjy 脱落
							ReduceDomain(ho_Image, ho_Ellipse, &ho_ImageReduced11);
							Threshold(ho_ImageReduced11, &ho_Region11, 70, 255);
							Connection(ho_Region11, &ho_ConnectedRegions20);
							SelectShapeStd(ho_ConnectedRegions20, &ho_SelectedRegions23, "max_area",
								70);
							ShapeTrans(ho_SelectedRegions23, &ho_myEll, "ellipse");

							MoveRegion(ho_myEll, &ho_RegionMoved8, -160, 0);
							Difference(ho_myEll, ho_RegionMoved8, &ho_RegionDifference8);
							ReduceDomain(ho_Image, ho_RegionDifference8, &ho_ImageReduced7);
							Intensity(ho_RegionDifference8, ho_ImageReduced7, &hv_Mean, &hv_Deviation);

							PaintRegion(ho_RegionDifference8, ho_ImageReduced7, &ho_ImageResult,
								hv_Mean, "fill");
							DynThreshold(ho_ImageReduced7, ho_ImageResult, &ho_RegionDynThresh2,
								5, "dark");
							Connection(ho_RegionDynThresh2, &ho_ConnectedRegions12);
							ErosionCircle(ho_RegionDifference8, &ho_RegionErosion3, 3.5);
							SelectShapeProto(ho_ConnectedRegions12, ho_RegionErosion3, &ho_SelectedRegions13,
								"overlaps_rel", 85, 100);
							SelectShape(ho_SelectedRegions13, &ho_SelectedRegions13, "area", "and",
								450, 999999);
							hv_Mval = (hv_Mean - 40).TupleMin2(160);
							SelectGray(ho_SelectedRegions13, ho_ImageReduced7, &ho_SelectedRegions13,
								"mean", "and", 0, hv_Mval);
							ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions13, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
							//10.9 add-zjy 刀纹
							GrayClosingRect(ho_ImageReduced7, &ho_ImageClosing4, 35, 35);
							DynThreshold(ho_ImageReduced7, ho_ImageClosing4, &ho_RegionDynThresh1,
								30, "dark");
							Connection(ho_RegionDynThresh1, &ho_ConnectedRegions11);
							SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions11, ((HTuple("area").Append("width")).Append("inner_radius")),
								"and", ((HTuple(150).Append(50)).Append(0)), ((HTuple(99999).Append(999)).Append(10)));
							SelectShapeProto(ho_SelectedRegions11, ho_RegionErosion3, &ho_SelectedRegions12,
								"overlaps_rel", 90, 100);
							SelectGray(ho_SelectedRegions12, ho_ImageReduced7, &ho_SelectedRegions12,
								"mean", "and", 0, 100);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions12, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

							//10.11 add-zjy 裂纹
							DilationCircle(ho_Ellipse, &ho_RegionDilation, 9);
							ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
							Threshold(ho_ImageReduced6, &ho_Region8, 80, 255);
							Connection(ho_Region8, &ho_ConnectedRegions24);
							SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
								70);
							ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
							ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 7);
							GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 5, 19);
							DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
								11, "dark");
							Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
							hv_valR = hv_Row1.TupleMean();
							SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
								"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(99).Append(559)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
								"overlaps_rel", 40, 99);
							SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
								"mean", "and", 50, 255);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-120)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
					//9.16 add-zjy  返修料 边缘扩大 容易误判为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced5, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10<2)))
					{
						Threshold(ho_ImageReduced5, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionTrans10,
							&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					}
				}
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				GenEmptyObj(&ho___Tmp_Obj_0);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");

				GenRectangle1(&ho_ROI_0, 638.699, 180, 2179.15, 3965.8);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				GrayOpeningRect(ho_ImageReduced1, &ho_ImageOpening, 30, 30);
				GrayClosingRect(ho_ImageOpening, &ho_ImageClosing1, 1, 1);
				GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening3, 80, 80);
				ScaleImage(ho_ImageOpening3, &ho_ImageScaled1, 1.8, -30);
				Threshold(ho_ImageScaled1, &ho_Region, 240, 255);
				Connection(ho_Region, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.7)), (HTuple(9999999).Append(1)));
				CountObj(ho_SelectedRegions2, &hv_Number3);
				if (0 != (int(hv_Number3 != 2)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
				else
				{
					//8.22 add-zjy

					ShapeTrans(ho_SelectedRegions2, &ho_RegionTrans8, "ellipse");
					Union1(ho_RegionTrans8, &ho_RegionUnion2);
					ReduceDomain(ho_ImageReduced1, ho_RegionUnion2, &ho_ImageReduced2);
					Threshold(ho_ImageReduced2, &ho_Region3, 200, 255);
					Difference(ho_RegionUnion2, ho_Region3, &ho_RegionDifference4);
					Connection(ho_RegionDifference4, &ho_ConnectedRegions7);
					ErosionCircle(ho_RegionUnion2, &ho_RegionErosion, 9);
					SelectShapeProto(ho_ConnectedRegions7, ho_RegionErosion, &ho_SelectedRegions6,
						"overlaps_rel", 10, 100);
					SelectShape(ho_SelectedRegions6, &ho_SelectedRegions6, "area", "and", 150,
						9999999);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions6, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					SortRegion(ho_SelectedRegions2, &ho_SelectedRegions2, "first_point", "true",
						"column");
					{
						HTuple end_val2026 = hv_Number3;
						HTuple step_val2026 = 1;
						for (hv_Index3 = 1; hv_Index3.Continue(end_val2026, step_val2026); hv_Index3 += step_val2026)
						{
							if (0 != (int(hv_Index3 == 1)))
							{
								hv_sta = 0;
								hv_end = 360;
							}
							else
							{
								hv_sta = 0;
								hv_end = 360;
							}
							SelectObj(ho_SelectedRegions2, &ho_ObjectSelected1, hv_Index3);
							ShapeTrans(ho_ObjectSelected1, &ho_RegionTrans6, "convex");

							AreaCenter(ho_RegionTrans6, &hv_Area3, &hv_Row2, &hv_Column2);
							GetImageSize(ho_Image, &hv_Width1, &hv_Height1);

							PolarTransImageExt(ho_ImageReduced1, &ho_PolarTransImage, hv_Row2, hv_Column2,
								hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
								"nearest_neighbor");
							GrayOpeningRect(ho_PolarTransImage, &ho_ImageOpening4, 50, 100);
							GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing2, 1, 100);
							Threshold(ho_ImageOpening4, &ho_Region2, 180, 255);
							Connection(ho_Region2, &ho_ConnectedRegions3);
							SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions3, "width", "and",
								4000, 99999);
							CountObj(ho_SelectedRegions3, &hv_Number5);
							if (0 != hv_Number5)
							{
								SortRegion(ho_SelectedRegions3, &ho_SortedRegions, "first_point", "true",
									"row");
								SelectObj(ho_SortedRegions, &ho_ObjectSelected2, 1);
								//检测凸起
								SubImage(ho_ImageOpening4, ho_ImageClosing2, &ho_ImageSub, 2.5, 128);
								Threshold(ho_ImageSub, &ho_Region4, 0, 30);
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved5, -3, 0);
								Intersection(ho_RegionMoved5, ho_Region4, &ho_RegionIntersection);
								Connection(ho_RegionIntersection, &ho_ConnectedRegions8);
								SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions7, "area", "and",
									300, 99999);
								//检测缺口
								OpeningRectangle1(ho_SortedRegions, &ho_RegionOpening2, 500, 10);
								Difference(ho_SortedRegions, ho_RegionOpening2, &ho_RegionDifference2
									);
								Connection(ho_RegionDifference2, &ho_ConnectedRegions4);
								SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions4, (HTuple("area").Append("height")),
									"and", (HTuple(3000).Append(25)), (HTuple(99999).Append(9999)));
								//检测间隙
								MoveRegion(ho_ObjectSelected2, &ho_RegionMoved4, 20, 0);
								MoveRegion(ho_RegionMoved4, &ho_RegionMoved41, 100, 0);
								Difference(ho_RegionMoved41, ho_RegionMoved4, &ho_RegionDifference3
									);

								ShapeTrans(ho_RegionDifference3, &ho_RegionTrans7, "rectangle1");

								ReduceDomain(ho_PolarTransImage, ho_RegionTrans7, &ho_ImageReduced3
									);

								Threshold(ho_ImageReduced3, &ho_Region5, 0, 50);
								Intersection(ho_Region5, ho_RegionDifference3, &ho_Region5);
								Connection(ho_Region5, &ho_ConnectedRegions9);
								SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and",
									50, 9999999999);
								Union1(ho_SelectedRegions8, &ho_SelectedRegions8);
								GenEmptyObj(&ho_rr);
								SmallestRectangle1(ho_RegionDifference3, &hv_Row11, &hv_Column11, &hv_Row21,
									&hv_Column21);
								//30
								GenRectangle1(&ho_Rectangle, hv_Row11, hv_Column11, hv_Row21, hv_Column21*((HTuple(30).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle1, hv_Row11, hv_Column21*((HTuple(30).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(150).TupleReal()) / 360));
								//60
								GenRectangle1(&ho_Rectangle2, hv_Row11, hv_Column21*((HTuple(150).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(210).TupleReal()) / 360));
								//120
								GenRectangle1(&ho_Rectangle3, hv_Row11, hv_Column21*((HTuple(210).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(330).TupleReal()) / 360));
								//30
								GenRectangle1(&ho_Rectangle4, hv_Row11, hv_Column21*((HTuple(330).TupleReal()) / 360),
									hv_Row21, hv_Column21*((HTuple(360).TupleReal()) / 360));

								Union2(ho_Rectangle, ho_Rectangle4, &ho_RegionUnion1);
								//
								Intersection(ho_RegionUnion1, ho_SelectedRegions8, &ho_RegionIntersection1
									);
								//
								Intersection(ho_Rectangle1, ho_SelectedRegions8, &ho_RegionIntersection2
									);
								//
								Intersection(ho_Rectangle2, ho_SelectedRegions8, &ho_RegionIntersection3
									);
								//
								Intersection(ho_Rectangle3, ho_SelectedRegions8, &ho_RegionIntersection4
									);
								//
								//
								ConcatObj(ho_rr, ho_RegionIntersection1, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection2, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection3, &ho_rr);
								ConcatObj(ho_rr, ho_RegionIntersection4, &ho_rr);
								//**
								Union2(ho_SelectedRegions4, ho_SelectedRegions7, &ho_SelectedRegions4
									);

								PolarTransRegionInv(ho_SelectedRegions4, &ho_XYTransRegion, hv_Row2,
									hv_Column2, hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1,
									hv_Height1, hv_Width1, hv_Height1, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions5);
								SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
									150, 99999);
								//concat_obj (dt.['101'], SelectedRegions5, dt.['101'])

								PolarTransRegionInv(ho_rr, &ho_XYTransRegion, hv_Row2, hv_Column2,
									hv_sta.TupleRad(), hv_end.TupleRad(), 0, 1000, hv_Width1, hv_Height1,
									hv_Width1, hv_Height1, "nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("101"), ho_XYTransRegion, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
							}
						}
					}
				}
				CountObj((*hv_dt).TupleGetDictObject("101"), &hv_Number7);
				if (0 != (int(hv_Number7 == 0)))
				{
					GenEmptyRegion(&ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "101");
				}
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				GenRectangle1(&ho_ROI_0, 800, 200, 1900, 3950);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, (((HTuple("area").Append("width")).Append("height")).Append("phi")),
					"and", ((HTuple(30000).Append(350)).Append(50)).TupleConcat(HTuple(-10).TupleRad()),
					((HTuple(99999999).Append(600)).Append(400)).TupleConcat(HTuple(10).TupleRad()));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val2141 = hv_Number;
					HTuple step_val2141 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val2141, step_val2141); hv_Index2 += step_val2141)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(416)));
					SetDictTuple(hv_el, "move", (HTuple(208).Append(0)));
					SetDictTuple(hv_el, "r", 0);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));
					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);
					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val2182 = hv_Number4;
						HTuple step_val2182 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val2182, step_val2182); hv_Index1 += step_val2182)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//10.10 add-zjy 裂纹
							DilationCircle(ho_Ellipse, &ho_RegionDilation, 15);
							ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
							Threshold(ho_ImageReduced6, &ho_Region8, 80, 255);
							Connection(ho_Region8, &ho_ConnectedRegions24);
							SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
								70);
							ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
							Difference(ho_RegionTrans13, ho_RegionTrans13, &ho_RegionDifference13
								);

							ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 5);
							GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 19);
							DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
								11, "dark");
							Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);
							hv_valR = hv_Row1.TupleMean();
							SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
								"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(359)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
								"overlaps_rel", 40, 99);
							SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
								"mean", "and", 50, 255);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
							//二次筛选
							SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions37, ((HTuple("area").Append("height")).Append("row")),
								"and", (HTuple(50).Append(5)).TupleConcat(hv_valR + 30), (HTuple(999).Append(99)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions37, ho_RegionErosion9, &ho_SelectedRegions38,
								"overlaps_rel", 50, 99);
							ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions38, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
							//三次筛选 （横向裂纹）
							ClosingRectangle1(ho_RegionDynThresh7, &ho_RegionClosing3, 7, 3);
							Connection(ho_RegionClosing3, &ho_ConnectedRegions29);
							SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions39, ((HTuple("width").Append("inner_radius")).Append("row")),
								"and", (HTuple(100).Append(1)).TupleConcat(hv_valR + 30), (HTuple(99999).Append(10)).TupleConcat(hv_valR + 999));
							SelectShapeProto(ho_SelectedRegions39, ho_RegionErosion9, &ho_SelectedRegions39,
								"overlaps_rel", 99, 100);
							SelectGray(ho_SelectedRegions39, ho_Image, &ho_SelectedRegions39, "min",
								"and", 0, 90);
							MinMaxGray(ho_SelectedRegions39, ho_Image, 0, &hv_Min, &hv_Max, &hv_Range);
							if (0 != (HTuple(int((hv_Range.TupleLength())>0)).TupleAnd(int(hv_Range>100))))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions39,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");
								//*                     else
								//concat_obj (dt.['104'], SelectedRegions39, dt.['104'])
							}

							//12.11add-zjy 脱落
							Threshold(ho_ImageReduced6, &ho_Region16, 200, 255);
							OpeningCircle(ho_Region16, &ho_RegionOpening6, 75);
							Difference(ho_Region16, ho_RegionOpening6, &ho_RegionDifference14);
							Connection(ho_RegionDifference14, &ho_ConnectedRegions32);
							RegionFeatures(ho_Region16, "row", &hv_RVal);
							SelectShape(ho_ConnectedRegions32, &ho_SelectedRegions44, (HTuple("area").Append("row")),
								"and", (HTuple(150).Append(0)), HTuple(9999).TupleConcat(hv_RVal - 100));
							ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions44, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

							//字典
							CreateDict(&hv_dd);

							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-190)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
				}
				//9.16 add-zjy  返修料 边缘扩大 容易误判为102脱落  再此筛选屏蔽
				//椭圆位置
				Threshold(ho_ImageReduced5, &ho_Region8, 50, 255);
				FillUp(ho_Region8, &ho_RegionFillUp1);
				OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				CountObj(ho_ConnectedRegions17, &hv_Number10);
				if (0 != (int(hv_Number10<2)))
				{
					Threshold(ho_ImageReduced5, &ho_Region8, 120, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				}
				ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
				ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
				AreaCenter(ho_RegionTrans10, &hv_Area5, &hv_Row7, &hv_Column7);
				hv_aVal = 0;
				if (0 != (int((hv_Area5.TupleLength()) == 2)))
				{
					hv_aVal = (HTuple(hv_Area5[0]) - HTuple(hv_Area5[1])).TupleAbs();
				}
				CountObj(ho_RegionTrans10, &hv_Number10);
				if (0 != (hv_Number10.TupleAnd(int(hv_aVal<25000))))
				{
					//选择与椭圆有交集的区域
					SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
						"and", 2.1, 999);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionTrans10,
						&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
				}
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				GenRectangle1(&ho_ROI_0, 631.065, 1600, 1941.75, 2654.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				FillUp(ho_RegionClosing, &ho_RegionClosing);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_RegionOpening, (HTuple("area").Append("circularity")),
					"and", (HTuple(50000).Append(0.4)), (HTuple(9999999999).Append(1)));
				CountObj(ho_RegionOpening, &hv_NumberReg);
				if (0 != (int(hv_NumberReg>1)))
				{
					SelectShapeStd(ho_RegionOpening, &ho_RegionOpening, "max_area", 70);
				}
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 0.9);
				SetDictTuple(hv_el, "ra", 283);
				SetDictTuple(hv_el, "rb", 233.5);
				SetDictTuple(hv_el, "r", -18.5);
				SetDictTuple(hv_el, "c", 180.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(200).Append(200)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				//9.23 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
				//椭圆位置
				Threshold(ho_ImageReduced, &ho_Region8, 75, 255);
				FillUp(ho_Region8, &ho_RegionFillUp1);
				OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				CountObj(ho_ConnectedRegions17, &hv_Number10);
				if (0 != (int(hv_Number10 == 0)))
				{
					Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
				}
				ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
				ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
				ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
				CountObj(ho_RegionTrans10, &hv_Number10);
				if (0 != hv_Number10)
				{
					//选择与椭圆有交集的区域
					SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
						"and", 2.1, 999);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
						&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
				}
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 600, 1589, 1727, 2678);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					//10.17 add-zjy 裂纹
					DilationCircle(ho_RegionTrans1, &ho_RegionDilation, 15);
					ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced6);
					Threshold(ho_ImageReduced6, &ho_Region8, 60, 255);
					Connection(ho_Region8, &ho_ConnectedRegions24);
					SelectShapeStd(ho_ConnectedRegions24, &ho_SelectedRegions29, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions29, &ho_RegionTrans13, "ellipse");
					ErosionCircle(ho_RegionTrans13, &ho_RegionErosion9, 3.5);
					RegionFeatures(ho_RegionErosion9, "row1", &hv_valR);
					GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing7, 3, 15);
					DynThreshold(ho_ImageReduced6, ho_ImageClosing7, &ho_RegionDynThresh7,
						11, "dark");
					Connection(ho_RegionDynThresh7, &ho_ConnectedRegions23);

					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions26, ((HTuple("anisometry").Append("area")).Append("row")),
						"and", (HTuple(2).Append(50)).TupleConcat(hv_valR + 30), (HTuple(999).Append(399)).TupleConcat(hv_valR + 999));
					SelectShapeProto(ho_SelectedRegions26, ho_RegionErosion9, &ho_SelectedRegions27,
						"overlaps_rel", 50, 99);
					SelectGray(ho_SelectedRegions27, ho_ImageClosing7, &ho_SelectedRegions28,
						"mean", "and", 50, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("105"), ho_SelectedRegions28, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "105");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", 0.92);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 232.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", 178.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(190).Append(180)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-80)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));

					//9.23 add-zjy   容易误判边缘为102脱落  再此筛选屏蔽
					//椭圆位置
					Threshold(ho_ImageReduced, &ho_Region8, 60, 255);
					FillUp(ho_Region8, &ho_RegionFillUp1);
					OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
					Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					CountObj(ho_ConnectedRegions17, &hv_Number10);
					if (0 != (int(hv_Number10 == 0)))
					{
						Threshold(ho_ImageReduced, &ho_Region8, 140, 255);
						FillUp(ho_Region8, &ho_RegionFillUp1);
						OpeningCircle(ho_RegionFillUp1, &ho_RegionOpening3, 25);
						Connection(ho_RegionOpening3, &ho_ConnectedRegions17);
						SelectShape(ho_ConnectedRegions17, &ho_ConnectedRegions17, (HTuple("width").Append("area")),
							"and", (HTuple(350).Append(100000)), (HTuple(800).Append(399999)));
					}
					ShapeTrans(ho_ConnectedRegions17, &ho_ConnectedRegions17, "convex");
					ShapeTrans(ho_ConnectedRegions17, &ho_RegionTrans10, "ellipse");
					ErosionCircle(ho_RegionTrans10, &ho_RegionErosion7, 3);
					CountObj(ho_RegionTrans10, &hv_Number10);
					if (0 != hv_Number10)
					{
						//选择与椭圆有交集的区域
						SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
							"and", 2.1, 999);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
						SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion7,
							&ho___Tmp_Obj_0, "overlaps_rel", 50, 100);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 700, 1600, 1793, 2790);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				OpeningCircle(ho_RegionFillUp, &ho_RegionFillUp, 5);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.4)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					SelectShape(ho_SelectedRegions, &ho_SelectedRegions1, "phi", "and", HTuple(85).TupleRad(),
						HTuple(90).TupleRad());
					Difference(ho_SelectedRegions, ho_SelectedRegions1, &ho_SelectedRegions
						);
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
					//9.15 add-zjy 脱落(大面积)
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved9, -110, 140);
					Difference(ho_RegionTrans1, ho_RegionMoved9, &ho_RegionDifference9);
					ReduceDomain(ho_Image, ho_RegionDifference9, &ho_ImageReduced8);
					GrayClosingRect(ho_ImageReduced8, &ho_ImageClosing5, 55, 15);
					GrayDilationRect(ho_ImageClosing5, &ho_ImageMax, 155, 155);
					//靠近边缘的脱落（大）
					DynThreshold(ho_ImageClosing5, ho_ImageMax, &ho_RegionDynThresh3, 60, "dark");
					Connection(ho_RegionDynThresh3, &ho_ConnectedRegions14);
					AreaCenter(ho_RegionTrans1, &hv_Area4, &hv_Row3, &hv_Column3);
					SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions15, ((HTuple("area").Append("height")).Append("row")),
						"and", (HTuple(350).Append(200)).TupleConcat(hv_Row3), (HTuple(99999).Append(999)).TupleConcat(hv_Row3 + 200));
					ErosionCircle(ho_RegionTrans1, &ho_RegionErosion5, 5);
					SelectShapeProto(ho_SelectedRegions15, ho_RegionErosion5, &ho_SelectedRegions16,
						"overlaps_rel", 80, 99);
					SelectGray(ho_SelectedRegions16, ho_ImageMax, &ho_SelectedRegions16, "mean",
						"and", 0, 210);
					ConcatObj((*hv_dt).TupleGetDictObject("102"), ho_SelectedRegions16, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -1.00);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 230.5);
					SetDictTuple(hv_el, "r", -17.5);
					SetDictTuple(hv_el, "c", -173.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(170).Append(170)));
					SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 700, 1599.87, 1880.73, 2847.27);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 40, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				GenRectangle2(&ho_Rectangle5, 100, 100, HTuple(-52).TupleRad(), 70, 20);
				Opening(ho_RegionClosing, ho_Rectangle5, &ho_RegionOpening);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(130000).Append(0.3)), (HTuple(99999999).Append(1)));
				CountObj(ho_SelectedRegions, &hv_Number2);
				if (0 != (int(hv_Number2 == 0)))
				{
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_ROI_0, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");
				}
				else
				{
					Union1(ho_SelectedRegions, &ho_RegionOpening);
					ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
					MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
					Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
					ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
					AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

					ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
					EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);

					//9.24 add-zjy bd未见光
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved11, -100, 160);
					Difference(ho_RegionTrans1, ho_RegionMoved11, &ho_RegionDifference11);
					RegionFeatures(ho_RegionDifference11, "row1", &hv_r1);
					ReduceDomain(ho_Image, ho_RegionDifference11, &ho_ImageReduced10);
					ErosionCircle(ho_RegionDifference11, &ho_RegionErosion8, 3.5);
					Intensity(ho_RegionErosion8, ho_ImageReduced10, &hv_Mean, &hv_Deviation);
					PaintRegion(ho_RegionDifference11, ho_ImageReduced10, &ho_ImageResult1,
						hv_Mean + 5, "fill");
					DynThreshold(ho_ImageReduced10, ho_ImageResult1, &ho_RegionDynThresh5,
						45, "dark");
					Connection(ho_RegionDynThresh5, &ho_ConnectedRegions18);
					SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions19, (HTuple("area").Append("row1")),
						"and", HTuple(500).TupleConcat(hv_r1 + 40), (HTuple(999999).Append(9999)));
					SelectShapeProto(ho_SelectedRegions19, ho_RegionErosion8, &ho_SelectedRegions21,
						"overlaps_rel", 90, 100);
					SelectGray(ho_SelectedRegions21, ho_Image, &ho_SelectedRegions21, "min",
						"and", 0, 80);
					ConcatObj((*hv_dt).TupleGetDictObject("103"), ho_SelectedRegions21, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "103");

					//10.12 add 刀纹 104
					GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing9, 15, 15);
					DynThreshold(ho_ImageReduced10, ho_ImageClosing9, &ho_RegionDynThresh9,
						20, "dark");
					Connection(ho_RegionDynThresh9, &ho_ConnectedRegions28);
					SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions34, ((HTuple("area").Append("height")).Append("inner_radius")),
						"and", ((HTuple(150).Append(50)).Append(0)), ((HTuple(99999).Append(999)).Append(10)));
					SelectGray(ho_SelectedRegions34, ho_ImageReduced10, &ho_SelectedRegions36,
						"mean", "and", 0, 180);
					SelectShapeProto(ho_SelectedRegions36, ho_RegionErosion8, &ho_SelectedRegions35,
						"overlaps_rel", 100, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions35, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");


					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", -1.0);
					SetDictTuple(hv_el, "ra", 283);
					SetDictTuple(hv_el, "rb", 230.5);
					SetDictTuple(hv_el, "r", -18.5);
					SetDictTuple(hv_el, "c", -173.5);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

					//字典
					CreateDict(&hv_dd);

					SetDictTuple(hv_dd, "os", (HTuple(170).Append(170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_Image, hv_dd, "image");
					SetDictObject(ho_Ellipse, hv_dd, "region");
					HotRole(hv_dd, (*hv_dt));
					//9.24 add-zjy  边缘容易误判为102脱落  再此筛选屏蔽
					SelectShape((*hv_dt).TupleGetDictObject("102"), &ho___Tmp_Obj_0, "inner_radius",
						"and", 2.1, 99);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");
					ErosionCircle(ho_RegionTrans1, &ho_RegionErosion8, 3.5);
					SelectShapeProto((*hv_dt).TupleGetDictObject("102"), ho_RegionErosion8,
						&ho___Tmp_Obj_0, "overlaps_rel", 60, 100);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "102");

				}
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				//预留
			}

		}
		//4工位  10.9 add-zjy
		if (0 != (HTuple(int(hv_StaNum == 4)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 12)))
			{
				//粗定位圆孔位置
				GenRectangle1(&ho_ROI_0, 1180, 940, 2200, 3030);
				RegionFeatures(ho_ROI_0, "width", &hv_Wval);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced13);
				Threshold(ho_ImageReduced13, &ho_Region13, 200, 255);
				ClosingCircle(ho_Region13, &ho_RegionClosing2, 9);
				Connection(ho_RegionClosing2, &ho_ConnectedRegions16);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions22, (HTuple("width").Append("area")),
					"and", (HTuple(500).Append(50000)), (hv_Wval - 10).TupleConcat(999999));
				OpeningRectangle1(ho_SelectedRegions22, &ho_RegionOpening5, 155, 65);
				Connection(ho_RegionOpening5, &ho_ConnectedRegions25);
				SelectShapeStd(ho_ConnectedRegions25, &ho_SelectedRegions30, "max_area",
					70);
				SmallestRectangle1(ho_SelectedRegions30, &hv_RowD1, &hv_ColumnD1, &hv_RowD2,
					&hv_ColumnD2);
				GenRectangle1(&ho_RectangleC1, hv_RowD1 - 120, hv_ColumnD1 - 180, hv_RowD1, hv_ColumnD1 + 50);
				GenRectangle1(&ho_RectangleC2, hv_RowD1 - 120, hv_ColumnD2 - 50, hv_RowD1, hv_ColumnD2 + 180);
				Union2(ho_RectangleC1, ho_RectangleC2, &ho_RegionUnionC);
				ReduceDomain(ho_ImageReduced13, ho_RegionUnionC, &ho_ImageReduced14);
				//精确定位圆孔位置
				Threshold(ho_ImageReduced14, &ho_Region14, 100, 255);
				OpeningCircle(ho_Region14, &ho_Region14, 35);
				Connection(ho_Region14, &ho_ConnectedRegions26);
				SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions31, "area", "and",
					1500, 99999);
				CountObj(ho_SelectedRegions31, &hv_NumberC);
				if (0 != (int(hv_NumberC == 2)))
				{
					SmallestCircle(ho_SelectedRegions31, &hv_Row6, &hv_Column6, &hv_Radius);
					GenEllipseSector(&ho_EllipseSector, hv_Row6 - 3, hv_Column6, (HTuple(0).Append(0)),
						hv_Radius, hv_Radius - 23, HTuple(HTuple(180).TupleRad()).TupleConcat(HTuple(180).TupleRad()),
						HTuple(HTuple(360).TupleRad()).TupleConcat(HTuple(360).TupleRad()));

					Union1(ho_EllipseSector, &ho_EllipseSector);
					ErosionCircle(ho_EllipseSector, &ho_RegionErosion2, 2.5);
					ReduceDomain(ho_ImageReduced14, ho_EllipseSector, &ho_ImageReduced15);
					GrayClosingRect(ho_ImageReduced15, &ho_ImageClosing8, 15, 15);
					DynThreshold(ho_ImageReduced15, ho_ImageClosing8, &ho_RegionDynThresh8,
						11, "dark");
					Connection(ho_RegionDynThresh8, &ho_ConnectedRegions27);
					SelectShape(ho_ConnectedRegions27, &ho_SelectedRegions32, "area", "and",
						150, 99999);
					SelectShapeProto(ho_SelectedRegions32, ho_RegionErosion2, &ho_SelectedRegions33,
						"overlaps_rel", 70, 100);

					ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions33, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");

				}

			}
			if (0 != (int(hv_ImageNum == 29)))
			{
				GetImageSize(ho_Image, &hv_Width2, &hv_Height2);
				GenRectangle1(&ho_ROI_0, 1200, 0, 1900, 4000);
				RegionFeatures(ho_ROI_0, "width", &hv_Wval);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced13);
				Threshold(ho_ImageReduced13, &ho_Region13, 200, 255);
				ClosingCircle(ho_Region13, &ho_RegionClosing2, 9);
				Connection(ho_RegionClosing2, &ho_ConnectedRegions16);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions22, (HTuple("width").Append("area")),
					"and", (HTuple(400).Append(20000)), (hv_Wval - 10).TupleConcat(999999));
				OpeningRectangle1(ho_SelectedRegions22, &ho_RegionOpening5, 155, 65);
				Connection(ho_RegionOpening5, &ho_ConnectedRegions25);
				SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions30, (HTuple("height").Append("width")),
					"and", (HTuple(50).Append(100)), (HTuple(999).Append(999)));
				SmallestRectangle1(ho_SelectedRegions30, &hv_RowD1, &hv_ColumnD1, &hv_RowD2,
					&hv_ColumnD2);
				GenRectangle1(&ho_RectangleC1, hv_RowD1 - 120, hv_ColumnD1 - 180, hv_RowD1, hv_ColumnD1 + 50);
				GenRectangle1(&ho_RectangleC2, hv_RowD1 - 120, hv_ColumnD2 - 50, hv_RowD1, hv_ColumnD2 + 180);
				ConcatObj(ho_RectangleC1, ho_RectangleC2, &ho_ObjectsConcat);
				CountObj(ho_ObjectsConcat, &hv_NumReg);
				{
					HTuple end_val2740 = hv_NumReg;
					HTuple step_val2740 = 1;
					for (hv_Index5 = 1; hv_Index5.Continue(end_val2740, step_val2740); hv_Index5 += step_val2740)
					{
						SelectObj(ho_ObjectsConcat, &ho_ObjectSelected, hv_Index5);
						ReduceDomain(ho_ImageReduced13, ho_ObjectSelected, &ho_ImageReduced17);
						Threshold(ho_ImageReduced17, &ho_Region15, 100, 255);
						OpeningCircle(ho_Region15, &ho_Region15, 3.5);
						Connection(ho_Region15, &ho_ConnectedRegions30);
						SelectShape(ho_ConnectedRegions30, &ho_SelectedRegions40, "area", "and",
							8000, 99999);
						CountObj(ho_SelectedRegions40, &hv_NumberTmp);
						if (0 != hv_NumberTmp)
						{
							SmallestCircle(ho_SelectedRegions40, &hv_Row5, &hv_Column5, &hv_Radius1);
							GenEllipse(&ho_Ellipse2, hv_Row5, hv_Column5, 0, hv_Radius1, hv_Radius1 - 18);
							ErosionCircle(ho_Ellipse2, &ho_RegionErosion11, 4.5);
							ReduceDomain(ho_ImageReduced17, ho_Ellipse2, &ho_ImageReduced18);
							GrayClosingRect(ho_ImageReduced18, &ho_ImageClosing10, 15, 15);
							DynThreshold(ho_ImageReduced18, ho_ImageClosing10, &ho_RegionDynThresh10,
								25, "dark");
							Connection(ho_RegionDynThresh10, &ho_ConnectedRegions31);
							SelectShape(ho_ConnectedRegions31, &ho_ConnectedRegions31, "area", "and",
								20, 9999);
							SelectGray(ho_ConnectedRegions31, ho_Image, &ho_SelectedRegions41, "mean",
								"and", 0, 150);
							SelectShapeProto(ho_SelectedRegions41, ho_RegionErosion11, &ho_SelectedRegions42,
								"overlaps_rel", 100, 100);
							ConcatObj((*hv_dt).TupleGetDictObject("104"), ho_SelectedRegions42, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "104");
						}
					}
				}
			}
		}
		GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
		{
			HTuple end_val2766 = (hv_GenParamValue.TupleLength()) - 1;
			HTuple step_val2766 = 1;
			for (hv_Index10 = 0; hv_Index10.Continue(end_val2766, step_val2766); hv_Index10 += step_val2766)
			{
				TupleNumber(HTuple(hv_GenParamValue[hv_Index10]), &hv_Number6);
				if (0 != (int(hv_Number6 == 101)))
				{
					SelectShape((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
						&ho_SelectedRegions114, "area", "and", 1, 9999999999);
					CountObj(ho_SelectedRegions114, &hv_Number8);
					if (0 != (int(hv_Number8 == 0)))
					{
						RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
					}
				}
				else
				{
					Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
						&ho_ConnectedRegions167);
					SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
						1, 9999999999);

					Union1(ho_SelectedRegions114, &ho_RegionUnion67);
					CountObj(ho_RegionUnion67, &hv_Number39);
					if (0 != (int(hv_Number39 == 0)))
					{
						RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
					}
					else if (0 != hv_Number39)
					{
						Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
					}
				}
			}
		}

		return 1;
	}

	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84LumenRoleDefects2Station error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::AffineTransformation(HTuple hv_at)
{

	// Local iconic variables
	HObject  ho_Image, ho_rotreg, ho_trareg, ho_ImageReduced9;
	HObject  ho_ImageClosing24, ho_ImageOpening4, ho_ImageOpening10;
	HObject  ho_ImageSub6, ho_Region12, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions4, ho_SortedRegions, ho_RegionTrans4;
	HObject  ho_ImageClosing, ho_ImageOpening, ho_ImageOpening1;
	HObject  ho_ImageSub, ho_Region, ho_ConnectedRegions1, ho_SelectedRegions1;
	HObject  ho_SortedRegions1, ho_RegionMoved1, ho_ImageAffineTrans;
	HObject  ho_ImageReduced4, ho_ImageClosing7, ho_ImageMedian5;
	HObject  ho_ImageScaled13, ho_Region10, ho_RegionClosing;
	HObject  ho_RegionOpening1, ho_ConnectedRegions28, ho_SelectedRegions9;
	HObject  ho_RegionTrans19, ho_RegionMoved, ho_RegionDifference;
	HObject  ho_ConnectedRegions, ho_SelectedRegions;

	// Local control variables
	HTuple  hv_Width, hv_Height, hv_HomMat2DIdentity;
	HTuple  hv_HomMat2DIdentity1, hv_GenParamValue, hv_rmove;
	HTuple  hv_opening, hv_scal, hv_rg_c, hv_rscal, hv_area;
	HTuple  hv_zoom, hv_move, hv_Height1, hv_Width1, hv_Ratio;
	HTuple  hv_phi, hv_Ra1, hv_Rb1, hv_Phi1, hv_p, hv_Number25;
	HTuple  hv_Ra, hv_Rb, hv_Phi, hv_Number, hv_LL, hv_HomMat2DRotate;
	HTuple  hv_HomMat2DRotate1, hv_Number26, hv_Area, hv_Row;
	HTuple  hv_Column, hv_Row1, hv_Column1, hv_Row2, hv_Column2;
	HTuple  hv_n, hv_rc, hv_r, hv_c, hv_HomMat2DIdentity2, hv_HomMat2DTranslate;
	HTuple  hv_HomMat2DTranslate1, hv_Exception;

	try
	{
		ho_Image = hv_at.TupleGetDictObject("image");
		GetImageSize(ho_Image, &hv_Width, &hv_Height);
		HomMat2dIdentity(&hv_HomMat2DIdentity);
		HomMat2dIdentity(&hv_HomMat2DIdentity1);
		GenEmptyObj(&ho_rotreg);
		GenEmptyObj(&ho_trareg);
		GetDictParam(hv_at, "keys", HTuple(), &hv_GenParamValue);
		hv_rmove.Clear();
		hv_rmove[0] = -25;
		hv_rmove[1] = 0;
		hv_opening.Clear();
		hv_opening[0] = 100;
		hv_opening[1] = 100;
		hv_scal.Clear();
		hv_scal[0] = 2;
		hv_scal[1] = -100;
		hv_rg_c.Clear();
		hv_rg_c[0] = 30;
		hv_rg_c[1] = 30;
		hv_rscal.Clear();
		hv_rscal[0] = 2;
		hv_rscal[1] = -200;
		hv_area.Clear();
		hv_area[0] = 40000;
		hv_area[1] = 999999999;
		hv_zoom = 1;
		if (0 != (int((hv_GenParamValue.TupleFind("zoom")) >= 0)))
		{
			hv_zoom = hv_at.TupleGetDictTuple("zoom");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("rg_c")) >= 0)))
		{
			hv_rg_c = hv_at.TupleGetDictTuple("rg_c");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
		{
			hv_move = hv_at.TupleGetDictTuple("move");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("opening")) >= 0)))
		{
			hv_opening = hv_at.TupleGetDictTuple("opening");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal")) >= 0)))
		{
			hv_scal = hv_at.TupleGetDictTuple("scal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("rscal")) >= 0)))
		{
			hv_rscal = hv_at.TupleGetDictTuple("rscal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("area")) >= 0)))
		{
			hv_area = hv_at.TupleGetDictTuple("area");
		}

		//角度偏移
		if (0 != (int((hv_GenParamValue.TupleFind("rotreg")) >= 0)))
		{
			ho_rotreg = hv_at.TupleGetDictObject("rotreg");
			HeightWidthRatio(ho_rotreg, &hv_Height1, &hv_Width1, &hv_Ratio);
			hv_phi = HTuple(0).TupleRad();
			EllipticAxis(ho_rotreg, &hv_Ra1, &hv_Rb1, &hv_Phi1);
			if (0 != (HTuple(int(hv_Phi1 > (HTuple(70).TupleRad()))).TupleOr(int(hv_Phi1 < (HTuple(-70).TupleRad())))))
			{
				//竖
				hv_p = HTuple(180).TupleRad();
				hv_phi = HTuple(90).TupleRad();
				ReduceDomain(ho_Image, ho_rotreg, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 30, 1);
				GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 30, 1);
				GrayOpeningRect(ho_ImageOpening4, &ho_ImageOpening10, 3, 40);
				SubImage(ho_ImageOpening10, ho_ImageOpening4, &ho_ImageSub6, 1.5, 128);
				Threshold(ho_ImageSub6, &ho_Region12, 0, 60);
				Connection(ho_Region12, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, (HTuple("height").Append("inner_radius")),
					"and", (hv_Height1 - 250).TupleConcat(4), (HTuple(99999).Append(20)));
				SortRegion(ho_SelectedRegions4, &ho_SortedRegions, "first_point", "false",
					"column");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions4, 1);
				CountObj(ho_SelectedRegions4, &hv_Number25);
				if (0 != hv_Number25)
				{
					ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
					EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
				}
				else
				{
					hv_Phi = hv_phi;
				}
			}
			else if (0 != (HTuple(int(hv_Phi1 < (HTuple(70).TupleRad()))).TupleOr(int(hv_Phi1 >(HTuple(-70).TupleRad())))))
			{
				//横
				hv_p = HTuple(0).TupleRad();
				hv_phi = HTuple(0).TupleRad();
				ReduceDomain(ho_Image, ho_rotreg, &ho_ImageReduced9);
				if (0 != (int((hv_GenParamValue.TupleFind("rmove")) >= 0)))
				{
					hv_rmove = hv_at.TupleGetDictTuple("rmove");
					//有亮边
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing, 1, 230);
					GrayOpeningRect(ho_ImageClosing, &ho_ImageOpening, 1, 50);
					GrayOpeningRect(ho_ImageOpening, &ho_ImageOpening1, 35, 20);
					SubImage(ho_ImageOpening1, ho_ImageOpening, &ho_ImageSub, 2, 128);
					Threshold(ho_ImageSub, &ho_Region, 0, 40);
					ClosingCircle(ho_Region, &ho_Region, 2.5);
					OpeningRectangle1(ho_Region, &ho_Region, 30, 2);
					Connection(ho_Region, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, ((HTuple("width").Append("inner_radius")).Append("height")),
						"and", (hv_Width1 - 100).TupleConcat((HTuple(2.5).Append(3))), ((HTuple(99999).Append(99)).Append(50)));
					CountObj(ho_SelectedRegions1, &hv_Number);
					if (0 != hv_Number)
					{
						hv_LL = ((const HTuple&)hv_rmove)[0];
						if (0 != (int(hv_LL > 0)))
						{
							SortRegion(ho_SelectedRegions1, &ho_SortedRegions1, "first_point",
								"true", "row");
							SelectObj(ho_SortedRegions1, &ho_SelectedRegions1, 1);
						}
						else
						{
							SortRegion(ho_SelectedRegions1, &ho_SortedRegions1, "lower_left", "false",
								"row");
							SelectObj(ho_SortedRegions1, &ho_SelectedRegions1, 1);
						}
						ShapeTrans(ho_SelectedRegions1, &ho_RegionTrans4, "rectangle2");
						EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
					}
					else
					{
						//
						GrayOpeningRect(ho_ImageReduced9, &ho_ImageReduced9, 10, 1);
						GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 60, 60);
						GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 30, 30);
						ScaleImage(ho_ImageOpening4, &ho_ImageSub6, HTuple(hv_rscal[0]), HTuple(hv_rscal[1]));
						Threshold(ho_ImageSub6, &ho_Region12, 100, 255);
						Connection(ho_Region12, &ho_ConnectedRegions13);
						SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, "width", "and",
							hv_Width1 - 300, 4100);

						ShapeTrans(ho_SelectedRegions4, &ho_SelectedRegions4, "convex");

						MoveRegion(ho_SelectedRegions4, &ho_RegionMoved1, HTuple(hv_rmove[0]),
							HTuple(hv_rmove[1]));
						Difference(ho_SelectedRegions4, ho_RegionMoved1, &ho_SelectedRegions4
							);
						CountObj(ho_SelectedRegions4, &hv_Number25);
						if (0 != hv_Number25)
						{
							ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
							EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
						}
						else
						{
							hv_Phi = hv_phi;
						}
					}


				}
				else
				{
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 1, 30);
					GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 1, 30);
					GrayOpeningRect(ho_ImageOpening4, &ho_ImageOpening10, 40, 3);
					SubImage(ho_ImageOpening10, ho_ImageOpening4, &ho_ImageSub6, 1.5, 128);
					Threshold(ho_ImageSub6, &ho_Region12, 0, 60);
					Connection(ho_Region12, &ho_ConnectedRegions13);
					SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, (HTuple("width").Append("inner_radius")),
						"and", (hv_Width1 - 250).TupleConcat(4), (HTuple(99999).Append(20)));
					SortRegion(ho_SelectedRegions4, &ho_SortedRegions, "first_point", "false",
						"column");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions4, 1);
					CountObj(ho_SelectedRegions4, &hv_Number25);
					if (0 != hv_Number25)
					{
						ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
						EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
					}
					else
					{
						hv_Phi = hv_phi;
					}
				}
			}
		}
		else
		{
			hv_phi = HTuple(0).TupleRad();
			hv_Phi = HTuple(0).TupleRad();
		}
		if (0 != (HTuple(int(hv_Phi < 0)).TupleAnd(int(hv_Phi >(HTuple(-45).TupleRad())))))
		{
			hv_Phi += hv_p;
		}
		else if (0 != (HTuple(int(hv_Phi < 0)).TupleAnd(int(hv_Phi <= (HTuple(-45).TupleRad())))))
		{
			hv_Phi += hv_p;
		}
		//旋转
		HomMat2dRotate(hv_HomMat2DIdentity, (-hv_Phi) + hv_phi, hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate);
		//缩放
		HomMat2dScale(hv_HomMat2DRotate, hv_zoom, hv_zoom, hv_Height / 2, hv_Width / 2, &hv_HomMat2DRotate);

		HomMat2dRotate(hv_HomMat2DIdentity1, -((-hv_Phi) + hv_phi), hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate1);
		HomMat2dScale(hv_HomMat2DRotate1, 1 / hv_zoom, 1 / hv_zoom, hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate1);
		//用于区域还原
		SetDictTuple(hv_at, "hom_mat_rot", hv_HomMat2DRotate1);
		//转正后图像
		AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
			"false");
		SetDictObject(ho_ImageAffineTrans, hv_at, "afimage");

		//位置偏移
		if (0 != (int((hv_GenParamValue.TupleFind("trareg")) >= 0)))
		{
			ho_trareg = hv_at.TupleGetDictObject("trareg");

			ReduceDomain(ho_ImageAffineTrans, ho_trareg, &ho_ImageReduced4);
			GrayClosingRect(ho_ImageReduced4, &ho_ImageReduced4, 1, 100);
			GrayClosingRect(ho_ImageReduced4, &ho_ImageClosing7, 60, 30);
			MedianRect(ho_ImageClosing7, &ho_ImageMedian5, 10, 10);
			ScaleImage(ho_ImageMedian5, &ho_ImageScaled13, HTuple(hv_scal[0]), HTuple(hv_scal[1]));
			Threshold(ho_ImageScaled13, &ho_Region10, 0, 60);

			ClosingRectangle1(ho_Region10, &ho_RegionClosing, 50, 10);
			FillUp(ho_RegionClosing, &ho_RegionClosing);
			OpeningRectangle1(ho_RegionClosing, &ho_RegionOpening1, HTuple(hv_opening[0]),
				HTuple(hv_opening[1]));
			Connection(ho_RegionOpening1, &ho_ConnectedRegions28);
			hv_area = hv_area * 0.9;
			SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions9, "area", "and", HTuple(hv_area[0]),
				HTuple(hv_area[1]));
			CountObj(ho_SelectedRegions9, &hv_Number26);
			if (0 != (int(hv_Number26 > 1)))
			{
				SelectShapeStd(ho_SelectedRegions9, &ho_SelectedRegions9, "max_area", 70);

				CountObj(ho_SelectedRegions9, &hv_Number26);

			}
			if (0 != hv_Number26)
			{
				ShapeTrans(ho_SelectedRegions9, &ho_RegionTrans19, "rectangle1");
				if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
				{
					MoveRegion(ho_RegionTrans19, &ho_RegionMoved, HTuple(hv_move[0]), HTuple(hv_move[1]));
					Difference(ho_SelectedRegions9, ho_RegionMoved, &ho_RegionDifference);
					Connection(ho_RegionDifference, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 10000,
						999999);
					AreaCenter(ho_SelectedRegions, &hv_Area, &hv_Row, &hv_Column);
					SelectShape(ho_SelectedRegions, &ho_SelectedRegions, "area", "and", (hv_Area.TupleMax()) - 1,
						999999);

					ShapeTrans(ho_SelectedRegions, &ho_RegionTrans19, "rectangle1");
				}
				SmallestRectangle1(ho_RegionTrans19, &hv_Row1, &hv_Column1, &hv_Row2, &hv_Column2);
				if (0 != (int((hv_GenParamValue.TupleFind("point")) >= 0)))
				{
					hv_n = hv_at.TupleGetDictTuple("point");
				}
				if (0 != (int((hv_GenParamValue.TupleFind("point")) < 0)))
				{
					hv_n = 1;
				}
				if (0 != (int(hv_n == 1)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row1);
					hv_rc.Append(hv_Column1);
				}
				else if (0 != (int(hv_n == 2)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row1);
					hv_rc.Append(hv_Column2);
				}
				else if (0 != (int(hv_n == 3)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row2);
					hv_rc.Append(hv_Column1);
				}
				else if (0 != (int(hv_n == 4)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row2);
					hv_rc.Append(hv_Column2);
				}
				hv_r = HTuple(hv_rc[0]) - HTuple((hv_at.TupleGetDictTuple("rc"))[0]);
				hv_c = HTuple(hv_rc[1]) - HTuple((hv_at.TupleGetDictTuple("rc"))[1]);
			}
			else
			{
				hv_r = 0;
				hv_c = 0;
			}
		}
		else
		{
			hv_r = 0;
			hv_c = 0;
		}
		HomMat2dIdentity(&hv_HomMat2DIdentity2);
		//平移矩阵，用作提取区域变换
		HomMat2dTranslate(hv_HomMat2DIdentity2, hv_r, hv_c, &hv_HomMat2DTranslate);
		SetDictTuple(hv_at, "hom_mat_tra", hv_HomMat2DTranslate);
		//旋转平移矩阵，用作观察提取区域和原图之间是否对应
		HomMat2dTranslate(hv_HomMat2DRotate1, -hv_r, -hv_c, &hv_HomMat2DTranslate1);
		SetDictTuple(hv_at, "hom_mat_rt", hv_HomMat2DTranslate1);
		return 1;

	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "AffineTransformation error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;

}


int JSZCAlgorithmsDLLQ1::DefectDetectionAlgorithms(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_EmptyRegion, ho_Image, ho_RegionDifference4;
	HObject  ho_RegionDilation2, ho_ImageReduced2, ho_ImageOpening34;
	HObject  ho_ImageMedian8, ho_ImageMedian9, ho_RegionDynThresh8;
	HObject  ho_RegionIntersection32, ho_ConnectedRegions81;
	HObject  ho_SelectedRegions93, ho_ImageClosing3, ho_ImageOpening2;
	HObject  ho_ImageMedian6, ho_ImageMean, ho_ImageSub3, ho_Region6;
	HObject  ho_ConnectedRegions12, ho_SelectedRegions19, ho_ImageSub2;
	HObject  ho_Region4, ho_ConnectedRegions11, ho_SelectedRegions18;
	HObject  ho_RegionUnion3, ho_ConnectedRegions15, ho_ImageClosing2;
	HObject  ho_ImageMedian, ho_ImageMedian3, ho_Region2, ho_RegionIntersection1;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions10, ho_ImageOpening1;
	HObject  ho_ImageSub1, ho_Region27, ho_RegionIntersection25;
	HObject  ho_ConnectedRegions76, ho_SelectedRegions82, ho_SelectedRegions7;
	HObject  ho_SelectedRegions9, ho_RegionUnion2, ho_RegionDifference3;
	HObject  ho_ImageOpening, ho_ImageMedian1, ho_RegionDynThresh;
	HObject  ho_ConnectedRegions1, ho_SelectedRegions1, ho_RegionClosing2;
	HObject  ho_SelectedRegions20, ho_SelectedRegions21, ho_SelectedRegions22;
	HObject  ho_ObjectsConcat, ho_ObjectSelected, ho_RegionOpening2;
	HObject  ho_RegionClosing1, ho_ConnectedRegions9, ho_SelectedRegions14;
	HObject  ho_RegionDilation, ho_ImageReduced135, ho_ImageClosing1;
	HObject  ho_ImageOpening32, ho_ImageSub18, ho_Region69, ho_RegionDilation1;
	HObject  ho_RegionIntersection28, ho_ConnectedRegions79;
	HObject  ho_SelectedRegions89, ho_ImageClosing86, ho_ImageSub136;
	HObject  ho_Region176, ho_RegionIntersection129, ho_ConnectedRegions243;
	HObject  ho_SelectedRegions246, ho_RegionDilation61, ho_RegionTrans;
	HObject  ho_RegionDifference, ho_RegionOpening, ho_ConnectedRegions;
	HObject  ho_RegionTrans1, ho_RegionDifference1, ho_RegionOpening1;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions, ho_ImageReduced44;
	HObject  ho_RegionTrans28, ho_RegionMoved69, ho_RegionMoved70;
	HObject  ho_RegionDifference35, ho_RegionDifference36, ho_RegionTrans30;
	HObject  ho_PolarTransImage, ho_ROI_0, ho_ImageReduced45;
	HObject  ho_ImageClosing37, ho_ImageClosing49, ho_ImageScaled30;
	HObject  ho_Region67, ho_RegionOpening19, ho_ConnectedRegions3;
	HObject  ho_SelectedRegions6, ho_RegionUnion1, ho_RegionTrans3;
	HObject  ho_RegionDilation3, ho_RegionMoved, ho_RegionTrans35;
	HObject  ho_RegionTrans2, ho_RegionErosion, ho_RegionMoved76;
	HObject  ho_RegionIntersection20, ho_XYTransRegion, ho_ConnectedRegions75;
	HObject  ho_SelectedRegions70, ho_ImageOpening19, ho_ImageSub21;
	HObject  ho_Region50, ho_ConnectedRegions60, ho_SelectedRegions57;
	HObject  ho_SortedRegions, ho_RegionClosing, ho_ImageReduced4;
	HObject  ho_ImageClosing5, ho_ImageClosing7, ho_ImageSub5;
	HObject  ho_Region5, ho_ConnectedRegions8, ho_SelectedRegions4;
	HObject  ho_RegionUnion4, ho_RegionDilation5, ho_RegionMoved7;
	HObject  ho_RegionMoved8, ho_RegionErosion9, ho_RegionTrans23;
	HObject  ho_RegionErosion14, ho_RegionDilation62, ho_ImageReduced46;
	HObject  ho_ImageClosing38, ho_ImageSub22, ho_Region51, ho_RegionIntersection21;
	HObject  ho_RegionIntersection11, ho_ConnectedRegions61;
	HObject  ho_SelectedRegions58, ho_RegionDilation151, ho_ImageReduced1;
	HObject  ho_ImageMedian2, ho_ImageScaled, ho_Region1, ho_RegionIntersection;
	HObject  ho_ConnectedRegions5, ho_SelectedRegions5, ho_ImageReduced3;
	HObject  ho_ImageMedian4, ho_Region3, ho_ConnectedRegions7;
	HObject  ho_SelectedRegions11, ho_ImageReduced123, ho_ImageMedian14;
	HObject  ho_ImageClosing29, ho_ImageSub16, ho_RegionDynThresh26;
	HObject  ho_RegionIntersection125, ho_ConnectedRegions233;
	HObject  ho_SelectedRegions236, ho_DerivGauss, ho_ImageConverted;
	HObject  ho_ImageSub135, ho_ImageMedian103, ho_RegionErosion19;
	HObject  ho_ImageReduced56, ho_ImageMedian30, ho_ImageScaled29;
	HObject  ho_Region66, ho_ImageClosing14, ho_ImageSub27, ho_Region61;
	HObject  ho_ConnectedRegions16, ho_SelectedRegions15, ho_RegionIntersection18;
	HObject  ho_ConnectedRegions74, ho_SelectedRegions69, ho_RegionDilation64;
	HObject  ho_RegionErosion11, ho_ImageReduced57, ho_ImageMedian28;
	HObject  ho_ImageClosing45, ho_ImageClosing46, ho_ImageSub28;
	HObject  ho_Region62, ho_RegionOpening20, ho_ConnectedRegions71;
	HObject  ho_SelectedRegions16, ho_ImageReduced47, ho_ImageMedian5;
	HObject  ho_ImageMedian26, ho_RegionDynThresh5, ho_ConnectedRegions62;
	HObject  ho_SelectedRegions56, ho_SelectedRegions37, ho_RegionDifference19;
	HObject  ho_Skeleton, ho_SelectedRegions38, ho_RegionDilation70;
	HObject  ho_ImageReduced62, ho_ImageClosing53, ho_ImageSub32;
	HObject  ho_Region71, ho_RegionIntersection2, ho_RegionClosing5;
	HObject  ho_ConnectedRegions10, ho_SelectedRegions8, ho_SelectedRegions3;
	HObject  ho_RegionUnion, ho_RegionDifference2, ho_SelectedRegions135;
	HObject  ho_ImageReduced36, ho_ImageMedian35, ho_ImageOpening14;
	HObject  ho_ImageOpening10, ho_ImageScaled24, ho_Region32;
	HObject  ho_ImageSub12, ho_Region31, ho_RegionFillUp11, ho_ConnectedRegions28;
	HObject  ho_RegionClosing15, ho_SelectedRegions44, ho_RegionOpening21;
	HObject  ho_RegionTrans43, ho_RegionDilation68, ho_RegionDilation69;
	HObject  ho_RegionDifference48, ho_SelectedRegions71, ho_RegionDilation12;
	HObject  ho_ImageReduced11, ho_ImageHighpass, ho_ImageFFT;
	HObject  ho_ImageConvol, ho_ImageFFT1, ho_ImageScaled25;
	HObject  ho_Region59, ho_RegionCount10, ho_RegionErosion4;
	HObject  ho_RegionIntersection15, ho_RegionFillUp5, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions12, ho_RegionMoved74, ho_RegionDifference41;
	HObject  ho_RegionDilation65, ho_ImageReduced59, ho_ImageClosing24;
	HObject  ho_ImageOpening17, ho_ImageSub29, ho_Region64, ho_ConnectedRegions72;
	HObject  ho_SelectedRegions17, ho_SelectedRegions80, ho_RegionMoved75;
	HObject  ho_RegionDifference42, ho_ImageReduced60, ho_ImageMedian29;
	HObject  ho_ImageClosing48, ho_ImageOpening23, ho_ImageSub30;
	HObject  ho_Region65, ho_ConnectedRegions73, ho_SelectedRegions68;
	HObject  ho_SelectedRegions28, ho_RegionMoved72, ho_RegionMoved99;
	HObject  ho_RegionDifference40, ho_RegionDilation14, ho_ImageReduced54;
	HObject  ho_ImageMedian27, ho_ImageClosing12, ho_ImageSub7;
	HObject  ho_Region15, ho_ConnectedRegions14, ho_SelectedRegions13;
	HObject  ho_SelectedRegions77, ho_ImageReduced, ho_ImageClosing;
	HObject  ho_ImageSub, ho_Region, ho_ConnectedRegions4, ho_SelectedRegions2;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_GenParamValue1, hv_dyn;
	HTuple  hv_ss, hv_ssmin, hv_ssmax, hv_GenParamValue2, hv_Index;
	HTuple  hv_Number3, hv_thr, hv_med, hv_g_c, hv_g_o, hv_s_g;
	HTuple  hv_Mean, hv_Deviation, hv_Min, hv_Max, hv_Range;
	HTuple  hv_NumberReg, hv_n, hv_Number, hv_t, hv_dw, hv_dh;
	HTuple  hv_Height1, hv_Width1, hv_Ratio, hv_Anisometry;
	HTuple  hv_Bulkiness, hv_StructureFactor, hv_Ra, hv_Rb;
	HTuple  hv_Phi, hv_sub, hv_gw, hv_gh, hv_Index1, hv_gray;
	HTuple  hv_Number1, hv_Number2, hv_move, hv_os, hv_gc_gray;
	HTuple  hv_gc_ss, hv_gc_ssmin, hv_gc_ssmax, hv_rt_gray;
	HTuple  hv_rt_ss, hv_rt_ssmin, hv_rt_ssmax, hv_low, hv_Area;
	HTuple  hv_Row, hv_Column, hv_Area1, hv_Row1, hv_Column1;
	HTuple  hv_m, hv_r, hv_Row13, hv_Column13, hv_Row22, hv_Column22;
	HTuple  hv_Os, hv_Width, hv_Height, hv_Number15, hv_cha;
	HTuple  hv_pig, hv_Mean1, hv_Deviation1, hv_Number19, hv_scale;
	HTuple  hv_dilation, hv_Width2, hv_Height2, hv_sm, hv_ssub;
	HTuple  hv_sss, hv_sssmin, hv_sssmax, hv_ss_g, hv_xm, hv_xsub;
	HTuple  hv_xss, hv_xssmin, hv_xssmax, hv_xs_g, hv_m0, hv_m1;
	HTuple  hv_Exception;

	try
	{
		GenEmptyRegion(&ho_EmptyRegion);
		ho_Image = hv_dd.TupleGetDictObject("image");
		SetDictObject(ho_EmptyRegion, hv_dd, "resreg");
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		if (0 != (int((hv_GenParamValue.TupleFind("LD")) >= 0)))
		{
			ErosionCircle((hv_dd.TupleGetDictTuple("LD")).TupleGetDictObject("region"),
				&ho_RegionDifference4, 8);

			DilationCircle((hv_dd.TupleGetDictTuple("LD")).TupleGetDictObject("region"),
				&ho_RegionDilation2, 35);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionDilation2, &ho_ImageReduced2
				);
			GetDictParam(hv_dd.TupleGetDictTuple("LD"), "keys", HTuple(), &hv_GenParamValue1);
			//检测压伤
			if (0 != (int((hv_GenParamValue1.TupleFind("YS")) >= 0)))
			{
				hv_dyn = 45;
				hv_ss = "area";
				hv_ssmin = 300;
				hv_ssmax = 99999;

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val24 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val24 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val24, step_val24); hv_Index += step_val24)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening34, 5, 5);
				MedianRect(ho_ImageOpening34, &ho_ImageMedian8, 5, 5);
				MedianRect(ho_ImageMedian8, &ho_ImageMedian9, 55, 55);
				DynThreshold(ho_ImageMedian8, ho_ImageMedian9, &ho_RegionDynThresh8, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh8, ho_RegionDifference4, &ho_RegionIntersection32
					);
				Connection(ho_RegionIntersection32, &ho_ConnectedRegions81);
				SelectShape(ho_ConnectedRegions81, &ho_SelectedRegions93, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions93, &ho_SelectedRegions93, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("84"), ho_SelectedRegions93, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "84");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions93, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//检测镭雕不全

			GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing3, 15, 1);
			GrayOpeningRect(ho_ImageClosing3, &ho_ImageOpening2, 15, 1);

			MedianRect(ho_ImageOpening2, &ho_ImageMedian6, 5, 10);
			MeanImage(ho_ImageMedian6, &ho_ImageMean, 15, 15);
			//gray_closing_rect (ImageMedian6, ImageClosing4, 11, 11)
			SubImage(ho_ImageMean, ho_ImageMedian6, &ho_ImageSub3, 2, 128);
			Threshold(ho_ImageSub3, &ho_Region6, 0, 60);
			Intersection(ho_Region6, ho_RegionDifference4, &ho_Region6);
			Connection(ho_Region6, &ho_ConnectedRegions12);
			SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions19, "height", "and",
				250, 99999);

			SubImage(ho_ImageMedian6, ho_ImageMean, &ho_ImageSub2, 2.5, 128);
			Threshold(ho_ImageSub2, &ho_Region4, 0, 60);
			Intersection(ho_Region4, ho_RegionDifference4, &ho_Region4);
			Connection(ho_Region4, &ho_ConnectedRegions11);
			SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions18, "height", "and",
				250, 99999);

			Union2(ho_SelectedRegions19, ho_SelectedRegions18, &ho_RegionUnion3);
			Connection(ho_RegionUnion3, &ho_ConnectedRegions15);
			CountObj(ho_ConnectedRegions15, &hv_Number3);
			if (0 != (int(hv_Number3 > 2)))
			{
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_ConnectedRegions15, &ho_ConnectedRegions15, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				//concat_obj (dt.['99'], ConnectedRegions15, dt.['99'])
				//concat_obj (dd.resreg, ConnectedRegions15, dd.resreg)

			}
			//检测亮斑
			if (0 != (int((hv_GenParamValue1.TupleFind("LB")) >= 0)))
			{
				hv_thr.Clear();
				hv_thr[0] = 0;
				hv_thr[1] = 45;
				hv_med.Clear();
				hv_med[0] = 5;
				hv_med[1] = 5;
				hv_g_c.Clear();
				hv_g_c[0] = 5;
				hv_g_c[1] = 5;
				hv_g_o.Clear();
				hv_g_o[0] = 50;
				hv_g_o[1] = 50;
				hv_ss = "area";
				hv_ssmin = 200;
				hv_ssmax = 99999;

				hv_s_g.Clear();
				hv_s_g[0] = 190;
				hv_s_g[1] = 255;
				Intensity(ho_RegionDifference4, ho_Image, &hv_Mean, &hv_Deviation);
				if (0 != (int(hv_Mean < 180)))
				{
					hv_s_g[0] = hv_Mean + 74;
				}
				else
				{
					hv_s_g[0] = hv_Mean + (74 - (hv_Mean - 180));
				}

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("thr")) >= 0)))
				{
					hv_thr = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("thr");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("med")) >= 0)))
				{
					hv_med = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("med");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("s_g")) >= 0)))
				{
					hv_s_g = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("s_g");

				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_o")) >= 0)))
				{
					hv_g_o = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("g_o");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_c")) >= 0)))
				{
					hv_g_c = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("g_c");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val117 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val117 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val117, step_val117); hv_Index += step_val117)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing2, HTuple(hv_g_c[0]), HTuple(hv_g_c[1]));
				MedianRect(ho_ImageClosing2, &ho_ImageMedian, HTuple(hv_med[0]), HTuple(hv_med[1]));
				//
				MedianRect(ho_ImageMedian, &ho_ImageMedian3, 10, 10);
				Threshold(ho_ImageMedian3, &ho_Region2, HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				Intersection(ho_Region2, ho_RegionDifference4, &ho_RegionIntersection1);
				Connection(ho_RegionIntersection1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, "area", "and", 150,
					9999999);
				SelectGray(ho_SelectedRegions10, ho_Image, &ho_SelectedRegions10, "mean",
					"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions10, &ho_SelectedRegions10, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions10, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions10, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");

				//
				GrayOpeningRect(ho_ImageMedian, &ho_ImageOpening1, HTuple(hv_g_o[0]), HTuple(hv_g_o[1]));

				SubImage(ho_ImageOpening1, ho_ImageMedian, &ho_ImageSub1, 1.5, 128);
				//scale_image (ImageMedian, ImageScaled33, 1.5, -60)
				Threshold(ho_ImageSub1, &ho_Region27, HTuple(hv_thr[0]), HTuple(hv_thr[1]));
				Intersection(ho_Region27, ho_RegionDifference4, &ho_RegionIntersection25);
				Connection(ho_RegionIntersection25, &ho_ConnectedRegions76);
				SelectShape(ho_ConnectedRegions76, &ho_SelectedRegions82, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				SelectShape(ho_SelectedRegions82, &ho_SelectedRegions7, "phi", "and", HTuple(85).TupleRad(),
					HTuple(90).TupleRad());
				SelectShape(ho_SelectedRegions82, &ho_SelectedRegions9, "phi", "and", HTuple(-90).TupleRad(),
					HTuple(-85).TupleRad());
				Union2(ho_SelectedRegions9, ho_SelectedRegions7, &ho_RegionUnion2);
				Difference(ho_SelectedRegions82, ho_RegionUnion2, &ho_RegionDifference3);
				Connection(ho_RegionDifference3, &ho_SelectedRegions82);

				SelectGray(ho_SelectedRegions82, ho_Image, &ho_SelectedRegions82, "mean",
					"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions82, &ho_SelectedRegions82, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions82, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions82, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//检测过铣（台阶）
			if (0 != (int((hv_GenParamValue1.TupleFind("TJ")) >= 0)))
			{
				hv_dyn = 20;
				hv_g_o.Clear();
				hv_g_o[0] = 5;
				hv_g_o[1] = 5;
				hv_med.Clear();
				hv_med[0] = 7;
				hv_med[1] = 7;
				hv_ss.Clear();
				hv_ss[0] = "area";
				hv_ss[1] = "circularity";
				hv_ssmin.Clear();
				hv_ssmin[0] = 150;
				hv_ssmin[1] = 1e-9;
				hv_ssmax.Clear();
				hv_ssmax[0] = 999999;
				hv_ssmax[1] = 0.22;
				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("med")) >= 0)))
				{
					hv_med = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("med");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_o")) >= 0)))
				{
					hv_g_o = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("g_o");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val188 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val188 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val188, step_val188); hv_Index += step_val188)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple(((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("SS")).TupleGetDictTuple("name"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening, HTuple(hv_g_o[0]), HTuple(hv_g_o[1]));
				//gray_closing_rect (ImageReduced2, ImageClosing2, 3, 3)
				MedianRect(ho_ImageOpening, &ho_ImageMedian, HTuple(hv_med[0]), HTuple(hv_med[1]));
				MedianRect(ho_ImageMedian, &ho_ImageMedian1, 90, 90);

				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh, ho_RegionDifference4, &ho_RegionDynThresh
					);
				Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions1, &ho_SelectedRegions1, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("81"), ho_SelectedRegions1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "81");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");

				//8.31 add -zjy
				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 10, "dark");
				MinMaxGray(ho_ImageReduced2, ho_ImageReduced2, 35, &hv_Min, &hv_Max, &hv_Range);
				Intersection(ho_RegionDynThresh, ho_RegionDifference4, &ho_RegionDynThresh
					);
				ClosingCircle(ho_RegionDynThresh, &ho_RegionClosing2, 3.5);
				Connection(ho_RegionClosing2, &ho_ConnectedRegions1);
				//面积小的 灰度值要小
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions20, "area", "and", 1000,
					999999);
				SelectGray(ho_SelectedRegions20, ho_ImageReduced2, &ho_SelectedRegions21,
					"min", "and", 0, 75);
				//面积大的
				SelectShape(ho_SelectedRegions20, &ho_SelectedRegions22, "area", "and", 2500,
					999999);
				SelectGray(ho_SelectedRegions22, ho_ImageReduced2, &ho_SelectedRegions22,
					"mean", "and", 0, hv_Min);
				ConcatObj(ho_SelectedRegions21, ho_SelectedRegions22, &ho_ObjectsConcat);
				CountObj(ho_ObjectsConcat, &hv_NumberReg);
				if (0 != hv_NumberReg)
				{
					if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
					{
						AffineTransRegion(ho_ObjectsConcat, &ho_ObjectsConcat, hv_dd.TupleGetDictTuple("hom_mat"),
							"nearest_neighbor");
					}
					ConcatObj(hv_dt.TupleGetDictObject("81"), ho_ObjectsConcat, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "81");
					ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_ObjectsConcat, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
				}
			}
			//检测脏污
			if (0 != (int((hv_GenParamValue1.TupleFind("ZW")) >= 0)))
			{
				hv_dyn = 25;
				hv_ss.Clear();
				hv_ss[0] = "area";
				hv_ss[1] = "inner_radius";
				hv_ssmin.Clear();
				hv_ssmin[0] = 600;
				hv_ssmin[1] = 7;
				hv_ssmax.Clear();
				hv_ssmax[0] = 999999;
				hv_ssmax[1] = 999;

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val252 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val252 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val252, step_val252); hv_Index += step_val252)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				DilationCircle(ho_RegionDifference4, &ho_RegionDilation2, 35);

				ReduceDomain(ho_ImageReduced2, ho_RegionDilation2, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing2, 7, 7);
				MedianRect(ho_ImageClosing2, &ho_ImageMedian, 15, 25);
				MedianRect(ho_ImageMedian, &ho_ImageMedian1, 150, 150);

				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh, ho_RegionDifference4, &ho_RegionDynThresh
					);
				Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions1, &ho_SelectedRegions1, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
			}
		}
		//检测RT
		if (0 != (int((hv_GenParamValue.TupleFind("RT")) >= 0)))
		{
			hv_n = 1;
			CountObj((hv_dd.TupleGetDictTuple("RT")).TupleGetDictObject("region"), &hv_Number);
			{
				HTuple end_val283 = hv_Number;
				HTuple step_val283 = 1;
				for (hv_Index = 1; hv_Index.Continue(end_val283, step_val283); hv_Index += step_val283)
				{
					hv_t = 0;
					SelectObj((hv_dd.TupleGetDictTuple("RT")).TupleGetDictObject("region"), &ho_ObjectSelected,
						hv_Index);
					hv_dw = 1;
					hv_dh = 50;
					HeightWidthRatio(ho_ObjectSelected, &hv_Height1, &hv_Width1, &hv_Ratio);

					Eccentricity(ho_ObjectSelected, &hv_Anisometry, &hv_Bulkiness, &hv_StructureFactor);
					EllipticAxis(ho_ObjectSelected, &hv_Ra, &hv_Rb, &hv_Phi);
					if (0 != (HTuple(HTuple(int(hv_Phi > (HTuple(70).TupleRad()))).TupleOr(int(hv_Phi < (HTuple(-70).TupleRad())))).TupleAnd(int(hv_Anisometry>5))))
					{
						hv_dw = 50;
						hv_dh = 1;
						hv_t = 1;
					}
					else if (0 != (HTuple(HTuple(int(hv_Phi<(HTuple(30).TupleRad()))).TupleOr(int(hv_Phi>(HTuple(-30).TupleRad())))).TupleAnd(int(hv_Anisometry > 5))))
					{
						hv_dw = 1;
						hv_dh = 50;
						//横
						OpeningRectangle1(ho_ObjectSelected, &ho_RegionOpening2, 1, 2);
						ClosingRectangle1(ho_RegionOpening2, &ho_RegionClosing1, 100, 1);
						Connection(ho_RegionClosing1, &ho_ConnectedRegions9);
						SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions14, "width", "and",
							hv_Width1 - 50, hv_Width1 + 10);
						CountObj(ho_SelectedRegions14, &hv_n);
						hv_t = 1;
					}
					else if (0 != (HTuple(HTuple(int(hv_Anisometry < 5)).TupleAnd(int(hv_Height1>800))).TupleAnd(int(hv_Width1 > 800))))
					{
						hv_t = 2;
					}

					if (0 != (HTuple(int(hv_t == 1)).TupleAnd(hv_n)))
					{
						//检测直线RT
						DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, hv_dw, hv_dh);
						ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionDilation, &ho_ImageReduced135
							);

						GetDictParam(hv_dd.TupleGetDictTuple("RT"), "keys", HTuple(), &hv_GenParamValue1);
						if (0 != (int((hv_GenParamValue1.TupleFind("L")) >= 0)))
						{
							GetDictParam((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L"),
								"keys", HTuple(), &hv_GenParamValue2);
							hv_sub = 1;
							hv_ss.Clear();
							hv_ss[0] = "area";
							hv_ss[1] = "inner_radius";
							hv_ssmin.Clear();
							hv_ssmin[0] = 30;
							hv_ssmin[1] = 1.5;
							hv_ssmax.Clear();
							hv_ssmax[0] = 999999;
							hv_ssmax[1] = 999;
							if (0 != (int(hv_dw > hv_dh)))
							{
								hv_gw = 1;
								hv_gh = 100;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gh = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("size");
								}
							}
							else
							{
								hv_gw = 100;
								hv_gh = 1;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gw = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("size");
								}
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
							{
								hv_sub = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("sub");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
							{
								{
									HTuple end_val339 = ((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
									HTuple step_val339 = 1;
									for (hv_Index1 = 0; hv_Index1.Continue(end_val339, step_val339); hv_Index1 += step_val339)
									{
										if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname"))[hv_Index1]))) >= 0)))
										{
											hv_ssmin[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmin"))[hv_Index1]);
											hv_ssmax[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmax"))[hv_Index1]);
										}
										else
										{
											hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname"))[hv_Index1]));
											hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmin"))[hv_Index1]));
											hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmax"))[hv_Index1]));
										}
									}
								}
							}

							//亮斑
							GrayClosingRect(ho_ImageReduced135, &ho_ImageClosing1, hv_gh, hv_gw);
							GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening32, hv_gh, hv_gw);
							SubImage(ho_ImageOpening32, ho_ImageClosing1, &ho_ImageSub18, hv_sub,
								128);
							Threshold(ho_ImageSub18, &ho_Region69, 0, 30);
							DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation1, 1, 10);
							Intersection(ho_Region69, ho_RegionDilation1, &ho_RegionIntersection28
								);
							Connection(ho_RegionIntersection28, &ho_ConnectedRegions79);
							SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions89, hv_ss, "and",
								hv_ssmin, hv_ssmax);
							if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
							{
								AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_dd.TupleGetDictTuple("hom_mat"),
									"nearest_neighbor");
							}
							ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions89, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
							ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions89, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
						}
						if (0 != (int((hv_GenParamValue1.TupleFind("B")) >= 0)))
						{
							GetDictParam((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
								"keys", HTuple(), &hv_GenParamValue2);
							hv_sub = 1;
							hv_gray.Clear();
							hv_gray[0] = 0;
							hv_gray[1] = 100;
							hv_ss.Clear();
							hv_ss[0] = "area";
							hv_ss[1] = "inner_radius";
							hv_ssmin.Clear();
							hv_ssmin[0] = 10;
							hv_ssmin[1] = 1.5;
							hv_ssmax.Clear();
							hv_ssmax[0] = 9999;
							hv_ssmax[1] = 999;
							if (0 != (int(hv_dw > hv_dh)))
							{
								hv_gw = 1;
								hv_gh = 200;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gh = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("size");
								}
							}
							else
							{
								hv_gw = 230;
								hv_gh = 1;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gw = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("size");
								}
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("gray")) >= 0)))
							{
								hv_gray = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("gray");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
							{
								hv_sub = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("sub");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
							{
								{
									HTuple end_val395 = ((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
									HTuple step_val395 = 1;
									for (hv_Index1 = 0; hv_Index1.Continue(end_val395, step_val395); hv_Index1 += step_val395)
									{
										if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname"))[hv_Index1]))) >= 0)))
										{
											hv_ssmin[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmin"))[hv_Index1]);
											hv_ssmax[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmax"))[hv_Index1]);
										}
										else
										{
											hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname"))[hv_Index1]));
											hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmin"))[hv_Index1]));
											hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmax"))[hv_Index1]));
										}
									}
								}
							}
							//暗斑
							GrayClosingRect(ho_ImageReduced135, &ho_ImageClosing86, hv_gh, hv_gw);
							SubImage(ho_ImageReduced135, ho_ImageClosing86, &ho_ImageSub136, 1.2,
								128);

							Threshold(ho_ImageSub136, &ho_Region176, 0, 15);
							Intersection(ho_Region176, ho_ObjectSelected, &ho_RegionIntersection129
								);
							Connection(ho_RegionIntersection129, &ho_ConnectedRegions243);
							SelectShape(ho_ConnectedRegions243, &ho_SelectedRegions246, hv_ss, "and",
								hv_ssmin, hv_ssmax);
							SelectGray(ho_SelectedRegions246, hv_dd.TupleGetDictObject("image"),
								&ho_SelectedRegions246, "mean", "and", HTuple(hv_gray[0]), HTuple(hv_gray[1]));
							if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
							{
								AffineTransRegion(ho_SelectedRegions246, &ho_SelectedRegions246, hv_dd.TupleGetDictTuple("hom_mat"),
									"nearest_neighbor");
							}
							ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions246, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
							ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions246,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
						}
					}

					if (0 != (int(hv_t == 2)))
					{
						//检测圆弧RT
						//检测转角

						DilationCircle(ho_ObjectSelected, &ho_RegionDilation61, 15);
						ShapeTrans(ho_RegionDilation61, &ho_RegionTrans, "convex");
						Difference(ho_RegionTrans, ho_RegionDilation61, &ho_RegionDifference);
						OpeningCircle(ho_RegionDifference, &ho_RegionOpening, 15);
						Connection(ho_RegionOpening, &ho_ConnectedRegions);
						SelectShape(ho_ConnectedRegions, &ho_ConnectedRegions, "area", "and", 200000,
							9999999);
						CountObj(ho_ConnectedRegions, &hv_Number1);
						if (0 != hv_Number1)
						{
							ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "rectangle1");
							Difference(ho_RegionTrans1, ho_RegionOpening, &ho_RegionDifference1);
							OpeningCircle(ho_RegionDifference1, &ho_RegionOpening1, 15);
							Connection(ho_RegionOpening1, &ho_ConnectedRegions2);
							SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions, "area", "and",
								100000, 400000);
							CountObj(ho_SelectedRegions, &hv_Number2);
							if (0 != hv_Number2)
							{
								hv_move = 800;
								hv_os = 225;
								hv_gc_gray.Clear();
								hv_gc_gray[0] = 90;
								hv_gc_gray[1] = 255;
								hv_gc_ss = "area";
								hv_gc_ssmin = 250;
								hv_gc_ssmax = 99999999;

								hv_rt_gray.Clear();
								hv_rt_gray[0] = 0;
								hv_rt_gray[1] = 130;
								hv_rt_ss.Clear();
								hv_rt_ss[0] = "area";
								hv_rt_ss[1] = "inner_radius";
								hv_rt_ssmin.Clear();
								hv_rt_ssmin[0] = 10;
								hv_rt_ssmin[1] = 1.5;
								hv_rt_ssmax.Clear();
								hv_rt_ssmax[0] = 99999999;
								hv_rt_ssmax[1] = 99;
								hv_low = 0;

								GetDictParam(hv_dd.TupleGetDictTuple("RT"), "keys", HTuple(), &hv_GenParamValue1);
								if (0 != (int((hv_GenParamValue1.TupleFind("move")) >= 0)))
								{
									hv_move = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("move");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("gc_gray")) >= 0)))
								{
									hv_gc_gray = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gc_gray");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("rt_gray")) >= 0)))
								{
									hv_rt_gray = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rt_gray");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("os")) >= 0)))
								{
									hv_os = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("os");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("low")) >= 0)))
								{
									hv_low = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("low");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("gcssname")) >= 0)))
								{
									{
										HTuple end_val474 = (((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname")).TupleLength()) - 1;
										HTuple step_val474 = 1;
										for (hv_Index1 = 0; hv_Index1.Continue(end_val474, step_val474); hv_Index1 += step_val474)
										{
											if (0 != (int((hv_gc_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname"))[hv_Index1]))) >= 0)))
											{
												hv_gc_ssmin[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmin"))[hv_Index1]);
												hv_gc_ssmax[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmax"))[hv_Index1]);
											}
											else
											{
												hv_gc_ss = hv_gc_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname"))[hv_Index1]));
												hv_gc_ssmin.Clear();
												hv_gc_ssmin.Append(hv_ssmin);
												hv_gc_ssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmin"))[hv_Index1]));
												hv_gc_ssmax.Clear();
												hv_gc_ssmax.Append(hv_ssmax);
												hv_gc_ssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmax"))[hv_Index1]));
											}
										}
									}
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("rtssname")) >= 0)))
								{
									{
										HTuple end_val486 = (((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname")).TupleLength()) - 1;
										HTuple step_val486 = 1;
										for (hv_Index1 = 0; hv_Index1.Continue(end_val486, step_val486); hv_Index1 += step_val486)
										{
											if (0 != (int((hv_rt_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname"))[hv_Index1]))) >= 0)))
											{
												hv_rt_ssmin[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmin"))[hv_Index1]);
												hv_rt_ssmax[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmax"))[hv_Index1]);
											}
											else
											{
												hv_rt_ss = hv_rt_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname"))[hv_Index1]));
												hv_rt_ssmin.Clear();
												hv_rt_ssmin.Append(hv_ssmin);
												hv_rt_ssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmin"))[hv_Index1]));
												hv_rt_ssmax.Clear();
												hv_rt_ssmax.Append(hv_ssmax);
												hv_rt_ssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmax"))[hv_Index1]));
											}
										}
									}
								}
								AreaCenter(ho_ConnectedRegions, &hv_Area, &hv_Row, &hv_Column);
								AreaCenter(ho_SelectedRegions, &hv_Area1, &hv_Row1, &hv_Column1);

								if (0 != (HTuple(int(hv_Row >= hv_Row1)).TupleAnd(int(hv_Column >= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(hv_move);
									hv_r.Clear();
									hv_r[0] = 90;
									hv_r[1] = 180;
									hv_n = 0;
								}
								else if (0 != (HTuple(int(hv_Row <= hv_Row1)).TupleAnd(int(hv_Column >= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(-hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(hv_move);
									hv_r.Clear();
									hv_r[0] = 180;
									hv_r[1] = 270;
									hv_n = 1;
								}
								else if (0 != (HTuple(int(hv_Row <= hv_Row1)).TupleAnd(int(hv_Column <= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(-hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(-hv_move);
									hv_r.Clear();
									hv_r[0] = 270;
									hv_r[1] = 360;
									hv_n = 2;
								}
								else if (0 != (HTuple(int(hv_Row >= hv_Row1)).TupleAnd(int(hv_Column <= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(-hv_move);
									hv_r.Clear();
									hv_r[0] = 0;
									hv_r[1] = 90;
									hv_n = 3;
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("r")) >= 0)))
								{
									hv_r = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("r");
								}

								ReduceDomain(ho_Image, ho_RegionDilation61, &ho_ImageReduced44);
								ShapeTrans(ho_ObjectSelected, &ho_RegionTrans28, "rectangle1");
								MoveRegion(ho_RegionTrans28, &ho_RegionMoved69, HTuple(hv_m[0]), HTuple(hv_m[1]));
								MoveRegion(ho_RegionTrans28, &ho_RegionMoved70, HTuple(hv_m[2]), HTuple(hv_m[3]));
								Difference(ho_ObjectSelected, ho_RegionMoved70, &ho_RegionDifference35
									);
								Difference(ho_RegionDifference35, ho_RegionMoved69, &ho_RegionDifference36
									);
								ShapeTrans(ho_RegionDifference36, &ho_RegionTrans30, "rectangle1");
								SmallestRectangle1(ho_RegionTrans30, &hv_Row13, &hv_Column13, &hv_Row22,
									&hv_Column22);

								hv_Os.Clear();
								hv_Os.Append(hv_Row22 + hv_os);
								hv_Os.Append(hv_Column22 + hv_os);
								hv_Os.Append(hv_Row13 - hv_os);
								hv_Os.Append(hv_Column22 + hv_os);
								hv_Os.Append(hv_Row13 - hv_os);
								hv_Os.Append(hv_Column13 - hv_os);
								hv_Os.Append(hv_Row22 + hv_os);
								hv_Os.Append(hv_Column13 - hv_os);
								GetImageSize(ho_ImageReduced44, &hv_Width, &hv_Height);
								PolarTransImageExt(ho_ImageReduced44, &ho_PolarTransImage, HTuple(hv_Os[2 * hv_n]),
									HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
									0, 2000, hv_Width, hv_Height, "nearest_neighbor");

								GenRectangle1(&ho_ROI_0, 1129.64, 0.318, 1626.11, 4098.74);
								ReduceDomain(ho_PolarTransImage, ho_ROI_0, &ho_ImageReduced45);
								GrayClosingRect(ho_ImageReduced45, &ho_ImageClosing37, 1, 50);
								//检测过铣
								GrayClosingRect(ho_ImageClosing37, &ho_ImageClosing49, 20, 50);
								ScaleImage(ho_ImageClosing49, &ho_ImageScaled30, 1.5, -70);
								MedianRect(ho_ImageScaled30, &ho_ImageScaled30, 15, 5);
								Threshold(ho_ImageScaled30, &ho_Region67, HTuple(hv_gc_gray[0]), HTuple(hv_gc_gray[1]));

								OpeningRectangle1(ho_Region67, &ho_RegionOpening19, 30, 1);
								Connection(ho_RegionOpening19, &ho_ConnectedRegions3);
								SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions6, "width", "and",
									2500, 99999);
								Union1(ho_SelectedRegions6, &ho_RegionUnion1);
								ShapeTrans(ho_RegionUnion1, &ho_RegionTrans3, "rectangle1");
								DilationRectangle1(ho_RegionTrans3, &ho_RegionDilation3, 1, 100);
								MoveRegion(ho_RegionDilation3, &ho_RegionMoved, 50, 1);
								Intersection(ho_ConnectedRegions3, ho_RegionMoved, &ho_ConnectedRegions3
									);
								SelectShape(ho_ConnectedRegions3, &ho_RegionOpening19, "area", "and",
									50000, 99999999);
								Union1(ho_RegionOpening19, &ho_RegionOpening19);
								ShapeTrans(ho_RegionOpening19, &ho_RegionTrans35, "convex");
								ShapeTrans(ho_RegionTrans35, &ho_RegionTrans2, "rectangle1");
								ErosionRectangle1(ho_RegionTrans2, &ho_RegionErosion, 800, 1);
								Intersection(ho_RegionTrans35, ho_RegionErosion, &ho_RegionTrans35);
								MoveRegion(ho_RegionTrans35, &ho_RegionMoved76, 235, 0);
								Intersection(ho_RegionMoved76, ho_RegionOpening19, &ho_RegionIntersection20
									);

								PolarTransRegionInv(ho_RegionIntersection20, &ho_XYTransRegion, HTuple(hv_Os[2 * hv_n]),
									HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
									0, 2000, hv_Width, hv_Height, hv_Width, hv_Height, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions75);
								SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions70, hv_gc_ss,
									"and", hv_gc_ssmin, hv_gc_ssmax);
								if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
								{
									AffineTransRegion(ho_SelectedRegions70, &ho_SelectedRegions70, hv_dd.TupleGetDictTuple("hom_mat"),
										"nearest_neighbor");
								}
								ConcatObj(hv_dt.TupleGetDictObject("71"), ho_SelectedRegions70, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, hv_dt, "71");
								ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions70,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
								//检测RT
								GrayOpeningRect(ho_ImageClosing37, &ho_ImageOpening19, 50, 20);
								SubImage(ho_ImageOpening19, ho_ImageClosing37, &ho_ImageSub21, 1, 128);
								Threshold(ho_ImageSub21, &ho_Region50, 0, 30);
								Connection(ho_Region50, &ho_ConnectedRegions60);
								SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions57, (HTuple("width").Append("inner_radius")),
									"and", (HTuple(3000).Append(2)), (HTuple(99999).Append(20)));
								SortRegion(ho_SelectedRegions57, &ho_SortedRegions, "lower_left", "false",
									"row");
								SelectObj(ho_SortedRegions, &ho_SelectedRegions57, 1);
								CountObj(ho_SelectedRegions57, &hv_Number15);
								if (0 != (int(hv_Number15 == 1)))
								{
									if (0 != hv_low)
									{
										ClosingRectangle1(ho_SelectedRegions57, &ho_RegionClosing, 10,
											10);
										ReduceDomain(ho_PolarTransImage, ho_RegionClosing, &ho_ImageReduced4
											);
										GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
										GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
										GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
										SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2,
											128);
										Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
										Connection(ho_Region5, &ho_ConnectedRegions8);
										SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width",
											"and", 600, 99999);
										CountObj(ho_SelectedRegions4, &hv_Number2);
										if (0 != hv_Number2)
										{
											Union1(ho_SelectedRegions4, &ho_RegionUnion4);
											DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 1, 100);
											MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, -50, 0);
											Difference(ho_RegionClosing, ho_RegionMoved7, &ho_SelectedRegions57
												);
										}
										else
										{
											GenEmptyObj(&ho_RegionDilation5);
											MoveRegion(ho_RegionClosing, &ho_RegionMoved8, -8, 0);
											Difference(ho_RegionClosing, ho_RegionMoved8, &ho_SelectedRegions57
												);
										}
										Intersection(ho_SelectedRegions57, ho_RegionDilation5, &ho_SelectedRegions57
											);
									}
									ErosionRectangle1(ho_SelectedRegions57, &ho_RegionErosion9, 1, 2);
									ShapeTrans(ho_RegionErosion9, &ho_RegionTrans23, "rectangle1");
									ErosionRectangle1(ho_RegionTrans23, &ho_RegionErosion14, 180, 1);
									DilationRectangle1(ho_RegionErosion9, &ho_RegionDilation62, 1, 10);
									ReduceDomain(ho_PolarTransImage, ho_RegionDilation62, &ho_ImageReduced46
										);

									GrayClosingRect(ho_ImageReduced46, &ho_ImageClosing38, 3, 80);
									SubImage(ho_ImageReduced46, ho_ImageClosing38, &ho_ImageSub22, 1.2,
										128);
									Threshold(ho_ImageSub22, &ho_Region51, 0, 30);
									Intersection(ho_Region51, ho_RegionErosion14, &ho_RegionIntersection21
										);
									Intersection(ho_RegionIntersection21, ho_RegionErosion9, &ho_RegionIntersection11
										);

									PolarTransRegionInv(ho_RegionIntersection11, &ho_XYTransRegion, HTuple(hv_Os[2 * hv_n]),
										HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
										0, 2000, hv_Width, hv_Height, hv_Width, hv_Height, "nearest_neighbor");
									Connection(ho_XYTransRegion, &ho_ConnectedRegions61);
									SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions58, hv_rt_ss,
										"and", hv_rt_ssmin, hv_rt_ssmax);
									SelectGray(ho_SelectedRegions58, ho_Image, &ho_SelectedRegions58,
										"mean", "and", HTuple(hv_rt_gray[0]), HTuple(hv_rt_gray[1]));
									if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
									{
										AffineTransRegion(ho_SelectedRegions58, &ho_SelectedRegions58,
											hv_dd.TupleGetDictTuple("hom_mat"), "nearest_neighbor");
									}
									ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions58, &ho___Tmp_Obj_0
										);
									SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
									ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions58,
										&ho___Tmp_Obj_0);
									SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
								}
							}
						}
					}
				}
			}
		}
		//**检测塑胶
		if (0 != (int((hv_GenParamValue.TupleFind("SJ")) >= 0)))
		{
			hv_cha = 20;
			hv_pig = 0;
			GetDictParam(hv_dd.TupleGetDictTuple("SJ"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("cha")) >= 0)))
			{
				hv_cha = (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("cha");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("pig")) >= 0)))
			{
				hv_pig = (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("pig");
			}

			//塑胶漏铁
			DilationCircle((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_RegionDilation151, 50);
			ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced1);
			MedianRect(ho_ImageReduced1, &ho_ImageMedian2, 3, 3);
			ScaleImage(ho_ImageMedian2, &ho_ImageScaled, 1.3, -30);
			Threshold(ho_ImageScaled, &ho_Region1, 240, 255);
			Intersection(ho_Region1, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_RegionIntersection);
			Connection(ho_RegionIntersection, &ho_ConnectedRegions5);
			SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 20,
				999999);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions5, &ho_SelectedRegions5, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("87"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "87");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//塑胶暗斑
			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_ImageReduced3);
			Intensity((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"), ho_ImageReduced3,
				&hv_Mean1, &hv_Deviation1);
			MedianRect(ho_ImageReduced3, &ho_ImageMedian4, 5, 5);
			Threshold(ho_ImageMedian4, &ho_Region3, 0, hv_Mean1 - hv_cha);
			Connection(ho_Region3, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions11, (HTuple("area").Append("inner_radius")),
				"and", (HTuple(150).Append(5)), (HTuple(99999).Append(9999)));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions11, &ho_SelectedRegions11, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			if (0 != hv_pig)
			{
				ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions11, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
			}
			else
			{
				ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions11, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			}

			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions11, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//
			GetDictParam(hv_dd.TupleGetDictTuple("SJ"), "keys", HTuple(), &hv_GenParamValue1);
			//检测塑胶
			//帽运算
			if (0 != (int((hv_GenParamValue1.TupleFind("CAP")) >= 0)))
			{
				hv_g_c.Clear();
				hv_g_c[0] = 200;
				hv_g_c[1] = 30;
				hv_sub = 3;
				hv_ss = "area";
				hv_ssmin = 350;
				hv_ssmax = 999999;
				GetDictParam((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP"), "keys",
					HTuple(), &hv_GenParamValue2);

				if (0 != (int((hv_GenParamValue2.TupleFind("g_c")) >= 0)))
				{
					hv_g_c = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("g_c");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
				{
					hv_sub = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("sub");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val699 = ((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val699 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val699, step_val699); hv_Index += step_val699)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}

				ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced123);
				MedianRect(ho_ImageReduced123, &ho_ImageMedian14, 5, 5);
				GrayOpeningRect(ho_ImageMedian14, &ho_ImageMedian14, 5, 5);
				GrayClosingRect(ho_ImageMedian14, &ho_ImageClosing29, HTuple(hv_g_c[0]),
					HTuple(hv_g_c[1]));
				SubImage(ho_ImageMedian14, ho_ImageClosing29, &ho_ImageSub16, hv_sub, 128);
				Threshold(ho_ImageSub16, &ho_RegionDynThresh26, 0, 30);
				Intersection(ho_RegionDynThresh26, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
					&ho_RegionIntersection125);
				Connection(ho_RegionIntersection125, &ho_ConnectedRegions233);
				SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions236, hv_ss, "and",
					hv_ssmin, hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions236, &ho_SelectedRegions236, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				if (0 != hv_pig)
				{
					ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
				}
				else
				{
					ConcatObj(hv_dt.TupleGetDictObject("79"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "79");
				}

				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions236, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//*********
			//导数高斯
			if (0 != (int((hv_GenParamValue1.TupleFind("GAUSS")) >= 0)))
			{
				hv_dyn = 45;
				hv_sub = 3;
				hv_ss = "area";
				hv_ssmin = 350;
				hv_ssmax = 999999;

				GetDictParam((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
					"keys", HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
				{
					hv_sub = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("sub");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val751 = ((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val751 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val751, step_val751); hv_Index += step_val751)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced123);
				MedianRect(ho_ImageReduced123, &ho_ImageMedian14, 7, 7);
				DerivateGauss(ho_ImageMedian14, &ho_DerivGauss, 5, "none");
				ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
				SubImage(ho_ImageMedian14, ho_ImageConverted, &ho_ImageSub135, hv_sub, 128);

				MedianRect(ho_ImageSub135, &ho_ImageMedian103, 50, 50);

				DynThreshold(ho_ImageSub135, ho_ImageMedian103, &ho_RegionDynThresh26, hv_dyn,
					"dark");
				ErosionCircle((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
					&ho_RegionErosion19, 10);
				Intersection(ho_RegionDynThresh26, ho_RegionErosion19, &ho_RegionIntersection125
					);
				Connection(ho_RegionIntersection125, &ho_ConnectedRegions233);
				SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions236, hv_ss, "and",
					hv_ssmin, hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions236, &ho_SelectedRegions236, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				if (0 != hv_pig)
				{
					ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
				}
				else
				{
					ConcatObj(hv_dt.TupleGetDictObject("76"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "76");
				}

				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions236, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
		}
		//**检测小塑胶
		if (0 != (int((hv_GenParamValue.TupleFind("XSJ")) >= 0)))
		{
			hv_sub = 3;
			GetDictParam(hv_dd.TupleGetDictTuple("XSJ"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("dyn")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("XSJ")).TupleGetDictTuple("dyn");
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("XSJ")).TupleGetDictObject("region"),
				&ho_ImageReduced56);
			MedianRect(ho_ImageReduced56, &ho_ImageMedian30, 7, 7);
			ScaleImage(ho_ImageMedian30, &ho_ImageScaled29, 2, -30);
			Threshold(ho_ImageScaled29, &ho_Region66, 0, 20);

			GrayClosingRect(ho_ImageReduced56, &ho_ImageClosing14, 100, 1);
			SubImage(ho_ImageReduced56, ho_ImageClosing14, &ho_ImageSub27, 1, 128);
			Threshold(ho_ImageSub27, &ho_Region61, 0, 30);
			Connection(ho_Region61, &ho_ConnectedRegions16);
			SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions15, (HTuple("area").Append("height")),
				"and", (HTuple(350).Append(80)), (HTuple(99999).Append(300)));
			CountObj(ho_SelectedRegions15, &hv_Number19);
			if (0 != hv_Number19)
			{
				Intersection(ho_SelectedRegions15, ho_Region66, &ho_RegionIntersection18);
				Connection(ho_RegionIntersection18, &ho_ConnectedRegions74);
				SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions69, "area", "and",
					250, 99999);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions69, &ho_SelectedRegions69, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("77"), ho_SelectedRegions69, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "77");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions69, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
				//
				DilationRectangle1(ho_SelectedRegions15, &ho_RegionDilation64, 200, 1);
				ErosionRectangle1(ho_RegionDilation64, &ho_RegionErosion11, 1, 30);
				ReduceDomain(ho_Image, ho_RegionErosion11, &ho_ImageReduced57);
				MedianRect(ho_ImageReduced57, &ho_ImageMedian28, 1, 5);
				GrayClosingRect(ho_ImageMedian28, &ho_ImageClosing45, 3, 7);
				GrayClosingRect(ho_ImageClosing45, &ho_ImageClosing46, 15, 100);
				SubImage(ho_ImageClosing45, ho_ImageClosing46, &ho_ImageSub28, hv_sub, 128);

				Threshold(ho_ImageSub28, &ho_Region62, 0, 30);
				OpeningRectangle1(ho_Region62, &ho_RegionOpening20, 1, 10);
				Connection(ho_RegionOpening20, &ho_ConnectedRegions71);
				SelectShape(ho_ConnectedRegions71, &ho_SelectedRegions16, (HTuple("area").Append("width")),
					"and", (HTuple(250).Append(15)), (HTuple(99999).Append(9999)));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions16, &ho_SelectedRegions16, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("77"), ho_SelectedRegions16, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "77");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions16, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}

		}
		//**检测LC暗划伤
		if (0 != (int((hv_GenParamValue.TupleFind("LC")) >= 0)))
		{
			hv_dyn = 65;
			GetDictParam(hv_dd.TupleGetDictTuple("LC"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("dyn")) >= 0)))
			{
				hv_dyn = (hv_dd.TupleGetDictTuple("LC")).TupleGetDictTuple("dyn");
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("LC")).TupleGetDictObject("region"),
				&ho_ImageReduced47);
			MedianRect(ho_ImageReduced47, &ho_ImageMedian5, 5, 5);
			MedianRect(ho_ImageMedian5, &ho_ImageMedian26, 50, 50);
			DynThreshold(ho_ImageMedian5, ho_ImageMedian26, &ho_RegionDynThresh5, hv_dyn,
				"light");

			Connection(ho_RegionDynThresh5, &ho_ConnectedRegions62);
			SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions56, ((HTuple("area").Append("circularity")).Append("anisometry")),
				"and", ((HTuple(200).Append(1e-9)).Append(3)), ((HTuple(99999).Append(0.3)).Append(60)));
			SelectShape(ho_SelectedRegions56, &ho_SelectedRegions37, "phi", "and", HTuple(-15).TupleRad(),
				HTuple(15).TupleRad());

			Difference(ho_SelectedRegions56, ho_SelectedRegions37, &ho_RegionDifference19
				);
			Skeleton(ho_RegionDifference19, &ho_Skeleton);
			SelectShape(ho_Skeleton, &ho_SelectedRegions38, (HTuple("anisometry").Append("contlength")),
				"and", (HTuple(30).Append(200)), (HTuple(99999).Append(9999999)));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions38, &ho_SelectedRegions38, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions38, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions38, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//****检测A基准
		if (0 != (int((hv_GenParamValue.TupleFind("AG")) >= 0)))
		{
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 160;
			GetDictParam(hv_dd.TupleGetDictTuple("AG"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("AG")).TupleGetDictTuple("s_g");
			}
			//检测大缺陷
			DilationCircle((hv_dd.TupleGetDictTuple("AG")).TupleGetDictObject("region"),
				&ho_RegionDilation70, 5);
			ReduceDomain(ho_Image, ho_RegionDilation70, &ho_ImageReduced62);
			GrayClosingRect(ho_ImageReduced62, &ho_ImageClosing53, 30, 100);
			SubImage(ho_ImageReduced62, ho_ImageClosing53, &ho_ImageSub32, 1, 128);
			Threshold(ho_ImageSub32, &ho_Region71, 0, 30);

			Intersection((hv_dd.TupleGetDictTuple("AG")).TupleGetDictObject("region"),
				ho_Region71, &ho_RegionIntersection2);
			ClosingCircle(ho_RegionIntersection2, &ho_RegionClosing5, 3);
			Connection(ho_RegionClosing5, &ho_ConnectedRegions10);
			SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions8, (HTuple("area").Append("width")),
				"and", (HTuple(100).Append(1)), (HTuple(99999).Append(1500)));
			SelectShape(ho_SelectedRegions8, &ho_SelectedRegions20, (HTuple("phi").Append("circularity")),
				"and", HTuple(HTuple(-10).TupleRad()).TupleConcat(0), HTuple(HTuple(10).TupleRad()).TupleConcat(0.1));
			SelectShape(ho_SelectedRegions8, &ho_SelectedRegions3, (HTuple("phi").Append("circularity")),
				"and", HTuple(HTuple(-90).TupleRad()).TupleConcat(0.0000000000001), HTuple(HTuple(-40).TupleRad()).TupleConcat(0.15));
			SelectShape(ho_SelectedRegions8, &ho_SelectedRegions4, (HTuple("phi").Append("circularity")),
				"and", HTuple(HTuple(40).TupleRad()).TupleConcat(0.0000000000001), HTuple(HTuple(90).TupleRad()).TupleConcat(0.15));
			Union2(ho_SelectedRegions3, ho_SelectedRegions4, &ho_RegionUnion);
			Difference(ho_SelectedRegions8, ho_RegionUnion, &ho_RegionDifference2);
			Difference(ho_RegionDifference2, ho_SelectedRegions20, &ho_RegionDifference2
				);
			SelectGray(ho_RegionDifference2, ho_Image, &ho_SelectedRegions135, "mean",
				"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions135, &ho_SelectedRegions135, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions135, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions135, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//**检测圆环过铣
		if (0 != (int((hv_GenParamValue.TupleFind("YH")) >= 0)))
		{
			hv_scale.Clear();
			hv_scale[0] = 1.5;
			hv_scale[1] = -30;
			hv_sub = 5;
			hv_dilation = 18;
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 35;
			hv_ss.Clear();
			hv_ss[0] = "area";
			hv_ss[1] = "circularity";
			hv_ssmin.Clear();
			hv_ssmin[0] = 300;
			hv_ssmin[1] = 0.75;
			hv_ssmax.Clear();
			hv_ssmax[0] = 1800;
			hv_ssmax[1] = 1;

			GetDictParam(hv_dd.TupleGetDictTuple("YH"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("scale")) >= 0)))
			{
				hv_scale = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("scale");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sub")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("sub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("dilation")) >= 0)))
			{
				hv_dilation = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("dilation");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("s_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val928 = (((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val928 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val928, step_val928); hv_Index += step_val928)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			//检测过铣
			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("YH")).TupleGetDictObject("region"),
				&ho_ImageReduced36);
			MedianRect(ho_ImageReduced36, &ho_ImageMedian35, 3, 3);
			GrayOpeningRect(ho_ImageMedian35, &ho_ImageOpening14, 5, 5);

			GrayOpeningRect(ho_ImageOpening14, &ho_ImageOpening10, 45, 45);

			ScaleImage(ho_ImageOpening10, &ho_ImageScaled24, HTuple(hv_scale[0]), HTuple(hv_scale[1]));
			Threshold(ho_ImageScaled24, &ho_Region32, 0, 20);

			SubImage(ho_ImageOpening10, ho_ImageOpening14, &ho_ImageSub12, hv_sub, 128);
			Threshold(ho_ImageSub12, &ho_Region31, 0, 35);
			Intersection(ho_Region31, ho_Region32, &ho_Region31);
			FillUpShape(ho_Region31, &ho_RegionFillUp11, "area", 1, 100);
			Connection(ho_RegionFillUp11, &ho_ConnectedRegions28);
			ClosingCircle(ho_ConnectedRegions28, &ho_RegionClosing15, 65);

			SelectShape(ho_RegionClosing15, &ho_SelectedRegions44, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			OpeningCircle(ho_SelectedRegions44, &ho_RegionOpening21, 10);
			ShapeTrans(ho_RegionOpening21, &ho_RegionTrans43, "outer_circle");
			DilationCircle(ho_RegionTrans43, &ho_RegionDilation68, hv_dilation);
			DilationCircle(ho_RegionDilation68, &ho_RegionDilation69, 2);
			Difference(ho_RegionDilation69, ho_RegionDilation68, &ho_RegionDifference48
				);
			SelectGray(ho_RegionDifference48, ho_Image, &ho_SelectedRegions71, "mean",
				"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions71, &ho_SelectedRegions71, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("78"), ho_SelectedRegions71, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "78");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions71, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//**检测塑胶漏铣
		if (0 != (int((hv_GenParamValue.TupleFind("SJLC")) >= 0)))
		{
			DilationCircle((hv_dd.TupleGetDictTuple("SJLC")).TupleGetDictObject("region"),
				&ho_RegionDilation12, 15);
			ReduceDomain(ho_Image, ho_RegionDilation12, &ho_ImageReduced11);

			GetImageSize(ho_ImageReduced11, &hv_Width2, &hv_Height2);
			GenHighpass(&ho_ImageHighpass, 0.05, "none", "rft", hv_Width2, hv_Height2);
			RftGeneric(ho_ImageReduced11, &ho_ImageFFT, "to_freq", "none", "complex", hv_Width2);

			ConvolFft(ho_ImageFFT, ho_ImageHighpass, &ho_ImageConvol);
			RftGeneric(ho_ImageConvol, &ho_ImageFFT1, "from_freq", "n", "byte", hv_Width2);
			ScaleImage(ho_ImageFFT1, &ho_ImageScaled25, 6, -50);
			Threshold(ho_ImageScaled25, &ho_Region59, 100, 255);
			RankRegion(ho_Region59, &ho_RegionCount10, 40, 40, 50);
			ErosionCircle((hv_dd.TupleGetDictTuple("SJLC")).TupleGetDictObject("region"),
				&ho_RegionErosion4, 35);
			Intersection(ho_RegionCount10, ho_RegionErosion4, &ho_RegionIntersection15);

			FillUpShape(ho_RegionIntersection15, &ho_RegionFillUp5, "area", 1, 1000);
			Connection(ho_RegionFillUp5, &ho_ConnectedRegions13);
			SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions12, "area", "and", 3000,
				9999999);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions12, &ho_SelectedRegions12, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("75"), ho_SelectedRegions12, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "75");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions12, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测侧拍基准面(暗)
		if (0 != (int((hv_GenParamValue.TupleFind("CGZB")) >= 0)))
		{
			//检测上部区域移动距离
			hv_sm = 30;
			hv_ssub = 1;
			hv_sss.Clear();
			hv_sss[0] = "area";
			hv_sss[1] = "inner_radius";
			hv_sssmin.Clear();
			hv_sssmin[0] = 10;
			hv_sssmin[1] = 1.5;
			hv_sssmax.Clear();
			hv_sssmax[0] = 99999;
			hv_sssmax[1] = 99;
			hv_ss_g.Clear();
			hv_ss_g[0] = 200;
			hv_ss_g[1] = 255;
			//下部
			hv_xm = 120;
			hv_xsub = 1.5;
			hv_xss.Clear();
			hv_xss[0] = "area";
			hv_xss[1] = "inner_radius";
			hv_xssmin.Clear();
			hv_xssmin[0] = 150;
			hv_xssmin[1] = 4;
			hv_xssmax.Clear();
			hv_xssmax[0] = 99999;
			hv_xssmax[1] = 999;
			hv_xs_g.Clear();
			hv_xs_g[0] = 240;
			hv_xs_g[1] = 235;

			GetDictParam(hv_dd.TupleGetDictTuple("CGZB"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("sm")) >= 0)))
			{
				hv_sm = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sm");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssub")) >= 0)))
			{
				hv_ssub = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("ssub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sssname")) >= 0)))
			{
				{
					HTuple end_val1025 = (((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname")).TupleLength()) - 1;
					HTuple step_val1025 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1025, step_val1025); hv_Index += step_val1025)
					{
						if (0 != (int((hv_sss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname"))[hv_Index]))) >= 0)))
						{
							hv_sssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmin"))[hv_Index]);
							hv_sssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmax"))[hv_Index]);
						}
						else
						{
							hv_sss = hv_sss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname"))[hv_Index]));
							hv_sssmin = hv_sssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmin"))[hv_Index]));
							hv_sssmax = hv_sssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmax"))[hv_Index]));
						}
					}
				}
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ss_g")) >= 0)))
			{
				hv_ss_g = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("ss_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xm")) >= 0)))
			{
				hv_xm = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xm");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xsub")) >= 0)))
			{
				hv_xsub = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xsub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xssname")) >= 0)))
			{
				{
					HTuple end_val1046 = (((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname")).TupleLength()) - 1;
					HTuple step_val1046 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1046, step_val1046); hv_Index += step_val1046)
					{
						if (0 != (int((hv_xss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname"))[hv_Index]))) >= 0)))
						{
							hv_xssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmin"))[hv_Index]);
							hv_xssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmax"))[hv_Index]);
						}
						else
						{
							hv_xss = hv_xss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname"))[hv_Index]));
							hv_xssmin.Clear();
							hv_xssmin.Append(hv_ssmin);
							hv_xssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmin"))[hv_Index]));
							hv_xssmax.Clear();
							hv_xssmax.Append(hv_ssmax);
							hv_xssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmax"))[hv_Index]));
						}
					}
				}
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xs_g")) >= 0)))
			{
				hv_xs_g = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xs_g");
			}

			MoveRegion((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictObject("region"),
				&ho_RegionMoved74, hv_sm, 0);
			//检测上部
			Difference((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictObject("region"),
				ho_RegionMoved74, &ho_RegionDifference41);
			DilationCircle(ho_RegionDifference41, &ho_RegionDilation65, 3);
			ReduceDomain(ho_Image, ho_RegionDilation65, &ho_ImageReduced59);

			GrayClosingRect(ho_ImageReduced59, &ho_ImageClosing24, 1, 15);
			GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening17, 1, 30);
			SubImage(ho_ImageOpening17, ho_ImageClosing24, &ho_ImageSub29, hv_ssub, 128);
			Threshold(ho_ImageSub29, &ho_Region64, 0, 30);
			Connection(ho_Region64, &ho_ConnectedRegions72);
			SelectShape(ho_ConnectedRegions72, &ho_SelectedRegions17, hv_sss, "and", hv_sssmin,
				hv_sssmax);
			SelectGray(ho_SelectedRegions17, ho_Image, &ho_SelectedRegions80, "mean", "and",
				HTuple(hv_ss_g[0]), HTuple(hv_ss_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions80, &ho_SelectedRegions80, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions80, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions80, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//检测下部
			MoveRegion(ho_RegionMoved74, &ho_RegionMoved75, hv_xm, 0);
			Difference(ho_RegionMoved74, ho_RegionMoved75, &ho_RegionDifference42);
			ReduceDomain(ho_Image, ho_RegionDifference42, &ho_ImageReduced60);
			MedianRect(ho_ImageReduced60, &ho_ImageMedian29, 5, 5);
			GrayClosingRect(ho_ImageMedian29, &ho_ImageClosing48, 1, 10);
			GrayOpeningRect(ho_ImageClosing48, &ho_ImageOpening23, 3, 80);
			SubImage(ho_ImageOpening23, ho_ImageClosing48, &ho_ImageSub30, hv_xsub, 128);
			Threshold(ho_ImageSub30, &ho_Region65, 0, 30);
			Connection(ho_Region65, &ho_ConnectedRegions73);
			SelectShape(ho_ConnectedRegions73, &ho_SelectedRegions68, hv_xss, "and", hv_xssmin,
				hv_xssmax);
			SelectGray(ho_SelectedRegions68, ho_Image, &ho_SelectedRegions28, "mean", "and",
				HTuple(hv_xs_g[0]), HTuple(hv_xs_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions28, &ho_SelectedRegions28, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions28, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions28, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测侧拍基准面(亮)
		if (0 != (int((hv_GenParamValue.TupleFind("CGZL")) >= 0)))
		{
			hv_m0 = 160;
			hv_m1 = -50;
			hv_sub = 1.5;
			hv_ss = "area";
			hv_ssmin = 150;
			hv_ssmax = 999999;
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 150;
			GetDictParam(hv_dd.TupleGetDictTuple("CGZL"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("m0")) >= 0)))
			{
				hv_m0 = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("m0");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("m1")) >= 0)))
			{
				hv_m1 = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("m1");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sub")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("sub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("s_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val1124 = (((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val1124 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1124, step_val1124); hv_Index += step_val1124)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			MoveRegion((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictObject("region"),
				&ho_RegionMoved72, hv_m0, 0);
			MoveRegion(ho_RegionMoved72, &ho_RegionMoved99, hv_m1, 0);

			Difference(ho_RegionMoved99, ho_RegionMoved72, &ho_RegionDifference40);
			DilationCircle(ho_RegionDifference40, &ho_RegionDilation14, 5);
			ReduceDomain(ho_Image, ho_RegionDilation14, &ho_ImageReduced54);
			MedianRect(ho_ImageReduced54, &ho_ImageMedian27, 5, 5);
			GrayClosingRect(ho_ImageMedian27, &ho_ImageClosing12, 1, 40);
			SubImage(ho_ImageMedian27, ho_ImageClosing12, &ho_ImageSub7, hv_sub, 128);
			Threshold(ho_ImageSub7, &ho_Region15, 0, 60);
			Intersection(ho_Region15, ho_RegionDifference40, &ho_Region15);
			Connection(ho_Region15, &ho_ConnectedRegions14);
			SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions13, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			SelectGray(ho_SelectedRegions13, ho_Image, &ho_SelectedRegions77, "mean", "and",
				HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions77, &ho_SelectedRegions77, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions77, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions77, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测亮LC
		if (0 != (int((hv_GenParamValue.TupleFind("LLC")) >= 0)))
		{
			hv_sub = 1;
			hv_ss = "area";
			hv_ssmin = 150;
			hv_ssmax = 999999;

			GetDictParam(hv_dd.TupleGetDictTuple("LLC"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val1167 = (((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val1167 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1167, step_val1167); hv_Index += step_val1167)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("LLC")).TupleGetDictObject("region"),
				&ho_ImageReduced);
			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 100, 100);
			SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, hv_sub, 128);
			Threshold(ho_ImageSub, &ho_Region, 0, 30);
			Connection(ho_Region, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions2, &ho_SelectedRegions2, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("80"), ho_SelectedRegions2, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "80");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions2, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		return 1;

	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "DefectDetectionAlgorithms error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84GrayLumenDefects1Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple hv_AlgorithmConfig,
	HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Rectangle3, ho_Reg, ho_e, ho_ROI_0;
	HObject  ho_ROI_1, ho_ImageAffineTrans, ho_ImageReduced57;
	HObject  ho_ImageClosing51, ho_ImageClosing50, ho_ImageSub42;
	HObject  ho_Region72, ho_RegionOpening9, ho_RegionTrans35;
	HObject  ho_RegionMoved51, ho_RegionDifference46, ho_ConnectedRegions74;
	HObject  ho_SelectedRegions77, ho_RegionUnion19, ho_RegionErosion20;
	HObject  ho_ImageReduced43, ho_ImageClosing36, ho_Region49;
	HObject  ho_ConnectedRegions59, ho_SortedRegions2, ho_ObjectSelected1;
	HObject  ho_ImageReduced50, ho_ImageClosing40, ho_ImageOpening21;
	HObject  ho_ImageSub23, ho_Region55, ho_ConnectedRegions65;
	HObject  ho_SelectedRegions61, ho_SortedRegions, ho_RegionTrans;
	HObject  ho_ImageReduced4, ho_ImageOpening, ho_ImageClosing5;
	HObject  ho_ImageClosing7, ho_ImageSub5, ho_Region5, ho_ConnectedRegions8;
	HObject  ho_SelectedRegions4, ho_RegionUnion4, ho_RegionDilation5;
	HObject  ho_RegionMoved7, ho_RegionDifference6, ho_RegionMoved8;
	HObject  ho_RegionOpening1, ho_Region95, ho_RegionClosing23;
	HObject  ho_ConnectedRegions121, ho_RegionTrans48, ho_ConnectedRegions92;
	HObject  ho_ObjectSelected, ho_RegionMoved52, ho_RegionDifference53;
	HObject  ho_ConnectedRegions61, ho_ImageReduced79, ho_ImageResult18;
	HObject  ho_RegionDynThresh10, ho_RegionOpening36, ho_RegionClosing30;
	HObject  ho_ConnectedRegions120, ho_SelectedRegions126, ho_SelectedRegions127;
	HObject  ho_RegionDilation29, ho_RegionDifference59, ho_ImageReduced84;
	HObject  ho_ImageResult14, ho_RegionDynThresh6, ho_ConnectedRegions99;
	HObject  ho_SelectedRegions104, ho_RegionErosion24, ho_SelectedRegions106;
	HObject  ho_RegionMoved55, ho_ImageReduced65, ho_Region97;
	HObject  ho_RegionDifference58, ho_RegionOpening25, ho_Region98;
	HObject  ho_ConnectedRegions95, ho_SelectedRegions98, ho_SelectedRegions100;
	HObject  ho_t1, ho_Region99, ho_RegionFillUp16, ho_ConnectedRegions96;
	HObject  ho_SelectedRegions101, ho_RegionUnion22, ho_RegionTrans46;
	HObject  ho_t2, ho_RegionUnion23, ho_RegionUnion24, ho_RegionTrans47;
	HObject  ho_RegSujiao, ho_ImageReduced80, ho_ImageResult11;
	HObject  ho_ImageMax, ho_RegionDynThresh4, ho_ConnectedRegions97;
	HObject  ho_SelectedRegions102, ho_ImageClosing70, ho_RegionDynThresh;
	HObject  ho_ConnectedRegions93, ho_SelectedRegions97, ho_Region107;
	HObject  ho_ConnectedRegions108, ho_SelectedRegions119, ho_Rectangle5;
	HObject  ho_ImageReduced89, ho_ImageMedian1, ho_ImageMedian2;
	HObject  ho_RegionL, ho_ConnectedRegions112, ho_RegionDynThresh9;
	HObject  ho_ConnectedRegions111, ho_SelectedRegions120, ho_Rectangle6;
	HObject  ho_ImageReduced95, ho_ImageResult19, ho_ImageClosing9;
	HObject  ho_Region112, ho_ConnectedRegions122, ho_SelectedRegions128;
	HObject  ho_RegionClosing31, ho_RegionDifference67, ho_ConnectedRegions123;
	HObject  ho_SelectedRegions129, ho_SelectedRegions130, ho_ImageReduced51;
	HObject  ho_ImageOpening48, ho_ImageClosing41, ho_ImageSub36;
	HObject  ho_Region65, ho_RegionClosing18, ho_RegionOpening19;
	HObject  ho_ConnectedRegions68, ho_SelectedRegions67, ho_RegionUnion6;
	HObject  ho_RegionTrans26, ho_RegionMoved43, ho_RegionDifference40;
	HObject  ho_RegionErosion18, ho_RegionTrans27, ho_RegionDilation39;
	HObject  ho_RegionMoved44, ho_Region123, ho_RegionClosing39;
	HObject  ho_ConnectedRegions142, ho_SelectedRegions152, ho_RegionOpening46;
	HObject  ho_ConnectedRegions143, ho_SelectedRegions153, ho_Rectangle12;
	HObject  ho_ImageReduced110, ho_ImageResult21, ho_RegionDynThresh17;
	HObject  ho_RegionDifference65, ho_ImageReduced6, ho_Region9;
	HObject  ho_ConnectedRegions12, ho_SelectedRegions10, ho_Region100;
	HObject  ho_RegionDilation31, ho_ImageReduced36, ho_ImageMedian15;
	HObject  ho_ImageTexture8, ho_ImageTexture9, ho_ImageResult4;
	HObject  ho_Region47, ho_RegionCount13, ho_RegionFillUp8;
	HObject  ho_ConnectedRegions48, ho_SelectedRegions15, ho_RegionClosing13;
	HObject  ho_RegionOpening14, ho_RegionDifference33, ho_ConnectedRegions49;
	HObject  ho_SelectedRegions51, ho_RegionDilation13, ho_ImageReduced16;
	HObject  ho_ImageTexture2, ho_ImageTexture3, ho_ImageResult1;
	HObject  ho_Region15, ho_RegionCount11, ho_RegionTrans13;
	HObject  ho_RegionMoved20, ho_RegionDifference22, ho_RegionOpening17;
	HObject  ho_RegionClosing6, ho_RegionOpening2, ho_RegionDifference21;
	HObject  ho_ConnectedRegions28, ho_SelectedRegions37, ho_RegionCount10;
	HObject  ho_RegionTrans4, ho_RegionMoved12, ho_RegionDifference9;
	HObject  ho_RegionTrans8, ho_RegionErosion6, ho_RegionErosion8;
	HObject  ho_RegionDilation14, ho_RegionMoved13, ho_RegionDifference13;
	HObject  ho_ConnectedRegions15, ho_SelectedRegions23, ho_Rectangle9;
	HObject  ho_ImageReduced19, ho_Region22, ho_RegionClosing33;
	HObject  ho_ConnectedRegions25, ho_SelectedRegions35, ho_ImageReduced46;
	HObject  ho_ImageClosing17, ho_RegionDynThresh12, ho_ConnectedRegions128;
	HObject  ho_SelectedRegions135, ho_RegionTrans16, ho_RegionMoved21;
	HObject  ho_RegionDilation22, ho_ImageReduced24, ho_ImageMedian9;
	HObject  ho_RegionErosion9, ho_ImageReduced25, ho_ImageTexture4;
	HObject  ho_ImageTexture5, ho_ImageResult2, ho_Region28;
	HObject  ho_RegionCount12, ho_ConnectedRegions29, ho_SelectedRegions38;
	HObject  ho_RegionUnion10, ho_RegionErosion14, ho_RegionTrans17;
	HObject  ho_RegionDifference23, ho_ConnectedRegions32, ho_SelectedRegions40;
	HObject  ho_Region45, ho_RegionOpening23, ho_RegionClosing25;
	HObject  ho_RegionFillUp14, ho_RegionTrans43, ho_RegionDifference56;
	HObject  ho_ConnectedRegions47, ho_SelectedRegions14, ho_ImageReduced35;
	HObject  ho_Region48, ho_RegionDilation30, ho_RegionDilation32;
	HObject  ho_RegionDifference61, ho_RegionClipped, ho_ConnectedRegions104;
	HObject  ho_SelectedRegions111, ho_ImageReduced86, ho_ImageResult17;
	HObject  ho_RegionDynThresh8, ho_ConnectedRegions105, ho_SelectedRegions112;
	HObject  ho_RegionDilation33, ho_SelectedRegions113, ho_RegionTrans44;
	HObject  ho_RegionMoved37, ho_RegionDifference57, ho_RegionIntersection15;
	HObject  ho_ImageReduced38, ho_ImageMedian22, ho_DerivGauss;
	HObject  ho_TMP_Region, ho_ImageReduced92, ho_ImageOpening4;
	HObject  ho_RegionDynThresh2, ho_RegionOpening35, ho_ConnectedRegions117;
	HObject  ho_SelectedRegions124, ho_Region93, ho_ImageReduced77;
	HObject  ho_ImageOpening59, ho_RegionDynThresh1, ho_ConnectedRegions90;
	HObject  ho_SelectedRegions96, ho_ImageReduced34, ho_ImageClosing27;
	HObject  ho_ImageSub24, ho_Region44, ho_RegionClosing12;
	HObject  ho_RegionOpening8, ho_ConnectedRegions46, ho_SelectedRegions11;
	HObject  ho_RegionTrans28, ho_RegionMoved45, ho_RegionMoved36;
	HObject  ho_RegionErosion19, ho_RegionDilation42, ho_ImageReduced78;
	HObject  ho_Region94, ho_RegionClosing22, ho_ConnectedRegions91;
	HObject  ho_RegionTrans42, ho_ROI_def1, ho_Cross, ho_ROI_def2;
	HObject  ho_ImageReduced10, ho_ImageOpening5, ho_ImageClosing12;
	HObject  ho_ImageOpening32, ho_ImageSub8, ho_Region13, ho_RegionClosing11;
	HObject  ho_ConnectedRegions55, ho_SelectedRegions56, ho_RegionDifference4;
	HObject  ho_RegionErosion16, ho_RegionIntersection14, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions13, ho_ImageReduced61, ho_ImageMedian23;
	HObject  ho_ImageTexture14, ho_ImageTexture15, ho_ImageResult7;
	HObject  ho_RegionErosion22, ho_Region75, ho_RegionCount16;
	HObject  ho_ConnectedRegions76, ho_SelectedRegions81, ho_RegionDilation46;
	HObject  ho_ImageReduced55, ho_ImageClosing46, ho_Region70;
	HObject  ho_ConnectedRegions73, ho_SelectedRegions74, ho_RegionDilation43;
	HObject  ho_ImageReduced53, ho_ImageClosing43, ho_ImageSub38;
	HObject  ho_Region68, ho_ConnectedRegions71, ho_SelectedRegions71;
	HObject  ho_RegionDilation41, ho_ImageClosing42, ho_ImageOpening49;
	HObject  ho_ImageSub37, ho_Region67, ho_RegionIntersection17;
	HObject  ho_ConnectedRegions70, ho_SelectedRegions70, ho_ImageMedian26;
	HObject  ho_RegionErosion21, ho_ImageClosing52, ho_Region92;
	HObject  ho_ConnectedRegions94, ho_SelectedRegions94, ho_RegionDynThresh3;
	HObject  ho_ImageReduced39, ho_ImageOpening35, ho_ImageClosing34;
	HObject  ho_ImageOpening36, ho_ImageSub27, ho_Region50, ho_RegionFillUp11;
	HObject  ho_ConnectedRegions52, ho_SelectedRegions54, ho_RegionTrans2;
	HObject  ho_Ellipse, ho_RegionDilation40, ho_ImageReduced52;
	HObject  ho_ImageMedian20, ho_ImageTexture12, ho_ImageTexture13;
	HObject  ho_ImageResult6, ho_Region66, ho_RegionIntersection16;
	HObject  ho_RegionCount15, ho_ConnectedRegions69, ho_SelectedRegions68;
	HObject  ho_RegionMoved38, ho_RegionDilation38, ho_ImageReduced48;
	HObject  ho_ImageMedian19, ho_ImageOpening46, ho_ImageSub34;
	HObject  ho_Region61, ho_ConnectedRegions64, ho_SelectedRegions64;
	HObject  ho_RegionDilation37, ho_ImageReduced47, ho_ImageOpening44;
	HObject  ho_ImageOpening45, ho_ImageSub33, ho_Region60, ho_RegionClosing17;
	HObject  ho_ConnectedRegions63, ho_SelectedRegions63, ho_ImageReduced42;
	HObject  ho_ImageClosing35, ho_ImageOpening38, ho_ImageOpening39;
	HObject  ho_ImageSub30, ho_Region52, ho_ConnectedRegions56;
	HObject  ho_SelectedRegions57, ho_RegionDilation34, ho_ImageSub29;
	HObject  ho_Region53, ho_RegionDifference36, ho_ConnectedRegions57;
	HObject  ho_SelectedRegions58, ho_ImageReduced41, ho_ImageMedian16;
	HObject  ho_ImageOpening37, ho_ImageSub28, ho_Region51, ho_ConnectedRegions53;
	HObject  ho_SelectedRegions55, ho_ImageReduced29, ho_ImageMedian11;
	HObject  ho_ImageTexture6, ho_ImageTexture7, ho_ImageResult3;
	HObject  ho_Region38, ho_RegionErosion12, ho_RegionIntersection10;
	HObject  ho_RegionFillUp4, ho_RegionClosing9, ho_RegionFillUp5;
	HObject  ho_RegionClosing10, ho_RegionOpening3, ho_RegionDifference26;
	HObject  ho_RegionMoved32, ho_RegionMoved34, ho_RegionIntersection11;
	HObject  ho_ConnectedRegions38, ho_SelectedRegions45, ho_ImageReduced93;
	HObject  ho_Region110, ho_RegionClosing29, ho_ConnectedRegions118;
	HObject  ho_SelectedRegions123, ho_ImageReduced94, ho_Region111;
	HObject  ho_ConnectedRegions119, ho_SelectedRegions125, ho_ImageReduced49;
	HObject  ho_ImageMedian14, ho_ImageClosing29, ho_ImageSub16;
	HObject  ho_RegionDynThresh26, ho_ConnectedRegions233, ho_SelectedRegions69;
	HObject  ho_ImageTexture10, ho_ImageTexture11, ho_ImageResult5;
	HObject  ho_Region62, ho_RegionCount14, ho_ConnectedRegions66;
	HObject  ho_SelectedRegions65, ho_ROI_01, ho_ROI_02, ho_ImageZoomed1;
	HObject  ho_ImageReduced30, ho_ImageClosing25, ho_ImageOpening24;
	HObject  ho_ImageScaled8, ho_Region39, ho_RegionFillUp6;
	HObject  ho_RegionOpening5, ho_ConnectedRegions39, ho_SelectedRegions46;
	HObject  ho_RegionTrans20, ho_RegionErosion13, ho_RegionUnion11;
	HObject  ho_ImageReduced31, ho_ImageOpening29, ho_ImageScaled12;
	HObject  ho_ImageOpening31, ho_ImageSub22, ho_Region43, ho_ConnectedRegions42;
	HObject  ho_SelectedRegions48, ho_SelectedRegions49, ho_RegionMoved33;
	HObject  ho_RegionDifference28, ho_RegionDilation23, ho_RegionOpening11;
	HObject  ho_RegionUnion16, ho_RegionUnion17, ho_RegionDilation26;
	HObject  ho_RegionDilation28, ho_RegionOpening13, ho_RegionUnion18;
	HObject  ho_RegionDifference31, ho_ImageOpening26, ho_ImageSub20;
	HObject  ho_Region42, ho_RegionIntersection12, ho_ImageOpening27;
	HObject  ho_ImageSub21, ho_Region40, ho_RegionIntersection13;
	HObject  ho_RegionUnion14, ho_RegionUnion15, ho_RegionOpening10;
	HObject  ho_ConnectedRegions41, ho_SelectedRegions47, ho_ImageReduced26;
	HObject  ho_ImageOpening20, ho_ImageClosing24, ho_ImageMedian10;
	HObject  ho_ImageScaled7, ho_Region29, ho_RegionClosing7;
	HObject  ho_ConnectedRegions36, ho_SelectedRegions41, ho_RegionTrans18;
	HObject  ho_RegionMoved27, ho_RegionMoved28, ho_RegionDifference25;
	HObject  ho_RegionIntersection8, ho_RegionClosing14, ho_RegionErosion17;
	HObject  ho_ImageReduced44, ho_ImageScaled13, ho_Region54;
	HObject  ho_ConnectedRegions58, ho_SelectedRegions59, ho_RegionErosion10;
	HObject  ho_RegionTrans19, ho_ImageReduced28, ho_ImageOpening22;
	HObject  ho_ImageOpening23, ho_ImageSub19, ho_Region35, ho_RegionErosion11;
	HObject  ho_RegionMoved29, ho_RegionMoved35, ho_RegionDifference27;
	HObject  ho_RegionErosion15, ho_RegionMoved40, ho_RegionUnion13;
	HObject  ho_RegionIntersection9, ho_ConnectedRegions37, ho_SelectedRegions44;
	HObject  ho_RegionTrans3, ho_RegionMoved41, ho_RegionDifference37;
	HObject  ho_RegionTrans23, ho_RegionDilation35, ho_ImageReduced45;
	HObject  ho_ImageMedian17, ho_ImageOpening40, ho_ImageScaled14;
	HObject  ho_ImageMedian18, ho_Region56, ho_ImageSub31, ho_Region57;
	HObject  ho_RegionDifference38, ho_ConnectedRegions60, ho_SelectedRegions60;
	HObject  ho_Rectangle7, ho_ImageReduced96, ho_ImageOpening33;
	HObject  ho_RegionDynThresh11, ho_ConnectedRegions124, ho_SelectedRegions131;
	HObject  ho_RegionClosing4, ho_RegionMoved9, ho_RegionAffineTrans1;
	HObject  ho_RegionDilation9, ho_ROI_00, ho_RegionMoved57;
	HObject  ho_RegionAffineTrans11, ho_RegionDifference39, ho_ImageReduced68;
	HObject  ho_ImageClosing58, ho_Region82, ho_ConnectedRegions84;
	HObject  ho_SelectedRegions89, ho_DerivGauss1, ho_ImageScaleMax1;
	HObject  ho_ImageClosing30, ho_Lines, ho_SelectedContours;
	HObject  ho_Region96, ho_Region58, ho_RegionOpening22, ho_RegionClosing24;
	HObject  ho_ConnectedRegions75, ho_SelectedRegions62, ho_ImageReduced;
	HObject  ho_ImageClosing, ho_ImageSub, ho_Region1, ho_RegionCount2;
	HObject  ho_RegionCount3, ho_RegionFillUp, ho_ConnectedRegions;
	HObject  ho_SelectedRegions, ho_RegionUnion, ho_RegionDilation;
	HObject  ho_Region, ho_RegionCount, ho_RegionCount1, ho_ConnectedRegions7;
	HObject  ho_RegionDifference, ho_RegionDifference32, ho_ImageReduced3;
	HObject  ho_ImageOpening2, ho_ImageOpening3, ho_ImageMedian3;
	HObject  ho_ImageClosing3, ho_ImageSub2, ho_Region4, ho_ConnectedRegions2;
	HObject  ho_SelectedRegions3, ho_RegionDilation50, ho_ImageReduced60;
	HObject  ho_ImageClosing37, ho_ImageSub44, ho_Region74, ho_ConnectedRegions62;
	HObject  ho_SelectedRegions80, ho_RegionDilation15, ho_ImageReduced17;
	HObject  ho_ImageOpening10, ho_ImageClosing18, ho_ImageMedian4;
	HObject  ho_ImageScaled6, ho_Region20, ho_RegionClosing5;
	HObject  ho_ConnectedRegions16, ho_SelectedRegions24, ho_RegionTrans10;
	HObject  ho_RegionMoved14, ho_RegionMoved15, ho_RegionDifference8;
	HObject  ho_RegionDilation19, ho_ImageReduced18, ho_ImageRank;
	HObject  ho_ImageOpening47, ho_ImageSub35, ho_Region64, ho_RegionMoved141;
	HObject  ho_RegionMoved151, ho_RegionDifference81, ho_RegionIntersection161;
	HObject  ho_ConnectedRegions67, ho_SelectedRegions66, ho_ImageClosing19;
	HObject  ho_ImageSub14, ho_Region21, ho_RegionIntersection6;
	HObject  ho_ConnectedRegions23, ho_SelectedRegions25, ho_SelectedRegions26;
	HObject  ho_SelectedRegions31, ho_SelectedRegions32, ho_RegionUnion9;
	HObject  ho_ConnectedRegions24, ho_ImageReduced32, ho_ImageOpening12;
	HObject  ho_ImageClosing39, ho_ImageMedian24, ho_ImageScaled15;
	HObject  ho_Region36, ho_RegionFillUp10, ho_ConnectedRegions43;
	HObject  ho_SelectedRegions42, ho_Rectangle, ho_RegionMoved77;
	HObject  ho_RegionMoved78, ho_RegionDifference45, ho_RegionDilation10;
	HObject  ho_ImageReduced8, ho_ImageOpening25, ho_ImageClosing33;
	HObject  ho_ImageScaled11, ho_Region11, ho_ConnectedRegions9;
	HObject  ho_SelectedRegions79, ho_RegionTrans21, ho_RegionDilation51;
	HObject  ho_RegionMoved61, ho_RegionTrans22, ho_RegionDilation52;
	HObject  ho_ImageReduced33, ho_ImageOpening13, ho_ImageScaled16;
	HObject  ho_Region37, ho_RegionDifference29, ho_RegionDifference30;
	HObject  ho_ConnectedRegions44, ho_SelectedRegions43, ho_RegionMoved62;
	HObject  ho_RegionDifference48, ho_ImageReduced70, ho_Region120;
	HObject  ho_ConnectedRegions136, ho_SelectedRegions145, ho_ImageClosing60;
	HObject  ho_Region83, ho_RegionFillUp3, ho_RegionDifference10;
	HObject  ho_Region124, ho_ConnectedRegions144, ho_SelectedRegions154;
	HObject  ho_RegionClosing40, ho_RegionDifference68, ho_RegionErosion28;
	HObject  ho_ConnectedRegions145, ho_SelectedRegions155, ho_SelectedRegions156;
	HObject  ho_SelectedRegions157, ho_ImageReduced99, ho_Region115;
	HObject  ho_RegionOpening40, ho_ConnectedRegions127, ho_SelectedRegions134;
	HObject  ho_Rectangle1, ho_ImageReduced15, ho_Region19, ho_ConnectedRegions21;
	HObject  ho_SelectedRegions21, ho_RegionClosing32, ho_RegionDifference12;
	HObject  ho_ConnectedRegions22, ho_SelectedRegions22, ho_SelectedRegions33;
	HObject  ho_ImageReduced73, ho_ImageClosing64, ho_ImageScaled19;
	HObject  ho_Region88, ho_RegionOpening16, ho_RegionTrans38;
	HObject  ho_RegionMoved71, ho_RegionDifference54, ho_RegionOpening20;
	HObject  ho_RegionTrans39, ho_PolarTransImage, ho_ImageClosing65;
	HObject  ho_ImageScaled20, ho_Region89, ho_RegionClosing20;
	HObject  ho_RegionDilation63, ho_RegionMoved72, ho_RegionDifference55;
	HObject  ho_RegionTrans40, ho_RegionMoved69, ho_RegionDilation64;
	HObject  ho_ImageReduced75, ho_ImageOpening55, ho_ImageClosing66;
	HObject  ho_ImageMedian25, ho_ImageClosing67, ho_ImageSub54;
	HObject  ho_Region90, ho_RegionIntersection21, ho_ConnectedRegions87;
	HObject  ho_SelectedRegions92, ho_RegionZoom1, ho_XYTransRegion;
	HObject  ho_ConnectedRegions5, ho_SelectedRegions5, ho_ROI_0lc;
	HObject  ho_RegionMoved63, ho_RegionMoved631, ho_RegionUnion20;
	HObject  ho_ImageReduced83, ho_ImageResult12, ho_RegionDynThresh5;
	HObject  ho_ConnectedRegions98, ho_SelectedRegions103, ho_ImageReduced40;
	HObject  ho_ImageMedian42, ho_ImageScaled32, ho_Region59;
	HObject  ho_RegionFillUp9, ho_RegionOpening39, ho_RegionTrans32;
	HObject  ho_RegionMoved31, ho_RegionDifference44, ho_RegionTrans9;
	HObject  ho_RegionMoved103, ho_ImageReduced111, ho_ImageReduced14;
	HObject  ho_ImageClosing16, ho_ImageScaled5, ho_Region18;
	HObject  ho_ConnectedRegions20, ho_SelectedRegions20, ho_RegionTrans24;
	HObject  ho_RegionDilation53, ho_RegionTrans25, ho_RegionDifference19;
	HObject  ho_ImageReduced13, ho_ImageOpening7, ho_ImageClosing15;
	HObject  ho_ImageMedian12, ho_ImageScaled3, ho_Region17;
	HObject  ho_ConnectedRegions17, ho_SelectedRegions18, ho_RegionFillUp7;
	HObject  ho_RegionTrans5, ho_RegionMoved18, ho_RegionIntersection4;
	HObject  ho_RegionTrans6, ho_RegionDifference11, ho_RegionOpening4;
	HObject  ho_ConnectedRegions18, ho_SelectedRegions19, ho_ImageReduced7;
	HObject  ho_ImageClosing10, ho_ImageScaled, ho_Region10;
	HObject  ho_Region103, ho_ConnectedRegions103, ho_SelectedRegions108;
	HObject  ho_RegionClosing27, ho_RegionOpening28, ho_ROI_00L;
	HObject  ho_RegionMoved64, ho_RegionMoved641, ho_ImageReduced27;
	HObject  ho_ImageClosing26, ho_ImageSub13, ho_Region30, ho_RegionCount6;
	HObject  ho_RegionCount7, ho_ConnectedRegions35, ho_SelectedRegions34;
	HObject  ho_RegionDifference3, ho_ImageReduced81, ho_ImageReduced71;
	HObject  ho_ImageClosing61, ho_ImageScaled17, ho_Region84;
	HObject  ho_ImageSub51, ho_Region85, ho_RegionClosing15;
	HObject  ho_RegionOpening15, ho_RegionMoved66, ho_RegionDifference50;
	HObject  ho_RegionDilation58, ho_RegionMoved67, ho_RegionDifference51;
	HObject  ho_SelectedRegions2, ho_RegionDilation3, ho_RegionFillUp12;
	HObject  ho_Rectangle13, ho_ImageReduced113, ho_Region126;
	HObject  ho_ConnectedRegions148, ho_SelectedRegions160, ho_RegionTrans50;
	HObject  ho_RegionDifference69, ho_RegionOpening47, ho_ConnectedRegions149;
	HObject  ho_SelectedRegions161, ho_ImageReduced102, ho_Region116;
	HObject  ho_RegionOpening43, ho_ConnectedRegions146, ho_SelectedRegions158;
	HObject  ho_Rectangle10, ho_ImageReduced103, ho_ImageResult9;
	HObject  ho_RegionDynThresh13, ho_RegionClosing34, ho_ConnectedRegions131;
	HObject  ho_SelectedRegions138, ho_RegionDilation44, ho_RegionDifference41;
	HObject  ho_RegionDilation45, ho_ImageReduced54, ho_ImageClosing44;
	HObject  ho_ImageMedian21, ho_ImageClosing45, ho_ImageSub39;
	HObject  ho_Region69, ho_RegionIntersection18, ho_ConnectedRegions72;
	HObject  ho_SelectedRegions72, ho_SelectedRegions73, ho_ImageReduced112;
	HObject  ho_Region125, ho_ConnectedRegions147, ho_RegionFillUp20;
	HObject  ho_SelectedRegions159, ho_Rectangle2, ho_ImageClosing28;
	HObject  ho_ImageSub15, ho_Region33, ho_RegionCount8, ho_RegionCount9;
	HObject  ho_ConnectedRegions40, ho_SelectedRegions39, ho_RegionUnion12;
	HObject  ho_RegionErosion7, ho_ImageReduced74, ho_ImageClosing68;
	HObject  ho_ImageOpening56, ho_ImageOpening57, ho_ImageSub55;
	HObject  ho_Region91, ho_RegionFillUp13, ho_ConnectedRegions88;
	HObject  ho_SelectedRegions93, ho_ImageReduced104, ho_Region117;
	HObject  ho_RegionOpening44, ho_RegionFillUp19, ho_ConnectedRegions132;
	HObject  ho_SelectedRegions139, ho_ImageReduced88, ho_ROI_0L;
	HObject  ho_Region106, ho_RegionOpening31, ho_ConnectedRegions107;
	HObject  ho_RegionDifference64, ho_SelectedRegions118, ho_RegionDifference24;
	HObject  ho_RegionDilation60, ho_ImageReduced76, ho_ImageScaleMax;
	HObject  ho_ImageResult8, ho_Region73, ho_ConnectedRegions51;
	HObject  ho_RegionClosing21, ho_SelectedRegions95, ho_Region79;
	HObject  ho_RegionFillUp15, ho_ConnectedRegions89, ho_ObjectSelected2;
	HObject  ho_RegionTrans45, ho_RegionIntersection19, ho_RegionDifference7;
	HObject  ho_ImageTexture, ho_ImageTexture1, ho_ImageResult;
	HObject  ho_Region2, ho_RegionCount4, ho_RegionCount5, ho_RegionFillUp2;
	HObject  ho_RegionDilation1, ho_RegionDilation7, ho_RegionDifference5;
	HObject  ho_RegionDilation8, ho_ImageReduced1, ho_ImageZoomed;
	HObject  ho_ImageMedian6, ho_ImageClosing1, ho_ImageMedian7;
	HObject  ho_ImageClosing6, ho_ImageSub4, ho_Region8, ho_RegionZoom;
	HObject  ho_RegionIntersection1, ho_ConnectedRegions6, ho_SelectedRegions6;
	HObject  ho_ImageReduced105, ho_ImageScaled21, ho_Region118;
	HObject  ho_RegionClosing35, ho_ConnectedRegions133, ho_SelectedRegions140;
	HObject  ho_Rectangle11, ho_ImageReduced106, ho_ImageScaled22;
	HObject  ho_Region119, ho_ConnectedRegions134, ho_SelectedRegions141;
	HObject  ho_SelectedRegions142, ho_Region101, ho_ConnectedRegions101;
	HObject  ho_SelectedRegions107, ho_RegionClosing26, ho_RegionTmp;
	HObject  ho_RegionFillUp17, ho_RegionDifference60, ho_RegionCir;
	HObject  ho_ImageReduced85, ho_ImageResult15, ho_RegionDynThresh7;
	HObject  ho_RegionOpening26, ho_ConnectedRegions102, ho_SelectedRegions110;
	HObject  ho_SelectedRegions109, ho_RegionErosion26, ho_ImageReduced107;
	HObject  ho_ImageMedian5, ho_RegionDynThresh14, ho_ConnectedRegions135;
	HObject  ho_SelectedRegions143, ho_SelectedRegions144, ho_RegionDilation21;
	HObject  ho_ImageReduced22, ho_ImageOpening19, ho_ImageMedian8;
	HObject  ho_ImageClosing21, ho_ImageSub18, ho_Region23, ho_RegionIntersection7;
	HObject  ho_ConnectedRegions26, ho_SelectedRegions36, ho_RegionDifference14;
	HObject  ho_RegionDilation11, ho_ImageReduced12, ho_ImageClosing13;
	HObject  ho_ImageOpening6, ho_ImageClosing14, ho_ImageSub10;
	HObject  ho_Region14, ho_ConnectedRegions14, ho_SelectedRegions16;
	HObject  ho_RegionMoved58, ho_RegionDifference47, ho_ImageReduced69;
	HObject  ho_ImageClosing59, ho_ImageScaled4, ho_Region16;
	HObject  ho_ConnectedRegions19, ho_RegionDilation16, ho_RegionUnion3;
	HObject  ho_RegionDifference15, ho_ImageReduced72, ho_ImageResult10;
	HObject  ho_ImageOpening34, ho_DerivGauss3, ho_ImageScaleMax3;
	HObject  ho_ImageResult13, ho_Region102, ho_RegionOpening27;
	HObject  ho_ConnectedRegions100, ho_SelectedRegions105, ho_ImageClosing62;
	HObject  ho_ImageClosing63, ho_ImageSub52, ho_Region86, ho_ConnectedRegions85;
	HObject  ho_SelectedRegions90, ho_RegionUnion21, ho_RegionTrans36;
	HObject  ho_RegionDilation59, ho_RegionMoved68, ho_ImageSub53;
	HObject  ho_Region87, ho_RegionClosing19, ho_RegionIntersection20;
	HObject  ho_ConnectedRegions86, ho_SelectedRegions91, ho_RegionMoved59;
	HObject  ho_RegionFillUp1, ho_ConnectedRegions45, ho_SelectedRegions50;
	HObject  ho_ImageReduced20, ho_ImageClosing22, ho_ImageScaled9;
	HObject  ho_Region24, ho_RegionOpening6, ho_RegionTrans11;
	HObject  ho_RegionMoved22, ho_RegionMoved23, ho_RegionDifference16;
	HObject  ho_RegionMoved24, ho_RegionDifference17, ho_RegionMoved25;
	HObject  ho_RegionDilation24, ho_RegionMoved65, ho_ImageReduced21;
	HObject  ho_ImageOpening9, ho_ImageClosing23, ho_ImageScaled10;
	HObject  ho_Region25, ho_RegionOpening7, ho_RegionTrans14;
	HObject  ho_ConnectedRegions30, ho_SelectedRegions30, ho_EmptyObject;
	HObject  ho_RegionUnion7, ho_RegionTrans15, ho_RegionDilation27;
	HObject  ho_RegionMoved30, ho_RegionOpening12, ho_ConnectedRegions31;
	HObject  ho_RegionTrans12, ho_RegionDilation25, ho_RegionMoved26;
	HObject  ho_ImageSub11, ho_Region26, ho_RegionDifference18;
	HObject  ho_ConnectedRegions27, ho_SelectedRegions27, ho_RegionUnion8;
	HObject  ho_ImageReduced101, ho_ConnectedRegions129, ho_SelectedRegions136;
	HObject  ho_RegionOpening41, ho_RegionOpening42, ho_RegionDifference20;
	HObject  ho_ConnectedRegions130, ho_SelectedRegions137, ho_ConnectedRegions10;
	HObject  ho_SelectedRegions7, ho_RegionDifferencet, ho_RegionOpening24;
	HObject  ho_ConnectedRegions81, ho_SelectedRegions78, ho_SelectedRegions86;
	HObject  ho_RegionTrans49, ho_Rectangle4, ho_ImageReduced82;
	HObject  ho_Region105, ho_ConnectedRegions109, ho_SelectedRegions116;
	HObject  ho_RegionFillUp18, ho_RegionClosing28, ho_RegionOpening29;
	HObject  ho_RegionDifference63, ho_ConnectedRegions110, ho_SelectedRegions87;
	HObject  ho_RegionOpening, ho_SelectedRegions85, ho_RegionMoved60;
	HObject  ho_ROI_001, ho_RegionDifference49, ho_RegionDifference34;
	HObject  ho_Region121, ho_RegionClosing36, ho_ConnectedRegions137;
	HObject  ho_SelectedRegions146, ho_RegionOpening45, ho_ConnectedRegions138;
	HObject  ho_SelectedRegions147, ho_ImageReduced108, ho_ImageClosing20;
	HObject  ho_RegionDynThresh15, ho_RegionClosing37, ho_ConnectedRegions139;
	HObject  ho_SelectedRegions148, ho_ImageReduced2, ho_ImageOpening14;
	HObject  ho_Region34, ho_ConnectedRegions4, ho_SelectedRegions17;
	HObject  ho_ImageSub12, ho_Region27, ho_RegionUnion1, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions12, ho_Region31, ho_RegionDifference1;
	HObject  ho_ConnectedRegions34, ho_SelectedRegions28, ho_SortedRegions4;
	HObject  ho_ObjectSelected5, ho_RegionDilation4, ho_ImageReduced11;
	HObject  ho_ImageOpening15, ho_ImageClosing4, ho_ImageOpening17;
	HObject  ho_Region6, ho_ConnectedRegions3, ho_SelectedRegions8;
	HObject  ho_ImageClosing2, ho_ImageSub1, ho_Region3, ho_ConnectedRegions1;
	HObject  ho_SelectedRegions1, ho_RegionDilation2, ho_RegionMoved5;
	HObject  ho_RegionUnion2, ho_RegionDilation12, ho_RegionDifference2;
	HObject  ho_RegionErosion, ho_ImageScaled2, ho_Region32;
	HObject  ho_RegionIntersection2, ho_RegionClosing1, ho_ImageReduced9;
	HObject  ho_ImageClosing11, ho_ImageScaled1, ho_Region12;
	HObject  ho_RegionTrans1, ho_ImageReduced37, ho_ImageClosing31;
	HObject  ho_ImageScaled18, ho_Region46, ho_RegionClosing8;
	HObject  ho_ConnectedRegions54, ho_SelectedRegions52, ho_RegionErosion4;
	HObject  ho_ImageOpening18, ho_ImageSub3, ho_Region41, ho_ConnectedRegions50;
	HObject  ho_ImageReduced121, ho_ImageOpening41, ho_ImageSub82;
	HObject  ho_Region153, ho_RegionClosing76, ho_ConnectedRegions213;
	HObject  ho_SelectedRegions220, ho_RegionTrans74, ho_RegionDilation145;
	HObject  ho_RegionDilation146, ho_RegionDifference151, ho_ConnectedRegions214;
	HObject  ho_SortedRegions15, ho_ObjectSelected13, ho_ImageReduced23;
	HObject  ho_ImageMedian13, ho_ImageOpening28, ho_ImageClosing55;
	HObject  ho_ImageSub114, ho_Region128, ho_ConnectedRegions189;
	HObject  ho_SelectedRegions199, ho_RegionUnion62, ho_RegionClosing69;
	HObject  ho_ConnectedRegions190, ho_SortedRegions11, ho_ObjectSelected7;
	HObject  ho_RegionTrans55, ho_ImageReduced132, ho_ImageOpening42;
	HObject  ho_ImageSub115, ho_Region159, ho_ConnectedRegions235;
	HObject  ho_SelectedRegions238, ho_RegionDilation118, ho_RegionTrans71;
	HObject  ho_RegionMoved39, ho_RegionDifference35, ho_RegionMoved117;
	HObject  ho_RegionDifference150, ho_RegionMoved118, ho_ImageReduced120;
	HObject  ho_ImageClosing74, ho_ImageSub81, ho_Region152;
	HObject  ho_RegionOpening96, ho_RegionTrans72, ho_RegionTrans73;
	HObject  ho_RegionDilation142, ho_RegionMoved119, ho_RegionOpening97;
	HObject  ho_RegionMoved120, ho_RegionDilation143, ho_RegionDilation144;
	HObject  ho_RegionUnion71, ho_RegionDilation119, ho_RegionUnion72;
	HObject  ho_RegionTrans56, ho_RegionMoved93, ho_RegionDifference152;
	HObject  ho_RegionDifference130, ho_RegionDifference131;
	HObject  ho_RegionDifference153, ho_RegionDilation147, ho_RegionDifference154;
	HObject  ho_RegionErosion3, ho_RegionClosing2, ho_RegionErosion1;
	HObject  ho_RegionMoved16, ho_ROI_0s, ho_RegionMoved46, ho_RegionTrans29;
	HObject  ho_RegionTrans30, ho_RegionMoved47, ho_RegionDifference42;
	HObject  ho_RegionTrans31, ho_RegionMoved48, ho_ImageReduced59;
	HObject  ho_SelectedRegions53, ho_ImageResult16, ho_RegionErosion25;
	HObject  ho_ImageReduced63, ho_ImageClosing53, ho_ImageSub46;
	HObject  ho_Region77, ho_ConnectedRegions78, ho_SelectedRegions83;
	HObject  ho_RegionErosion23, ho_ImageReduced64, ho_ImageClosing54;
	HObject  ho_ImageSub47, ho_Region78, ho_ConnectedRegions79;
	HObject  ho_SelectedRegions84, ho_RegionClosing3, ho_RegionMoved6;
	HObject  ho_RegionErosion2, ho_ImageReduced66, ho_ImageClosing57;
	HObject  ho_ImageOpening52, ho_ImageOpening53, ho_ImageSub49;
	HObject  ho_Region80, ho_ConnectedRegions82, ho_RegionDilation57;
	HObject  ho_RegionMoved56, ho_ImageReduced67, ho_ImageOpening54;
	HObject  ho_ImageSub50, ho_Region81, ho_ConnectedRegions83;
	HObject  ho_SelectedRegions88, ho_ImageReduced100, ho_ImageMedian89;
	HObject  ho_ImageOpening30, ho_ImageSub117, ho_Region135;
	HObject  ho_ConnectedRegions186, ho_SelectedRegions196, ho_SelectedRegions29;
	HObject  ho_RegionMoved10, ho_Region122, ho_RegionClosing38;
	HObject  ho_ConnectedRegions140, ho_SelectedRegions149, ho_RegionTrans7;
	HObject  ho_RegionUnion26, ho_ImageReduced109, ho_RegionErosion27;
	HObject  ho_ImageResult20, ho_RegionDynThresh16, ho_ConnectedRegions141;
	HObject  ho_SelectedRegions150, ho_SelectedRegions151, ho_ImageReduced5;
	HObject  ho_ImageOpening1, ho_ImageMedian, ho_ImageClosing8;
	HObject  ho_ImageSub6, ho_Region7, ho_ConnectedRegions11;
	HObject  ho_SelectedRegions9, ho_ImageReduced58, ho_ImageClosing47;
	HObject  ho_ImageScaled28, ho_Region63, ho_RegionClosing16;
	HObject  ho_RegionOpening18, ho_RegionTrans34, ho_RegionMoved;
	HObject  ho_RegionIntersection, ho_RegionMoved1, ho_RegionIntersection3;
	HObject  ho_RegionErosion5, ho_RegionMoved42, ho_ImageReduced90;
	HObject  ho_Region108, ho_RegionOpening32, ho_ConnectedRegions113;
	HObject  ho_SelectedRegions99, ho_RegionLine, ho_ImageReduced91;
	HObject  ho_Region109, ho_ConnectedRegions115, ho_ObjectSelected3;
	HObject  ho_RegionOpening33, ho_ConnectedRegions114, ho_SelectedRegions121;
	HObject  ho_RegionOpening34, ho_RegionDifference66, ho_ConnectedRegions116;
	HObject  ho_SelectedRegions122, ho_RegionMoved2, ho_RegionMoved11;
	HObject  ho_ImageReduced97, ho_Region113, ho_ConnectedRegions125;
	HObject  ho_SelectedRegions132, ho_RegionOpening37, ho_Rectangle8;
	HObject  ho_ImageReduced98, ho_Region114, ho_RegionOpening38;
	HObject  ho_ConnectedRegions126, ho_SelectedRegions133, ho_RegionMoved3;
	HObject  ho_RegionMoved4, ho_RegionUnion25, ho_ImageReduced87;
	HObject  ho_Region104, ho_ConnectedRegions106, ho_SelectedRegions115;
	HObject  ho_RegionOpening30, ho_RegionDifference62, ho_SelectedRegions117;
	HObject  ho_RegionClosing, ho_ImageClosing48, ho_ImageSub40;
	HObject  ho_SelectedRegions75, ho_RegionUnion5, ho_RegionTrans33;
	HObject  ho_RegionMoved49, ho_RegionDifference43, ho_RegionMoved54;
	HObject  ho_RegionDilation54, ho_RegionDilation55, ho_ImageReduced62;
	HObject  ho_ImageClosing38, ho_ImageSub45, ho_Region76, ho_ConnectedRegions77;
	HObject  ho_SelectedRegions82, ho_RegionTrans37, ho_RegionTrans41;
	HObject  ho_RegionDifference52, ho_RegionOpening21, ho_ROI_def0;
	HObject  ho_RegionMoved50, ho_RegionDilation47, ho_ImageReduced56;
	HObject  ho_ImageClosing49, ho_ImageSub41, ho_Region71, ho_SelectedRegions76;
	HObject  ho_ConnectedRegions80, ho_ConnectedRegions167, ho_SelectedRegions114;
	HObject  ho_RegionUnion67, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_c, hv_Width4, hv_Height4, hv_Mean2;
	HTuple  hv_Deviation2, hv_zoom, hv_ac, hv_af, hv_S, hv_C;
	HTuple  hv_I, hv_GenParamValue, hv_GenParamValue1, hv_GenParamValue2;
	HTuple  hv_GenParamValue3, hv_GenParamValue4, hv_Index;
	HTuple  hv_g, hv_f, hv_at, hv_Number30, hv_Mean6, hv_Deviation6;
	HTuple  hv_dd, hv_Number17, hv_Number2, hv_Mean7, hv_Deviation8;
	HTuple  hv_Mean, hv_Deviation5, hv_rval, hv_Min, hv_Max;
	HTuple  hv_Range, hv_Mean10, hv_Deviation11, hv_Number21;
	HTuple  hv_Deviation, hv_Range1, hv_Row112, hv_Column112;
	HTuple  hv_Row212, hv_Column212, hv_Area6, hv_Row8, hv_Column8;
	HTuple  hv_Wval, hv_Number8, hv_Height3, hv_Width3, hv_Ratio2;
	HTuple  hv_UsedThreshold1, hv_Mean9, hv_Deviation10, hv_Number7;
	HTuple  hv_Mean3, hv_Deviation3, hv_Number10, hv_Row13;
	HTuple  hv_Column13, hv_Row23, hv_Column23, hv_MeasureHandle;
	HTuple  hv_RowEdge, hv_ColumnEdge1, hv_Amplitude, hv_Distance;
	HTuple  hv_disPP, hv_Number15, hv_Number26, hv_Number25;
	HTuple  hv_Row14, hv_Column14, hv_Row24, hv_Column24, hv_Number31;
	HTuple  hv_Number12, hv_Row11, hv_Column11, hv_Row21, hv_Column21;
	HTuple  hv_r, hv_Area4, hv_Row7, hv_Column7, hv_Number23;
	HTuple  hv_Number16, hv_Mean4, hv_Deviation4, hv_Number20;
	HTuple  hv_Number6, hv_Row12, hv_Column12, hv_Row22, hv_Column22;
	HTuple  hv_UsedThreshold, hv_Number19, hv_Number1, hv_Height2;
	HTuple  hv_Width2, hv_Ratio1, hv_Mean1, hv_Deviation1, hv_m;
	HTuple  hv_m1, hv_Number11, hv_Row6, hv_Column6, hv_d, hv_Row1;
	HTuple  hv_Column1, hv_Row2, hv_Column2, hv_Width1, hv_Height1;
	HTuple  hv_Row19, hv_Column19, hv_Row29, hv_Column29, hv_Area3;
	HTuple  hv_Mean5, hv_Deviation7, hv_Number4, hv_Area, hv_Row;
	HTuple  hv_Column, hv_Area1, hv_Row3, hv_Column3, hv_Height5;
	HTuple  hv_Width5, hv_Ratio3, hv_UsedThreshold3, hv_Row110;
	HTuple  hv_Column110, hv_Row210, hv_Column210, hv_Mean11;
	HTuple  hv_Deviation12, hv_ORVal, hv_RVal, hv_Number, hv_Number5;
	HTuple  hv_Row111, hv_Column111, hv_Row211, hv_Column211;
	HTuple  hv_Mean12, hv_Deviation13, hv_UsedThreshold2, hv_c1;
	HTuple  hv_Mean8, hv_Deviation9, hv_Area5, hv_R, hv_R1;
	HTuple  hv_C1, hv_Length, hv_ROW, hv_COL, hv_Row15, hv_Column15;
	HTuple  hv_Row25, hv_Column25, hv_Number33, hv_Height6;
	HTuple  hv_Width6, hv_Ratio4, hv_Number9, hv_Row16, hv_Column16;
	HTuple  hv_Row26, hv_Column26, hv_Number27, hv_Number28;
	HTuple  hv_Number3, hv_w, hv_Area2, hv_Row4, hv_Column4;
	HTuple  hv_Row5, hv_Column5, hv_Number14, hv_Number13, hv_Number24;
	HTuple  hv_Number52, hv_Height12, hv_Width12, hv_Ratio13;
	HTuple  hv_z, hv_Number32, hv_Number51, hv_Row17, hv_Column17;
	HTuple  hv_Row27, hv_Column27, hv_NumReg, hv_Index1, hv_inHval;
	HTuple  hv_Row18, hv_Column18, hv_Row28, hv_Column28, hv_Rval;
	HTuple  hv_Number18, hv_Height, hv_Width, hv_Ratio, hv_Number29;
	HTuple  hv_Index10, hv_Number22, hv_Number39, hv_Exception;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1, hv___Tmp_Ctrl_Dict_Init_2;
	HTuple  hv___Tmp_Ctrl_Dict_Init_3, hv___Tmp_Ctrl_Dict_Init_4;
	HTuple  hv___Tmp_Ctrl_Dict_Init_5, hv___Tmp_Ctrl_Dict_Init_6;
	HTuple  hv___Tmp_Ctrl_Dict_Init_7, hv___Tmp_Ctrl_Dict_Init_10;
	HTuple  hv___Tmp_Ctrl_Dict_Init_12, hv___Tmp_Ctrl_Dict_Init_13;
	HTuple  hv___Tmp_Ctrl_Dict_Init_14, hv___Tmp_Ctrl_Dict_Init_17;
	HTuple  hv___Tmp_Ctrl_Dict_Init_18, hv___Tmp_Ctrl_Dict_Init_19;
	HTuple  hv___Tmp_Ctrl_Dict_Init_22, hv___Tmp_Ctrl_Dict_Init_23;
	HTuple  hv___Tmp_Ctrl_Dict_Init_24, hv___Tmp_Ctrl_Dict_Init_27;
	HTuple  hv___Tmp_Ctrl_Dict_Init_29, hv___Tmp_Ctrl_Dict_Init_30;
	HTuple  hv___Tmp_Ctrl_Dict_Init_31, hv___Tmp_Ctrl_Dict_Init_35;
	HTuple  hv___Tmp_Ctrl_Dict_Init_37, hv___Tmp_Ctrl_Dict_Init_38;
	HTuple  hv___Tmp_Ctrl_Dict_Init_39, hv___Tmp_Ctrl_Dict_Init_42;
	HTuple  hv___Tmp_Ctrl_Dict_Init_43, hv___Tmp_Ctrl_Dict_Init_44;
	HTuple  hv___Tmp_Ctrl_Dict_Init_47, hv___Tmp_Ctrl_Dict_Init_48;
	HTuple  hv___Tmp_Ctrl_Dict_Init_49, hv___Tmp_Ctrl_Dict_Init_52;
	HTuple  hv___Tmp_Ctrl_Dict_Init_54, hv___Tmp_Ctrl_Dict_Init_55;
	HTuple  hv___Tmp_Ctrl_Dict_Init_56, hv___Tmp_Ctrl_Dict_Init_59;
	HTuple  hv___Tmp_Ctrl_Dict_Init_62, hv___Tmp_Ctrl_Dict_Init_64;
	HTuple  hv___Tmp_Ctrl_Dict_Init_66, hv___Tmp_Ctrl_Dict_Init_76;
	HTuple  hv___Tmp_Ctrl_Dict_Init_77, hv___Tmp_Ctrl_Dict_Init_78;
	HTuple  hv___Tmp_Ctrl_Dict_Init_79, hv___Tmp_Ctrl_Dict_Init_82;
	HTuple  hv___Tmp_Ctrl_Dict_Init_83, hv___Tmp_Ctrl_Dict_Init_84;
	HTuple  hv___Tmp_Ctrl_Dict_Init_85, hv___Tmp_Ctrl_Dict_Init_88;
	HTuple  hv___Tmp_Ctrl_Dict_Init_89, hv___Tmp_Ctrl_Dict_Init_90;
	HTuple  hv___Tmp_Ctrl_Dict_Init_92, hv___Tmp_Ctrl_Dict_Init_95;
	HTuple  hv___Tmp_Ctrl_Dict_Init_96, hv___Tmp_Ctrl_Dict_Init_97;
	HTuple  hv___Tmp_Ctrl_Dict_Init_98, hv___Tmp_Ctrl_Dict_Init_101;
	HTuple  hv___Tmp_Ctrl_Dict_Init_102, hv___Tmp_Ctrl_Dict_Init_103;
	HTuple  hv___Tmp_Ctrl_Dict_Init_106, hv___Tmp_Ctrl_Dict_Init_107;
	HTuple  hv___Tmp_Ctrl_Dict_Init_110, hv___Tmp_Ctrl_Dict_Init_111;
	HTuple  hv___Tmp_Ctrl_Dict_Init_113, hv___Tmp_Ctrl_Dict_Init_114;
	HTuple  hv___Tmp_Ctrl_Dict_Init_115, hv___Tmp_Ctrl_Dict_Init_118;
	HTuple  hv___Tmp_Ctrl_Dict_Init_119, hv___Tmp_Ctrl_Dict_Init_120;
	HTuple  hv___Tmp_Ctrl_Dict_Init_123, hv___Tmp_Ctrl_Dict_Init_124;
	HTuple  hv___Tmp_Ctrl_Dict_Init_125, hv___Tmp_Ctrl_Dict_Init_128;
	HTuple  hv___Tmp_Ctrl_Dict_Init_129, hv___Tmp_Ctrl_Dict_Init_130;
	HTuple  hv___Tmp_Ctrl_Dict_Init_133, hv___Tmp_Ctrl_Dict_Init_134;
	HTuple  hv___Tmp_Ctrl_Dict_Init_137, hv___Tmp_Ctrl_Dict_Init_138;
	HTuple  hv___Tmp_Ctrl_Dict_Init_139, hv___Tmp_Ctrl_Dict_Init_142;
	HTuple  hv___Tmp_Ctrl_Dict_Init_143, hv___Tmp_Ctrl_Dict_Init_144;
	HTuple  hv___Tmp_Ctrl_Dict_Init_147, hv___Tmp_Ctrl_Dict_Init_148;
	HTuple  hv___Tmp_Ctrl_Dict_Init_149, hv___Tmp_Ctrl_Dict_Init_151;
	HTuple  hv___Tmp_Ctrl_Dict_Init_154, hv___Tmp_Ctrl_Dict_Init_155;
	HTuple  hv___Tmp_Ctrl_Dict_Init_156, hv___Tmp_Ctrl_Dict_Init_158;
	HTuple  hv___Tmp_Ctrl_Dict_Init_161, hv___Tmp_Ctrl_Dict_Init_163;
	HTuple  hv___Tmp_Ctrl_Dict_Init_165, hv___Tmp_Ctrl_Dict_Init_166;
	HTuple  hv___Tmp_Ctrl_Dict_Init_167, hv___Tmp_Ctrl_Dict_Init_170;
	HTuple  hv___Tmp_Ctrl_Dict_Init_171, hv___Tmp_Ctrl_Dict_Init_172;
	HTuple  hv___Tmp_Ctrl_Dict_Init_173, hv___Tmp_Ctrl_Dict_Init_174;
	HTuple  hv___Tmp_Ctrl_Dict_Init_177, hv___Tmp_Ctrl_Dict_Init_178;
	HTuple  hv___Tmp_Ctrl_Dict_Init_179, hv___Tmp_Ctrl_Dict_Init_181;
	HTuple  hv___Tmp_Ctrl_Dict_Init_182, hv___Tmp_Ctrl_Dict_Init_183;
	HTuple  hv___Tmp_Ctrl_Dict_Init_184, hv___Tmp_Ctrl_Dict_Init_187;
	HTuple  hv___Tmp_Ctrl_Dict_Init_188, hv___Tmp_Ctrl_Dict_Init_189;
	HTuple  hv___Tmp_Ctrl_Dict_Init_191, hv___Tmp_Ctrl_Dict_Init_194;
	HTuple  hv___Tmp_Ctrl_Dict_Init_195, hv___Tmp_Ctrl_Dict_Init_196;
	HTuple  hv___Tmp_Ctrl_Dict_Init_198, hv___Tmp_Ctrl_Dict_Init_201;
	HTuple  hv___Tmp_Ctrl_Dict_Init_202, hv___Tmp_Ctrl_Dict_Init_203;
	HTuple  hv___Tmp_Ctrl_Dict_Init_205, hv___Tmp_Ctrl_Dict_Init_206;
	HTuple  hv___Tmp_Ctrl_Dict_Init_207, hv___Tmp_Ctrl_Dict_Init_210;
	HTuple  hv___Tmp_Ctrl_Dict_Init_211, hv___Tmp_Ctrl_Dict_Init_212;
	HTuple  hv___Tmp_Ctrl_Dict_Init_213, hv___Tmp_Ctrl_Dict_Init_214;
	HTuple  hv___Tmp_Ctrl_Dict_Init_215, hv___Tmp_Ctrl_Dict_Init_218;
	HTuple  hv___Tmp_Ctrl_Dict_Init_221, hv___Tmp_Ctrl_Dict_Init_224;
	HTuple  hv___Tmp_Ctrl_Dict_Init_227, hv___Tmp_Ctrl_Dict_Init_230;
	HTuple  hv___Tmp_Ctrl_Dict_Init_233, hv___Tmp_Ctrl_Dict_Init_236;
	HTuple  hv___Tmp_Ctrl_Dict_Init_238, hv___Tmp_Ctrl_Dict_Init_241;
	HTuple  hv___Tmp_Ctrl_Dict_Init_244, hv___Tmp_Ctrl_Dict_Init_247;
	HTuple  hv___Tmp_Ctrl_Dict_Init_249, hv___Tmp_Ctrl_Dict_Init_250;
	HTuple  hv___Tmp_Ctrl_Dict_Init_251, hv___Tmp_Ctrl_Dict_Init_253;
	HTuple  hv___Tmp_Ctrl_Dict_Init_256, hv___Tmp_Ctrl_Dict_Init_259;
	HTuple  hv___Tmp_Ctrl_Dict_Init_262, hv___Tmp_Ctrl_Dict_Init_265;
	HTuple  hv___Tmp_Ctrl_0, hv___Tmp_Ctrl_Type;

	try
	{
		//[71] := CRT过切
		//[72] := CRT碰伤
		//[73] := A基准塑胶缺口
		//[74] := A基准压伤
		//[75] := A基准塑胶露铣
		//[76] := A基准塑胶刀纹
		//[77] := RT塑胶压伤
		//[78] := CLC塑胶过切
		//[79] := CG塑胶压伤
		//[80] := CLC打磨痕
		//[81] := CLC过切
		//[82] := CLC划伤
		//[83] := 焊缝槽
		//[84] := CLC压伤
		//[85] := CLC缺口
		//[86] := 螺纹孔
		//[87] := 塑胶漏铁
		//[88] := 平面溢胶
		//[89] := 焊接变形
		//[90] := 猪鼻子
		//[91] := 内腔毛刺
		//[92] := SIM毛刺
		//[93] := 听筒孔毛刺
		//[94] := NQ毛刺
		//[95] := SF毛刺
		//[96] := 堵胶
		//[97] := 抓胶槽
		//[98] := 听筒孔断裂
		//[99] := 镭雕不全
		//[100] := 抓胶槽缺失
		//,..
		//[111] := SPK过切
		//[112] := 螺柱
		//[113] := 二维码过切
		//[114] := 塑胶崩胶
		//[115] := ZJCSJPQ
		//[116] := 卷边
		//[117] := 亮线
		//[118] := CLC毛刺
		//[119] := 少铣      //23.12.2add
		hv_c = 1;
		CreateDict(&(*hv_dt));
		GetImageSize(ho_Image, &hv_Width4, &hv_Height4);
		GenRectangle1(&ho_Rectangle3, 10, 10, hv_Height4 - 10, hv_Width4 - 10);
		Intensity(ho_Rectangle3, ho_Image, &hv_Mean2, &hv_Deviation2);
		if (0 != (int(hv_Mean2<10)))
		{
			hv_c = 0;
		}

		if (0 != hv_c)
		{
			hv_zoom = 1.01;
			//字典参数操作
			//读：1
			//写：-1
			//无操作：0
			hv_ac = 0;
			//
			hv_af = 1;

			hv_S = hv_StaNum + "";
			hv_C = hv_CamNum + "";
			hv_I = hv_ImageNum + "";
			if (0 != (int(hv_ac == -1)))
			{
				GetDictParam(hv_AlgorithmConfig, "keys", HTuple(), &hv_GenParamValue);
				if (0 != (int((hv_GenParamValue.TupleFind("Station"))<0)))
				{
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
					SetDictTuple(hv_AlgorithmConfig, "Station", hv___Tmp_Ctrl_Dict_Init_1);
					hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
				}
				GetDictParam(hv_AlgorithmConfig.TupleGetDictTuple("Station"), "keys", HTuple(),
					&hv_GenParamValue1);
				if (0 != (int((hv_GenParamValue1.TupleFind(hv_S))<0)))
				{
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
					SetDictTuple(hv_AlgorithmConfig.TupleGetDictTuple("Station"), hv_S, hv___Tmp_Ctrl_Dict_Init_2);
					hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
					SetDictTuple((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S),
						"Camera", hv___Tmp_Ctrl_Dict_Init_3);
					hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
				}
				GetDictParam(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
					"keys", HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind(hv_C))<0)))
				{
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
					SetDictTuple(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
						hv_C, hv___Tmp_Ctrl_Dict_Init_4);
					hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
					SetDictTuple((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C),
						"Image", hv___Tmp_Ctrl_Dict_Init_5);
					hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);
				}
				GetDictParam(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
					"keys", HTuple(), &hv_GenParamValue3);
				if (0 != (int((hv_GenParamValue3.TupleFind(hv_I))<0)))
				{
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
					SetDictTuple(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
						hv_I, hv___Tmp_Ctrl_Dict_Init_6);
					hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
				}
				GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"keys", HTuple(), &hv_GenParamValue4);
				if (0 != (int((hv_GenParamValue4.TupleFind("DefectDetectionAlgorithms"))<0)))
				{
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_7);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"DefectDetectionAlgorithms", hv___Tmp_Ctrl_Dict_Init_7);
					hv___Tmp_Ctrl_Dict_Init_7 = HTuple(HNULL);
				}

			}

			GenEmptyObj(&ho_Reg);
			GenEmptyRegion(&ho_e);
			//23.12.2 add zjy  108->109 添加一种缺陷名
			for (hv_Index = 71; hv_Index <= 109; hv_Index += 1)
			{
				hv_g = hv_Index;
				if (0 != (int(hv_g>100)))
				{
					hv_g += 10;
				}
				hv_f = hv_g + "";
				SetDictObject(ho_e, (*hv_dt), hv_f);
			}
			if (0 != (HTuple(int(hv_StaNum == 5)).TupleAnd(int(hv_CamNum == 1))))
			{
				if (0 != (int(hv_ImageNum == 1)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 2232.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1916.33, 2002.34, 2431.77, 2536.33);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2024).Append(2440)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", 1);
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测抓胶槽缺失
					//上
					GenRectangle1(&ho_ROI_0, 1388.64, 1484.91, 1557.03, 1806.97);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced57);
					GrayClosingRect(ho_ImageReduced57, &ho_ImageClosing51, 15, 50);
					GrayClosingRect(ho_ImageClosing51, &ho_ImageClosing50, 3, 200);
					SubImage(ho_ImageClosing51, ho_ImageClosing50, &ho_ImageSub42, 1, 128);
					Threshold(ho_ImageSub42, &ho_Region72, 0, 30);
					OpeningRectangle1(ho_Region72, &ho_RegionOpening9, 5, 5);
					ShapeTrans(ho_RegionOpening9, &ho_RegionTrans35, "rectangle1");
					MoveRegion(ho_RegionTrans35, &ho_RegionMoved51, 10, 0);
					Difference(ho_RegionOpening9, ho_RegionMoved51, &ho_RegionDifference46);
					Connection(ho_RegionDifference46, &ho_ConnectedRegions74);
					SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions77, "width", "and",
						50, 99999);
					CountObj(ho_SelectedRegions77, &hv_Number30);
					if (0 != hv_Number30)
					{
						Union1(ho_SelectedRegions77, &ho_RegionUnion19);
						ErosionRectangle1(ho_RegionUnion19, &ho_RegionErosion20, 40, 1);
						Intensity(ho_RegionErosion20, ho_ImageAffineTrans, &hv_Mean6, &hv_Deviation6);
						if (0 != (int(hv_Mean6<25)))
						{
							AffineTransRegion(ho_RegionErosion20, &ho_RegionErosion20, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("100"), ho_RegionErosion20, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "100");
						}
					}
					//左
					GenRectangle1(&ho_ROI_0, 2738.5, 86.2305, 3047.47, 264.83);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced57);
					GrayClosingRect(ho_ImageReduced57, &ho_ImageClosing51, 50, 15);
					GrayClosingRect(ho_ImageClosing51, &ho_ImageClosing50, 200, 3);
					SubImage(ho_ImageClosing51, ho_ImageClosing50, &ho_ImageSub42, 1, 128);
					Threshold(ho_ImageSub42, &ho_Region72, 0, 30);
					OpeningRectangle1(ho_Region72, &ho_RegionOpening9, 5, 5);
					ShapeTrans(ho_RegionOpening9, &ho_RegionTrans35, "rectangle1");
					MoveRegion(ho_RegionTrans35, &ho_RegionMoved51, 0, 10);
					Difference(ho_RegionTrans35, ho_RegionMoved51, &ho_RegionDifference46);
					Connection(ho_RegionDifference46, &ho_ConnectedRegions74);
					SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions77, "height", "and",
						50, 99999);
					CountObj(ho_SelectedRegions77, &hv_Number30);
					if (0 != hv_Number30)
					{
						Union1(ho_SelectedRegions77, &ho_RegionUnion19);
						ErosionRectangle1(ho_RegionUnion19, &ho_RegionErosion20, 1, 40);
						Intensity(ho_RegionErosion20, ho_ImageAffineTrans, &hv_Mean6, &hv_Deviation6);
						if (0 != (int(hv_Mean6<25)))
						{
							AffineTransRegion(ho_RegionErosion20, &ho_RegionErosion20, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							//concat_obj (dt.['100'], RegionErosion20, dt.['100'])
						}
					}
					//检测转角
					GenRectangle1(&ho_ROI_0, 1288.52, -70.0035, 2906.14, 1609.74);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_10);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_10);
					hv___Tmp_Ctrl_Dict_Init_10 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 1861.68, 1633.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_12);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_12);
						hv___Tmp_Ctrl_Dict_Init_12 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_13);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_13);
						hv___Tmp_Ctrl_Dict_Init_13 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_14);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_14);
						hv___Tmp_Ctrl_Dict_Init_14 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(170)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}
				}
				if (0 != (int(hv_ImageNum == 2)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1540.92, 61.0251, 2409.93, 930.006);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(1661).Append(766)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}
						//opening_circle (RegionDifference6, RegionOpening1, 1.5)

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_17);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_17);
						hv___Tmp_Ctrl_Dict_Init_17 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_18);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_18);
						hv___Tmp_Ctrl_Dict_Init_18 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_19);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_19);
						hv___Tmp_Ctrl_Dict_Init_19 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(170)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}
				}
				if (0 != (int(hv_ImageNum == 3)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1528.27, 3132.63, 2412.12, 4136.4);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2220).Append(3426)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_22);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_22);
						hv___Tmp_Ctrl_Dict_Init_22 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_23);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_23);
						hv___Tmp_Ctrl_Dict_Init_23 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_24);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_24);
						hv___Tmp_Ctrl_Dict_Init_24 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(170)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}

				}
				if (0 != (int(hv_ImageNum == 4)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1559.17, -19.6011, 2399.21, 853.518);
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2222).Append(626)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测转角
					GenRectangle1(&ho_ROI_0, 1315.58, 2462.37, 3111.96, 4135.88);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_27);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_27);
					hv___Tmp_Ctrl_Dict_Init_27 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 2100.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_29);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_29);
						hv___Tmp_Ctrl_Dict_Init_29 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_30);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_30);
						hv___Tmp_Ctrl_Dict_Init_30 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_31);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_31);
						hv___Tmp_Ctrl_Dict_Init_31 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(90)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					}
				}
				if (0 != (int(hv_ImageNum == 5)))
				{
					//11.4 add-zjy RT压伤
					Threshold(ho_Image, &ho_Region95, 180, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);

					Connection(ho_RegionClosing23, &ho_ConnectedRegions121);
					ShapeTrans(ho_ConnectedRegions121, &ho_RegionTrans48, "convex");

					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectObj(ho_ConnectedRegions92, &ho_ObjectSelected, 1);
					MoveRegion(ho_ObjectSelected, &ho_RegionMoved52, 15, 0);
					Difference(ho_ObjectSelected, ho_RegionMoved52, &ho_RegionDifference53);
					Connection(ho_RegionDifference53, &ho_ConnectedRegions61);
					SelectShapeStd(ho_ConnectedRegions61, &ho_ObjectSelected, "max_area", 70);

					ReduceDomain(ho_Image, ho_ObjectSelected, &ho_ImageReduced79);
					PaintRegion(ho_ObjectSelected, ho_ImageReduced79, &ho_ImageResult18, 250,
						"fill");
					DynThreshold(ho_ImageReduced79, ho_ImageResult18, &ho_RegionDynThresh10,
						140, "dark");
					OpeningCircle(ho_RegionDynThresh10, &ho_RegionOpening36, 5);
					ClosingCircle(ho_RegionOpening36, &ho_RegionClosing30, 9);
					Connection(ho_RegionClosing30, &ho_ConnectedRegions120);
					SelectShapeProto(ho_ConnectedRegions120, ho_RegionTrans48, &ho_SelectedRegions126,
						"overlaps_rel", 50, 100);
					SelectShape(ho_SelectedRegions126, &ho_SelectedRegions127, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(50).Append(7)), (HTuple(2999).Append(99)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions127, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");

				}
				//9.08 add-zjy
				if (0 != (int(hv_ImageNum == 6)))
				{

					Threshold(ho_Image, &ho_Region95, 220, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectShapeStd(ho_ConnectedRegions92, &ho_ObjectSelected, "max_area", 70);

					//9.11 add-zjy CRT划伤
					DilationCircle(ho_ObjectSelected, &ho_RegionDilation29, 55);
					Difference(ho_RegionDilation29, ho_ObjectSelected, &ho_RegionDifference59
						);
					ErosionCircle(ho_RegionDifference59, &ho_RegionDifference59, 3.5);
					ReduceDomain(ho_Image, ho_RegionDifference59, &ho_ImageReduced84);
					Intensity(ho_RegionDifference59, ho_ImageReduced84, &hv_Mean7, &hv_Deviation8);
					PaintRegion(ho_RegionDifference59, ho_ImageReduced84, &ho_ImageResult14,
						hv_Mean7, "fill");
					DynThreshold(ho_ImageReduced84, ho_ImageResult14, &ho_RegionDynThresh6,
						25, "light");
					Connection(ho_RegionDynThresh6, &ho_ConnectedRegions99);
					SelectShape(ho_ConnectedRegions99, &ho_SelectedRegions104, (HTuple("area").Append("row2")),
						"and", (HTuple(150).Append(0)), HTuple(2000).TupleConcat(hv_Height4 - 40));
					ErosionCircle(ho_RegionDifference59, &ho_RegionErosion24, 3.5);
					SelectShapeProto(ho_SelectedRegions104, ho_RegionErosion24, &ho_SelectedRegions106,
						"overlaps_rel", 97, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions106, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");


					MoveRegion(ho_ObjectSelected, &ho_RegionMoved55, 60, 0);
					ReduceDomain(ho_Image, ho_RegionMoved55, &ho_ImageReduced65);

					Threshold(ho_ImageReduced65, &ho_Region97, 240, 255);
					Difference(ho_ImageReduced65, ho_Region97, &ho_RegionDifference58);
					Intensity(ho_RegionDifference58, ho_ImageReduced65, &hv_Mean, &hv_Deviation5);
					if (0 != (int(hv_Mean>99)))
					{
						//亮
						//塑胶区域提取
						OpeningCircle(ho_RegionDifference58, &ho_RegionOpening25, 15);
						Connection(ho_RegionOpening25, &ho_RegionOpening25);
						SelectShapeStd(ho_RegionOpening25, &ho_RegionOpening25, "max_area", 70);

						Threshold(ho_ImageReduced65, &ho_Region98, 0, 80);
						OpeningCircle(ho_Region98, &ho_Region98, 5);
						Connection(ho_Region98, &ho_ConnectedRegions95);
						SelectShape(ho_ConnectedRegions95, &ho_SelectedRegions98, (HTuple("row2").Append("area")),
							"and", (hv_Height4 - 2).TupleConcat(5000), hv_Height4.TupleConcat(999999));
						SelectShapeStd(ho_SelectedRegions98, &ho_SelectedRegions100, "max_area",
							70);
						DilationCircle(ho_SelectedRegions100, &ho_t1, 95);
						MoveRegion(ho_t1, &ho_t1, 10, 20);

						Threshold(ho_ImageReduced65, &ho_Region99, 240, 255);
						FillUp(ho_Region99, &ho_RegionFillUp16);
						Connection(ho_RegionFillUp16, &ho_ConnectedRegions96);
						SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions101, (HTuple("roundness").Append("area")),
							"and", (HTuple(0.8).Append(5000)), (HTuple(1).Append(99999)));
						Union1(ho_SelectedRegions101, &ho_RegionUnion22);
						ShapeTrans(ho_RegionUnion22, &ho_RegionTrans46, "convex");
						DilationCircle(ho_RegionTrans46, &ho_t2, 75);
						Union2(ho_t1, ho_t2, &ho_RegionUnion23);

						Union2(ho_RegionUnion23, ho_SelectedRegions98, &ho_RegionUnion24);
						ShapeTrans(ho_RegionUnion24, &ho_RegionTrans47, "convex");

						Difference(ho_RegionOpening25, ho_RegionTrans47, &ho_RegSujiao);
						OpeningCircle(ho_RegSujiao, &ho_RegSujiao, 35);
						ReduceDomain(ho_ImageReduced65, ho_RegSujiao, &ho_ImageReduced80);
						//
						MultImage(ho_ImageReduced80, ho_ImageReduced80, &ho_ImageResult11, 0.04,
							0);
						GrayDilationRect(ho_ImageResult11, &ho_ImageMax, 55, 55);
						DynThreshold(ho_ImageResult11, ho_ImageMax, &ho_RegionDynThresh4, 50,
							"dark");
						Connection(ho_RegionDynThresh4, &ho_ConnectedRegions97);
						SelectShape(ho_ConnectedRegions97, &ho_SelectedRegions102, "area", "and",
							100, 999999);

						ConcatObj((*hv_dt).TupleGetDictObject("79"), ho_SelectedRegions102, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "79");
					}
					else
					{
						//暗

					}
				}
				//8.26 add-zjy
				if (0 != (int(hv_ImageNum == 8)))
				{
					//CRT碰伤
					Threshold(ho_Image, &ho_Region95, 220, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectObj(ho_ConnectedRegions92, &ho_ObjectSelected, 1);
					MoveRegion(ho_ObjectSelected, &ho_RegionMoved52, 15, 15);
					Difference(ho_ObjectSelected, ho_RegionMoved52, &ho_RegionDifference53);
					Connection(ho_RegionDifference53, &ho_ConnectedRegions61);
					SelectShapeStd(ho_ConnectedRegions61, &ho_ObjectSelected, "max_area", 70);

					ReduceDomain(ho_Image, ho_ObjectSelected, &ho_ImageReduced79);
					GrayClosingRect(ho_ImageReduced79, &ho_ImageClosing70, 3, 155);
					DynThreshold(ho_ImageReduced79, ho_ImageClosing70, &ho_RegionDynThresh,
						120, "dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions97, (((HTuple("area").Append("height")).Append("column")).Append("width")),
						"and", (((HTuple(150).Append(5)).Append(100)).Append(0)), (((HTuple(99999).Append(15)).Append(4096)).Append(100)));

					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions97, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");
				}
				//8.24 add-zjy
				if (0 != (int(hv_ImageNum == 9)))
				{
					//CRT碰伤
					Threshold(ho_Image, &ho_Region95, 220, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectObj(ho_ConnectedRegions92, &ho_ObjectSelected, 1);
					ReduceDomain(ho_Image, ho_ObjectSelected, &ho_ImageReduced79);
					GrayClosingRect(ho_ImageReduced79, &ho_ImageClosing70, 3, 155);
					DynThreshold(ho_ImageReduced79, ho_ImageClosing70, &ho_RegionDynThresh,
						40, "dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions97, ((HTuple("area").Append("height")).Append("column")),
						"and", ((HTuple(150).Append(5)).Append(0)), ((HTuple(99999).Append(100)).Append(2300)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions97, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");
					//stop ()
				}

				if (0 != (int(hv_ImageNum == 10)))
				{
					//9.25 add-zjy A基准塑胶绷胶
					Threshold(ho_Image, &ho_Region107, 200, 255);
					ClosingCircle(ho_Region107, &ho_Region107, 15);
					Connection(ho_Region107, &ho_ConnectedRegions108);
					SelectShapeStd(ho_ConnectedRegions108, &ho_SelectedRegions119, "max_area",
						70);
					RegionFeatures(ho_SelectedRegions119, "row1", &hv_rval);
					GenRectangle1(&ho_Rectangle5, hv_rval - 150, 0, hv_rval - 40, 500);

					ReduceDomain(ho_Image, ho_Rectangle5, &ho_ImageReduced89);
					MedianRect(ho_ImageReduced89, &ho_ImageMedian1, 45, 3);
					MedianRect(ho_ImageMedian1, &ho_ImageMedian2, 399, 3);
					MinMaxGray(ho_Rectangle5, ho_ImageMedian2, 20, &hv_Min, &hv_Max, &hv_Range);
					Threshold(ho_ImageMedian2, &ho_RegionL, hv_Max, 255);
					Connection(ho_RegionL, &ho_ConnectedRegions112);
					SelectShape(ho_ConnectedRegions112, &ho_RegionL, "row1", "and", hv_rval - 100,
						99999);
					DynThreshold(ho_ImageMedian1, ho_ImageMedian2, &ho_RegionDynThresh9, 10,
						"dark");
					ClosingRectangle1(ho_RegionDynThresh9, &ho_RegionDynThresh9, 3, 5);
					Connection(ho_RegionDynThresh9, &ho_ConnectedRegions111);
					SelectShapeProto(ho_ConnectedRegions111, ho_RegionL, &ho_ConnectedRegions111,
						"overlaps_rel", 0, 60);
					SelectShape(ho_ConnectedRegions111, &ho_SelectedRegions120, ((((HTuple("area").Append("height")).Append("width")).Append("row")).Append("column1")),
						"and", (((HTuple(60).Append(8)).Append(13)).TupleConcat(hv_rval - 100)).TupleConcat(1),
						(((HTuple(9999).Append(40)).Append(9999)).TupleConcat(hv_rval - 40)).TupleConcat(9999));
					ConcatObj((*hv_dt).TupleGetDictObject("114"), ho_SelectedRegions120, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "114");

					//10.20 add-zjy A基准塑胶绷胶
					GenRectangle1(&ho_Rectangle6, hv_rval - 150, 500, hv_rval - 80, 1000);
					ReduceDomain(ho_Image, ho_Rectangle6, &ho_ImageReduced95);
					Intensity(ho_Rectangle6, ho_ImageReduced95, &hv_Mean10, &hv_Deviation11);
					MultImage(ho_ImageReduced95, ho_ImageReduced95, &ho_ImageResult19, 0.06,
						0);
					GrayClosingRect(ho_ImageResult19, &ho_ImageClosing9, 15, 15);
					Threshold(ho_ImageClosing9, &ho_Region112, 200, 255);
					Connection(ho_Region112, &ho_ConnectedRegions122);
					SelectShapeStd(ho_ConnectedRegions122, &ho_SelectedRegions128, "max_area",
						70);
					ClosingRectangle1(ho_SelectedRegions128, &ho_RegionClosing31, 100, 3);
					Difference(ho_RegionClosing31, ho_SelectedRegions128, &ho_RegionDifference67
						);
					Connection(ho_RegionDifference67, &ho_ConnectedRegions123);
					SelectShape(ho_ConnectedRegions123, &ho_SelectedRegions129, ((HTuple("area").Append("height")).Append("width")),
						"and", ((HTuple(550).Append(14)).Append(40)), ((HTuple(99999).Append(999)).Append(9999)));
					SelectGray(ho_SelectedRegions129, ho_ImageReduced95, &ho_SelectedRegions130,
						"mean", "and", 0, hv_Mean10 - 10);
					ConcatObj((*hv_dt).TupleGetDictObject("114"), ho_SelectedRegions130, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "114");

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2236.35, 401.831, 2763.15, 952);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2655).Append(564)));
					SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测抓胶槽
					GenRectangle1(&ho_ROI_0, 1434.39, 2315.29, 1628.11, 2552.43);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced51);
					GrayOpeningRect(ho_ImageReduced51, &ho_ImageOpening48, 1, 11);
					GrayClosingRect(ho_ImageOpening48, &ho_ImageClosing41, 11, 150);
					SubImage(ho_ImageOpening48, ho_ImageClosing41, &ho_ImageSub36, 1, 128);
					Threshold(ho_ImageSub36, &ho_Region65, 0, 10);
					ClosingRectangle1(ho_Region65, &ho_RegionClosing18, 10, 10);
					OpeningRectangle1(ho_RegionClosing18, &ho_RegionOpening19, 10, 10);
					Connection(ho_RegionOpening19, &ho_ConnectedRegions68);
					SelectShape(ho_ConnectedRegions68, &ho_SelectedRegions67, "width", "and",
						80, 99999);
					CountObj(ho_SelectedRegions67, &hv_Number21);
					if (0 != hv_Number21)
					{
						Union1(ho_SelectedRegions67, &ho_RegionUnion6);
						ShapeTrans(ho_RegionUnion6, &ho_RegionTrans26, "rectangle1");
						MoveRegion(ho_RegionTrans26, &ho_RegionMoved43, 10, 0);
						Difference(ho_RegionUnion6, ho_RegionMoved43, &ho_RegionDifference40);
						ErosionRectangle1(ho_RegionDifference40, &ho_RegionErosion18, 30, 1);
						ShapeTrans(ho_RegionErosion18, &ho_RegionTrans27, "rectangle1");

						DilationRectangle1(ho_RegionTrans27, &ho_RegionDilation39, 1, 10);
						MoveRegion(ho_RegionDilation39, &ho_RegionMoved44, 5, 0);
						Intensity(ho_RegionMoved44, ho_ImageAffineTrans, &hv_Mean, &hv_Deviation);
						if (0 != (int(hv_Mean<30)))
						{
							AffineTransRegion(ho_RegionMoved44, &ho_RegionMoved44, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("100"), ho_RegionMoved44, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "100");
						}
					}

				}
				//9.11 add-zjy
				if (0 != (int(hv_ImageNum == 11)))
				{

				}
				//10.19 add-zjy
				if (0 != (int(hv_ImageNum == 12)))
				{
					//CRT碰伤
					MinMaxGray(ho_Image, ho_Image, 5, &hv_Min, &hv_Max, &hv_Range1);
					Threshold(ho_Image, &ho_Region95, hv_Max, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);

					Connection(ho_RegionClosing23, &ho_ConnectedRegions121);
					ShapeTrans(ho_ConnectedRegions121, &ho_RegionTrans48, "convex");

					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectObj(ho_ConnectedRegions92, &ho_ObjectSelected, 1);
					MoveRegion(ho_ObjectSelected, &ho_RegionMoved52, 25, 0);
					Difference(ho_ObjectSelected, ho_RegionMoved52, &ho_RegionDifference53);
					Connection(ho_RegionDifference53, &ho_ConnectedRegions61);
					SelectShapeStd(ho_ConnectedRegions61, &ho_ObjectSelected, "max_area", 70);

					ReduceDomain(ho_Image, ho_ObjectSelected, &ho_ImageReduced79);
					PaintRegion(ho_ObjectSelected, ho_ImageReduced79, &ho_ImageResult18, 250,
						"fill");
					DynThreshold(ho_ImageReduced79, ho_ImageResult18, &ho_RegionDynThresh10,
						140, "dark");
					OpeningCircle(ho_RegionDynThresh10, &ho_RegionOpening36, 3);
					ClosingCircle(ho_RegionOpening36, &ho_RegionClosing30, 5);
					Connection(ho_RegionClosing30, &ho_ConnectedRegions120);
					SelectShapeProto(ho_ConnectedRegions120, ho_RegionTrans48, &ho_SelectedRegions126,
						"overlaps_rel", 50, 100);
					SelectShape(ho_SelectedRegions126, &ho_SelectedRegions127, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(50).Append(7)), (HTuple(2999).Append(99)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions127, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");

				}
				if (0 != (int(hv_ImageNum == 13)))
				{
					//23.12.2 add-zjy 少铣-119  ????
					Threshold(ho_Image, &ho_Region123, 230, 255);
					ClosingRectangle1(ho_Region123, &ho_RegionClosing39, 3, 35);
					Connection(ho_RegionClosing39, &ho_ConnectedRegions142);
					SelectShapeStd(ho_ConnectedRegions142, &ho_SelectedRegions152, "max_area",
						70);
					OpeningRectangle1(ho_SelectedRegions152, &ho_RegionOpening46, 3, 209);
					Connection(ho_RegionOpening46, &ho_ConnectedRegions143);
					SelectShapeStd(ho_ConnectedRegions143, &ho_SelectedRegions153, "max_area",
						70);
					SmallestRectangle1(ho_SelectedRegions153, &hv_Row112, &hv_Column112, &hv_Row212,
						&hv_Column212);
					GenRectangle1(&ho_Rectangle12, hv_Row112 + 550, hv_Column112 + 100, hv_Row112 + 1250,
						hv_Column112 + 500);
					ReduceDomain(ho_Image, ho_Rectangle12, &ho_ImageReduced110);
					PaintRegion(ho_Rectangle12, ho_ImageReduced110, &ho_ImageResult21, 250,
						"fill");
					DynThreshold(ho_ImageReduced110, ho_ImageResult21, &ho_RegionDynThresh17,
						40, "dark");
					AreaCenter(ho_RegionDynThresh17, &hv_Area6, &hv_Row8, &hv_Column8);
					if (0 != (int(hv_Area6<300)))
					{
						ConcatObj((*hv_dt).TupleGetDictObject("119"), ho_Rectangle12, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "119");
						// stop(...); only in hdevelop
					}
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 2232.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1661.69, 2207.55, 2197.27, 2772.36);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(1765).Append(2603)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(-180)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测转角
					GenRectangle1(&ho_ROI_0, 1288.52, -70.0035, 2906.14, 1609.74);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_35);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_35);
					hv___Tmp_Ctrl_Dict_Init_35 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 1861.68, 1633.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_37);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_37);
						hv___Tmp_Ctrl_Dict_Init_37 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_38);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_38);
						hv___Tmp_Ctrl_Dict_Init_38 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_39);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_39);
						hv___Tmp_Ctrl_Dict_Init_39 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(100)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}
				}
				if (0 != (int(hv_ImageNum == 14)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1539.28, 343.961, 2441.19, 1907.86);
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2221).Append(1698)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1733.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 300);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 300);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 300);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 3, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}
						OpeningCircle(ho_RegionDifference6, &ho_RegionDifference6, 1.5);
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_42);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_42);
						hv___Tmp_Ctrl_Dict_Init_42 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_43);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_43);
						hv___Tmp_Ctrl_Dict_Init_43 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_44);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_44);
						hv___Tmp_Ctrl_Dict_Init_44 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(170)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}
				}
				if (0 != (int(hv_ImageNum == 15)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1864.52, 2746.74, 2356.96, 3528.82);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(1963).Append(3295)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1733.94, 4184.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_47);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_47);
						hv___Tmp_Ctrl_Dict_Init_47 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_48);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_48);
						hv___Tmp_Ctrl_Dict_Init_48 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_49);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_49);
						hv___Tmp_Ctrl_Dict_Init_49 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(100)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					}
				}
				if (0 != (int(hv_ImageNum == 16)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1759.17, -19.6011, 2399.21, 853.518);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2031).Append(443)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测转角
					GenRectangle1(&ho_ROI_0, 1315.58, 2462.37, 3111.96, 4135.88);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_52);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_52);
					hv___Tmp_Ctrl_Dict_Init_52 = HTuple(HNULL);

					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//检测RT区域
					GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 2200.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
					SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
					ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
						GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
						GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
						GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
						SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
						Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
						Connection(ho_Region5, &ho_ConnectedRegions8);
						SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
							600, 99999);
						CountObj(ho_SelectedRegions4, &hv_Number2);
						if (0 != hv_Number2)
						{
							Union1(ho_SelectedRegions4, &ho_RegionUnion4);
							DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
							MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
								);
						}
						else
						{
							MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
							Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
								);
						}

						//检测RT
						CreateDict(&hv_dd);


						CreateDict(&hv___Tmp_Ctrl_Dict_Init_54);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_54);
						hv___Tmp_Ctrl_Dict_Init_54 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_55);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_55);
						hv___Tmp_Ctrl_Dict_Init_55 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_56);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_56);
						hv___Tmp_Ctrl_Dict_Init_56 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(100)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					}
				}

				if (0 != (int(hv_ImageNum == 17)))
				{
					//9.26 add-zjy crt过切-71
					Threshold(ho_Image, &ho_Region95, 210, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectShapeStd(ho_ConnectedRegions92, &ho_ObjectSelected, "max_area", 70);
					RegionFeatures(ho_ObjectSelected, "width", &hv_Wval);
					if (0 != (int(hv_Wval>4000)))
					{
						MoveRegion(ho_ObjectSelected, &ho_RegionMoved55, 25, 0);
						Difference(ho_ObjectSelected, ho_RegionMoved55, &ho_RegionDifference65
							);
						ReduceDomain(ho_Image, ho_RegionDifference65, &ho_ImageReduced6);
						Threshold(ho_ImageReduced6, &ho_Region9, 0, 120);
						Connection(ho_Region9, &ho_ConnectedRegions12);
						OpeningCircle(ho_ConnectedRegions12, &ho_ConnectedRegions12, 1.5);
						SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions10, (HTuple("inner_radius").Append("rect2_len1")),
							"and", (HTuple(3).Append(3)), (HTuple(7).Append(100)));
						ConcatObj((*hv_dt).TupleGetDictObject("71"), ho_SelectedRegions10, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "71");
					}
				}
				//8.31 add-zjy塑胶位置缺陷
				if (0 != (int(hv_ImageNum == 18)))
				{
					Threshold(ho_Image, &ho_Region95, 210, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectShapeStd(ho_ConnectedRegions92, &ho_ObjectSelected, "max_area", 70);
					MoveRegion(ho_ObjectSelected, &ho_RegionMoved55, 60, 0);
					ReduceDomain(ho_Image, ho_RegionMoved55, &ho_ImageReduced65);

					Threshold(ho_ImageReduced65, &ho_Region97, 240, 255);
					Difference(ho_ImageReduced65, ho_Region97, &ho_RegionDifference58);
					Intensity(ho_RegionDifference58, ho_ImageReduced65, &hv_Mean, &hv_Deviation5);
					if (0 != (int(hv_Mean>100)))
					{
						//亮
					}
					else
					{
						//暗
						OpeningCircle(ho_RegionDifference58, &ho_RegionOpening25, 15);
						Connection(ho_RegionOpening25, &ho_RegionOpening25);
						SelectShapeStd(ho_RegionOpening25, &ho_RegionOpening25, "max_area", 70);

						Threshold(ho_ImageReduced65, &ho_Region100, 0, 50);
						Connection(ho_Region100, &ho_ConnectedRegions95);
						SelectShape(ho_ConnectedRegions95, &ho_SelectedRegions98, (HTuple("row2").Append("area")),
							"and", (hv_Height4 - 2).TupleConcat(5000), hv_Height4.TupleConcat(999999));

					}

				}
				if (0 != (int(hv_ImageNum == 19)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1403.79, 1751.63, 1718.29, 3926.83);
					//位置偏移检测区域s
					GenRectangle1(&ho_ROI_1, 2437.56, 3521.72, 3008.26, 4107.01);
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2850).Append(3743)));
					SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测方孔
					GenRectangle1(&ho_ROI_0, 1846.56, 1230.2, 1919.44, 1404.46);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					DilationCircle(ho_ROI_0, &ho_RegionDilation31, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation31, &ho_ImageReduced36
						);
					MedianRect(ho_ImageReduced36, &ho_ImageMedian15, 3, 3);
					TextureLaws(ho_ImageMedian15, &ho_ImageTexture8, "el", 5, 7);
					TextureLaws(ho_ImageMedian15, &ho_ImageTexture9, "le", 5, 7);
					AddImage(ho_ImageTexture8, ho_ImageTexture9, &ho_ImageResult4, 1, -80);
					Threshold(ho_ImageResult4, &ho_Region47, 0, 30);
					RankRegion(ho_Region47, &ho_RegionCount13, 5, 5, 10);
					FillUp(ho_RegionCount13, &ho_RegionFillUp8);
					Connection(ho_RegionFillUp8, &ho_ConnectedRegions48);
					SelectShape(ho_ConnectedRegions48, &ho_SelectedRegions15, "area", "and",
						4000, 99999);
					CountObj(ho_SelectedRegions15, &hv_Number8);
					if (0 != hv_Number8)
					{
						ClosingRectangle1(ho_SelectedRegions15, &ho_RegionClosing13, 15, 15);
						OpeningRectangle1(ho_RegionClosing13, &ho_RegionOpening14, 10, 10);
						Difference(ho_RegionClosing13, ho_RegionOpening14, &ho_RegionDifference33
							);
						Connection(ho_RegionDifference33, &ho_ConnectedRegions49);
						SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions51, (HTuple("area").Append("inner_radius")),
							"and", (HTuple(5).Append(1)), (HTuple(99999).Append(333)));
						AffineTransRegion(ho_SelectedRegions51, &ho_SelectedRegions51, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						//concat_obj (dt.['94'], SelectedRegions51, dt.['94'])
					}

					//检测猪鼻子
					GenRectangle1(&ho_ROI_0, 1768.43, 1990.91, 1885.15, 2205.07);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					DilationCircle(ho_ROI_0, &ho_RegionDilation13, 15);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation13, &ho_ImageReduced16
						);

					TextureLaws(ho_ImageReduced16, &ho_ImageTexture2, "el", 5, 7);
					TextureLaws(ho_ImageReduced16, &ho_ImageTexture3, "le", 5, 7);
					AddImage(ho_ImageTexture2, ho_ImageTexture3, &ho_ImageResult1, 2.5, -130);
					Threshold(ho_ImageResult1, &ho_Region15, 90, 255);
					//毛刺
					RankRegion(ho_Region15, &ho_RegionCount11, 10, 10, 55);
					ShapeTrans(ho_RegionCount11, &ho_RegionTrans13, "rectangle1");
					MoveRegion(ho_RegionTrans13, &ho_RegionMoved20, -60, 0);
					Difference(ho_RegionCount11, ho_RegionMoved20, &ho_RegionDifference22);
					OpeningRectangle1(ho_RegionDifference22, &ho_RegionOpening17, 10, 20);
					HeightWidthRatio(ho_RegionOpening17, &hv_Height3, &hv_Width3, &hv_Ratio2);
					if (0 != (int(hv_Width3<110)))
					{
						AffineTransRegion(ho_RegionOpening17, &ho_RegionOpening17, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						//concat_obj (dt.['90'], RegionOpening17, dt.['90'])
					}

					ClosingRectangle1(ho_RegionDifference22, &ho_RegionClosing6, 20, 5);
					OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening2, 40, 30);
					Difference(ho_RegionClosing6, ho_RegionOpening2, &ho_RegionDifference21
						);
					Connection(ho_RegionDifference21, &ho_ConnectedRegions28);
					SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions37, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(30).Append(2)), (HTuple(99999).Append(999)));
					AffineTransRegion(ho_SelectedRegions37, &ho_SelectedRegions37, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					//concat_obj (dt.['90'], SelectedRegions37, dt.['90'])


					RankRegion(ho_Region15, &ho_RegionCount10, 15, 15, 70);
					ShapeTrans(ho_RegionCount10, &ho_RegionTrans4, "rectangle1");
					MoveRegion(ho_RegionTrans4, &ho_RegionMoved12, -60, 0);
					Difference(ho_RegionCount10, ho_RegionMoved12, &ho_RegionDifference9);
					ShapeTrans(ho_RegionDifference9, &ho_RegionTrans8, "rectangle1");
					ErosionRectangle1(ho_RegionTrans8, &ho_RegionErosion6, 15, 15);
					//鼻子上
					ErosionRectangle1(ho_RegionErosion6, &ho_RegionErosion8, 15, 1);
					DilationRectangle1(ho_RegionErosion8, &ho_RegionDilation14, 1, 20);
					MoveRegion(ho_RegionDilation14, &ho_RegionMoved13, -25, 0);
					//检测塑胶
					CreateDict(&hv_dd);


					CreateDict(&hv___Tmp_Ctrl_Dict_Init_59);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_59);
					hv___Tmp_Ctrl_Dict_Init_59 = HTuple(HNULL);

					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "cha", 30);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "pig", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionMoved13, hv_dd.TupleGetDictTuple("SJ"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}

					Difference(ho_RegionErosion6, ho_RegionDifference9, &ho_RegionDifference13
						);

					Connection(ho_RegionDifference13, &ho_ConnectedRegions15);
					SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions23, "area", "and",
						200, 999999);
					AffineTransRegion(ho_SelectedRegions23, &ho_SelectedRegions23, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions23, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

				}
				if (0 != (int(hv_ImageNum == 20)))
				{

				}
				if (0 != (int(hv_ImageNum == 21)))
				{
					//10.30 add-zjy CRT压伤  72
					GenRectangle1(&ho_Rectangle9, 1200, 0, 1900, 2600);
					ReduceDomain(ho_Image, ho_Rectangle9, &ho_ImageReduced19);
					Threshold(ho_ImageReduced19, &ho_Region22, 200, 255);
					ClosingRectangle1(ho_Region22, &ho_RegionClosing33, 90, 3);
					Connection(ho_RegionClosing33, &ho_ConnectedRegions25);
					SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions35, (HTuple("width").Append("column1")),
						"and", (HTuple(1500).Append(0)), (HTuple(9999).Append(0)));
					ReduceDomain(ho_ImageReduced19, ho_SelectedRegions35, &ho_ImageReduced46
						);
					GrayClosingRect(ho_ImageReduced46, &ho_ImageClosing17, 3, 155);
					DynThreshold(ho_ImageReduced46, ho_ImageClosing17, &ho_RegionDynThresh12,
						155, "dark");
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions128);
					SelectShape(ho_ConnectedRegions128, &ho_SelectedRegions135, (HTuple("area").Append("height")),
						"and", (HTuple(150).Append(5)), (HTuple(99999).Append(99)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions135, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");

				}
				if (0 != (int(hv_ImageNum == 22)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1271.37, 41.4923, 1825.88, 1485.66);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2169.85, 1219.28, 2802.99, 1881.37);
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2623).Append(1669)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(-200)));
					SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测猪鼻子
					GenRectangle1(&ho_ROI_0, 1940.35, 2837.78, 2065.71, 3056.12);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					DilationCircle(ho_ROI_0, &ho_RegionDilation13, 15);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation13, &ho_ImageReduced16
						);
					TextureLaws(ho_ImageReduced16, &ho_ImageTexture2, "el", 5, 7);
					TextureLaws(ho_ImageReduced16, &ho_ImageTexture3, "le", 5, 7);
					AddImage(ho_ImageTexture2, ho_ImageTexture3, &ho_ImageResult1, 2.5, -100);
					Threshold(ho_ImageResult1, &ho_Region15, 90, 255);
					RankRegion(ho_Region15, &ho_RegionCount10, 15, 15, 80);
					ShapeTrans(ho_RegionCount10, &ho_RegionTrans4, "rectangle1");
					MoveRegion(ho_RegionTrans4, &ho_RegionMoved12, -60, 0);
					Difference(ho_RegionCount10, ho_RegionMoved12, &ho_RegionDifference9);
					//检测内腔毛刺
					ShapeTrans(ho_RegionDifference9, &ho_RegionTrans16, "rectangle1");
					MoveRegion(ho_RegionTrans16, &ho_RegionMoved21, -20, -140);
					DilationCircle(ho_RegionMoved21, &ho_RegionDilation22, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation22, &ho_ImageReduced24
						);
					MedianRect(ho_ImageReduced24, &ho_ImageMedian9, 3, 3);
					ErosionCircle(ho_RegionDilation22, &ho_RegionErosion9, 5);
					ReduceDomain(ho_ImageMedian9, ho_RegionErosion9, &ho_ImageReduced25);
					TextureLaws(ho_ImageReduced25, &ho_ImageTexture4, "el", 5, 7);
					TextureLaws(ho_ImageReduced25, &ho_ImageTexture5, "le", 5, 7);
					AddImage(ho_ImageTexture5, ho_ImageTexture4, &ho_ImageResult2, 2.5, -130);
					Threshold(ho_ImageResult2, &ho_Region28, 0, 30);
					Intersection(ho_Region28, ho_RegionMoved21, &ho_Region28);
					RankRegion(ho_Region28, &ho_RegionCount12, 5, 5, 10);
					Connection(ho_RegionCount12, &ho_ConnectedRegions29);
					SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions38, "area", "and",
						700, 99999);
					Union1(ho_SelectedRegions38, &ho_RegionUnion10);
					ErosionCircle(ho_RegionUnion10, &ho_RegionErosion14, 4.5);
					ShapeTrans(ho_RegionErosion14, &ho_RegionTrans17, "convex");
					Difference(ho_RegionTrans17, ho_RegionUnion10, &ho_RegionDifference23);
					Connection(ho_RegionDifference23, &ho_ConnectedRegions32);
					SelectShape(ho_ConnectedRegions32, &ho_SelectedRegions40, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(70).Append(3)), (HTuple(99999).Append(999)));
					AffineTransRegion(ho_SelectedRegions40, &ho_SelectedRegions40, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("91"), ho_SelectedRegions40, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "91");

					//检测毛刺
					ClosingRectangle1(ho_RegionDifference9, &ho_RegionClosing6, 20, 10);
					OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening2, 40, 30);
					Difference(ho_RegionClosing6, ho_RegionOpening2, &ho_RegionDifference21
						);
					Connection(ho_RegionDifference21, &ho_ConnectedRegions28);
					SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions37, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(60).Append(2.5)), (HTuple(99999).Append(999)));
					AffineTransRegion(ho_SelectedRegions37, &ho_SelectedRegions37, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions37, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

					ShapeTrans(ho_RegionDifference9, &ho_RegionTrans8, "rectangle1");
					ErosionRectangle1(ho_RegionTrans8, &ho_RegionErosion6, 15, 15);
					//鼻子上
					ErosionRectangle1(ho_RegionErosion6, &ho_RegionErosion8, 15, 1);
					DilationRectangle1(ho_RegionErosion8, &ho_RegionDilation14, 1, 20);
					MoveRegion(ho_RegionDilation14, &ho_RegionMoved13, -25, 0);
					//检测塑胶
					CreateDict(&hv_dd);


					CreateDict(&hv___Tmp_Ctrl_Dict_Init_62);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_62);
					hv___Tmp_Ctrl_Dict_Init_62 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "pig", 1);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionMoved13, hv_dd.TupleGetDictTuple("SJ"), "region");
					//dd.SJ.GAUSS := dict {}
					//dd.SJ.GAUSS.sub := 8
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					Difference(ho_RegionErosion6, ho_RegionDifference9, &ho_RegionDifference13
						);
					Connection(ho_RegionDifference13, &ho_ConnectedRegions15);
					SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions23, "area", "and",
						200, 999999);
					AffineTransRegion(ho_SelectedRegions23, &ho_SelectedRegions23, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions23, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

					//CRT碰伤
					Threshold(ho_Image, &ho_Region95, 220, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 9);
					ShapeTrans(ho_RegionClosing23, &ho_RegionClosing23, "convex");
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectObj(ho_ConnectedRegions92, &ho_ObjectSelected, 1);
					MoveRegion(ho_ObjectSelected, &ho_RegionMoved52, 17, -15);
					Difference(ho_ObjectSelected, ho_RegionMoved52, &ho_RegionDifference53);
					Connection(ho_RegionDifference53, &ho_ConnectedRegions61);
					SelectShapeStd(ho_ConnectedRegions61, &ho_ObjectSelected, "max_area", 70);

					ReduceDomain(ho_Image, ho_ObjectSelected, &ho_ImageReduced79);
					GrayClosingRect(ho_ImageReduced79, &ho_ImageClosing70, 3, 155);
					DynThreshold(ho_ImageReduced79, ho_ImageClosing70, &ho_RegionDynThresh,
						80, "dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions97, (((HTuple("area").Append("height")).Append("column")).Append("width")),
						"and", (((HTuple(100).Append(5)).Append(0)).Append(0)), (((HTuple(99999).Append(25)).Append(2200)).Append(100)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions97, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");

				}
				//8.31 add-zjy 塑胶区域
				if (0 != (int(hv_ImageNum == 23)))
				{
					Threshold(ho_Image, &ho_Region45, 200, 255);
					OpeningCircle(ho_Region45, &ho_RegionOpening23, 3);
					ClosingCircle(ho_RegionOpening23, &ho_RegionClosing25, 15);
					FillUp(ho_RegionClosing25, &ho_RegionFillUp14);
					ShapeTrans(ho_RegionFillUp14, &ho_RegionTrans43, "convex");
					Difference(ho_RegionTrans43, ho_RegionFillUp14, &ho_RegionDifference56);
					Connection(ho_RegionDifference56, &ho_ConnectedRegions47);
					SelectShapeStd(ho_ConnectedRegions47, &ho_SelectedRegions14, "max_area",
						70);
					ReduceDomain(ho_Image, ho_SelectedRegions14, &ho_ImageReduced35);
					MedianRect(ho_ImageReduced35, &ho_ImageMedian2, 3, 3);
					BinaryThreshold(ho_ImageMedian2, &ho_Region48, "max_separability", "dark",
						&hv_UsedThreshold1);


					//stop ()
				}
				if (0 != (int(hv_ImageNum == 24)))
				{
					Threshold(ho_Image, &ho_Region45, 150, 255);
					OpeningCircle(ho_Region45, &ho_RegionOpening23, 1.5);
					ClosingCircle(ho_RegionOpening23, &ho_RegionClosing25, 15);
					FillUp(ho_RegionClosing25, &ho_RegionFillUp14);
					ShapeTrans(ho_RegionFillUp14, &ho_RegionTrans43, "convex");
					RegionFeatures(ho_RegionTrans43, "width", &hv_Wval);
					if (0 != (int(hv_Wval>4000)))
					{
						//9.13 add-zjy CRT碰伤
						DilationCircle(ho_RegionTrans43, &ho_RegionDilation30, 5);
						DilationCircle(ho_RegionTrans43, &ho_RegionDilation32, 55);
						Difference(ho_RegionDilation32, ho_RegionDilation30, &ho_RegionDifference61
							);
						ClipRegion(ho_RegionDifference61, &ho_RegionClipped, 0, 0, hv_Height4,
							hv_Width4);
						Connection(ho_RegionClipped, &ho_ConnectedRegions104);
						SelectShapeStd(ho_ConnectedRegions104, &ho_SelectedRegions111, "max_area",
							70);
						ReduceDomain(ho_Image, ho_SelectedRegions111, &ho_ImageReduced86);
						Intensity(ho_SelectedRegions111, ho_ImageReduced86, &hv_Mean9, &hv_Deviation10);
						PaintRegion(ho_SelectedRegions111, ho_ImageReduced86, &ho_ImageResult17,
							hv_Mean9, "fill");
						DynThreshold(ho_ImageReduced86, ho_ImageResult17, &ho_RegionDynThresh8,
							30, "light");
						Connection(ho_RegionDynThresh8, &ho_ConnectedRegions105);
						SelectShape(ho_ConnectedRegions105, &ho_SelectedRegions112, "area", "and",
							40, 999);
						DilationCircle(ho_RegionDilation30, &ho_RegionDilation33, 3.5);
						SelectShapeProto(ho_SelectedRegions112, ho_RegionDilation33, &ho_SelectedRegions113,
							"overlaps_rel", 0, 10);
						ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions113, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");
					}


					Difference(ho_RegionTrans43, ho_RegionFillUp14, &ho_RegionDifference56);
					Connection(ho_RegionDifference56, &ho_ConnectedRegions47);
					SelectShapeStd(ho_ConnectedRegions47, &ho_SelectedRegions14, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions14, &ho_RegionTrans44, "convex");
					MoveRegion(ho_RegionTrans44, &ho_RegionMoved37, 300, 0);
					Difference(ho_RegionTrans44, ho_RegionMoved37, &ho_RegionDifference57);
					Intersection(ho_RegionDifference57, ho_SelectedRegions14, &ho_RegionIntersection15
						);
					ReduceDomain(ho_Image, ho_RegionIntersection15, &ho_ImageReduced38);
					MedianImage(ho_ImageReduced38, &ho_ImageMedian22, "circle", 1.5, "mirrored");

					DerivateGauss(ho_ImageMedian22, &ho_DerivGauss, 3, "none");

				}
				if (0 != (int(hv_ImageNum == 25)))
				{
					GenRectangle1(&ho_ROI_0, 405.415, 934.635, 703.293, 3168.77);
					GenRectangle1(&ho_TMP_Region, 678.47, 934.635, 968.073, 2490.26);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 951.147, 928.955, 1337.34, 2052.43);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1267.12, 928.955, 2601.25, 1168.86);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 851.673, 2467.88, HTuple(-151.557).TupleRad(),
						638.852, 153.282);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1325.64, 1133.75, 1858.12, 1525.8);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1559.7, 1467.29, HTuple(55.8855).TupleRad(),
						657.29, 201.932);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					//检测LC
					CreateDict(&hv_dd);
					SetDictObject(ho_Image, hv_dd, "image");

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_64);
					SetDictTuple(hv_dd, "LC", hv___Tmp_Ctrl_Dict_Init_64);
					hv___Tmp_Ctrl_Dict_Init_64 = HTuple(HNULL);
					SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("LC"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);

				}
				if (0 != (int(hv_ImageNum == 26)))
				{
					GenRectangle1(&ho_ROI_0, 527.748, 398.169, 1206.25, 3542.51);
					GenRectangle1(&ho_TMP_Region, 1156.6, 1349.75, 2679.09, 3978.55);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1437.93, 1217.35, HTuple(-44.6096).TupleRad(),
						860.108, 322.073);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1034.65, 3685.34, HTuple(-48.9302).TupleRad(),
						543.301, 222.029);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					//9.29 add 严重划伤  82
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced92);
					GrayOpeningRect(ho_ImageReduced92, &ho_ImageOpening4, 55, 15);
					DynThreshold(ho_ImageReduced92, ho_ImageOpening4, &ho_RegionDynThresh2,
						75, "light");
					OpeningCircle(ho_RegionDynThresh2, &ho_RegionOpening35, 1.5);
					Connection(ho_RegionOpening35, &ho_ConnectedRegions117);
					SelectShape(ho_ConnectedRegions117, &ho_SelectedRegions124, (HTuple("rect2_len1").Append("height")),
						"and", (HTuple(200).Append(50)), (HTuple(99999).Append(9999)));
					ConcatObj((*hv_dt).TupleGetDictObject("82"), ho_SelectedRegions124, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "82");
					//检测LC
					CreateDict(&hv_dd);
					SetDictObject(ho_Image, hv_dd, "image");

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_66);
					SetDictTuple(hv_dd, "LC", hv___Tmp_Ctrl_Dict_Init_66);
					hv___Tmp_Ctrl_Dict_Init_66 = HTuple(HNULL);
					SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("LC"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);

				}
				//8.22  add-zjy
				if (0 != (int(hv_ImageNum == 27)))
				{
					//严重划痕
					GenContourPolygonXld(&ho_ROI_0, (((((HTuple(265).Append(2986)).Append(2880)).Append(1910)).Append(277)).Append(265)),
						(((((HTuple(4016).Append(3987)).Append(72)).Append(78)).Append(1383)).Append(4016)));
					GenRegionContourXld(ho_ROI_0, &ho_Region93, "filled");
					ReduceDomain(ho_Image, ho_Region93, &ho_ImageReduced77);
					GrayOpeningRect(ho_ImageReduced77, &ho_ImageOpening59, 25, 25);
					DynThreshold(ho_Image, ho_ImageOpening59, &ho_RegionDynThresh1, 30, "light");
					Connection(ho_RegionDynThresh1, &ho_ConnectedRegions90);
					SelectShape(ho_ConnectedRegions90, &ho_SelectedRegions96, (HTuple("area").Append("width")),
						"and", (HTuple(10000).Append(1100)), (HTuple(99999).Append(9999)));
					ConcatObj((*hv_dt).TupleGetDictObject("82"), ho_SelectedRegions96, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "82");
				}
				if (0 != (int(hv_ImageNum == 28)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1817.98, 437.33, 2120.06, 1687.01);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2700.81, 323.342, 3073.93, 789.901);
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
					SetDictTuple(hv_at, "rc", (HTuple(2959).Append(461)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(10000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测抓胶槽
					GenRectangle1(&ho_ROI_0, 1831.63, 2206.12, 2082.99, 2573.79);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced34);
					GrayClosingRect(ho_ImageReduced34, &ho_ImageClosing27, 1, 150);
					SubImage(ho_ImageReduced34, ho_ImageClosing27, &ho_ImageSub24, 1, 128);
					Threshold(ho_ImageSub24, &ho_Region44, 0, 20);
					ClosingRectangle1(ho_Region44, &ho_RegionClosing12, 30, 1);
					OpeningRectangle1(ho_RegionClosing12, &ho_RegionOpening8, 10, 3);
					Connection(ho_RegionOpening8, &ho_ConnectedRegions46);
					Union1(ho_ConnectedRegions46, &ho_ConnectedRegions46);
					SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions11, "width", "and",
						60, 99999);
					CountObj(ho_SelectedRegions11, &hv_Number7);
					if (0 != (int(hv_Number7 == 1)))
					{
						//检测抓胶槽
						ShapeTrans(ho_SelectedRegions11, &ho_RegionTrans28, "rectangle1");
						MoveRegion(ho_RegionTrans28, &ho_RegionMoved45, 10, 0);
						Difference(ho_SelectedRegions11, ho_RegionMoved45, &ho_SelectedRegions11
							);
						MoveRegion(ho_SelectedRegions11, &ho_RegionMoved36, 75, 0);
						//狗骨缺失
						ErosionRectangle1(ho_RegionMoved36, &ho_RegionErosion19, 50, 1);
						DilationRectangle1(ho_RegionErosion19, &ho_RegionDilation42, 1, 60);
						Intensity(ho_RegionDilation42, ho_ImageAffineTrans, &hv_Mean3, &hv_Deviation3);
						if (0 != (int(hv_Mean3<30)))
						{
							AffineTransRegion(ho_RegionDilation42, &ho_RegionDilation42, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_RegionDilation42, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
						}

						//8.30 add-zjy  检测燕尾
						GenRectangle1(&ho_ROI_0, 1500, 2000, 2200, 2800);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
						Threshold(ho_ImageReduced78, &ho_Region94, 200, 255);
						ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
						Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
						SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
							"and", (HTuple(100).Append(30)), (HTuple(99999).Append(999)));
						CountObj(ho_ConnectedRegions91, &hv_Number10);
						if (0 != (int(hv_Number10>1)))
						{
							ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
							SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
								"column");
							SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
							SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
								&hv_Column23);
							GenRectangle2(&ho_ROI_def1, hv_Row13 + 80, hv_Column23 - 35, HTuple(180).TupleRad(),
								40, 11);
							//测量左边
							GenMeasureRectangle2(hv_Row13 + 80, hv_Column23 - 35, HTuple(180).TupleRad(),
								40, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
							if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
							{
								MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
									&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
							}
							GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
							if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
							{
								hv_disPP = hv_Column23 - hv_ColumnEdge1;
								if (0 != (int(hv_disPP<42)))
								{
									ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
										);
									SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
								}
							}
							//测量右边
							SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
							SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
								&hv_Column23);
							GenRectangle2(&ho_ROI_def2, hv_Row13 + 80, hv_Column13 + 35, HTuple(0).TupleRad(),
								40, 11);
							GenMeasureRectangle2(hv_Row13 + 80, hv_Column13 + 35, HTuple(0).TupleRad(),
								40, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
							if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
							{
								MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
									&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
							}
							GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
							if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
							{
								hv_disPP = hv_ColumnEdge1 - hv_Column13;
								if (0 != (int(hv_disPP<42)))
								{
									ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
										);
									SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
								}
							}
						}
					}
					//检测螺丝孔堵胶
					GenRectangle1(&ho_ROI_0, 2427.96, 855.998, 2541.91, 999.943);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced10);

					GrayOpeningRect(ho_ImageReduced10, &ho_ImageOpening5, 7, 1);
					GrayClosingRect(ho_ImageOpening5, &ho_ImageClosing12, 9, 1);
					GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening32, 30, 40);
					SubImage(ho_ImageOpening32, ho_ImageClosing12, &ho_ImageSub8, 1, 128);
					Threshold(ho_ImageSub8, &ho_Region13, 0, 30);
					ClosingRectangle1(ho_Region13, &ho_RegionClosing11, 10, 10);
					Connection(ho_RegionClosing11, &ho_ConnectedRegions55);
					SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions56, "height", "and",
						50, 999);
					CountObj(ho_SelectedRegions56, &hv_Number15);
					if (0 != hv_Number15)
					{
						Difference(ho_RegionClosing11, ho_Region13, &ho_RegionDifference4);
						ErosionCircle(ho_RegionClosing11, &ho_RegionErosion16, 3.5);
						Intersection(ho_RegionErosion16, ho_RegionDifference4, &ho_RegionIntersection14
							);
						Connection(ho_RegionIntersection14, &ho_ConnectedRegions13);
						SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions13, "area", "and",
							50, 99999);

						AffineTransRegion(ho_SelectedRegions13, &ho_SelectedRegions13, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_SelectedRegions13, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");
					}
					else
					{
						AffineTransRegion(ho_ConnectedRegions55, &ho_ConnectedRegions55, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_ConnectedRegions55, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");
					}


				}
				if (0 != (int(hv_ImageNum == 29)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1590.63, 2348.96, 2070.55, 3995.6);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2536.32, 3324.02, 3068.96, 3758.66);
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-80)));
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2868).Append(3619)));
					SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "area", (HTuple(10000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测螺柱
					GenRectangle1(&ho_ROI_0, 2631.95, 872.705, 2806.03, 1053.61);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced61);
					MedianRect(ho_ImageReduced61, &ho_ImageMedian23, 3, 3);
					TextureLaws(ho_ImageMedian23, &ho_ImageTexture14, "el", 2, 5);
					TextureLaws(ho_ImageMedian23, &ho_ImageTexture15, "le", 2, 5);
					AddImage(ho_ImageTexture14, ho_ImageTexture15, &ho_ImageResult7, 1, -100);

					ErosionCircle(ho_ROI_0, &ho_RegionErosion22, 5);
					Threshold(ho_ImageResult7, &ho_Region75, 128, 255);
					RankRegion(ho_Region75, &ho_RegionCount16, 9, 9, 35);
					Connection(ho_RegionCount16, &ho_ConnectedRegions76);
					SelectShape(ho_ConnectedRegions76, &ho_SelectedRegions81, "area", "and",
						5500, 999999);
					AffineTransRegion(ho_SelectedRegions81, &ho_SelectedRegions81, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					//concat_obj (dt.['112'], SelectedRegions81, dt.['112'])

					//检测溢胶
					GenRectangle1(&ho_ROI_0, 2323.82, 3583.25, 2452.45, 4100.5);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					DilationCircle(ho_ROI_0, &ho_RegionDilation46, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation46, &ho_ImageReduced55
						);
					GrayClosingRect(ho_ImageReduced55, &ho_ImageClosing46, 5, 10);
					Threshold(ho_ImageClosing46, &ho_Region70, 230, 255);
					Connection(ho_Region70, &ho_ConnectedRegions73);
					SelectShape(ho_ConnectedRegions73, &ho_SelectedRegions74, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(300).Append(5)), (HTuple(9999).Append(999)));
					CountObj(ho_SelectedRegions74, &hv_Number26);
					if (0 != (int(hv_Number26 == 0)))
					{
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("88"), ho_ROI_0, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "88");
					}
					//检测SPK过切
					GenRectangle1(&ho_ROI_0, 2297.36, 1657.12, 2353.45, 1712.47);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_0, &ho_RegionDilation43, 8);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation43, &ho_ImageReduced53
						);
					GrayClosingRect(ho_ImageReduced53, &ho_ImageClosing43, 35, 60);
					SubImage(ho_ImageReduced53, ho_ImageClosing43, &ho_ImageSub38, 1, 128);
					Threshold(ho_ImageSub38, &ho_Region68, 0, 10);
					Connection(ho_Region68, &ho_ConnectedRegions71);
					SelectShape(ho_ConnectedRegions71, &ho_SelectedRegions71, "area", "and",
						200, 99999);
					AffineTransRegion(ho_SelectedRegions71, &ho_SelectedRegions71, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					//concat_obj (dt.['111'], SelectedRegions71, dt.['111'])
					//检测螺丝孔堵胶
					GenEllipse(&ho_ROI_0, 2398.69, 3162.43, HTuple(1.90944).TupleRad(), 62.126,
						39.5401);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_0, &ho_RegionDilation41, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation41, &ho_ImageReduced10
						);
					GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing42, 8, 3);
					GrayOpeningRect(ho_ImageClosing42, &ho_ImageOpening49, 15, 60);
					SubImage(ho_ImageOpening49, ho_ImageClosing42, &ho_ImageSub37, 1, 128);
					Threshold(ho_ImageSub37, &ho_Region67, 0, 30);
					Intersection(ho_Region67, ho_ROI_0, &ho_RegionIntersection17);
					Connection(ho_RegionIntersection17, &ho_ConnectedRegions70);
					SelectShape(ho_ConnectedRegions70, &ho_SelectedRegions70, "area", "and",
						550, 99999);
					CountObj(ho_SelectedRegions70, &hv_Number25);
					if (0 != (int(hv_Number25 == 0)))
					{
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_ROI_0, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");

					}
				}
				if (0 != (int(hv_ImageNum == 31)))
				{
					//stop ()
				}
				if (0 != (int(hv_ImageNum == 36)))
				{
					//8.30 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 1200, 2000, 2200, 2800);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 220, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
						"and", (HTuple(100).Append(30)), (HTuple(99999).Append(999)));
					CountObj(ho_ConnectedRegions91, &hv_Number10);
					if (0 != (int(hv_Number10 == 2)))
					{
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
						SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
							"column");
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def1, hv_Row13 + 80, hv_Column23 - 35, HTuple(180).TupleRad(),
							40, 11);
						//测量左边
						GenMeasureRectangle2(hv_Row13 + 80, hv_Column23 - 35, HTuple(180).TupleRad(),
							40, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{
							hv_disPP = hv_Column23 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<42)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//测量右边
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def2, hv_Row13 + 80, hv_Column13 + 35, HTuple(0).TupleRad(),
							40, 11);
						GenMeasureRectangle2(hv_Row13 + 80, hv_Column13 + 35, HTuple(0).TupleRad(),
							40, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{
							hv_disPP = hv_ColumnEdge1 - hv_Column13;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}

						//9.06 add-猪鼻子过切
						//if (|Row13|)
						//粗定位
						//gen_rectangle1 (ROI_ZBJ, Row13+470, Column13+400, Row13+800, Column13+650)
						//reduce_domain (Image, ROI_ZBJ, ImageReduced78)
						//gen_rectangle1 (ROI_1, Row13+470, Column13+400, Row13+500, Column13+650)
						//intensity (ROI_1, ImageReduced78, Mean, Deviation)
						//scale_image_max (ImageReduced78, ImageScaleMax2)

						//横条过切
						//median_rect (ImageScaleMax2, ImageMedian26, 3, 3)
						//erosion_rectangle1 (ImageMedian26, RegionErosion21, 200, 1)
						//reduce_domain (ImageMedian26, RegionErosion21, ImageReduced46)
						//gray_closing_rect (ImageReduced46, ImageClosing52, 1, 25)
						//gray_closing_rect (ImageClosing52, ImageClosing56, 155, 3)
						//sub_image (ImageClosing56, ImageClosing52, ImageSub25, 2, 128)
						//if (Mean<60)
						//暗
						//形状过切
						//gen_rectangle1 (ROI_1, Row13+700, Column13+400, Row13+800, Column13+650)
						//intensity (ROI_1, ImageScaleMax2, Mean, Deviation)
						//threshold (ImageScaleMax2, Region92, 0, max([Mean+1,20]))
						//fill_up (Region92, Region92)
						//opening_rectangle1 (Region92, Region92, 29, 3)
						//connection (Region92, ConnectedRegions94)
						//select_shape_std (ConnectedRegions94, SelectedRegions94, 'max_area', 70)

						//shape_trans (SelectedRegions94, RegionTrans46, 'rectangle1')
						//smallest_rectangle1 (RegionTrans46, Row14, Column14, Row24, Column24)
						//difference (RegionTrans46, SelectedRegions94, RegionDifference58)
						//opening_rectangle1 (RegionDifference58, RegionDifference58, 3, 1)
						//connection (RegionDifference58, ConnectedRegions95)
						//select_shape (ConnectedRegions95, ConnectedRegions95, 'row2', 'and', 0, Row24-1)
						//select_shape_std (ConnectedRegions95, SelectedRegions98, 'max_area', 70)

						//region_features (SelectedRegions98, 'height', Hval)
						//if (Hval>20)
						//concat_obj (dt.['90'], SelectedRegions98, dt.['90'])
						//stop ()
						//endif

						//threshold (ImageSub25, Region97, 250, 255)
						//dyn_threshold (ImageClosing52, ImageClosing56, RegionDynThresh3, 30, 'dark')
						//connection (Region97, ConnectedRegions96)

						//else
						//亮
						//dyn_threshold (ImageClosing52, ImageClosing56, RegionDynThresh3, 10, 'dark')
						//connection (RegionDynThresh3, ConnectedRegions96)
						//endif
						//select_shape (ConnectedRegions96, SelectedRegions100, ['area','height','row'], 'and', [1000,50,Row13+520], [20000,999,Row13+620])
						//count_obj (SelectedRegions100, Number31)
						//if (Number31>0)
						//region_features (SelectedRegions100, 'height', HVal)
						//if (HVal<50 or HVal>120)
						//concat_obj (dt.['90'], ROI_ZBJ, dt.['90'])
						//stop ()
						//endif
						//else
						//concat_obj (dt.['90'], ROI_ZBJ, dt.['90'])
						//stop ()
						//endif
						//endif
					}

				}

				if (0 != (int(hv_ImageNum == 37)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1263.61, 2263.04, 2151.45, 4050.35);
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
					SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));

					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1813.95, 1285.48, 2588.46, 2187.56);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced39);
					GrayOpeningRect(ho_ImageReduced39, &ho_ImageOpening35, 20, 20);
					GrayClosingRect(ho_ImageOpening35, &ho_ImageClosing34, 11, 11);
					GrayOpeningRect(ho_ImageClosing34, &ho_ImageOpening36, 180, 180);
					SubImage(ho_ImageOpening36, ho_ImageClosing34, &ho_ImageSub27, 3, 128);
					Threshold(ho_ImageSub27, &ho_Region50, 0, 30);
					FillUp(ho_Region50, &ho_RegionFillUp11);
					Connection(ho_RegionFillUp11, &ho_ConnectedRegions52);
					SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions54, (HTuple("area").Append("width")),
						"and", (HTuple(60000).Append(280)), (HTuple(150000).Append(500)));
					CountObj(ho_SelectedRegions54, &hv_Number12);
					if (0 != (int(hv_Number12 == 1)))
					{
						ShapeTrans(ho_SelectedRegions54, &ho_RegionTrans2, "rectangle1");
						SmallestRectangle1(ho_RegionTrans2, &hv_Row11, &hv_Column11, &hv_Row21,
							&hv_Column21);
						hv_r = hv_Row11 - 2112;
						hv_c = hv_Column21 - 1952;
						//检测螺纹孔堵胶
						AreaCenter(ho_RegionTrans2, &hv_Area4, &hv_Row7, &hv_Column7);
						GenEllipse(&ho_Ellipse, hv_Row7, hv_Column7, 0, 80, 50);

						DilationCircle(ho_Ellipse, &ho_RegionDilation40, 35);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation40, &ho_ImageReduced52
							);
						MedianRect(ho_ImageReduced52, &ho_ImageMedian20, 5, 5);
						TextureLaws(ho_ImageMedian20, &ho_ImageTexture12, "el", 2, 5);
						TextureLaws(ho_ImageMedian20, &ho_ImageTexture13, "le", 2, 5);
						AddImage(ho_ImageTexture12, ho_ImageTexture13, &ho_ImageResult6, 1, -120);
						Threshold(ho_ImageResult6, &ho_Region66, 60, 255);
						Intersection(ho_Region66, ho_Ellipse, &ho_RegionIntersection16);
						RankRegion(ho_RegionIntersection16, &ho_RegionCount15, 10, 10, 30);
						Connection(ho_RegionCount15, &ho_ConnectedRegions69);
						SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions68, "area", "and",
							1500, 99999);
						CountObj(ho_SelectedRegions68, &hv_Number23);
						if (0 != (int(hv_Number23 == 0)))
						{
							AffineTransRegion(ho_Ellipse, &ho_Ellipse, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_Ellipse, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");
						}
						//检测
						GenRectangle1(&ho_ROI_0, 2164.15, 1972.12, 2364.55, 2056.64);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);
						DilationCircle(ho_RegionMoved38, &ho_RegionDilation38, 3.5);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation38, &ho_ImageReduced48
							);
						MedianRect(ho_ImageReduced48, &ho_ImageMedian19, 5, 5);
						GrayOpeningRect(ho_ImageMedian19, &ho_ImageOpening46, 40, 3);
						SubImage(ho_ImageOpening46, ho_ImageMedian19, &ho_ImageSub34, 8, 128);
						Threshold(ho_ImageSub34, &ho_Region61, 0, 30);
						Connection(ho_Region61, &ho_ConnectedRegions64);
						SelectShape(ho_ConnectedRegions64, &ho_SelectedRegions64, "area", "and",
							100, 99999);
						AffineTransRegion(ho_SelectedRegions64, &ho_SelectedRegions64, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("91"), ho_SelectedRegions64, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "91");

						//检测内腔毛刺
						GenRectangle1(&ho_ROI_0, 2397.67, 2022.59, 2480.17, 2378.88);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);

						DilationCircle(ho_RegionMoved38, &ho_RegionDilation37, 5);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation37, &ho_ImageReduced47
							);
						GrayOpeningRect(ho_ImageReduced47, &ho_ImageOpening44, 9, 3);
						GrayOpeningRect(ho_ImageOpening44, &ho_ImageOpening45, 11, 15);
						SubImage(ho_ImageOpening45, ho_ImageOpening44, &ho_ImageSub33, 10, 128);
						Threshold(ho_ImageSub33, &ho_Region60, 0, 20);
						ClosingCircle(ho_Region60, &ho_RegionClosing17, 3.5);
						Connection(ho_RegionClosing17, &ho_ConnectedRegions63);
						SelectShape(ho_ConnectedRegions63, &ho_SelectedRegions63, "area", "and",
							12, 99999);
						AffineTransRegion(ho_SelectedRegions63, &ho_SelectedRegions63, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						//concat_obj (dt.['91'], SelectedRegions63, dt.['91'])

						//检测听筒孔杂质
						GenRectangle1(&ho_ROI_0, 2200.25, 2597.36, 2301.39, 3590.27);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved38, &ho_ImageReduced42
							);
						GrayClosingRect(ho_ImageReduced42, &ho_ImageClosing35, 1, 30);
						GrayOpeningRect(ho_ImageClosing35, &ho_ImageOpening38, 3, 150);
						GrayOpeningRect(ho_ImageOpening38, &ho_ImageOpening39, 30, 11);
						SubImage(ho_ImageOpening39, ho_ImageOpening38, &ho_ImageSub30, 3, 128);
						Threshold(ho_ImageSub30, &ho_Region52, 0, 30);
						Connection(ho_Region52, &ho_ConnectedRegions56);
						SelectShape(ho_ConnectedRegions56, &ho_SelectedRegions57, "width", "and",
							850, 99999);
						CountObj(ho_SelectedRegions57, &hv_Number16);
						if (0 != hv_Number16)
						{
							DilationRectangle1(ho_SelectedRegions57, &ho_RegionDilation34, 5, 20);
							SubImage(ho_ImageOpening38, ho_ImageClosing35, &ho_ImageSub29, 10,
								128);
							Threshold(ho_ImageSub29, &ho_Region53, 0, 30);
							Difference(ho_Region53, ho_RegionDilation34, &ho_RegionDifference36
								);
							Connection(ho_RegionDifference36, &ho_ConnectedRegions57);
							SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions58, (HTuple("area").Append("inner_radius")),
								"and", (HTuple(350).Append(3)), (HTuple(99999).Append(999)));
							AffineTransRegion(ho_SelectedRegions58, &ho_SelectedRegions58, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions58,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");
						}

						//检测边缘毛刺
						GenRectangle1(&ho_ROI_0, 2301.69, 1297.38, 2362.81, 1524.17);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);

						ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved38, &ho_ImageReduced41
							);
						MedianRect(ho_ImageReduced41, &ho_ImageMedian16, 5, 3);
						GrayOpeningRect(ho_ImageMedian16, &ho_ImageOpening37, 15, 10);
						SubImage(ho_ImageOpening37, ho_ImageMedian16, &ho_ImageSub28, 6, 128);
						Threshold(ho_ImageSub28, &ho_Region51, 0, 30);
						Connection(ho_Region51, &ho_ConnectedRegions53);
						SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions55, "area", "and",
							50, 99999);
						AffineTransRegion(ho_SelectedRegions55, &ho_SelectedRegions55, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions55, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");
						//检测NQ毛刺
						GenRectangle1(&ho_ROI_0, 2306.87, 2549.98, 2400.53, 3594.71);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_r, hv_c);
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced29);
						MedianRect(ho_ImageReduced29, &ho_ImageMedian11, 5, 10);
						TextureLaws(ho_ImageMedian11, &ho_ImageTexture6, "el", 5, 7);
						TextureLaws(ho_ImageMedian11, &ho_ImageTexture7, "le", 5, 7);
						AddImage(ho_ImageTexture6, ho_ImageTexture7, &ho_ImageResult3, 1.5, -120);
						Threshold(ho_ImageResult3, &ho_Region38, 128, 255);
						ErosionRectangle1(ho_ROI_0, &ho_RegionErosion12, 10, 10);
						Intersection(ho_Region38, ho_RegionErosion12, &ho_RegionIntersection10
							);
						FillUp(ho_RegionIntersection10, &ho_RegionFillUp4);
						ClosingRectangle1(ho_RegionFillUp4, &ho_RegionClosing9, 5, 5);
						FillUp(ho_RegionClosing9, &ho_RegionFillUp5);
						ClosingRectangle1(ho_RegionFillUp5, &ho_RegionClosing10, 10, 3);
						OpeningRectangle1(ho_RegionClosing10, &ho_RegionOpening3, 150, 1);
						Difference(ho_RegionClosing10, ho_RegionOpening3, &ho_RegionDifference26
							);

						MoveRegion(ho_RegionErosion12, &ho_RegionMoved32, -45, 0);
						MoveRegion(ho_RegionMoved32, &ho_RegionMoved34, -10, 0);

						Intersection(ho_RegionMoved32, ho_RegionDifference26, &ho_RegionIntersection11
							);
						Difference(ho_RegionIntersection11, ho_RegionMoved34, &ho_RegionIntersection11
							);
						OpeningCircle(ho_RegionIntersection11, &ho_RegionIntersection11, 1.5);
						Connection(ho_RegionIntersection11, &ho_ConnectedRegions38);
						SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions45, (HTuple("area").Append("inner_radius")),
							"and", (HTuple(60).Append(2.5)), (HTuple(99999).Append(999)));
						AffineTransRegion(ho_SelectedRegions45, &ho_SelectedRegions45, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions45, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");

					}
				}
				if (0 != (int(hv_ImageNum == 38)))
				{
					//10.19 add-zjy CRT压伤
					GenRectangle1(&ho_Rectangle6, 1000, 0, 2000, 4095);
					ReduceDomain(ho_Image, ho_Rectangle6, &ho_ImageReduced93);
					Threshold(ho_ImageReduced93, &ho_Region110, 200, 255);
					ClosingRectangle1(ho_Region110, &ho_RegionClosing29, 155, 3);
					Connection(ho_RegionClosing29, &ho_ConnectedRegions118);
					SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions123, "width", "and",
						4000, 99999);
					ReduceDomain(ho_ImageReduced93, ho_SelectedRegions123, &ho_ImageReduced94
						);
					Threshold(ho_ImageReduced94, &ho_Region111, 0, 120);
					Connection(ho_Region111, &ho_ConnectedRegions119);
					SelectShape(ho_ConnectedRegions119, &ho_SelectedRegions125, (HTuple("area").Append("height")),
						"and", (HTuple(50).Append(3)), (HTuple(99999).Append(999)));
					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions125, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1127.56, 1256.91, 1590.92, 2589.11);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2202.68, 1630.88, 2854.44, 2458.48);
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
					SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "rc", (HTuple(2729).Append(1899)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "move", (HTuple(-200).Append(-0)));
					SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测听筒孔
					//结构不良-听筒孔断裂
					GenRectangle1(&ho_ROI_0, 1625.99, 1074.88, 1681.6, 2237.41);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced49);
					//检测小
					Intensity(ho_ROI_0, ho_ImageReduced49, &hv_Mean4, &hv_Deviation4);
					MedianRect(ho_ImageReduced49, &ho_ImageMedian14, 3, 5);
					GrayOpeningRect(ho_ImageMedian14, &ho_ImageMedian14, 5, 5);
					MedianRect(ho_ImageMedian14, &ho_ImageMedian14, 3, 3);
					GrayClosingRect(ho_ImageMedian14, &ho_ImageClosing29, 10, 30);
					if (0 != (int(hv_Mean4<150)))
					{
						SubImage(ho_ImageMedian14, ho_ImageClosing29, &ho_ImageSub16, 4.5, 128);
					}
					else
					{
						SubImage(ho_ImageMedian14, ho_ImageClosing29, &ho_ImageSub16, 2.5, 128);
					}

					Threshold(ho_ImageSub16, &ho_RegionDynThresh26, 0, 30);

					Connection(ho_RegionDynThresh26, &ho_ConnectedRegions233);
					SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions69, ((HTuple("area").Append("height")).Append("width")),
						"and", ((HTuple(150).Append(49)).Append(1)), ((HTuple(99999).Append(999)).Append(40)));
					AffineTransRegion(ho_SelectedRegions69, &ho_SelectedRegions69, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("98"), ho_SelectedRegions69, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "98");
					//检测大
					TextureLaws(ho_ImageReduced49, &ho_ImageTexture10, "el", 2, 5);
					TextureLaws(ho_ImageReduced49, &ho_ImageTexture11, "le", 2, 5);
					AddImage(ho_ImageTexture10, ho_ImageTexture11, &ho_ImageResult5, 1.5, -100);
					Threshold(ho_ImageResult5, &ho_Region62, 100, 255);
					RankRegion(ho_Region62, &ho_RegionCount14, 30, 15, 80);
					Connection(ho_RegionCount14, &ho_ConnectedRegions66);
					SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions65, "width", "and",
						1000, 99999);
					CountObj(ho_SelectedRegions65, &hv_Number20);
					if (0 != (int(hv_Number20 == 0)))
					{
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("98"), ho_ROI_0, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "98");
					}
					//检测毛刺
					GenRectangle1(&ho_ROI_0, 1589.34, 1168.11, 1665.93, 2155.36);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//屏蔽区域
					GenRectangle1(&ho_ROI_01, 1588.33, 1869.79, 1666.03, 2095.65);

					GenRectangle1(&ho_ROI_02, 1578.57, 1589.82, 1667.59, 1699.52);
					Union2(ho_ROI_01, ho_ROI_02, &ho_ROI_01);
					AffineTransRegion(ho_ROI_01, &ho_ROI_01, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced29);
					MedianRect(ho_ImageReduced29, &ho_ImageMedian11, 5, 5);
					TextureLaws(ho_ImageMedian11, &ho_ImageTexture6, "el", 5, 7);
					TextureLaws(ho_ImageMedian11, &ho_ImageTexture7, "le", 5, 7);
					AddImage(ho_ImageTexture6, ho_ImageTexture7, &ho_ImageResult3, 1, -130);
					Threshold(ho_ImageResult3, &ho_Region38, 128, 255);
					ErosionRectangle1(ho_ROI_0, &ho_RegionErosion12, 10, 10);
					Intersection(ho_Region38, ho_RegionErosion12, &ho_RegionIntersection10);
					FillUp(ho_RegionIntersection10, &ho_RegionFillUp4);
					ClosingRectangle1(ho_RegionFillUp4, &ho_RegionClosing9, 10, 5);
					FillUp(ho_RegionClosing9, &ho_RegionFillUp5);
					ClosingRectangle1(ho_RegionFillUp5, &ho_RegionClosing10, 10, 3);
					FillUp(ho_RegionClosing10, &ho_RegionClosing10);
					OpeningRectangle1(ho_RegionClosing10, &ho_RegionOpening3, 150, 1);
					Difference(ho_RegionClosing10, ho_RegionOpening3, &ho_RegionDifference26
						);

					MoveRegion(ho_RegionErosion12, &ho_RegionMoved32, -50, 0);
					Intersection(ho_RegionMoved32, ho_RegionDifference26, &ho_RegionIntersection11
						);
					Difference(ho_RegionIntersection11, ho_ROI_01, &ho_RegionIntersection11
						);
					OpeningCircle(ho_RegionIntersection11, &ho_RegionIntersection11, 1.5);
					Connection(ho_RegionIntersection11, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions45, ((HTuple("area").Append("inner_radius")).Append("height")),
						"and", ((HTuple(150).Append(2)).Append(7)), ((HTuple(99999).Append(999)).Append(999)));
					AffineTransRegion(ho_SelectedRegions45, &ho_SelectedRegions45, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("93"), ho_SelectedRegions45, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "93");
				}
				if (0 != (int(hv_ImageNum == 39)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1329.68, 1815.28, 1939.28, 3871.76);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1851.68, 3231.54, 2606.52, 4074.14);
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
					SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "opening", (HTuple(250).Append(80)));
					SetDictTuple(hv_at, "rc", (HTuple(2467).Append(3356)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "move", (HTuple(-0).Append(200)));
					SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//zoom_image_factor (ImageAffineTrans, ImageZoomed1, 0.5, 0.5, 'constant')
					//检测SF毛刺
					GenRectangle1(&ho_ROI_0, 1769.84, 869.78, 2147.13, 3124.51);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced30);
					GrayClosingRect(ho_ImageReduced30, &ho_ImageClosing25, 9, 9);
					GrayOpeningRect(ho_ImageClosing25, &ho_ImageOpening24, 9, 9);
					ScaleImage(ho_ImageOpening24, &ho_ImageScaled8, 1.5, -220);
					Threshold(ho_ImageScaled8, &ho_Region39, 0, 20);
					FillUp(ho_Region39, &ho_RegionFillUp6);
					OpeningCircle(ho_RegionFillUp6, &ho_RegionOpening5, 28);
					OpeningRectangle1(ho_RegionOpening5, &ho_RegionOpening5, 20, 20);
					Connection(ho_RegionOpening5, &ho_ConnectedRegions39);
					SelectShape(ho_ConnectedRegions39, &ho_SelectedRegions46, "area", "and",
						50000, 100000);
					ShapeTrans(ho_SelectedRegions46, &ho_RegionTrans20, "rectangle1");

					ErosionCircle(ho_SelectedRegions46, &ho_RegionErosion13, 8);
					Union1(ho_RegionErosion13, &ho_RegionUnion11);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionUnion11, &ho_ImageReduced31);

					MedianRect(ho_ImageReduced31, &ho_ImageMedian14, 5, 5);

					GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening29, 50, 70);
					ScaleImage(ho_ImageOpening29, &ho_ImageScaled12, 2, -30);
					GrayOpeningRect(ho_ImageScaled12, &ho_ImageOpening31, 150, 250);
					SubImage(ho_ImageOpening31, ho_ImageScaled12, &ho_ImageSub22, 4, 128);
					Threshold(ho_ImageSub22, &ho_Region43, 0, 20);
					Connection(ho_Region43, &ho_ConnectedRegions42);
					SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions48, (HTuple("width").Append("height")),
						"and", (HTuple(100).Append(60)), (HTuple(99999).Append(99999)));
					ShapeTrans(ho_SelectedRegions48, &ho_SelectedRegions49, "rectangle1");
					MoveRegion(ho_SelectedRegions49, &ho_RegionMoved33, -50, 0);
					Difference(ho_SelectedRegions49, ho_RegionMoved33, &ho_RegionDifference28
						);
					DilationRectangle1(ho_RegionDifference28, &ho_RegionDilation23, 25, 1);
					OpeningCircle(ho_RegionDilation23, &ho_RegionOpening11, 23);
					Union2(ho_RegionOpening11, ho_SelectedRegions48, &ho_RegionUnion16);
					Union1(ho_RegionUnion16, &ho_RegionUnion17);

					DilationCircle(ho_SelectedRegions48, &ho_RegionDilation26, 3.5);
					DilationRectangle1(ho_RegionDilation26, &ho_RegionDilation28, 40, 30);
					OpeningCircle(ho_RegionDilation28, &ho_RegionOpening13, 40);
					Union1(ho_RegionOpening13, &ho_RegionUnion18);
					Difference(ho_RegionUnion18, ho_RegionUnion17, &ho_RegionDifference31);



					GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening26, 3, 100);
					SubImage(ho_ImageOpening26, ho_ImageMedian14, &ho_ImageSub20, 3, 128);

					Threshold(ho_ImageSub20, &ho_Region42, 0, 60);
					Intersection(ho_Region42, ho_RegionDifference31, &ho_RegionIntersection12
						);


					GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening27, 100, 3);
					SubImage(ho_ImageOpening27, ho_ImageMedian14, &ho_ImageSub21, 3, 128);
					Threshold(ho_ImageSub21, &ho_Region40, 0, 60);
					Intersection(ho_Region40, ho_RegionDifference31, &ho_RegionIntersection13
						);
					Union2(ho_RegionIntersection12, ho_RegionIntersection13, &ho_RegionUnion14
						);
					Union1(ho_RegionUnion14, &ho_RegionUnion15);
					OpeningCircle(ho_RegionUnion15, &ho_RegionOpening10, 2);
					Connection(ho_RegionOpening10, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions47, "area", "and",
						25, 99999);
					AffineTransRegion(ho_SelectedRegions47, &ho_SelectedRegions47, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("95"), ho_SelectedRegions47, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "95");
				}
				if (0 != (int(hv_ImageNum == 40)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1221.17, 1968.94, 1742.46, 3561.8);
					//位置偏移检测区域
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测SIM毛刺
					GenRectangle1(&ho_ROI_0, 1645.21, 992.421, 2268.4, 2864.15);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced26);
					GrayOpeningRect(ho_ImageReduced26, &ho_ImageOpening20, 3, 3);
					GrayClosingRect(ho_ImageOpening20, &ho_ImageClosing24, 25, 100);
					MedianRect(ho_ImageClosing24, &ho_ImageMedian10, 15, 15);
					ScaleImage(ho_ImageMedian10, &ho_ImageScaled7, 1.5, -100);
					Threshold(ho_ImageScaled7, &ho_Region29, 0, 100);
					ClosingCircle(ho_Region29, &ho_RegionClosing7, 5);
					Connection(ho_RegionClosing7, &ho_ConnectedRegions36);
					SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions41, "area", "and",
						200000, 9999999);
					CountObj(ho_SelectedRegions41, &hv_Number6);
					if (0 != hv_Number6)
					{
						ShapeTrans(ho_SelectedRegions41, &ho_RegionTrans18, "rectangle1");
						MoveRegion(ho_RegionTrans18, &ho_RegionMoved27, 0, -80);
						MoveRegion(ho_RegionMoved27, &ho_RegionMoved28, 0, -1200);
						Difference(ho_RegionMoved27, ho_RegionMoved28, &ho_RegionDifference25
							);
						Intersection(ho_SelectedRegions41, ho_RegionDifference25, &ho_RegionIntersection8
							);
						//检测漏铁
						ClosingRectangle1(ho_RegionIntersection8, &ho_RegionClosing14, 100, 100);
						ErosionCircle(ho_RegionClosing14, &ho_RegionErosion17, 3.5);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionErosion17, &ho_ImageReduced44
							);
						ScaleImage(ho_ImageReduced44, &ho_ImageScaled13, 1.5, -120);
						Threshold(ho_ImageScaled13, &ho_Region54, 180, 255);
						Connection(ho_Region54, &ho_ConnectedRegions58);
						SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions59, "area", "and",
							30, 99999);

						AffineTransRegion(ho_SelectedRegions59, &ho_SelectedRegions59, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("87"), ho_SelectedRegions59, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "87");

						ErosionRectangle1(ho_RegionIntersection8, &ho_RegionErosion10, 3, 10);
						ShapeTrans(ho_RegionErosion10, &ho_RegionTrans19, "rectangle1");
						ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans19, &ho_ImageReduced28
							);
						GrayOpeningRect(ho_ImageReduced28, &ho_ImageOpening22, 3, 3);
						GrayOpeningRect(ho_ImageOpening22, &ho_ImageOpening23, 25, 25);
						SubImage(ho_ImageOpening23, ho_ImageOpening22, &ho_ImageSub19, 4, 128);
						Threshold(ho_ImageSub19, &ho_Region35, 0, 30);

						ErosionRectangle1(ho_RegionTrans19, &ho_RegionErosion11, 100, 120);
						MoveRegion(ho_RegionErosion11, &ho_RegionMoved29, -5, 0);

						MoveRegion(ho_RegionMoved29, &ho_RegionMoved35, 60, 0);
						Difference(ho_RegionMoved29, ho_RegionMoved35, &ho_RegionDifference27
							);
						ErosionRectangle1(ho_RegionMoved29, &ho_RegionErosion15, 130, 60);
						MoveRegion(ho_RegionErosion15, &ho_RegionMoved40, -20, 0);
						Union2(ho_RegionMoved40, ho_RegionDifference27, &ho_RegionUnion13);


						Intersection(ho_RegionUnion13, ho_Region35, &ho_RegionIntersection9);
						Connection(ho_RegionIntersection9, &ho_ConnectedRegions37);
						SelectShape(ho_ConnectedRegions37, &ho_SelectedRegions44, "area", "and",
							20, 99999);
						AffineTransRegion(ho_SelectedRegions44, &ho_SelectedRegions44, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("92"), ho_SelectedRegions44, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "92");

					}

				}

				if (0 != (int(hv_ImageNum == 41)))
				{
					//8.30 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 900, 1200, 1900, 2000);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 240, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
						"and", (HTuple(100).Append(50)), (HTuple(99999).Append(999)));
					CountObj(ho_ConnectedRegions91, &hv_Number10);
					if (0 != (int(hv_Number10 == 2)))
					{
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
						SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
							"column");
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def1, hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11);
						//测量左边
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_Column23 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//测量右边
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def2, hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11);
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_ColumnEdge1 - hv_Column13;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
					}
				}

				if (0 != (int(hv_ImageNum == 42)))
				{
					//8.30 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 900, 2000, 1900, 2800);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 240, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
						"and", (HTuple(100).Append(50)), (HTuple(99999).Append(999)));
					CountObj(ho_ConnectedRegions91, &hv_Number10);
					if (0 != (int(hv_Number10>1)))
					{
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
						SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
							"column");
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def1, hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11);
						//测量左边
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_Column23 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//测量右边
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def2, hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11);
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_ColumnEdge1 - hv_Column13;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
					}
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1311.85, -10.2342, 1659.1, 633.348);
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-150)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));

					SetDictTuple(hv_at, "zoom", 1);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测抓胶槽漏胶
					GenRectangle1(&ho_ROI_0, 1267.33, 2245.13, 1621.3, 2599.05);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced34);
					GrayClosingRect(ho_ImageReduced34, &ho_ImageClosing27, 1, 150);
					SubImage(ho_ImageReduced34, ho_ImageClosing27, &ho_ImageSub24, 1, 128);
					Threshold(ho_ImageSub24, &ho_Region44, 0, 20);
					ClosingRectangle1(ho_Region44, &ho_RegionClosing12, 10, 1);
					OpeningRectangle1(ho_RegionClosing12, &ho_RegionOpening8, 10, 3);
					Connection(ho_RegionOpening8, &ho_ConnectedRegions46);
					SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions11, "width", "and",
						60, 99999);
					Union1(ho_SelectedRegions11, &ho_SelectedRegions11);
					CountObj(ho_SelectedRegions11, &hv_Number7);
					if (0 != (int(hv_Number7 == 1)))
					{
						ShapeTrans(ho_SelectedRegions11, &ho_RegionTrans3, "rectangle1");
						MoveRegion(ho_RegionTrans3, &ho_RegionMoved41, 10, 0);
						Difference(ho_SelectedRegions11, ho_RegionMoved41, &ho_RegionDifference37
							);
						ShapeTrans(ho_RegionDifference37, &ho_RegionTrans23, "rectangle1");
						SmallestRectangle1(ho_RegionTrans23, &hv_Row12, &hv_Column12, &hv_Row22,
							&hv_Column22);
						hv_r = hv_Row12 - 1467;
						hv_c = hv_Column12 - 2372;
						//检测毛刺
						GenRectangle1(&ho_ROI_0, 1790.87, 2950, 2027.07, 3029.74);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);
						DilationCircle(ho_RegionMoved38, &ho_RegionDilation35, 8);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation35, &ho_ImageReduced45
							);
						MedianRect(ho_ImageReduced45, &ho_ImageMedian17, 5, 5);
						GrayOpeningRect(ho_ImageMedian17, &ho_ImageOpening40, 25, 3);
						ScaleImage(ho_ImageOpening40, &ho_ImageScaled14, 1.5, -50);
						MedianRect(ho_ImageScaled14, &ho_ImageMedian18, 15, 15);
						BinaryThreshold(ho_ImageMedian18, &ho_Region56, "max_separability", "light",
							&hv_UsedThreshold);
						SubImage(ho_ImageOpening40, ho_ImageMedian17, &ho_ImageSub31, 2, 128);
						Threshold(ho_ImageSub31, &ho_Region57, 0, 30);
						Difference(ho_Region57, ho_Region56, &ho_RegionDifference38);
						Connection(ho_RegionDifference38, &ho_ConnectedRegions60);
						SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions60, "area", "and",
							30, 99999);
						AffineTransRegion(ho_SelectedRegions60, &ho_SelectedRegions60, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions60, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");
					}
				}
				if (0 != (int(hv_ImageNum == 43)))
				{
					//8.30 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 900, 2000, 1900, 2850);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 240, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
						"and", (HTuple(100).Append(50)), (HTuple(99999).Append(999)));
					CountObj(ho_ConnectedRegions91, &hv_Number10);
					if (0 != (int(hv_Number10>1)))
					{
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
						SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
							"column");
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def1, hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11);
						//测量左边
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_Column23 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//测量右边
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def2, hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11);
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_ColumnEdge1 - hv_Column13;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
					}
				}
				if (0 != (int(hv_ImageNum == 44)))
				{
					//8.24 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 1182, 1381, 1800, 2054);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 240, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 3, 155);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					SelectShape(ho_ConnectedRegions91, &ho_ConnectedRegions91, (HTuple("height").Append("width")),
						"and", (HTuple(100).Append(50)), (HTuple(99999).Append(999)));
					CountObj(ho_ConnectedRegions91, &hv_Number10);
					if (0 != (int(hv_Number10>1)))
					{
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans42, "rectangle1");
						SortRegion(ho_RegionTrans42, &ho_RegionTrans42, "upper_left", "true",
							"column");
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 1);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def1, hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11);
						//测量左边
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column23 - 40, HTuple(180).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_Column23 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def1, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//测量右边
						SelectObj(ho_RegionTrans42, &ho_ObjectSelected1, 2);
						SmallestRectangle1(ho_ObjectSelected1, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);
						GenRectangle2(&ho_ROI_def2, hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11);
						GenMeasureRectangle2(hv_Row13 + 100, hv_Column13 + 40, HTuple(0).TupleRad(),
							50, 11, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 20, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) == 0)))
						{
							MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
								&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						}
						GenCrossContourXld(&ho_Cross, hv_RowEdge, hv_ColumnEdge1, 6, 0.785398);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{

							hv_disPP = hv_ColumnEdge1 - hv_Column13;
							if (0 != (int(hv_disPP<40)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def2, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
					}
				}
			}

			if (0 != (HTuple(int(hv_StaNum == 1)).TupleAnd(int(hv_CamNum == 1))))
			{
				if (0 != (int(hv_ImageNum == 1)))
				{
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2623.01, 2599.71, 2974.09, 3846.07);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 796.062, 2210.89, 1942.33, 3191.59);
					//10.25 add-zjy A基准塑胶漏铁  75
					GenRectangle1(&ho_Rectangle7, 0, 0, 1000, 350);
					ReduceDomain(ho_Image, ho_Rectangle7, &ho_ImageReduced96);
					GrayOpeningRect(ho_ImageReduced96, &ho_ImageOpening33, 35, 3);
					DynThreshold(ho_ImageReduced96, ho_ImageOpening33, &ho_RegionDynThresh11,
						50, "light");
					Connection(ho_RegionDynThresh11, &ho_ConnectedRegions124);
					SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions131, "area", "and",
						150, 99999);
					ConcatObj((*hv_dt).TupleGetDictObject("75"), ho_SelectedRegions131, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "75");

					//仿射变换
					CreateDict(&hv_at);
					SetDictTuple(hv_at, "point", 1);
					SetDictTuple(hv_at, "rc", (HTuple(989).Append(2548)));
					SetDictTuple(hv_at, "scal", (HTuple(2).Append(-150)));
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-150)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测漏铣
					GenRectangle1(&ho_ROI_0, 1147.81, 422.008, 1507.79, 585.888);
					GenRectangle1(&ho_TMP_Region, 1279.51, 565.403, 1537.05, 1218);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1417.06, 1212.14, 136.642);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1756.55, 1566.24, 305.214);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1912.41, 1786.65, 100.211);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1408.34, 1260.38, 1659.97, 1413.56);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1531.16, 591.346, 1926.26, 1478.05);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1782.86, 927.885, 2353.56, 1712.17);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1588.02, 577.802, 1892.39, 785.578);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1693.38, 981.649, 2322.61, 1613.76);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing4, 105);
					MoveRegion(ho_RegionClosing4, &ho_RegionMoved9, -90, -30);
					AffineTransRegion(ho_RegionMoved9, &ho_RegionAffineTrans1, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_RegionAffineTrans1, &ho_RegionDilation9, 20);


					//屏蔽区域
					GenCircle(&ho_ROI_0, 352.713, 3418.48, 209.018);
					GenCircle(&ho_TMP_Region, 257.031, 2962.83, 198.159);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 265.083, 1578, 244.504);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 946.716, 705.26, 168.032);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2086.82, 1909.15, 195.775);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2095.95, 2479.82, 142.161);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 84.5155, 1730.74, 166.757, 2918.87);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 172.324, 3113.72, 230.285, 3306.2);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 94.1042, 3046.97, 146.751, 3413.31);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 90.464, 3442.24, HTuple(38.4605).TupleRad(),
						63.5648, 33.4257);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -156.17886, 3449.56, 69.964, 3523.72);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 455.359, 3532.69, 996.889, 3611.51);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 475.208, 3616.51, HTuple(39.8162).TupleRad(),
						56.6253, 22.6782);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 401.065, 1713.02, 477.158, 2986.01);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 422.879, 1365.06, HTuple(-128.008).TupleRad(),
						72.3145, 31.8081);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 467.194, 1296.46, 1171.93, 1364.76);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1029.43, 877.802, HTuple(-38.1341).TupleRad(),
						60.5467, 26.2166);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1013.52, 902.055, 1074.96, 1228.26);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1023.52, 1259.33, HTuple(21.5787).TupleRad(),
						47.8858, 33.0678);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 746.583, 614.467, 788.617, 691.205);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1204.16, 1354.34, HTuple(-53.6629).TupleRad(),
						68.1602, 29.5905);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1274.76, 1428.94, HTuple(-36.1685).TupleRad(),
						66.7048, 21.7443);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1263.75, 1463.74, 1327.92, 2565.17);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1341.34, 2517.17, HTuple(-132.357).TupleRad(),
						56.5479, 15.3687);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1375.63, 2458.25, 1969.41, 2512.41);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle1(&ho_TMP_Region, 2300.59, 2484.48, 2401.63, 4104.5);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -106.62769, 642.841, 772.536, 698.723);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_00);
					DilationCircle(ho_ROI_00, &ho_ROI_00, 5);

					AffineTransRegion(ho_ROI_00, &ho_RegionAffineTrans1, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, -3.08119, 709.595, 1128.11, 4100.07);
					GenCircle(&ho_TMP_Region, 1021.8, 1627.97, 295.425);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1056.91, 1686.49, 2279.86, 4108.98);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1764.02, 1546.03, 489.461);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2163.72, 1890.66, 317.167);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2388.99, 2412.46, 225.02);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 17.1833, 3701.22, 1017.78, 4169.33);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 930.006, 2566.04, 1815.05, 4216.15);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1769.6, 3654.49, 2357.22, 4192.43);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved57, -15, -70);
					AffineTransRegion(ho_RegionMoved57, &ho_RegionAffineTrans11, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionAffineTrans11, ho_RegionAffineTrans1, &ho_RegionDifference39
						);
					ErosionCircle(ho_RegionDifference39, &ho_RegionDifference39, 8);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference39, &ho_ImageReduced68
						);
					GrayClosingRect(ho_ImageReduced68, &ho_ImageClosing58, 5, 5);
					Threshold(ho_ImageClosing58, &ho_Region82, 0, 60);
					Connection(ho_Region82, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					//9.04 add-zjy clc过切
					DerivateGauss(ho_ImageReduced68, &ho_DerivGauss1, 3, "yy");
					ScaleImageMax(ho_DerivGauss1, &ho_ImageScaleMax1);
					GrayClosingRect(ho_ImageScaleMax1, &ho_ImageClosing30, 3, 55);
					LinesGauss(ho_ImageClosing30, &ho_Lines, 1.5, 3, 9, "light", "true", "bar-shaped",
						"true");
					SelectContoursXld(ho_Lines, &ho_SelectedContours, "contour_length", 500,
						3000, -0.5, 0.5);
					GenRegionContourXld(ho_SelectedContours, &ho_Region96, "filled");
					AffineTransRegion(ho_Region96, &ho_Region96, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ShapeTrans(ho_Region96, &ho_Region96, "convex");
					CountObj(ho_Region96, &hv_Number19);
					if (0 != (int(hv_Number19>3)))
					{
						ConcatObj((*hv_dt).TupleGetDictObject("81"), ho_Region96, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "81");
						//stop ()
					}

					//9.07 add-zjy 镭雕不全优化
					Threshold(ho_ImageReduced68, &ho_Region58, 230, 255);
					OpeningCircle(ho_Region58, &ho_RegionOpening22, 3);
					ClosingCircle(ho_RegionOpening22, &ho_RegionClosing24, 15);
					Connection(ho_RegionClosing24, &ho_ConnectedRegions75);
					SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions62, "area", "and",
						1000, 9999999);
					ErosionCircle(ho_ImageReduced68, &ho_RegionErosion21, 5);
					SelectShapeProto(ho_SelectedRegions62, ho_RegionErosion21, &ho_SelectedRegions62,
						"overlaps_rel", 70, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions62, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//提取检测区域
					GenRectangle1(&ho_ROI_0, 2.42571, 400.323, 2489.28, 4092.57);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);
					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);
					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 500000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);
					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 10);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
					FillUp(ho_RegionCount1, &ho_RegionCount1);
					Connection(ho_RegionCount1, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_ConnectedRegions7, "area", "and",
						150000, 999999999);
					Union1(ho_ConnectedRegions7, &ho_RegionCount1);
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					//检测区域
					Difference(ho_RegionDifference, ho_RegionAffineTrans1, &ho_RegionDifference32
						);

					CreateDict(&hv_dd);
					//检测漏铣
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_76);
					SetDictTuple(hv_dd, "SJLC", hv___Tmp_Ctrl_Dict_Init_76);
					hv___Tmp_Ctrl_Dict_Init_76 = HTuple(HNULL);
					//检测镭雕
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_77);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_77);
					hv___Tmp_Ctrl_Dict_Init_77 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_78);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_78);
					hv___Tmp_Ctrl_Dict_Init_78 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
						(HTuple(0).Append(30)));
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_79);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_79);
					hv___Tmp_Ctrl_Dict_Init_79 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
						(HTuple(13).Append(9)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDilation9, hv_dd.TupleGetDictTuple("SJLC"), "region");
					SetDictObject(ho_RegionDifference32, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					//检测过切
					GenRectangle1(&ho_ROI_0, 1237.47, 2460.9, 1834.51, 2575.03);
					ConcatObj(ho_ROI_0, ho_Reg, &ho_Reg);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced3);
					GrayOpeningRect(ho_ImageReduced3, &ho_ImageOpening2, 15, 1);
					GrayOpeningRect(ho_ImageOpening2, &ho_ImageOpening3, 11, 20);
					GrayOpeningRect(ho_ImageOpening3, &ho_ImageOpening3, 50, 5);

					MedianRect(ho_ImageOpening3, &ho_ImageMedian3, 3, 3);
					GrayClosingRect(ho_ImageMedian3, &ho_ImageClosing3, 11, 20);
					SubImage(ho_ImageMedian3, ho_ImageClosing3, &ho_ImageSub2, 3, 128);

					Threshold(ho_ImageSub2, &ho_Region4, 0, 30);
					Connection(ho_Region4, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "height", "and",
						300, 99999);
					CountObj(ho_SelectedRegions3, &hv_Number1);
					if (0 != (int(hv_Number1 == 0)))
					{
						GrayClosingRect(ho_ImageMedian3, &ho_ImageClosing3, 11, 40);
						SubImage(ho_ImageMedian3, ho_ImageClosing3, &ho_ImageSub2, 3, 128);
						Threshold(ho_ImageSub2, &ho_Region4, 0, 10);
						Connection(ho_Region4, &ho_ConnectedRegions2);
						SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "height", "and",
							300, 99999);
						AffineTransRegion(ho_SelectedRegions3, &ho_SelectedRegions3, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("81"), ho_SelectedRegions3, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "81");
					}
				}
				if (0 != (int(hv_ImageNum == 2)))
				{

					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2567.91, -33.6331, 2940.26, 4111.93);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1841.53, 425.601, 2557.43, 1435.27);
					//仿射变换
					CreateDict(&hv_at);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(2414).Append(742)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(2).Append(-190)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测二维码
					GenRectangle1(&ho_ROI_0, 214.78, 1098.35, 489.797, 1379.21);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_0, &ho_RegionDilation50, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation50, &ho_ImageReduced60
						);
					GrayClosingRect(ho_ImageReduced60, &ho_ImageClosing37, 150, 100);
					SubImage(ho_ImageReduced60, ho_ImageClosing37, &ho_ImageSub44, 3, 128);
					Threshold(ho_ImageSub44, &ho_Region74, 0, 50);
					Intersection(ho_Region74, ho_ROI_0, &ho_Region74);
					Connection(ho_Region74, &ho_ConnectedRegions62);
					SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions80, "area", "and",
						50, 999999);
					AffineTransRegion(ho_SelectedRegions80, &ho_SelectedRegions80, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("113"), ho_SelectedRegions80, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "113");
					//检测焊缝毛刺
					GenRectangle1(&ho_ROI_0, 2296.86, 2109.65, 2483.76, 4094.17);
					GenCircle(&ho_ROI_1, 2173.31, 3378.7, 203.437);
					AffineTransRegion(ho_ROI_1, &ho_ROI_1, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_0, &ho_RegionDilation15, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation15, &ho_ImageReduced17
						);
					GrayOpeningRect(ho_ImageReduced17, &ho_ImageOpening10, 5, 30);
					GrayClosingRect(ho_ImageOpening10, &ho_ImageClosing18, 1, 50);
					MedianRect(ho_ImageClosing18, &ho_ImageMedian4, 3, 3);
					ScaleImage(ho_ImageMedian4, &ho_ImageScaled6, 1.5, -110);
					Threshold(ho_ImageScaled6, &ho_Region20, 0, 150);
					ClosingRectangle1(ho_Region20, &ho_RegionClosing5, 130, 30);
					Connection(ho_RegionClosing5, &ho_ConnectedRegions16);
					HeightWidthRatio(ho_ROI_0, &hv_Height2, &hv_Width2, &hv_Ratio1);
					SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions24, "width", "and",
						hv_Width2 - 200, 99999);
					ShapeTrans(ho_SelectedRegions24, &ho_RegionTrans10, "rectangle1");
					MoveRegion(ho_RegionTrans10, &ho_RegionMoved14, -25, 0);
					MoveRegion(ho_RegionMoved14, &ho_RegionMoved15, -40, 0);
					Difference(ho_RegionMoved14, ho_RegionMoved15, &ho_RegionDifference8);

					DilationRectangle1(ho_RegionDifference8, &ho_RegionDilation19, 10, 40);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation19, &ho_ImageReduced18
						);
					RankRect(ho_ImageReduced18, &ho_ImageRank, 10, 5, 30);
					//检测亮斑
					GrayOpeningRect(ho_ImageRank, &ho_ImageOpening47, 3, 80);
					SubImage(ho_ImageOpening47, ho_ImageRank, &ho_ImageSub35, 1, 128);
					Threshold(ho_ImageSub35, &ho_Region64, 0, 20);
					MoveRegion(ho_RegionTrans10, &ho_RegionMoved141, -35, 0);
					MoveRegion(ho_RegionMoved141, &ho_RegionMoved151, -40, 0);
					Difference(ho_RegionMoved141, ho_RegionMoved151, &ho_RegionDifference81
						);
					Intersection(ho_Region64, ho_RegionDifference81, &ho_RegionIntersection161
						);
					Connection(ho_RegionIntersection161, &ho_ConnectedRegions67);
					SelectShape(ho_ConnectedRegions67, &ho_SelectedRegions66, (HTuple("area").Append("circularity")),
						"and", (HTuple(150).Append(0.15)), (HTuple(99999).Append(1)));
					AffineTransRegion(ho_SelectedRegions66, &ho_SelectedRegions66, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_SelectedRegions66, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");
					//检测暗斑
					GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
					SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
					Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
					Intersection(ho_Region21, ho_RegionDifference8, &ho_RegionIntersection6
						);
					Difference(ho_RegionIntersection6, ho_ROI_1, &ho_RegionIntersection6);

					//
					GenRectangle1(&ho_ROI_0, 552.748, 2357.93, 1339, 3727.61);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Intensity(ho_ROI_0, ho_ImageAffineTrans, &hv_Mean1, &hv_Deviation1);
					Connection(ho_RegionIntersection6, &ho_ConnectedRegions23);
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions25, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(100).Append(3)), (HTuple(99999).Append(999)));
					hv_m = 100;
					hv_m1 = 120;
					if (0 != (int(hv_Mean1>100)))
					{
						hv_m = hv_Mean1 - 60;
						hv_m1 = hv_Mean1 - 15;
					}
					SelectGray(ho_SelectedRegions25, ho_ImageAffineTrans, &ho_SelectedRegions26,
						"mean", "and", 0, hv_m);

					SelectShape(ho_SelectedRegions25, &ho_SelectedRegions31, "area", "and",
						500, 999999);
					SelectGray(ho_SelectedRegions31, ho_ImageAffineTrans, &ho_SelectedRegions32,
						"mean", "and", 0, hv_m1);
					Union2(ho_SelectedRegions26, ho_SelectedRegions32, &ho_RegionUnion9);
					Connection(ho_RegionUnion9, &ho_ConnectedRegions24);


					AffineTransRegion(ho_ConnectedRegions24, &ho_ConnectedRegions24, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_ConnectedRegions24, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

					//检测大压伤
					//gen_rectangle1 (ROI_0, 1828.86, 2991.95, 2391.65, 3703.69)
					//affine_trans_region (ROI_0, ROI_0, at.hom_mat_tra, 'nearest_neighbor')
					//reduce_domain (ImageAffineTrans, ROI_0, ImageReduced32)
					//gray_opening_rect (ImageReduced32, ImageOpening12, 9, 9)
					//gray_closing_rect (ImageOpening12, ImageClosing39, 11, 11)
					//median_rect (ImageClosing39, ImageMedian24, 20, 20)
					//scale_image (ImageMedian24, ImageScaled15, 1.5, -100)
					//threshold (ImageScaled15, Region36, 200, 255)
					//fill_up (Region36, RegionFillUp10)
					//opening_circle (RegionFillUp10, RegionOpening9, 60)
					//connection (RegionOpening9, ConnectedRegions43)
					//select_shape (ConnectedRegions43, SelectedRegions42, 'area', 'and', 13000, 999999)
					//count_obj (SelectedRegions42, Number11)
					//shape_trans (SelectedRegions42, SelectedRegions42, 'outer_circle')
					//smallest_circle (SelectedRegions42, Row6, Column6, Radius)
					//if (Radius<200)
					//d := 200-Radius
					//if (abs(d)<1)
					//d := 1
					//endif
					//dilation_circle (SelectedRegions42, SelectedRegions42, d)
					//endif

					GenCircle(&ho_ROI_0, 2144.05, 3365.29, 200.794);
					AffineTransRegion(ho_ROI_0, &ho_SelectedRegions42, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					SmallestRectangle1(ho_SelectedRegions42, &hv_Row1, &hv_Column1, &hv_Row2,
						&hv_Column2);
					GetImageSize(ho_Image, &hv_Width1, &hv_Height1);
					GenRectangle1(&ho_Rectangle, 0, 0, hv_Row2 - 30, hv_Width1);


					//检测焊缝
					MoveRegion(ho_Rectangle, &ho_RegionMoved77, 185, 0);
					MoveRegion(ho_RegionMoved77, &ho_RegionMoved78, -70, 0);
					Difference(ho_RegionMoved77, ho_RegionMoved78, &ho_RegionDifference45);
					DilationCircle(ho_RegionDifference45, &ho_RegionDilation10, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation10, &ho_ImageReduced8
						);
					GrayOpeningRect(ho_ImageReduced8, &ho_ImageOpening25, 5, 5);
					GrayClosingRect(ho_ImageOpening25, &ho_ImageClosing33, 8, 20);
					ScaleImage(ho_ImageClosing33, &ho_ImageScaled11, 1.5, -150);
					Threshold(ho_ImageScaled11, &ho_Region11, 0, 80);
					Intersection(ho_Region11, ho_RegionDifference45, &ho_Region11);
					Connection(ho_Region11, &ho_ConnectedRegions9);
					SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions79, "area", "and",
						4000, 99999999);
					AffineTransRegion(ho_SelectedRegions79, &ho_SelectedRegions79, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_SelectedRegions79, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");


					ConcatObj(ho_Reg, ho_Rectangle, &ho_Reg);

					ShapeTrans(ho_SelectedRegions42, &ho_RegionTrans21, "outer_circle");
					//
					DilationCircle(ho_RegionTrans21, &ho_RegionDilation51, 55);

					MoveRegion(ho_RegionDilation51, &ho_RegionMoved61, -1550, -2000);
					ShapeTrans(ho_RegionMoved61, &ho_RegionTrans22, "rectangle1");
					//
					DilationRectangle1(ho_RegionTrans22, &ho_RegionDilation52, 200, 500);
					if (true)
					{
						ReduceDomain(ho_Image, ho_Rectangle, &ho_ImageReduced33);
						GrayOpeningRect(ho_ImageReduced33, &ho_ImageOpening13, 5, 5);
						ScaleImage(ho_ImageOpening13, &ho_ImageScaled16, 1.5, -80);
						Threshold(ho_ImageScaled16, &ho_Region37, 180, 255);
						Difference(ho_Region37, ho_RegionDilation51, &ho_RegionDifference29);
						Difference(ho_RegionDifference29, ho_RegionDilation52, &ho_RegionDifference30
							);
						Connection(ho_RegionDifference30, &ho_ConnectedRegions44);
						SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions43, "area", "and",
							400, 9999999);
						//concat_obj (dt.['82'], SelectedRegions43, dt.['82'])
					}
					//镭雕检测区域
					//屏蔽区域

					GenRectangle1(&ho_ROI_0, 103.254, 954.31, 939.159, 1575.01);
					GenRectangle2(&ho_TMP_Region, 63.1004, 813.253, HTuple(-36.6112).TupleRad(),
						180.491, 52.6968);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 77.5905, 1098.87, HTuple(30.3828).TupleRad(),
						69.5771, 39.6557);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 21.6999, 1138.2, 83.8006, 1525.24);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1299.44, 358.208, 1404.8, 557.205);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2148.65, 3355.18, 246.252);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 130.598, 10.1276, 2273.66, 4097.77);
					GenRectangle1(&ho_TMP_Region, 1437.95, 2393.21, 1992.33, 3022.07);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2050.25, 2136.69, 2281.94, 3162.74);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 125.602, -31.0187, 2318.31, 473.731);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 921.451, 523.452, 1705.54, 2161.85);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1635.33, 681.44, 2372.61, 2156);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved62, 0, -63);
					AffineTransRegion(ho_RegionMoved62, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_ROI_0, ho_ROI_00, &ho_RegionDifference48);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					//23.12.2 add-zjy 少铣-119
					Threshold(ho_ImageReduced70, &ho_Region120, 240, 255);
					Connection(ho_Region120, &ho_ConnectedRegions136);
					SelectShape(ho_ConnectedRegions136, &ho_SelectedRegions145, "area", "and",
						15000, 999999);
					AffineTransRegion(ho_SelectedRegions145, &ho_SelectedRegions145, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("119"), ho_SelectedRegions145, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "119");

					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//***
					GenRectangle1(&ho_ROI_0, 116.436, 3.8595, 2307.6, 4149.42);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 1.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
					FillUp(ho_RegionCount1, &ho_RegionFillUp3);
					ClosingRectangle1(ho_RegionFillUp3, &ho_RegionCount1, 100, 100);

					//检测区域
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Difference(ho_RegionDifference, ho_RegionDilation51, &ho_RegionDifference
						);

					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference10);
					//dev_display (ImageAffineTrans)
					//dev_display (RegionDifference10)
					//stop ()

					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_82);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_82);
					hv___Tmp_Ctrl_Dict_Init_82 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_83);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "YS", hv___Tmp_Ctrl_Dict_Init_83);
					hv___Tmp_Ctrl_Dict_Init_83 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_84);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_84);
					hv___Tmp_Ctrl_Dict_Init_84 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "g_o",
						(HTuple(5).Append(9)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						25);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_85);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_85);
					hv___Tmp_Ctrl_Dict_Init_85 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
						(HTuple(0).Append(35)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
						(HTuple(5).Append(7)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDifference10, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 3)))
				{
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2587.65, 1000, 2995, 3500);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1900, 2255, 2695, 3760);
					//12.8 add-zjy CLC过切
					Threshold(ho_Image, &ho_Region124, 220, 255);
					Connection(ho_Region124, &ho_ConnectedRegions144);
					SelectShapeStd(ho_ConnectedRegions144, &ho_SelectedRegions154, "max_area",
						70);
					OpeningCircle(ho_SelectedRegions154, &ho_SelectedRegions154, 3.5);
					ClosingRectangle1(ho_SelectedRegions154, &ho_RegionClosing40, 200, 35);
					Difference(ho_RegionClosing40, ho_SelectedRegions154, &ho_RegionDifference68
						);
					ErosionCircle(ho_RegionClosing40, &ho_RegionErosion28, 5);
					Connection(ho_RegionDifference68, &ho_ConnectedRegions145);
					SelectShape(ho_ConnectedRegions145, &ho_SelectedRegions155, (HTuple("area").Append("height")),
						"and", (HTuple(250).Append(15)), (HTuple(9999999).Append(9999)));
					SelectGray(ho_SelectedRegions155, ho_Image, &ho_SelectedRegions156, (HTuple("min").Append("mean")),
						"and", (HTuple(0).Append(0)), (HTuple(70).Append(170)));
					SelectShapeProto(ho_SelectedRegions156, ho_RegionErosion28, &ho_SelectedRegions157,
						"overlaps_rel", 60, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("119"), ho_SelectedRegions157, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "119");

					//10.26 add-zjy A基准压伤
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced99);
					Threshold(ho_ImageReduced99, &ho_Region115, 0, 50);
					OpeningCircle(ho_Region115, &ho_RegionOpening40, 35);
					Connection(ho_RegionOpening40, &ho_ConnectedRegions127);
					SelectShapeStd(ho_ConnectedRegions127, &ho_SelectedRegions134, "max_area",
						70);
					SmallestRectangle1(ho_SelectedRegions134, &hv_Row19, &hv_Column19, &hv_Row29,
						&hv_Column29);

					GenRectangle1(&ho_Rectangle1, hv_Row19 + 400, hv_Column19 - 1950, hv_Row19 + 650,
						hv_Column19 - 750);
					ReduceDomain(ho_Image, ho_Rectangle1, &ho_ImageReduced15);
					Threshold(ho_ImageReduced15, &ho_Region19, 220, 255);
					Connection(ho_Region19, &ho_ConnectedRegions21);
					SelectShape(ho_ConnectedRegions21, &ho_SelectedRegions21, "row2", "and",
						hv_Row19 + 640, 9999);
					ClosingRectangle1(ho_SelectedRegions21, &ho_RegionClosing32, 155, 3);
					Difference(ho_RegionClosing32, ho_SelectedRegions21, &ho_RegionDifference12
						);
					Connection(ho_RegionDifference12, &ho_ConnectedRegions22);
					SelectShape(ho_ConnectedRegions22, &ho_SelectedRegions22, (HTuple("area").Append("height")),
						"and", (HTuple(150).Append(10)), (HTuple(999999).Append(999)));
					SelectGray(ho_SelectedRegions22, ho_ImageReduced15, &ho_SelectedRegions33,
						"mean", "and", 0, 150);
					ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions33, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

					//仿射变换
					CreateDict(&hv_at);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(2111).Append(3597)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测旋风模组卷边
					GenRectangle1(&ho_ROI_0, 838.389, 1701.29, 1253.76, 2235.97);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced73);
					GrayClosingShape(ho_ImageReduced73, &ho_ImageClosing64, 50, 50, "octagon");
					ScaleImage(ho_ImageClosing64, &ho_ImageScaled19, 1.5, -90);
					Threshold(ho_ImageScaled19, &ho_Region88, 0, 60);
					OpeningCircle(ho_Region88, &ho_RegionOpening16, 15);

					ShapeTrans(ho_RegionOpening16, &ho_RegionTrans38, "rectangle1");
					MoveRegion(ho_RegionTrans38, &ho_RegionMoved71, -105, 0);
					Difference(ho_RegionOpening16, ho_RegionMoved71, &ho_RegionDifference54
						);
					OpeningCircle(ho_RegionDifference54, &ho_RegionOpening20, 1);
					ShapeTrans(ho_RegionOpening20, &ho_RegionTrans39, "outer_circle");


					AreaCenter(ho_RegionTrans39, &hv_Area3, &hv_Row2, &hv_Column2);
					GetImageSize(ho_ImageAffineTrans, &hv_Width1, &hv_Height1);

					PolarTransImageExt(ho_ImageAffineTrans, &ho_PolarTransImage, hv_Row2, hv_Column2,
						HTuple(180).TupleRad(), HTuple(350).TupleRad(), 0, 250, hv_Width1,
						hv_Height1, "nearest_neighbor");

					ZoomImageFactor(ho_PolarTransImage, &ho_ImageZoomed1, 0.25, 0.25, "constant");

					GrayClosingRect(ho_ImageZoomed1, &ho_ImageClosing65, 50, 100);
					ScaleImage(ho_ImageClosing65, &ho_ImageScaled20, 1.5, -70);

					Threshold(ho_ImageScaled20, &ho_Region89, 0, 80);
					ClosingRectangle1(ho_Region89, &ho_RegionClosing20, 100, 20);
					DilationRectangle1(ho_RegionClosing20, &ho_RegionDilation63, 1, 25);
					MoveRegion(ho_RegionDilation63, &ho_RegionMoved72, 35, 0);
					Difference(ho_RegionMoved72, ho_RegionDilation63, &ho_RegionDifference55
						);
					ShapeTrans(ho_RegionDifference55, &ho_RegionTrans40, "rectangle1");
					MoveRegion(ho_RegionTrans40, &ho_RegionMoved69, 0, -370);

					DilationCircle(ho_RegionTrans40, &ho_RegionDilation64, 9);
					ReduceDomain(ho_ImageZoomed1, ho_RegionDilation64, &ho_ImageReduced75);
					GrayOpeningRect(ho_ImageReduced75, &ho_ImageOpening55, 5, 5);
					GrayClosingRect(ho_ImageOpening55, &ho_ImageClosing66, 20, 20);

					MedianRect(ho_ImageClosing66, &ho_ImageMedian25, 10, 10);
					GrayClosingRect(ho_ImageMedian25, &ho_ImageClosing67, 10, 500);
					SubImage(ho_ImageMedian25, ho_ImageClosing67, &ho_ImageSub54, 1.4, 128);
					Threshold(ho_ImageSub54, &ho_Region90, 0, 30);
					Intersection(ho_Region90, ho_RegionDifference55, &ho_RegionIntersection21
						);
					Difference(ho_RegionIntersection21, ho_RegionMoved69, &ho_RegionIntersection21
						);
					Connection(ho_RegionIntersection21, &ho_ConnectedRegions87);
					SelectShape(ho_ConnectedRegions87, &ho_SelectedRegions92, "area", "and",
						100, 999999);
					ZoomRegion(ho_SelectedRegions92, &ho_RegionZoom1, 4, 4);
					PolarTransRegionInv(ho_RegionZoom1, &ho_XYTransRegion, hv_Row2, hv_Column2,
						HTuple(180).TupleRad(), HTuple(350).TupleRad(), 0, 250, hv_Width1,
						hv_Height1, hv_Width1, hv_Height1, "nearest_neighbor");
					Connection(ho_XYTransRegion, &ho_ConnectedRegions5);
					SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
						90, 99999);
					AffineTransRegion(ho_SelectedRegions5, &ho_SelectedRegions5, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("116"), ho_SelectedRegions5, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "116");

					//检测焊缝毛刺
					GenRectangle1(&ho_ROI_0, 2256.39, -13.2628, 2421.92, 1766.08);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_0, &ho_RegionDilation15, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation15, &ho_ImageReduced17
						);
					GrayOpeningRect(ho_ImageReduced17, &ho_ImageOpening10, 5, 30);
					GrayClosingRect(ho_ImageOpening10, &ho_ImageClosing18, 1, 50);
					MedianRect(ho_ImageClosing18, &ho_ImageMedian4, 3, 3);
					ScaleImage(ho_ImageMedian4, &ho_ImageScaled6, 1.5, -110);
					Threshold(ho_ImageScaled6, &ho_Region20, 0, 150);
					ClosingRectangle1(ho_Region20, &ho_RegionClosing5, 130, 30);
					Connection(ho_RegionClosing5, &ho_ConnectedRegions16);
					HeightWidthRatio(ho_ROI_0, &hv_Height2, &hv_Width2, &hv_Ratio1);
					SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions24, "width", "and",
						hv_Width2 - 200, 99999);
					OpeningRectangle1(ho_SelectedRegions24, &ho_SelectedRegions24, 30, 1);
					ShapeTrans(ho_SelectedRegions24, &ho_RegionTrans10, "rectangle1");

					//检测暗斑
					MoveRegion(ho_RegionTrans10, &ho_RegionMoved14, -20, 0);
					MoveRegion(ho_RegionMoved14, &ho_RegionMoved15, -30, 0);
					Difference(ho_RegionMoved14, ho_RegionMoved15, &ho_RegionDifference8);

					DilationRectangle1(ho_RegionDifference8, &ho_RegionDilation19, 10, 40);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation19, &ho_ImageReduced18
						);
					RankRect(ho_ImageReduced18, &ho_ImageRank, 10, 5, 30);
					GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
					SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
					Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
					Intersection(ho_Region21, ho_RegionDifference8, &ho_RegionIntersection6
						);

					//
					GenRectangle1(&ho_ROI_0, 1194.32, 223.76, 2141.96, 1432.06);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					Intensity(ho_ROI_0, ho_ImageAffineTrans, &hv_Mean1, &hv_Deviation1);
					Connection(ho_RegionIntersection6, &ho_ConnectedRegions23);
					SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions25, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(130).Append(3)), (HTuple(99999).Append(999)));
					hv_m = 100;
					hv_m1 = 120;
					if (0 != (int(hv_Mean1>100)))
					{
						hv_m = hv_Mean1 - 45;
						hv_m1 = hv_Mean1 - 15;
					}
					SelectGray(ho_SelectedRegions25, ho_ImageAffineTrans, &ho_SelectedRegions26,
						"mean", "and", 0, hv_m);

					SelectShape(ho_SelectedRegions25, &ho_SelectedRegions31, "area", "and",
						500, 999999);
					SelectGray(ho_SelectedRegions31, ho_ImageAffineTrans, &ho_SelectedRegions32,
						"mean", "and", 0, hv_m1);
					Union2(ho_SelectedRegions26, ho_SelectedRegions32, &ho_RegionUnion9);
					Connection(ho_RegionUnion9, &ho_ConnectedRegions24);


					AffineTransRegion(ho_ConnectedRegions24, &ho_ConnectedRegions24, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_ConnectedRegions24, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

					//LC检测区域
					GenRectangle1(&ho_ROI_0, -122.143, 1892.8, 2260.88, 4168.31);
					GenCircle(&ho_TMP_Region, -1474.09, -677.109, 3843.39);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2017.6, 2306.15, 2630.04, 3640.66);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2246.91, 1825.29, HTuple(-55.0975).TupleRad(),
						306.796, 122.205);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0lc, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 122.528, 18.7784, 2246.6, 1680.58);
					GenCircle(&ho_TMP_Region, 271.015, 1699.8, 276.569);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved63, 0, -60);
					AffineTransRegion(ho_RegionMoved63, &ho_RegionMoved631, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Union2(ho_RegionMoved631, ho_ROI_0lc, &ho_RegionUnion20);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionUnion20, &ho_ImageReduced70);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//9.11 add-zjy亮点检测
					ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved631, &ho_ImageReduced83
						);
					Intensity(ho_RegionMoved631, ho_ImageReduced83, &hv_Mean5, &hv_Deviation7);
					PaintRegion(ho_ImageReduced83, ho_ImageReduced83, &ho_ImageResult12, hv_Mean5,
						"fill");
					DynThreshold(ho_ImageReduced83, ho_ImageResult12, &ho_RegionDynThresh5,
						100, "light");
					Connection(ho_RegionDynThresh5, &ho_ConnectedRegions98);
					SelectShape(ho_ConnectedRegions98, &ho_SelectedRegions103, (HTuple("area").Append("width")),
						"and", (HTuple(150).Append(5)), (HTuple(99999).Append(9999)));
					AffineTransRegion(ho_SelectedRegions103, &ho_SelectedRegions103, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("82"), ho_SelectedRegions103, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "82");

					//检测下部区域
					GenRectangle1(&ho_ROI_0, 1944, 2148, 2672, 3696);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced40);
					MedianRect(ho_ImageReduced40, &ho_ImageMedian42, 15, 15);
					ScaleImage(ho_ImageMedian42, &ho_ImageScaled32, 2, -100);
					Threshold(ho_ImageScaled32, &ho_Region59, 0, 80);
					FillUp(ho_Region59, &ho_RegionFillUp9);
					OpeningCircle(ho_RegionFillUp9, &ho_RegionOpening39, 100);
					ShapeTrans(ho_RegionOpening39, &ho_RegionTrans32, "rectangle1");
					MoveRegion(ho_RegionTrans32, &ho_RegionMoved31, 100, 0);
					Difference(ho_RegionOpening39, ho_RegionMoved31, &ho_RegionDifference44
						);
					ShapeTrans(ho_RegionDifference44, &ho_RegionTrans9, "rectangle1");

					MoveRegion(ho_RegionTrans9, &ho_RegionMoved103, 205, -2100);
					DilationRectangle1(ho_RegionMoved103, &ho_RegionMoved103, 400, 1);


					ConcatObj(ho_Reg, ho_RegionMoved103, &ho_Reg);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved103, &ho_ImageReduced111
						);


					GenRectangle1(&ho_ROI_0, 12.046, 1393.85, 587.51, 2062.87);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced14);
					GrayClosingRect(ho_ImageReduced14, &ho_ImageClosing16, 20, 20);
					ScaleImage(ho_ImageClosing16, &ho_ImageScaled5, 1.5, -50);
					Threshold(ho_ImageScaled5, &ho_Region18, 0, 30);
					Connection(ho_Region18, &ho_ConnectedRegions20);
					SelectShape(ho_ConnectedRegions20, &ho_SelectedRegions20, (HTuple("area").Append("circularity")),
						"and", (HTuple(3000).Append(0.7)), (HTuple(9999).Append(1)));
					CountObj(ho_SelectedRegions20, &hv_Number4);
					if (0 != (int(hv_Number4 == 1)))
					{

						ShapeTrans(ho_SelectedRegions20, &ho_RegionTrans24, "outer_circle");
						DilationCircle(ho_RegionTrans24, &ho_RegionDilation53, 235);
						ShapeTrans(ho_RegionDilation53, &ho_RegionTrans25, "rectangle1");

						//检测大压伤
						AreaCenter(ho_RegionTrans25, &hv_Area, &hv_Row, &hv_Column);
						GenRectangle1(&ho_Rectangle1, hv_Row - 100, 0, hv_Row + 1900, hv_Column);
						Difference(ho_Rectangle1, ho_RegionDilation53, &ho_RegionDifference19
							);
						CreateDict(&hv_dd);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_88);
						SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_88);
						hv___Tmp_Ctrl_Dict_Init_88 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_89);
						SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_89);
						hv___Tmp_Ctrl_Dict_Init_89 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_90);
						SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_90);
						hv___Tmp_Ctrl_Dict_Init_90 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_RegionDifference19, hv_dd.TupleGetDictTuple("LD"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

						if (HDevWindowStack::IsOpen())
							DispObj(ho_ROI_1, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
					}

					//检测缺口
					GenRectangle1(&ho_ROI_0, -110.809, -135.788, 834.745, 2114.9);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					MoveRegion(ho_ROI_0, &ho_ROI_0, 200, -300);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced13);
					GrayOpeningRect(ho_ImageReduced13, &ho_ImageOpening7, 5, 5);
					GrayClosingRect(ho_ImageOpening7, &ho_ImageClosing15, 15, 15);
					MedianRect(ho_ImageClosing15, &ho_ImageMedian12, 15, 15);

					ScaleImage(ho_ImageMedian12, &ho_ImageScaled3, 1.5, -30);
					Threshold(ho_ImageScaled3, &ho_Region17, 70, 255);

					Connection(ho_Region17, &ho_ConnectedRegions17);
					SelectShape(ho_ConnectedRegions17, &ho_SelectedRegions18, "area", "and",
						500000, 9999999);
					FillUp(ho_SelectedRegions18, &ho_RegionFillUp7);
					ShapeTrans(ho_RegionFillUp7, &ho_RegionTrans5, "rectangle1");
					MoveRegion(ho_RegionTrans5, &ho_RegionMoved18, 0, -400);
					Intersection(ho_RegionFillUp7, ho_RegionMoved18, &ho_RegionIntersection4
						);
					ConcatObj(ho_Reg, ho_RegionIntersection4, &ho_Reg);
					ShapeTrans(ho_RegionIntersection4, &ho_RegionTrans6, "convex");
					Difference(ho_RegionTrans6, ho_RegionIntersection4, &ho_RegionDifference11
						);
					OpeningCircle(ho_RegionDifference11, &ho_RegionOpening4, 5);
					Connection(ho_RegionOpening4, &ho_ConnectedRegions18);
					SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions19, "area", "and",
						300, 9999999);
					AffineTransRegion(ho_SelectedRegions19, &ho_SelectedRegions19, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions19, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					CreateDict(&hv_dd);
					//检测LC
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_92);
					SetDictTuple(hv_dd, "LLC", hv___Tmp_Ctrl_Dict_Init_92);
					hv___Tmp_Ctrl_Dict_Init_92 = HTuple(HNULL);
					//检测镭雕

					//dd.LD.LB.s_g := [170,255]

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ROI_0lc, hv_dd.TupleGetDictTuple("LLC"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}
				if (0 != (int(hv_ImageNum == 4)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2630.85, 70.5031, 3075.56, 1445.59);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 83.887, 2739.03, 723.205, 3283.37);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(587).Append(2872)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");
					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//下U1.2平面溢胶

					GenRectangle1(&ho_ROI_0, 2182, 3042, 2510, 3394);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_00, &ho_ImageReduced7);
					GrayClosingRect(ho_ImageReduced7, &ho_ImageClosing10, 10, 10);
					ScaleImage(ho_ImageClosing10, &ho_ImageScaled, 1.5, -100);
					Threshold(ho_ImageScaled, &ho_Region10, 128, 255);
					AreaCenter(ho_Region10, &hv_Area1, &hv_Row3, &hv_Column3);
					if (0 != (int(hv_Area1<35000)))
					{
						AffineTransRegion(ho_Region10, &ho_Region10, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("88"), ho_Region10, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "88");
					}
					//9.12 add-zjy 字码槽崩胶--塑胶压伤
					//gen_rectangle1 (RecOCR, Row3-520, Column3, Row3-180, Column3+260)
					//reduce_domain (ImageAffineTrans, RecOCR, ImageReduced86)
					//mult_image (ImageReduced86, ImageReduced86, ImageResult17, 0.2, 0)
					//gray_closing_rect (ImageResult17, ImageResult17, 7, 7)
					//min_max_gray (RecOCR, ImageResult17, 10, Min, Max, Range)
					//threshold (ImageResult17, Region103, 0, Min)
					//connection (Region103, ConnectedRegions103)
					//fill_up_shape (ConnectedRegions103, ConnectedRegions103, 'area', 1, 5000)
					//select_shape (ConnectedRegions103, ConnectedRegions103, ['row2'], 'and', [Row3-540], [Row3-180-1])
					//select_shape_std (ConnectedRegions103, SelectedRegions108, 'max_area', 70)
					//closing_circle (SelectedRegions108, RegionClosing27, 35)
					//opening_circle (RegionClosing27, RegionOpening28, 12)
					//select_gray (RegionOpening28, ImageResult17, RegionOpening28, 'mean', 'and', 0, 180)
					//region_features (RegionOpening28, 'area', Area)
					//if (Area>600)
					//affine_trans_region (RegionOpening28, RegionOpening28, at.hom_mat_rot, 'nearest_neighbor')
					//concat_obj (dt.['79'], RegionOpening28, dt.['79'])
					//stop ()
					//endif
					//亮LC检测区域
					GenRectangle1(&ho_ROI_0, -7.14833, -2.78905, 2397.79, 1307.93);
					GenRectangle1(&ho_TMP_Region, 33.488, 1253.88, 1613.37, 1786.36);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00L, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					//镭雕屏蔽区域
					GenRectangle2(&ho_ROI_0, 4.57159, 1954.34, HTuple(-67.2497).TupleRad(),
						139.105, 66.2092);
					GenRectangle1(&ho_TMP_Region, 71.7288, 1903.45, 2160.69, 2061.43);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2209.14, 2580.75, 188.416);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2111.83, 2667.05, 131.726);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1958.8, 2749.53, 2052.73, 2919.35);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1110.02, 2904.58, 2037.78, 3004.08);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle2(&ho_TMP_Region, 1935.15, 2850.62, HTuple(38.8557).TupleRad(),
						135.286, 62.6114);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 980.456, 3082.21, 220.92);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 758.12, 3092.67, 235.569);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 764.651, 2871.42, 978.298, 2962.14);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2119.99, 1988.41, 2260.47, 2503.46);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 15.3855, 17.6582, 2059.16, 2880.66);
					GenRectangle1(&ho_TMP_Region, 1595.79, 1490.53, 2439.78, 2003.56);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved64, 0, -60);
					AffineTransRegion(ho_RegionMoved64, &ho_RegionMoved641, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionMoved641, ho_ROI_00, &ho_RegionDifference48);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//镭雕区域检测
					GenRectangle1(&ho_ROI_0, -85.2013, 1706.75, 2215.78, 3212.72);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced27);
					GrayClosingRect(ho_ImageReduced27, &ho_ImageClosing26, 20, 20);
					SubImage(ho_ImageReduced27, ho_ImageClosing26, &ho_ImageSub13, 2, 128);
					Threshold(ho_ImageSub13, &ho_Region30, 0, 60);

					RankRegion(ho_Region30, &ho_RegionCount6, 15, 15, 70);
					RankRegion(ho_RegionCount6, &ho_RegionCount7, 30, 30, 800);
					FillUp(ho_RegionCount7, &ho_RegionCount7);
					Connection(ho_RegionCount7, &ho_ConnectedRegions35);
					SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions34, "area", "and",
						100000, 999999999);
					ConcatObj(ho_Reg, ho_SelectedRegions34, &ho_Reg);

					Difference(ho_SelectedRegions34, ho_ROI_00, &ho_RegionDifference3);
					Connection(ho_RegionDifference3, &ho_ConnectedRegions35);
					SelectShape(ho_ConnectedRegions35, &ho_RegionDifference3, "area", "and",
						100000, 999999999);
					//9.08 add-zjy 镭雕不全
					ReduceDomain(ho_Image, ho_RegionDifference3, &ho_ImageReduced81);
					Threshold(ho_ImageReduced81, &ho_Region58, 230, 255);
					OpeningCircle(ho_Region58, &ho_RegionOpening22, 3);
					ClosingCircle(ho_RegionOpening22, &ho_RegionClosing24, 15);
					Connection(ho_RegionClosing24, &ho_ConnectedRegions75);
					SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions62, "area", "and",
						1000, 9999999);
					ErosionCircle(ho_ImageReduced81, &ho_RegionErosion21, 5);
					SelectShapeProto(ho_SelectedRegions62, ho_RegionErosion21, &ho_SelectedRegions62,
						"overlaps_rel", 70, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions62, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//检测亮LD
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_95);
					SetDictTuple(hv_dd, "LLC", hv___Tmp_Ctrl_Dict_Init_95);
					hv___Tmp_Ctrl_Dict_Init_95 = HTuple(HNULL);
					//检测LD
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_96);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_96);
					hv___Tmp_Ctrl_Dict_Init_96 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_97);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_97);
					hv___Tmp_Ctrl_Dict_Init_97 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_98);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_98);
					hv___Tmp_Ctrl_Dict_Init_98 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
						(HTuple(7).Append(5)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						25);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ROI_00L, hv_dd.TupleGetDictTuple("LLC"), "region");
					SetDictObject(ho_RegionDifference3, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}
				if (0 != (int(hv_ImageNum == 5)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, -16.1286, 3643.37, 3078.49, 4115.02);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1642.12, 2668.78, 2209.04, 3252.24);
					SetDictTuple(hv_at, "point", 1);
					SetDictTuple(hv_at, "rc", (HTuple(1901).Append(2799)));
					SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测镭雕区域偏小
					GenRectangle1(&ho_ROI_0, 77.6044, 1820.79, 522.458, 3161.09);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_00, &ho_ImageReduced71);
					GrayClosingRect(ho_ImageReduced71, &ho_ImageClosing61, 50, 20);
					ScaleImage(ho_ImageClosing61, &ho_ImageScaled17, 1.5, -50);
					Threshold(ho_ImageScaled17, &ho_Region84, 60, 255);

					SubImage(ho_ImageReduced71, ho_ImageScaled17, &ho_ImageSub51, 3, 128);
					Threshold(ho_ImageSub51, &ho_Region85, 0, 30);

					ClosingRectangle1(ho_Region85, &ho_RegionClosing15, 5, 30);
					OpeningRectangle1(ho_RegionClosing15, &ho_RegionOpening15, 5, 100);
					ShapeTrans(ho_RegionOpening15, &ho_RegionOpening15, "rectangle1");
					HeightWidthRatio(ho_RegionOpening15, &hv_Height5, &hv_Width5, &hv_Ratio3);
					if (0 != (int(hv_Width5<1128)))
					{
						MoveRegion(ho_RegionOpening15, &ho_RegionMoved66, 0, -1);
						Difference(ho_RegionOpening15, ho_RegionMoved66, &ho_RegionDifference50
							);

						DilationRectangle1(ho_RegionDifference50, &ho_RegionDilation58, 1128,
							1);
						MoveRegion(ho_RegionDilation58, &ho_RegionMoved67, -0, -564);
						Difference(ho_RegionMoved67, ho_RegionOpening15, &ho_RegionDifference51
							);

						AffineTransRegion(ho_RegionDifference51, &ho_RegionDifference51, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_RegionDifference51, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");
					}
					//屏蔽区域
					GenRectangle2(&ho_ROI_0, 1085.67, 2964.96, HTuple(24.8174).TupleRad(),
						212.068, 115.406);
					GenRectangle2(&ho_TMP_Region, 2025.88, 2969.46, HTuple(-23.8439).TupleRad(),
						206.469, 112.782);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					OpeningCircle(ho_ROI_0, &ho_ROI_0, 85);
					GenCircle(&ho_TMP_Region, 840.274, 3106.4, 155.55);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2206.3, 2119.86, 188.457);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2272.19, 3105.95, 150.206);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 3200.95, 3140.54, 267.859);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1143.03, -228.263, 1984.97, 1277.97);
					OpeningCircle(ho_TMP_Region, &ho_TMP_Region, 105);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1024.29, -105.85196, 1090.5, 1914.18);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 914.501, 1858.79, 169.89);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -50.3846, 1934.13, 901.388, 2045.86);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2031.82, -142.0635, 2128.4, 2065.3);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2291.85, 1956.01, 2565.09, 2042.93);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2542.33, 1975.95, 3080.54, 2069.09);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 13.8915, 24.0611, 3062.73, 3524.21);
					GenRectangle1(&ho_TMP_Region, -12.4912, 3071.32, 1249.64, 3572.01);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2348.92, 2865.85, 3081.37, 3801.04);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1819.24, 3184.48, 2444.1, 3656.21);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved64, 0, -60);
					AffineTransRegion(ho_RegionMoved64, &ho_RegionMoved641, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionMoved641, ho_ROI_00, &ho_RegionDifference48);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					//提取检测区域
					GenRectangle1(&ho_ROI_0, 0.6829, 0.751, 3068.57, 3665.42);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 200);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 50000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions2, "width", "and",
						1500, 99999);
					DilationCircle(ho_SelectedRegions2, &ho_RegionDilation3, 30);

					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union2(ho_RegionDilation3, ho_SelectedRegions, &ho_SelectedRegions);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
					FillUp(ho_RegionCount1, &ho_RegionFillUp12);
					ClosingRectangle1(ho_RegionFillUp12, &ho_RegionCount1, 50, 50);
					//检测区域
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference);
					ConcatObj(ho_Reg, ho_RegionDifference, &ho_Reg);
					//检测LD
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_101);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_101);
					hv___Tmp_Ctrl_Dict_Init_101 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_102);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_102);
					hv___Tmp_Ctrl_Dict_Init_102 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_103);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_103);
					hv___Tmp_Ctrl_Dict_Init_103 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
						(HTuple(7).Append(7)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "g_o",
						(HTuple(5).Append(7)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
						(HTuple(11).Append(5)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
						(HTuple(0).Append(35)));
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						25);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDifference, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//stop ()
				}
				if (0 != (int(hv_ImageNum == 6)))
				{
					//12.12 add-zjy 过切
					GenRectangle1(&ho_Rectangle13, 2300, 0, hv_Height4, 2000);
					ReduceDomain(ho_Image, ho_Rectangle13, &ho_ImageReduced113);
					BinaryThreshold(ho_ImageReduced113, &ho_Region126, "max_separability",
						"light", &hv_UsedThreshold3);
					Connection(ho_Region126, &ho_ConnectedRegions148);
					SelectShapeStd(ho_ConnectedRegions148, &ho_SelectedRegions160, "max_area",
						70);
					ShapeTrans(ho_SelectedRegions160, &ho_RegionTrans50, "convex");
					Difference(ho_RegionTrans50, ho_SelectedRegions160, &ho_RegionDifference69
						);
					OpeningRectangle1(ho_RegionDifference69, &ho_RegionOpening47, 3, 15);
					Connection(ho_RegionOpening47, &ho_ConnectedRegions149);
					SelectShape(ho_ConnectedRegions149, &ho_SelectedRegions161, (HTuple("area").Append("height")),
						"and", (HTuple(1500).Append(20)), (HTuple(9999).Append(999)));
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions161, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2194.98, -27.8839, 2718.85, 1239.26);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1009.7, 2890, 2039.88, 4144.57);
					//11.8 add-zjy 84 CLC压伤
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced102);
					Threshold(ho_ImageReduced102, &ho_Region116, 0, 80);
					OpeningCircle(ho_Region116, &ho_RegionOpening43, 9);
					Connection(ho_RegionOpening43, &ho_ConnectedRegions146);
					SelectShapeStd(ho_ConnectedRegions146, &ho_SelectedRegions158, "max_area",
						70);
					SmallestRectangle1(ho_SelectedRegions158, &hv_Row110, &hv_Column110, &hv_Row210,
						&hv_Column210);
					GenRectangle1(&ho_Rectangle10, hv_Row110, hv_Column110 - 200, hv_Row210,
						hv_Column110);
					ReduceDomain(ho_Image, ho_Rectangle10, &ho_ImageReduced103);
					Intensity(ho_Image, ho_ImageReduced103, &hv_Mean11, &hv_Deviation12);
					PaintRegion(ho_Rectangle10, ho_ImageReduced103, &ho_ImageResult9, hv_Mean11,
						"fill");
					DynThreshold(ho_ImageReduced103, ho_ImageResult9, &ho_RegionDynThresh13,
						15, "dark");
					ClosingCircle(ho_RegionDynThresh13, &ho_RegionClosing34, 3.5);
					Connection(ho_RegionClosing34, &ho_ConnectedRegions131);
					SelectShape(ho_ConnectedRegions131, &ho_SelectedRegions138, (HTuple("area").Append("width")),
						"and", (HTuple(200).Append(35)), (HTuple(5000).Append(999)));
					ConcatObj((*hv_dt).TupleGetDictObject("84"), ho_SelectedRegions138, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "84");

					SetDictTuple(hv_at, "point", 1);
					SetDictTuple(hv_at, "rc", (HTuple(1162).Append(3048)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "rscal", (HTuple(3).Append(-100)));
					SetDictTuple(hv_at, "scal", (HTuple(3).Append(-150)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					//at.rotreg := ROI_0
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测过切
					GenRectangle1(&ho_ROI_0, 1165.49, 3044.67, 1916.28, 4304.96);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationRectangle1(ho_ROI_0, &ho_RegionDilation44, 1, 100);
					Difference(ho_RegionDilation44, ho_ROI_0, &ho_RegionDifference41);
					DilationCircle(ho_RegionDifference41, &ho_RegionDilation45, 15);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation45, &ho_ImageReduced54
						);
					GrayClosingRect(ho_ImageReduced54, &ho_ImageClosing44, 7, 7);
					MedianRect(ho_ImageClosing44, &ho_ImageMedian21, 5, 5);
					GrayClosingRect(ho_ImageMedian21, &ho_ImageClosing45, 3, 80);
					SubImage(ho_ImageMedian21, ho_ImageClosing45, &ho_ImageSub39, 2, 128);
					Threshold(ho_ImageSub39, &ho_Region69, 0, 0);
					Intersection(ho_Region69, ho_RegionDifference41, &ho_RegionIntersection18
						);
					Connection(ho_RegionIntersection18, &ho_ConnectedRegions72);
					SelectShape(ho_ConnectedRegions72, &ho_SelectedRegions72, "area", "and",
						50, 99999);
					SelectGray(ho_SelectedRegions72, ho_ImageAffineTrans, &ho_SelectedRegions73,
						"mean", "and", 0, 60);
					AffineTransRegion(ho_SelectedRegions73, &ho_SelectedRegions73, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions73, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//检测LC压伤
					//屏蔽区域
					GenCircle(&ho_ROI_0, 2722.46, 1644.11, 250.885);
					//12.08add-zjy
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced112);
					Threshold(ho_ImageReduced112, &ho_Region125, 180, 255);
					Connection(ho_Region125, &ho_ConnectedRegions147);
					FillUp(ho_ConnectedRegions147, &ho_RegionFillUp20);
					SelectShapeStd(ho_RegionFillUp20, &ho_SelectedRegions159, "max_area", 70);
					RegionFeatures(ho_SelectedRegions159, "outer_radius", &hv_ORVal);
					if (0 != (int(hv_ORVal<85)))
					{
						ConcatObj((*hv_dt).TupleGetDictObject("81"), ho_SelectedRegions159, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "81");

					}



					GenRectangle1(&ho_Rectangle2, 1512, -500, 2522, 1394);
					Union2(ho_ROI_0, ho_Rectangle2, &ho_ROI_0);

					GenRectangle1(&ho_ROI_01, 2427.5, 1700.2, 2708.36, 2525.25);
					Union2(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					GrayClosingRect(ho_ImageAffineTrans, &ho_ImageClosing28, 20, 20);
					SubImage(ho_ImageAffineTrans, ho_ImageClosing28, &ho_ImageSub15, 4.5, 128);
					Threshold(ho_ImageSub15, &ho_Region33, 0, 60);
					RankRegion(ho_Region33, &ho_RegionCount8, 15, 15, 70);
					RankRegion(ho_RegionCount8, &ho_RegionCount9, 120, 120, 5000);
					FillUp(ho_RegionCount9, &ho_RegionFillUp9);
					Connection(ho_RegionFillUp9, &ho_ConnectedRegions40);
					SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions39, "area", "and",
						500000, 99999999);
					Union1(ho_SelectedRegions39, &ho_RegionUnion12);
					Difference(ho_RegionUnion12, ho_ROI_0, &ho_RegionUnion12);
					ErosionCircle(ho_RegionUnion12, &ho_RegionErosion7, 35);
					//
					ConcatObj(ho_RegionErosion7, ho_Reg, &ho_Reg);
					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_106);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_106);
					hv___Tmp_Ctrl_Dict_Init_106 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_107);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_107);
					hv___Tmp_Ctrl_Dict_Init_107 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionErosion7, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}
				if (0 != (int(hv_ImageNum == 7)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2357.81, 1752.68, 2726.45, 2811.79);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 2003.41, 1263.95, 2740.69, 2703.4);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(2503).Append(1450)));
					SetDictTuple(hv_at, "opening", (HTuple(300).Append(100)));
					SetDictTuple(hv_at, "move", (HTuple(-130).Append(0)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "rscal", (HTuple(2.5).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测棱边亮线
					GenRectangle1(&ho_ROI_0, 2480.77, 1659.37, 2605.35, 4093.57);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced74);
					GrayClosingRect(ho_ImageReduced74, &ho_ImageClosing68, 1, 10);
					GrayOpeningRect(ho_ImageClosing68, &ho_ImageOpening56, 1, 10);
					GrayOpeningRect(ho_ImageOpening56, &ho_ImageOpening57, 30, 10);
					SubImage(ho_ImageOpening57, ho_ImageOpening56, &ho_ImageSub55, 1, 128);
					Threshold(ho_ImageSub55, &ho_Region91, 0, 30);
					FillUp(ho_Region91, &ho_RegionFillUp13);
					Connection(ho_RegionFillUp13, &ho_ConnectedRegions88);
					SelectShape(ho_ConnectedRegions88, &ho_SelectedRegions93, (HTuple("width").Append("height")),
						"and", (HTuple(1000).Append(4)), (HTuple(99999).Append(30)));
					AffineTransRegion(ho_SelectedRegions93, &ho_SelectedRegions93, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("117"), ho_SelectedRegions93, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "117");
					//检测镭雕区域大亮斑
					//11.8 add-镭雕不全-ZJY
					GenRectangle1(&ho_TMP_Region, 2420, 1600, 3120.25, 4110.78);
					ReduceDomain(ho_ImageAffineTrans, ho_TMP_Region, &ho_ImageReduced104);
					Threshold(ho_ImageReduced104, &ho_Region117, 240, 255);
					OpeningCircle(ho_Region117, &ho_RegionOpening44, 5);
					FillUp(ho_RegionOpening44, &ho_RegionFillUp19);
					Connection(ho_RegionFillUp19, &ho_ConnectedRegions132);
					SelectShape(ho_ConnectedRegions132, &ho_SelectedRegions139, "area", "and",
						3500, 99999);
					AffineTransRegion(ho_SelectedRegions139, &ho_SelectedRegions139, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions139, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//检测区域
					GenRectangle1(&ho_ROI_0, -52.2276, -67.8844, 3116.86, 701.651);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced88);
					GenRectangle1(&ho_TMP_Region, 1023.44, 544.434, 3100.31, 1620.13);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2408.65, 1520.84, 3120.25, 4110.78);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1484.93, 453.641, 245.789);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenCircle(&ho_TMP_Region, 330.522, 395.529, 206.861);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2395.09, 925.171, 3185.48, 1599.67);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0L, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_110);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_110);
					hv___Tmp_Ctrl_Dict_Init_110 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_111);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_111);
					hv___Tmp_Ctrl_Dict_Init_111 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ROI_0L, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}

					//镭雕检测区域
					GenRectangle1(&ho_ROI_0, -87.587, -101.84, 2767.07, 2281.24);
					GenRectangle1(&ho_TMP_Region, 1981.01, -209.41, 3197.34, 4069.96);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 4, 128);
					Threshold(ho_ImageSub, &ho_Region1, 80, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 150);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
					//镭雕屏蔽区域
					GenCircle(&ho_ROI_0, 320.672, 389.181, 150.894);
					GenRectangle2(&ho_TMP_Region, 221.311, 542.34, HTuple(27.9008).TupleRad(),
						79.6262, 40.1392);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -160.39186, 583.734, 217.171, 654.105);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 439.438, 249.188, HTuple(-136.541).TupleRad(),
						76.6382, 30.2082);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 434.38, -120.33844, 513.452, 223.107);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 447.862, 535.615, HTuple(-42.2845).TupleRad(),
						76.9876, 40.9355);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 469.014, 579.231, 2059.87, 635.151);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1304.5, -126.8194, 1408.01, 591.328);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1505.26, 454.666, 210.184);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2187.29, 491.167, HTuple(-132.685).TupleRad(),
						187.116, 32.3074);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2309.37, -120.363943, 2363.24, 380.346);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -160.341433, 721.495, 2030.29, 804.851);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1005.65, 840.281, HTuple(-40.5261).TupleRad(),
						74.9319, 25.8139);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 989.207, 871.618, 1063.73, 1393.19);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2093.43, 658.809, HTuple(-0).TupleRad(),
						97.2766, 33.1179);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2066.38, 721.023, HTuple(-126.374).TupleRad(),
						73.3391, 34.0104);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2158.31, 677.089, HTuple(-116.99).TupleRad(),
						87.0929, 32.1444);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2271.06, 662.45, HTuple(-88.8986).TupleRad(),
						76.1569, 30.7368);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2383.58, 698.149, HTuple(-56.8986).TupleRad(),
						56.8868, 28.4768);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2460.89, 758.446, HTuple(-38.4908).TupleRad(),
						51.5994, 25.9059);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2504.36, 844.545, HTuple(-20.9317).TupleRad(),
						75.3944, 29.5558);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2522.81, 965.708, HTuple(7.27676).TupleRad(),
						69.3633, 21.602);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2482.58, 1080.4, HTuple(24.7077).TupleRad(),
						80.5727, 28.9725);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2420.49, 1143.12, 2484.92, 1468.11);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2492.66, 942.193, 3117.52, 1562.89);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 59.4537, 1826.55, 2579.02, 4077.24);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					DilationCircle(ho_ROI_0, &ho_ROI_0, 10);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//9.23 add-zjy 镭雕不全(大)
					Threshold(ho_ImageReduced88, &ho_Region106, 230, 255);
					OpeningCircle(ho_Region106, &ho_RegionOpening31, 3.5);
					Connection(ho_RegionOpening31, &ho_ConnectedRegions107);
					Difference(ho_ConnectedRegions107, ho_ROI_00, &ho_RegionDifference64);
					SelectShape(ho_RegionDifference64, &ho_SelectedRegions118, "area", "and",
						550, 999999);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions118, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 32.4254, 0.57268, 3085.67, 4063.39);
					GenRectangle1(&ho_TMP_Region, 603.358, -98.7223, 1281.86, 430.851);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2473.37, -40.8002, 3168.42, 521.871);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 6.34545, 1273.9, 2654.15, 4227.92);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved64, 0, -60);
					AffineTransRegion(ho_RegionMoved64, &ho_RegionMoved641, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionMoved641, ho_ROI_00, &ho_RegionDifference48);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference24);


					//检测台阶及亮斑
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_113);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_113);
					hv___Tmp_Ctrl_Dict_Init_113 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_114);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_114);
					hv___Tmp_Ctrl_Dict_Init_114 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_115);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_115);
					hv___Tmp_Ctrl_Dict_Init_115 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						30);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDifference24, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}
				if (0 != (int(hv_ImageNum == 8)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, -54.2096, -21.8826, 3131.43, 656.633);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1828.07, 1377.51, 2570, 2635.57);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(2358).Append(1607)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测CLC毛刺
					GenRectangle1(&ho_ROI_0, 2362.78, 3433.18, 2523.85, 3573.71);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					DilationCircle(ho_ROI_0, &ho_RegionDilation60, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation60, &ho_ImageReduced76
						);
					DerivateGauss(ho_ImageReduced76, &ho_DerivGauss, 3, "none");
					ScaleImageMax(ho_DerivGauss, &ho_ImageScaleMax);
					AddImage(ho_ImageScaleMax, ho_ImageScaleMax, &ho_ImageResult8, 1, 0);
					Threshold(ho_ImageResult8, &ho_Region73, 0, 200);
					ClosingCircle(ho_Region73, &ho_Region73, 5);
					Connection(ho_Region73, &ho_ConnectedRegions51);
					SelectShapeStd(ho_ConnectedRegions51, &ho_RegionClosing21, "max_area",
						70);
					SelectShape(ho_RegionClosing21, &ho_SelectedRegions95, "inner_radius",
						"and", 8, 99999);
					//判断条件
					Threshold(ho_ImageResult8, &ho_Region79, 240, 255);
					FillUp(ho_Region79, &ho_RegionFillUp15);
					Connection(ho_RegionFillUp15, &ho_ConnectedRegions89);
					SelectObj(ho_ConnectedRegions89, &ho_ObjectSelected2, 1);
					ShapeTrans(ho_ObjectSelected2, &ho_RegionTrans45, "convex");
					Intersection(ho_RegionTrans45, ho_RegionClosing21, &ho_RegionIntersection19
						);
					RegionFeatures(ho_RegionIntersection19, "area", &hv_RVal);
					if (0 != (int(hv_RVal>190)))
					{
						AffineTransRegion(ho_SelectedRegions95, &ho_SelectedRegions95, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("118"), ho_SelectedRegions95, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "118");
					}
					//镭雕屏蔽区域

					GenCircle(&ho_ROI_0, 49.435, 1295.58, 136.872);
					GenRectangle1(&ho_TMP_Region, 54.6478, 1158.76, 205.899, 1428.01);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -56.7464, 1363.45, 15.0036, 1593.29);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 15.4757, 1577.86, 121.56);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 67.9801, 1423.23, 111.909, 1503.74);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 41.0804, 1665.78, 96.7233, 1916.12);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -17.5242, 1880.96, 60.0829, 1933.66);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -61.3076, 1682.69, -2.73619, 1931.56);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle2(&ho_TMP_Region, 48.4906, 2003.04, HTuple(-43.3196).TupleRad(),
						99.5687, 33.1179);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					DilationCircle(ho_ROI_0, &ho_ROI_0, 15);
					GenRectangle2(&ho_TMP_Region, 501.887, 3424.87, HTuple(39.8124).TupleRad(),
						91.4783, 42.1445);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 430.362, 3476.91, 506.953, 4306.1);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1276.4, 3489.93, 1419.23, 4312.92);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1783.89, 807.105, 165.06);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1859.95, 905.153, 1927.31, 1124.74);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1613.16, 1146.87, 1826.95, 1224.46);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1857.7, 1141.02, HTuple(48.821).TupleRad(),
						77.8196, 34.0192);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1827.76, 941.808, 1873.15, 1009.15);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1921.98, 722.014, HTuple(-131.525).TupleRad(),
						68.4549, 23.4257);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1966.97, 648.335, 3079.1, 724.423);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1806.39, 3407.72, 2247.3, 3507.07);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2279.13, 3486.11, HTuple(-54.6954).TupleRad(),
						86.1249, 34.5965);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2292.31, 3528.45, 2356.74, 4303.77);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2315.17, 3469.02, 2497.5, 3518.73);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2522.17, 3472.86, HTuple(-128.843).TupleRad(),
						47.8831, 23.754);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2534.23, 3051.73, 2601.58, 3457.68);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2706.02, 1592.02, 253.447);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2726.78, 2980.34, 205.116);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2802.08, 3426.84, 209.492);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2530.72, 1748.88, 2633.15, 2975.05);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2881.57, 1301.57, 3078.22, 1392.64);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2854.66, 1371.94, HTuple(-122.615).TupleRad(),
						61.4391, 33.1179);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2659.55, 3210.79, HTuple(-4.51466).TupleRad(),
						157.788, 34.8716);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2844.57, 1702.57, 2923.59, 2917.04);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2933.7, 3528.35, 3070.32, 3604.93);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2919.2, 3631.83, HTuple(34.8285).TupleRad(),
						57.9918, 33.1179);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 32.1911, 734.451, 3073.63, 4069.11);
					GenCircle(&ho_TMP_Region, -1673.17, 3501.11, 1778.96);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, -17.8772, 662.977, 1815.32, 1294.71);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 416.628, 1180.27, 1699.45, 1519.58);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 528.498, 1990.32, 428.408);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 885.436, 2481.84, 908.499);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2045.35, 2028.84, 407.505);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2027.8, 2976.77, 431.977);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 570.19, 2950.98, 477.751);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 574.495, 3563.63, 1264.96, 4207.28);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 438.897, 3246.26, 1936.9, 3519.37);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1235.76, 3470.14, 1870.85, 3666.21);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 464.652, 1574.39, 2418.65, 3300.57);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2483.89, 3678.21, 3098.68, 4137.69);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved64, -10, -60);
					AffineTransRegion(ho_RegionMoved64, &ho_RegionMoved641, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionMoved641, ho_ROI_00, &ho_RegionDifference48);
					ErosionCircle(ho_RegionDifference48, &ho_RegionDifference48, 8);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//镭雕检测区域
					GenRectangle1(&ho_ROI_0, -44.7706, 530.139, 3114.49, 4122.48);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 900);
					//
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);

					FillUpShape(ho_RegionDifference, &ho_RegionDifference, "area", 1, 10000);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference7);
					ConcatObj(ho_Reg, ho_RegionDifference7, &ho_Reg);


					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_118);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_118);
					hv___Tmp_Ctrl_Dict_Init_118 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_119);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_119);
					hv___Tmp_Ctrl_Dict_Init_119 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "g_o",
						(HTuple(20).Append(50)));
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_120);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_120);
					hv___Tmp_Ctrl_Dict_Init_120 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						30);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference7, hv_dd.TupleGetDictTuple("LD"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					//检测压伤
					GenRectangle1(&ho_ROI_0, 2.42571, 622.677, 3068.57, 4092.57);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);

					TextureLaws(ho_ImageReduced, &ho_ImageTexture, "el", 2, 5);
					TextureLaws(ho_ImageReduced, &ho_ImageTexture1, "le", 2, 5);
					AddImage(ho_ImageTexture, ho_ImageTexture1, &ho_ImageResult, 0.8, -30);

					Threshold(ho_ImageResult, &ho_Region2, 0, 60);
					RankRegion(ho_Region2, &ho_RegionCount4, 20, 20, 250);
					RankRegion(ho_RegionCount4, &ho_RegionCount5, 30, 30, 350);

					FillUpShape(ho_RegionCount5, &ho_RegionFillUp2, "area", 1, 20000);
					OpeningCircle(ho_RegionFillUp2, &ho_RegionFillUp2, 25);
					Connection(ho_RegionFillUp2, &ho_ConnectedRegions5);
					SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and",
						2500000, 9999999999999);
					CountObj(ho_SelectedRegions5, &hv_Number);
					if (0 != hv_Number)
					{
						DilationCircle(ho_SelectedRegions5, &ho_RegionDilation1, 20);
						DilationCircle(ho_RegionDilation1, &ho_RegionDilation7, 55);

						Difference(ho_RegionDilation7, ho_RegionDilation1, &ho_RegionDifference5
							);
						DilationCircle(ho_RegionDifference5, &ho_RegionDilation8, 5);
						//
						ConcatObj(ho_Reg, ho_RegionDilation8, &ho_Reg);

						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation8, &ho_ImageReduced1
							);

						ZoomImageFactor(ho_ImageReduced1, &ho_ImageZoomed, 0.5, 0.5, "constant");
						MedianRect(ho_ImageZoomed, &ho_ImageMedian6, 7, 7);

						GrayClosingRect(ho_ImageMedian6, &ho_ImageClosing1, 30, 12);
						MedianRect(ho_ImageClosing1, &ho_ImageMedian7, 5, 5);
						GrayClosingRect(ho_ImageMedian7, &ho_ImageClosing6, 150, 30);
						SubImage(ho_ImageMedian7, ho_ImageClosing6, &ho_ImageSub4, 2, 128);
						Threshold(ho_ImageSub4, &ho_Region8, 0, 60);
						ZoomRegion(ho_Region8, &ho_RegionZoom, 2, 2);
						Intersection(ho_RegionZoom, ho_RegionDifference5, &ho_RegionIntersection1
							);
						Difference(ho_RegionIntersection1, ho_ROI_00, &ho_RegionIntersection1
							);
						Connection(ho_RegionIntersection1, &ho_ConnectedRegions6);
						SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions6, ((HTuple("area").Append("width")).Append("inner_radius")),
							"and", ((HTuple(150).Append(5)).Append(2.5)), ((HTuple(999999).Append(200)).Append(999)));
						AffineTransRegion(ho_SelectedRegions6, &ho_SelectedRegions6, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("84"), ho_SelectedRegions6, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "84");
					}

					//SJ检测塑胶漏铁
					GenRectangle1(&ho_ROI_0, 5.02745, -71.3233, 3091, 614.474);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced105);
					ScaleImage(ho_ImageReduced105, &ho_ImageScaled21, 3, -180);
					Threshold(ho_ImageScaled21, &ho_Region118, 200, 255);
					ClosingRectangle1(ho_Region118, &ho_RegionClosing35, 10, 40);
					Connection(ho_RegionClosing35, &ho_ConnectedRegions133);
					SelectShape(ho_ConnectedRegions133, &ho_SelectedRegions140, (HTuple("area").Append("height")),
						"and", (HTuple(12000).Append(1500)), (HTuple(99999).Append(3500)));
					CountObj(ho_SelectedRegions140, &hv_Number5);

					if (0 != hv_Number5)
					{
						SmallestRectangle1(ho_SelectedRegions140, &hv_Row111, &hv_Column111,
							&hv_Row211, &hv_Column211);
						GenRectangle1(&ho_Rectangle11, 0, hv_Column211 + 20, hv_Height4 - 1, hv_Column211 + 200);
						ReduceDomain(ho_Image, ho_Rectangle11, &ho_ImageReduced106);
						ScaleImage(ho_ImageReduced106, &ho_ImageScaled22, 3, -200);
						Threshold(ho_ImageScaled22, &ho_Region119, 200, 255);
						Connection(ho_Region119, &ho_ConnectedRegions134);
						SelectShape(ho_ConnectedRegions134, &ho_SelectedRegions141, (HTuple("area").Append("ra")),
							"and", (HTuple(600).Append(20)), (HTuple(99999).Append(80)));
						SelectGray(ho_SelectedRegions141, ho_ImageScaled22, &ho_SelectedRegions142,
							"mean", "and", 245, 255);
						ConcatObj((*hv_dt).TupleGetDictObject("87"), ho_SelectedRegions142, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "87");
					}
					//count_obj (SelectedRegions141, Number5)
					//for Index2 := 1 to Number5 by 1
					//select_obj (SelectedRegions141, ObjectSelected4, Index2)
					//intensity (ObjectSelected4, ImageScaled22, Mean12, Deviation13)
					//if (Mean12>245)
					//concat_obj (dt.['87'], ObjectSelected4, dt.['87'])
					//endif
					//endfor

				}
				if (0 != (int(hv_ImageNum == 9)))
				{
					//9.11 add-zjy 大面镭雕不全检测
					BinaryThreshold(ho_Image, &ho_Region101, "max_separability", "light", &hv_UsedThreshold2);
					Connection(ho_Region101, &ho_ConnectedRegions101);
					SelectShapeStd(ho_ConnectedRegions101, &ho_SelectedRegions107, "max_area",
						70);
					ClosingCircle(ho_SelectedRegions107, &ho_RegionClosing26, 15);
					OpeningRectangle1(ho_RegionClosing26, &ho_RegionTmp, 3, 253);
					RegionFeatures(ho_RegionTmp, "column1", &hv_c1);
					//园区域
					FillUpShape(ho_RegionClosing26, &ho_RegionFillUp17, "area", 149999, 99999999);
					Difference(ho_RegionFillUp17, ho_RegionClosing26, &ho_RegionDifference60
						);
					DilationCircle(ho_RegionDifference60, &ho_RegionCir, 12);

					ReduceDomain(ho_Image, ho_RegionClosing26, &ho_ImageReduced85);
					Intensity(ho_RegionClosing26, ho_ImageReduced85, &hv_Mean8, &hv_Deviation9);
					PaintRegion(ho_RegionClosing26, ho_ImageReduced85, &ho_ImageResult15, 140,
						"fill");
					DynThreshold(ho_ImageReduced85, ho_ImageResult15, &ho_RegionDynThresh7,
						95, "light");
					OpeningCircle(ho_RegionDynThresh7, &ho_RegionOpening26, 3.5);
					Connection(ho_RegionOpening26, &ho_ConnectedRegions102);
					SelectShapeProto(ho_ConnectedRegions102, ho_RegionCir, &ho_SelectedRegions110,
						"overlaps_rel", 1, 100);
					SelectShape(ho_SelectedRegions110, &ho_SelectedRegions110, (HTuple("area").Append("column1")),
						"and", HTuple(1500).TupleConcat(hv_c1 + 5), (HTuple(9999999).Append(9999)));
					SelectGray(ho_SelectedRegions110, ho_Image, &ho_SelectedRegions109, "mean",
						"and", 220, 255);

					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions109, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//SJ定位点偏移量
					AreaCenter(ho_RegionDifference60, &hv_Area5, &hv_Row6, &hv_Column6);
					hv_R = hv_Row6 - 1588.55;
					hv_C = hv_Column6 - 1558.91;

					//sj生成blc检测区域
					//gen_region_runs (ROI_0, [633,634,635,636,637,638,639,640,641,642,643,644,645,646,647,648,649,650,651,652,653,654,655,656,657,658,659,660,661,662,663,664,665,666,667,668,669,670,671,672,673,674,675,676,677,678,679,680,681,682,683,684,685,686,687,688,689,690,691,692,693,694,695,696,697,698,699,699,700,700,700,701,701,701,702,702,702,703,703,703,704,704,704,705,705,706,706,707,707,708,708,709,709,710,710,711,711,712,712,713,713,714,714,715,715,716,716,717,717,718,718,719,719,720,720,721,721,722,722,723,723,724,724,725,725,726,726,727,727,728,728,729,729,730,730,731,731,732,732,733,733,734,734,735,735,736,736,737,737,738,738,739,739,740,740,741,741,742,742,743,743,744,744,745,745,746,746,747,747,748,748,749,749,750,750,751,751,752,753,754,755,756,757,758,759,760,761,762,763,764,765,766,767,768,769,770,771,772,773,774,775,776,777,778,779,780,781,782,783,784,785,786,787,788,789,790,791,792,793,794,795,796,797,798,799,800,801,802,803,804,805,806,807,808,809,810,811,812,813,814,815,816,817,818,819,820,821,822,823,824,825,826,827,828,829,830,831,832,833,834,835,836,837,838,839,840,841,842,843,844,845,846,847,848,849,850,851,852,853,854,855,856,857,858,859,860,861,862,863,864,865,866,867,868,869,870,871,872,873,874,875,876,877,878,879,880,881,882,883,884,885,886,887,888,889,890,891,892,893,894,895,896,897,898,899,900,901,902,903,904,905,906,907,908,909,910,911,912,913,914,915,916,917,918,919,920,921,922,923,924,925,926,927,928,929,930,931,932,933,934,935,936,937,938,939,940,941,942,943,944,945,946,947,948,949,950,951,952,953,954,955,956,957,958,959,960,961,962,963,964,965,966,967,968,969,970,971,972,973,974,975,976,977,978,979,980,981,982,983,984,985,986,987,988,989,990,991,992,993,994,995,996,997,998,999,1000,1001,1002,1003,1004,1005,1006,1007,1008,1009,1010,1011,1012,1013,1014,1015,1016,1017,1018,1019,1020,1021,1022,1023,1024,1025,1026,1027,1028,1029,1030,1031,1032,1033,1034,1035,1036,1037,1038,1039,1040,1041,1042,1043,1044,1045,1046,1047,1048,1049,1050,1051,1052,1053,1054,1055,1056,1057,1058,1059,1060,1061,1062,1063,1064,1065,1066,1067,1068,1069,1070,1071,1072,1073,1074,1075,1076,1077,1078,1079,1080,1081,1082,1083,1084,1085,1086,1087,1088,1089,1090,1091,1092,1093,1094,1095,1096,1097,1098,1099,1100,1101,1102,1103,1104,1105,1106,1107,1108,1109,1110,1111,1112,1113,1114,1115,1116,1117,1118,1119,1120,1121,1122,1123,1124,1125,1126,1127,1128,1129,1130,1131,1132,1133,1134,1135,1136,1137,1138,1139,1140,1141,1142,1143,1144,1145,1146,1147,1148,1149,1150,1151,1152,1153,1154,1155,1156,1157,1158,1159,1160,1161,1162,1163,1164,1165,1166,1167,1168,1169,1170,1171,1172,1173,1174,1175,1176,1177,1178,1179,1180,1181,1182,1183,1184,1185,1186,1187,1188,1189,1190,1191,1192,1193,1194,1195,1196,1197,1198,1199,1200,1201,1202,1203,1204,1205,1206,1207,1208,1209,1210,1211,1212,1213,1214,1215,1216,1217,1218,1219,1220,1221,1222,1223,1224,1225,1226,1227,1228,1229,1230,1231,1232,1233,1234,1235,1236,1237,1238,1239,1240,1241,1242,1243,1244,1245,1246,1247,1248,1249,1250,1251,1252,1253,1254,1255,1256,1257,1258,1259,1260,1261,1262,1263,1264,1265,1266,1267,1268,1269,1270,1271,1272,1273,1274,1275,1276,1277,1278,1279,1280,1281,1282,1283,1284,1285,1286,1287,1288,1289,1290,1291,1292,1293,1294,1295,1296,1297,1298,1299,1300,1301,1302,1303,1304,1305,1306,1307,1308,1309,1310,1311,1312,1313,1314,1315,1316,1317,1318,1319,1320,1321,1322,1323,1324,1325,1326,1327,1328,1329,1330,1331,1332,1333,1334,1335,1336,1337,1338,1339,1340,1341,1342,1343,1344,1345,1346,1347,1348,1349,1350,1351,1352,1353,1354,1355,1356,1357,1358,1359,1360,1361,1362,1363,1364,1365,1366,1367,1368,1369,1370,1371,1372,1373,1374,1375,1376,1377,1378,1379,1380,1381,1382,1383,1384,1385,1386,1387,1388,1389,1390,1391,1392,1393,1394,1395,1396,1397,1398,1399,1400,1401,1402,1403,1404,1405,1406,1407,1408,1409,1410,1411,1412,1413,1414,1415,1416,1417,1418,1419,1420,1421,1422,1423,1424,1425,1426,1427,1428,1429,1430,1431,1432,1433,1434,1435,1436,1437,1438,1439,1440,1441,1442,1443,1444,1445,1446,1447,1448,1449,1450,1451,1452,1453,1454,1455,1456,1457,1458,1459,1460,1461,1462,1463,1464,1465,1466,1467,1468,1469,1470,1471,1472,1473,1474,1475,1476,1477,1478,1479,1480,1481,1482,1483,1484,1485,1486,1487,1488,1489,1490,1491,1492,1493,1494,1495,1496,1497,1498,1499,1500,1501,1502,1503,1504,1505,1506,1507,1508,1509,1510,1511,1512,1513,1514,1515,1516,1517,1518,1519,1520,1521,1522,1523,1524,1525,1526,1527,1528,1529,1530,1531,1532,1533,1534,1535,1536,1537,1538,1539,1540,1541,1542,1543,1544,1545,1546,1547,1548,1549,1550,1551,1552,1553,1554,1555,1556,1557,1558,1559,1560,1561,1562,1563,1564,1565,1566,1567,1568,1569,1570,1571,1572,1573,1574,1575,1576,1577,1578,1579,1580,1581,1582,1583,1584,1585,1586,1587,1588,1589,1590,1591,1592,1593,1594,1595,1596,1597,1598,1599,1600,1601,1602,1603,1604,1605,1606,1607,1608,1609,1610,1611,1612,1613,1614,1615,1616,1617,1618,1619,1620,1621,1622,1623,1624,1625,1626,1627,1628,1629,1630,1631,1632,1633,1634,1635,1636,1637,1638,1639,1640,1641,1642,1643,1644,1645,1646,1647,1648,1649,1650,1651,1652,1653,1654,1655,1656,1657,1658,1659,1660,1661,1662,1663,1664,1665,1666,1667,1668,1669,1670,1671,1672,1673,1674,1675,1676,1677,1678,1679,1680,1681,1682,1683,1684,1685,1686,1687,1688,1689,1690,1691,1692,1693,1694,1695,1696,1697,1698,1699,1700,1701,1702,1703,1704,1705,1706,1707,1708,1709,1710,1711,1712,1713,1714,1715,1716,1717,1718,1719,1720,1721,1722,1723,1724,1725,1726,1727,1728,1729,1730,1731,1732,1733,1734,1735,1736,1737,1738,1739,1740,1741,1742,1743,1744,1745,1746,1747,1748,1749,1750,1751,1752,1753,1754,1755,1756,1757,1758,1759,1760,1761,1762,1763,1764,1765,1766,1767,1768,1769,1770,1771,1772,1773,1774,1775,1776,1777,1778,1779,1780,1781,1782,1783,1784,1785,1786,1787,1788,1789,1790,1791,1792,1793,1794,1795,1796,1797,1798,1799,1800,1801,1802,1803,1804,1805,1806,1807,1808,1809,1810,1811,1812,1813,1814,1815,1816,1817,1818,1819,1820,1821,1822,1823,1824,1825,1826,1827,1828,1829,1830,1831,1832,1833,1834,1835,1836,1837,1838,1839,1840,1841,1842,1843,1844,1845,1846,1847,1848,1849,1850,1851,1852,1853,1854,1855,1856,1857,1858,1859,1860,1861,1862,1863,1864,1865,1866,1867,1868,1869,1870,1871,1872,1873,1874,1875,1876,1877,1878,1879,1880,1881,1882,1883,1884,1885,1886,1887,1888,1889,1890,1891,1892,1893,1894,1895,1896,1897,1898,1899,1900,1901,1902,1903,1904,1905,1906,1907,1908,1909,1910,1911,1912,1913,1914,1915,1916,1917,1918,1919,1920,1921,1922,1923,1924,1925,1926,1927,1928,1929,1930,1931,1932,1933,1934,1935,1936,1937,1938,1939,1940,1941,1942,1943,1944,1945,1946,1947,1948,1949,1950,1951,1952,1953,1954,1955,1956,1957,1958,1959,1960,1961,1962,1963,1964,1965,1966,1967,1968,1969,1970,1971,1972,1973,1974,1975,1976,1977,1978,1979,1980,1981,1982,1983,1984,1985,1986,1987,1988,1989,1990,1991,1992,1993,1994,1995,1996,1997,1998,1999,2000,2001,2002,2003,2004,2005,2006,2007,2008,2009,2010,2011,2012,2013,2014,2015,2016,2017,2018,2019,2020,2021,2022,2023,2024,2025,2026,2027,2028,2029,2030,2031,2032,2033,2034,2035,2036,2037,2038,2039,2040,2041,2042,2043,2044,2045,2046,2047,2048,2049,2050,2051,2052,2053,2054,2055,2056,2057,2058,2059,2060,2061,2062,2063,2064,2065,2066,2067,2068,2069,2070,2071,2072,2073,2074,2075,2076,2077,2078,2079,2080,2081,2082,2083,2084,2085,2086,2087,2088,2089,2090,2091,2092,2093,2094,2095,2096,2097,2098,2099,2100,2101,2102,2103,2104,2105,2106,2107,2108,2109,2110,2111,2112,2113,2114,2115,2116,2117,2118,2119,2120,2121,2122,2123,2124,2125,2126,2127,2128,2129,2130,2131,2132,2133,2134,2135,2136,2137,2138,2139,2140,2141,2142,2143,2144,2145,2146,2147,2148,2149,2150,2151,2152,2153,2154,2155,2156,2157,2158,2159,2160,2161,2162,2163,2164,2165,2166,2167,2168,2169,2170,2171,2172,2173,2174,2175,2176,2177,2178,2179,2180,2181,2182,2183,2184,2185,2186,2187,2188,2189,2190,2191,2192,2193,2194,2195,2196,2197,2198,2199,2200,2201,2202,2203,2204,2205,2206,2207,2208,2209,2210,2211,2212,2213,2214,2215,2216,2217,2218,2219,2220,2221,2222,2223,2224,2225,2226,2227,2228,2229,2230,2231,2232,2233,2234,2235,2236,2237,2238,2239,2240,2241,2242,2243,2244,2245,2246,2247,2248,2249,2250,2251,2252,2253,2254,2255,2256,2257,2258,2259,2260,2261,2262,2263,2264,2265,2266,2267,2268,2269,2270,2271,2272,2273,2274,2275,2276,2277,2278,2279,2280,2281,2282,2283,2284,2285,2286,2287,2288,2289,2290,2291,2292,2293,2294,2295,2296,2297,2298,2299,2300,2301,2302,2303,2304,2305,2306,2307,2308,2309,2310,2311,2312,2313,2314,2315,2316,2317,2318,2319,2320,2321,2322,2323,2324,2325,2326,2327,2328,2329,2330,2331,2332,2333,2334,2335,2336,2337,2338,2339,2340,2341,2342,2343,2344,2345,2346,2347,2348,2349,2350,2351,2352,2353,2354,2355,2356,2357,2358,2359,2360,2361,2362,2363,2364,2365,2366,2367,2368,2369,2370,2371,2372,2373,2374,2375,2376,2377,2378,2379,2380,2381,2382,2383,2384,2385,2386,2387,2388,2389,2390,2391,2392,2393,2394,2395,2396,2397,2398,2399,2400,2401,2402,2403,2404,2405,2406,2407,2408,2409,2410,2411,2412,2413,2414,2415,2416,2417,2418,2419,2420,2421,2422,2423,2424,2425,2426,2427,2428,2429,2430,2431,2432,2433,2434,2435,2436,2437,2438,2439,2440,2441,2442,2443,2444,2445,2446,2447,2448,2449,2450,2450,2451,2451,2452,2452,2453,2453,2454,2454,2455,2455,2455,2456,2456,2456,2457,2457,2457,2458,2458,2458,2459,2459,2459,2460,2460,2460,2461,2461,2461,2462,2462,2462,2463,2463,2463,2464,2464,2464,2465,2465,2465,2466,2466,2466,2467,2467,2467,2468,2468,2468,2469,2469,2469,2470,2470,2470,2471,2471,2471,2472,2472,2472,2473,2473,2473,2474,2474,2474,2475,2475,2475,2476,2476,2476,2477,2477,2477,2478,2478,2478,2479,2479,2479,2480,2480,2480,2481,2481,2481,2482,2482,2482,2483,2483,2483,2484,2484,2484,2485,2485,2485,2486,2486,2486,2487,2487,2487,2488,2488,2488,2489,2489,2489,2490,2490,2490,2491,2491,2491,2492,2492,2492,2493,2493,2493,2494,2494,2494,2495,2495,2495,2496,2496,2496,2497,2497,2497,2498,2498,2498,2499,2499,2499,2500,2500,2500,2501,2501,2502,2502,2503,2503,2504,2504,2505,2505,2506,2506,2507,2507,2508,2508,2509,2509,2510,2510,2511,2511,2512,2512,2513,2513,2514,2514,2515,2515,2516,2516,2517,2517,2518,2518,2519,2519,2520,2520,2521,2521,2522,2522,2523,2523,2524,2524,2525,2525,2526,2526,2527,2527,2528,2528,2529,2529,2530,2530,2531,2531,2532,2532,2533,2533,2534,2534,2535,2535,2536,2536,2537,2537,2538,2538,2539,2539,2540,2540,2541,2541,2542,2542,2543,2543,2544,2544,2545,2545,2546,2546,2547,2547,2548,2548,2549,2549,2550,2550,2551,2551,2552,2552,2553,2553,2554,2554,2555,2556,2557,2558,2559,2560,2561,2562,2563,2564,2565,2566,2567,2568,2569,2570,2571,2572,2573,2574,2575,2576,2577,2578,2579,2580,2581,2582,2583,2584,2585,2586,2587,2588,2589,2590,2591,2592,2593,2594,2595,2596,2597,2598,2599,2600,2601,2602,2603,2604,2605,2606,2607,2608,2609,2610,2611,2612,2613,2614,2615,2616,2617,2618,2619,2620,2621,2622,2623,2624,2625,2626,2627,2628,2629,2630,2631,2632,2633,2634,2635,2636,2637,2638,2639,2640,2641,2642,2643,2644,2645,2646,2647,2648,2649,2650,2651,2652,2653,2654,2655,2656,2657,2658,2659,2660,2661,2662,2663,2664,2665,2666,2667,2668,2669,2670,2671,2672,2673,2674,2675,2676,2677,2678,2679,2680,2681,2682,2683,2684,2685,2686,2687,2688,2689,2690,2691,2692,2693,2694,2695,2696,2697,2698,2699,2700,2701,2702,2703,2704,2705,2706,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2718,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2729,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2741,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2752,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2764,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2776,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2787,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2799,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2810,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2822,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2833,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2845,2846,2847,2848,2849,2850,2851,2852,2853,2854,2855,2856,2857,2858,2859,2860,2861,2862,2863,2864,2865,2866,2867,2868,2869,2870,2871,2872,2873,2874,2875,2876,2877,2878,2879,2880,2881,2882,2883,2884,2885,2886,2887,2888,2889,2889,2890,2890,2891,2891,2892,2892,2893,2893,2894,2894,2895,2895,2896,2896,2897,2897,2898,2898,2899,2899,2900,2900,2901,2901,2902,2903,2904,2905,2906,2907], [3686,3597,3508,3419,3330,3241,3152,3106,3103,3100,3097,3094,3091,3089,3086,3083,3080,3077,3074,3071,3068,3065,3062,3059,3056,3053,3051,3048,3045,3042,3039,3036,3033,3030,3027,3024,3021,3018,3015,3013,3010,3007,3004,3001,2998,2995,2992,2989,2986,2983,2980,2977,2975,2972,2969,2966,2963,2960,2957,2954,2951,2948,2945,2942,2939,2937,2550,2934,2550,2931,3529,2550,2928,3533,2550,2925,3537,2550,2922,3541,2550,2919,3545,2550,3549,2550,3553,2550,3557,2550,3561,2550,3565,2550,3569,2550,3573,2550,3577,2550,3581,2550,3585,2550,3589,2550,3593,2549,3597,2549,3601,2549,3605,2549,3609,2549,3613,2549,3617,2549,3621,2549,3625,2549,3629,2549,3634,2549,3638,2549,3642,2549,3646,2549,3650,2549,3654,2549,3658,2549,3662,2549,3666,2549,3670,2549,3674,2549,3678,2549,3682,2549,3686,2549,3690,2549,3694,2549,3698,2549,3702,2549,3706,2549,3710,2549,3714,2549,3718,2549,3722,2549,3726,2549,3730,2549,3734,2549,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2548,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2547,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2546,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2545,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2544,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2543,2542,2542,2542,2542,2541,2541,2541,2541,2540,2540,2540,2540,2539,2539,2539,2539,2538,2538,2538,2537,2537,2537,2537,2536,2536,2536,2536,2535,2535,2535,2535,2534,2534,2534,2534,2533,2533,2533,2532,2532,2532,2532,2531,2531,2531,2531,2530,2530,2530,2530,2529,2529,2529,2528,2528,2528,2528,2527,2527,2527,2527,2526,2526,2526,2526,2525,2525,2525,2525,2524,2523,2521,2518,2516,2513,2511,2508,2506,2503,2501,2498,2496,2493,2491,2488,2486,2483,2481,2478,2476,2473,2471,2468,2466,2463,2461,2458,2456,2453,2451,2448,2446,2443,2441,2438,2436,2433,2431,2428,2426,2424,2421,2419,2416,2414,2411,2409,2406,2404,2401,2399,2396,2394,2391,2389,2386,2384,2381,2379,2376,2374,2371,2369,2366,2364,2361,2359,2356,2354,2351,2349,2346,2344,2341,2339,2336,2334,2331,2329,2327,2325,2324,2323,2321,2320,2318,2317,2315,2314,2313,2311,2310,2308,2307,2305,2304,2303,2301,2300,2298,2297,2295,2294,2293,2291,2290,2288,2287,2286,2284,2283,2281,2280,2278,2277,2276,2274,2273,2271,2270,2268,2267,2266,2264,2263,2261,2260,2258,2257,2256,2254,2253,2251,2250,2249,2247,2246,2244,2243,2241,2240,2239,2237,2236,2234,2233,2231,2230,2229,2227,2226,2224,2223,2221,2220,2219,2217,2216,2216,2217,2217,2217,2218,2218,2219,2219,2219,2220,2220,2220,2221,2221,2221,2222,2222,2222,2223,2223,2224,2224,2224,2225,2225,2225,2226,2226,2226,2227,2227,2228,2228,2228,2229,2229,2229,2230,2230,2230,2231,2231,2231,2232,2232,2233,2233,2233,2234,2234,2234,2235,2235,2235,2236,2236,2236,2237,2237,2238,2238,2238,2239,2239,2239,2240,2240,2240,2241,2241,2242,2242,2242,2243,2243,2243,2244,2244,2244,2245,2245,2245,2246,2246,2247,2247,2247,2248,2248,2248,2249,2249,2249,2250,2250,2251,2251,2251,2252,2252,2252,2253,2253,2253,2254,2254,2254,2255,2255,2256,2256,2256,2257,2257,2257,2258,2258,2258,2259,2259,2259,2260,2260,2261,2261,2261,2262,2262,2262,2263,2263,2263,2264,2264,2265,2265,2265,2266,2266,2266,2267,2267,2267,2268,2268,2268,2269,2269,2270,2270,2270,2271,2271,2271,2272,2272,2272,2273,2273,2274,2274,2274,2275,2275,2275,2276,2276,2276,2277,2277,2277,2278,2278,2279,2279,2279,2280,2280,2280,2281,2281,2281,2282,2282,2282,2283,2283,2284,2284,2284,2285,2285,2285,2286,2286,2286,2287,2287,2288,2288,2288,2289,2289,2289,2290,2290,2290,2291,2291,2291,2292,2292,2293,2293,2293,2294,2294,2301,2301,2301,2301,2301,2301,2301,2301,2301,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2302,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2303,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2304,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2305,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2306,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2307,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2308,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2309,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2310,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2311,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2312,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2313,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2314,2313,2313,2313,2313,2312,2312,2312,2312,2311,2311,2311,2311,2310,2310,2310,2310,2309,2309,2309,2309,2308,2308,2308,2307,2307,2307,2307,2306,2306,2306,2306,2305,2305,2305,2305,2304,2304,2304,2304,2303,2303,2303,2303,2302,2302,2302,2301,2301,2301,2301,2300,2300,2300,2300,2299,2299,2299,2299,2298,2298,2298,2298,2297,2297,2297,2297,2296,2296,2296,2295,2295,2295,2295,2294,2294,2294,2294,2293,2293,2293,2293,2292,2292,2292,2292,2291,2291,2291,2291,2290,2290,2290,2289,2289,2289,2289,2288,2288,2288,2288,2287,2287,2287,2287,2286,2286,2286,2286,2285,2285,2285,2285,2284,2284,2284,2283,2283,2283,2283,2282,2282,2282,2282,2281,2281,2281,2281,2280,2280,2280,2280,2279,2279,2279,2278,2278,2278,2278,2277,2277,2277,2277,2276,2276,2276,2276,2275,2275,2275,2275,2274,2274,2274,2274,2273,2273,2273,2272,2272,2272,2272,2271,2271,2271,2271,2270,2270,2270,2270,2269,2269,2269,2269,2268,2268,2268,2268,2267,2267,2267,2266,2266,2266,2266,2265,2265,2265,2265,2264,2264,2264,2264,2263,2263,2263,2263,2262,2262,2262,2262,2261,2261,2261,2260,2260,2260,2260,2259,2259,2259,2259,2258,2258,2258,2258,2257,2257,2257,2257,2256,2256,2256,2256,2255,2255,2255,2254,2254,2254,2254,2253,2253,2253,2253,2252,2252,2252,2252,2251,2251,2251,2251,2250,2250,2250,2250,2249,2249,2248,2248,2247,2246,2246,2245,2244,2244,2243,2242,2242,2241,2241,2240,2239,2239,2238,2237,2237,2236,2235,2235,2234,2233,2233,2232,2231,2231,2230,2229,2229,2228,2228,2227,2226,2226,2225,2224,2224,2223,2222,2222,2221,2220,2220,2219,2218,2218,2217,2216,2216,2215,2215,2214,2213,2213,2212,2211,2211,2210,2209,2209,2208,2207,2207,2206,2205,2205,2204,2203,2203,2202,2202,2201,2200,2200,2199,2198,2198,2197,2196,2196,2195,2194,2194,2193,2192,2192,2191,2190,2190,2189,2189,2188,2187,2187,2186,2185,2185,2184,2183,2183,2182,2181,2181,2180,2179,2179,2178,2177,2177,2176,2176,2175,2174,2174,2173,2172,2172,2171,2170,2170,2169,2168,2168,2167,2166,2166,2165,2164,2164,2163,2163,2162,2161,2161,2160,2159,2159,2158,2157,2157,2156,2155,2155,2154,2153,2153,2152,2151,2151,2150,2150,2149,2148,2148,2147,2146,2146,2145,2144,2144,2143,2142,2142,2141,2140,2140,2139,2138,2138,2137,2137,2136,2135,2135,2134,2133,2133,2132,2131,2131,2130,2129,2129,2128,2127,2127,2126,2125,2125,2124,2124,2123,2122,2122,2121,2120,2120,2119,2118,2118,2117,2118,2119,2120,2122,2123,2124,2123,2121,2120,2119,2117,2116,2115,2113,2112,2111,2109,2108,2107,2105,2104,2103,2102,2100,2099,2098,2096,2095,2094,2092,2091,2090,2088,2087,2086,2084,2083,2082,2081,2079,2078,2077,2075,2074,2073,2071,2070,2069,2067,2066,2065,2063,2062,2061,2060,2058,2057,2056,2054,2053,2052,2050,2049,2048,2046,2045,2044,2043,2041,2040,2039,2037,2036,2035,2033,2032,2031,2029,2028,2027,2025,2024,2023,2022,2020,2019,2018,2016,2015,2014,2012,2011,2010,2008,2007,2006,2004,2003,2002,2001,1999,1998,1997,1995,1994,1993,1991,1990,1989,1987,1986,1985,1983,1982,1981,1980,1978,1977,1976,1974,1973,1972,1970,1969,1968,1966,1965,1964,1962,1961,1959,1957,1954,1952,1949,1947,1944,1942,1939,1937,1934,1932,1929,1927,1924,1922,1919,1917,1914,1912,1909,1906,1904,1901,1899,1896,1894,1891,1889,1886,1884,1881,1879,1876,1874,1871,1869,1866,1864,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1855,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1856,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1857,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1858,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1859,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1860,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1861,1862,1862,1862,1862,1862,1862,1862,1862,1862,1862,2006,2006,2006,2006,2006,2006,2006,2006,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2007,2008,2008,2008,2008,2008,2008,2008,2008,2008,2359,2008,2395,2008,2431,2008,2467,2008,2503,2008,2539,3734,2008,2561,3729,2008,2568,3725,2008,2575,3720,2009,2582,3715,2009,2589,3711,2009,2596,3706,2009,2603,3701,2009,2610,3697,2009,2617,3692,2009,2624,3687,2009,2631,3683,2009,2638,3678,2009,2645,3673,2009,2653,3668,2009,2660,3664,2009,2667,3659,2009,2674,3654,2009,2681,3650,2009,2688,3645,2010,2695,3640,2010,2702,3636,2010,2709,3631,2010,2716,3626,2010,2723,3621,2010,2730,3617,2010,2737,3612,2010,2742,3607,2010,2745,3603,2010,2748,3598,2010,2751,3593,2010,2754,3589,2010,2757,3584,2010,2760,3579,2010,2763,3575,2010,2766,3570,2010,2769,3565,2011,2772,3560,2011,2775,3556,2011,2778,3551,2011,2781,3546,2011,2784,3542,2011,2787,3537,2011,2790,3532,2011,2793,3528,2011,2796,3523,2011,2799,2011,2802,2011,2805,2011,2808,2011,2811,2011,2814,2011,2817,2011,2820,2012,2823,2012,2826,2012,2829,2012,2832,2012,2835,2012,2838,2012,2841,2012,2844,2012,2847,2012,2850,2012,2853,2012,2856,2012,2859,2012,2862,2012,2865,2012,2868,2012,2871,2013,2874,2013,2877,2013,2878,2013,2878,2013,2878,2013,2878,2013,2878,2013,2878,2013,2878,2013,2881,2013,2887,2013,2892,2013,2898,2013,2903,2013,2909,2013,2915,2014,2920,2014,2926,2015,2931,2015,2937,2016,2942,2016,2948,2016,2953,2017,2959,2017,2964,2018,2970,2018,2976,2019,2981,2019,2987,2992,2998,3003,3009,3014,3020,3025,3031,3037,3042,3048,3053,3059,3061,3061,3061,3061,3061,3061,3063,3065,3067,3069,3071,3073,3075,3077,3079,3081,3084,3086,3088,3090,3092,3094,3096,3098,3100,3102,3104,3107,3109,3111,3113,3115,3117,3119,3121,3123,3125,3128,3130,3132,3134,3136,3138,3140,3142,3144,3146,3149,3151,3153,3155,3157,3159,3161,3163,3165,3167,3170,3172,3174,3176,3178,3180,3182,3184,3186,3188,3190,3193,3195,3197,3199,3201,3203,3205,3207,3209,3211,3213,3214,3215,3215,3216,3217,3218,3219,3220,3221,3221,3222,3223,3224,3225,3226,3227,3227,3228,3229,3230,3231,3232,3233,3233,3234,3235,3236,3237,3238,3239,3239,3240,3241,3242,3243,3244,3244,3245,3246,3247,3248,3249,3250,3250,3251,3252,3253,3254,3255,3256,3256,3257,3258,3259,3260,3261,3262,3262,3263,3264,3265,3266,3267,3268,3268,3269,3270,3271,3272,3273,3274,3274,3275,3276,3277,3278,3279,3280,3280,3281,3282,3283,3284,3285,3286,3286,3287,3288,3289,3290,3291,3292,3292,3293,3294,3295,3296,3297,3298,3298,3299,3300,3301,3302,3303,3303,3304,3305,3306,3307,3308,3309,3309,3310,3311,3312,3313,3314,3315,3315,3316,3317,3318,3319,3320,3321,3321,3322,3323,3324,3325,3326,3327,3327,3328,3329,3330,3330,3330,3330,3330,3330,3330,3331,3332,3333,3333,3334,3335,3336,3343,3343,3343,3343,3343,3343,3343,3343,3343,3343,3343,3343,3343,3343,3344,3344,3344,3345,3345,3346,3346,3346,3347,3347,3347,3348,3348,3348,3349,3349,3349,3350,3350,3351,3351,3351,3352,3352,3352,3353,3353,3353,3354,3354,3354,3355,3355,3356,3356,3356,3357,3357,3357,3358,3358,3358,3359,3359,3360,3360,3360,3361,3361,3361,3362,3362,3362,3363,3363,3363,3364,3364,3365,3365,3365,3366,3366,3366,3367,3367,3367,3368,3368,3368,3369,3369,3370,3370,3370,3371,3371,3371,3372,3711,3372,3713,3372,3714,3373,3716,3373,3717,3373,3719,3374,3720,3374,3722,3375,3724,3375,3725,3375,3727,3376,3728,3376,3730,3376,3376,3376,3376,3376,3376], [3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,2580,3733,2641,3503,3733,2702,3484,3733,2764,3465,3734,2825,3445,3734,2886,3426,3734,3407,3734,3388,3734,3369,3734,3350,3734,3331,3734,3311,3734,3292,3734,3273,3734,3262,3734,3259,3734,3257,3734,3254,3734,3251,3734,3248,3734,3245,3734,3243,3734,3240,3734,3237,3735,3234,3735,3232,3735,3229,3735,3226,3735,3223,3735,3221,3735,3218,3735,3215,3735,3212,3735,3209,3735,3207,3735,3204,3735,3201,3735,3198,3735,3196,3735,3193,3735,3190,3735,3187,3735,3185,3735,3182,3736,3179,3736,3176,3736,3173,3736,3171,3736,3168,3736,3165,3736,3162,3736,3160,3736,3157,3736,3154,3151,3148,3146,3143,3140,3137,3135,3132,3129,3126,3124,3121,3118,3115,3112,3110,3107,3104,3101,3099,3096,3093,3090,3087,3085,3082,3079,3076,3074,3071,3068,3065,3063,3060,3057,3054,3051,3049,3046,3043,3040,3038,3035,3032,3029,3027,3024,3021,3018,3015,3013,3010,3008,3007,3005,3004,3003,3001,3000,2999,2997,2996,2995,2993,2992,2991,2989,2988,2987,2985,2984,2983,2981,2980,2979,2977,2976,2975,2973,2972,2971,2969,2968,2967,2965,2964,2963,2961,2960,2959,2957,2956,2955,2954,2952,2951,2950,2948,2947,2946,2944,2943,2942,2940,2939,2938,2936,2935,2934,2932,2931,2930,2928,2927,2926,2924,2923,2922,2920,2919,2918,2916,2915,2914,2912,2911,2910,2908,2907,2906,2904,2903,2902,2901,2899,2898,2897,2895,2894,2893,2891,2890,2889,2887,2886,2885,2883,2882,2881,2879,2878,2877,2875,2874,2873,2871,2870,2869,2867,2866,2865,2863,2862,2861,2859,2858,2857,2855,2854,2853,2851,2850,2849,2847,2846,2845,2844,2842,2841,2840,2838,2837,2836,2834,2833,2832,2830,2829,2828,2826,2825,2824,2822,2821,2820,2818,2817,2816,2814,2813,2812,2810,2809,2808,2806,2805,2804,2802,2801,2800,2798,2797,2796,2794,2793,2792,2791,2789,2788,2787,2785,2784,2783,2781,2780,2779,2777,2776,2775,2773,2772,2771,2769,2768,2767,2765,2764,2763,2761,2760,2759,2757,2756,2755,2753,2752,2751,2749,2748,2747,2745,2744,2743,2741,2740,2739,2737,2735,2734,2732,2731,2729,2727,2726,2724,2723,2721,2719,2718,2716,2715,2713,2711,2710,2708,2707,2705,2703,2702,2700,2699,2697,2695,2694,2692,2691,2689,2687,2686,2684,2683,2681,2679,2678,2676,2675,2673,2671,2670,2668,2667,2665,2663,2662,2660,2659,2657,2655,2654,2652,2651,2649,2647,2646,2644,2643,2641,2639,2638,2636,2635,2633,2631,2630,2628,2626,2625,2623,2622,2620,2618,2617,2615,2614,2612,2610,2609,2607,2606,2604,2602,2601,2599,2598,2596,2594,2593,2591,2590,2588,2586,2585,2583,2582,2580,2578,2577,2575,2574,2572,2570,2569,2567,2566,2564,2562,2561,2559,2558,2556,2554,2553,2551,2550,2548,2546,2545,2543,2542,2540,2538,2537,2535,2534,2532,2530,2529,2528,2527,2525,2524,2523,2522,2521,2519,2518,2517,2516,2515,2514,2512,2511,2510,2509,2508,2506,2505,2504,2503,2502,2501,2499,2498,2497,2496,2495,2493,2492,2491,2490,2489,2488,2486,2485,2484,2483,2482,2481,2479,2478,2477,2476,2475,2473,2472,2471,2470,2469,2468,2466,2465,2464,2463,2462,2460,2459,2458,2457,2456,2455,2453,2452,2451,2450,2449,2447,2446,2445,2445,2445,2445,2445,2445,2445,2445,2445,2445,2445,2445,2445,2445,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2444,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2443,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2442,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2441,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2440,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2439,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2438,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2437,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2436,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2435,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2434,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2433,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2432,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2431,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2430,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2429,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2428,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2427,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2426,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2425,2426,2426,2426,2426,2427,2427,2427,2427,2428,2428,2428,2428,2428,2429,2429,2429,2429,2430,2430,2430,2430,2431,2431,2431,2431,2431,2432,2432,2432,2432,2433,2433,2433,2433,2433,2434,2434,2434,2434,2435,2435,2435,2435,2436,2436,2436,2436,2436,2437,2437,2437,2437,2438,2438,2438,2438,2439,2439,2439,2439,2439,2440,2440,2440,2440,2441,2441,2441,2441,2442,2442,2442,2442,2442,2443,2443,2443,2443,2444,2444,2444,2444,2444,2445,2445,2445,2445,2446,2446,2446,2446,2447,2447,2447,2447,2447,2448,2448,2448,2448,2449,2449,2449,2449,2450,2450,2450,2450,2450,2451,2451,2451,2451,2452,2452,2452,2452,2453,2453,2453,2453,2453,2454,2454,2454,2454,2455,2455,2455,2455,2455,2456,2456,2456,2456,2457,2457,2457,2457,2458,2458,2458,2458,2458,2459,2459,2459,2459,2460,2460,2460,2460,2461,2461,2461,2461,2461,2462,2462,2462,2462,2463,2463,2463,2463,2464,2464,2464,2464,2464,2465,2465,2465,2465,2466,2466,2466,2466,2466,2467,2467,2467,2467,2468,2468,2468,2468,2469,2469,2469,2469,2469,2470,2470,2470,2470,2471,2471,2471,2471,2472,2472,2472,2472,2472,2473,2473,2473,2473,2474,2474,2474,2474,2475,2475,2475,2475,2475,2476,2476,2476,2476,2477,2477,2477,2477,2477,2478,2478,2478,2478,2479,2479,2479,2479,2480,2480,2480,2480,2480,2481,2481,2481,2481,2482,2482,2482,2482,2483,2483,2483,2483,2483,2484,2484,2484,2484,2485,2485,2485,2485,2486,2486,2486,2486,2486,2487,2487,2487,2487,2488,2488,2488,2488,2488,2489,2489,2489,2489,2490,2490,2490,2490,2491,2491,2491,2493,2495,2496,2498,2500,2501,2503,2505,2506,2508,2510,2511,2513,2515,2517,2518,2520,2522,2523,2525,2527,2528,2530,2532,2533,2535,2537,2538,2540,2542,2543,2545,2547,2548,2550,2552,2553,2555,2557,2559,2560,2562,2564,2565,2567,2569,2570,2572,2574,2575,2577,2579,2580,2582,2584,2585,2587,2589,2590,2592,2594,2595,2597,2599,2601,2602,2604,2606,2607,2609,2611,2612,2614,2616,2617,2619,2621,2622,2624,2626,2627,2629,2631,2632,2634,2636,2637,2639,2641,2643,2644,2646,2648,2649,2651,2653,2654,2656,2658,2659,2661,2663,2664,2666,2668,2669,2671,2673,2674,2676,2678,2679,2681,2683,2685,2686,2688,2690,2691,2693,2695,2696,2698,2700,2701,2702,2703,2704,2705,2707,2708,2709,2710,2711,2712,2713,2714,2715,2716,2717,2719,2720,2721,2722,2723,2724,2725,2726,2727,2728,2730,2731,2732,2733,2734,2735,2736,2737,2738,2739,2740,2742,2743,2744,2745,2746,2747,2748,2749,2750,2751,2753,2754,2755,2756,2757,2758,2759,2760,2761,2762,2763,2765,2766,2767,2768,2769,2770,2771,2772,2773,2774,2775,2777,2778,2779,2780,2781,2782,2783,2784,2785,2786,2788,2789,2790,2791,2792,2793,2794,2795,2796,2797,2798,2800,2801,2802,2803,2804,2805,2806,2807,2808,2809,2811,2812,2813,2814,2815,2816,2817,2818,2819,2820,2821,2823,2824,2825,2826,2827,2828,2829,2830,2831,2832,2834,2835,2836,2837,2838,2839,2840,2841,2842,2843,2844,2846,2847,2848,2849,2850,2851,2853,2855,2856,2858,2860,2861,2863,2864,2866,2868,2869,2871,2873,2874,2876,2878,2879,2881,2883,2884,2886,2887,2889,2891,2892,2894,2896,2897,2899,2901,2902,2904,2906,2907,2909,2910,2912,2914,2915,2917,2919,2920,2922,2924,2925,2927,2929,2930,2932,2933,2935,2937,2938,2940,2942,2943,2945,2947,2948,2950,2952,2953,2955,2956,2958,2960,2961,2963,2965,2966,2968,2970,2971,2973,2975,2976,2978,2979,2981,2983,2984,2986,2988,2989,2991,2993,2994,2996,2998,2999,3001,3002,3004,3006,3007,3009,3011,3012,3014,3016,3017,3019,3021,3022,3024,3025,3027,3029,3030,3032,3034,3036,3039,3041,3044,3047,3050,3053,3055,3058,3061,3064,3066,3069,3072,3075,3078,3080,3083,3086,3089,3091,3094,3097,3100,3103,3105,3108,3111,3114,3116,3119,3122,3125,3128,3130,3133,3136,3139,3142,3144,3147,3150,3153,3155,3158,3161,3164,2338,3167,2335,3169,2332,3172,2329,3175,2326,3178,2323,3180,3736,2320,3183,3736,2317,3186,3736,2314,3189,3736,2310,3192,3736,2307,3194,3736,2304,3197,3736,2301,3203,3736,2298,3211,3736,2295,3219,3736,2292,3227,3736,2289,3235,3736,2286,3243,3736,2283,3251,3736,2280,3259,3736,2277,3267,3736,2274,3275,3736,2271,3283,3736,2268,3291,3736,2265,3299,3736,2262,3307,3736,2258,3315,3736,2255,3323,3736,2252,3331,3736,2249,3339,3736,2246,3347,3736,2243,3355,3736,2240,3364,3736,2237,3372,3736,2234,3380,3736,2231,3388,3736,2228,3396,3736,2225,3404,3736,2222,3412,3736,2219,3420,3736,2216,3428,3736,2213,3436,3736,2210,3444,3736,2207,3452,3735,2203,3460,3735,2200,3468,3735,2197,3476,3735,2194,3484,3735,2191,3492,3735,2188,3500,3735,2185,3508,3735,2182,3735,2179,3735,2176,3735,2173,3735,2170,3735,2167,3735,2164,3735,2161,3735,2158,3735,2155,3735,2151,3735,2148,3735,2145,3735,2142,3735,2139,3735,2136,3735,2133,3735,2130,3735,2127,3735,2124,3735,2121,3735,2118,3735,2115,3735,2112,3735,2109,3735,2106,3735,2103,3735,2100,3735,2096,3735,2093,3735,2090,3735,2087,3735,2084,3735,2081,3735,2078,3735,2075,3735,2072,3735,2069,3735,2066,3735,2063,3735,2060,3735,2057,3735,2054,3735,2051,3735,2048,3735,2044,3735,2041,3735,2038,3735,2035,3735,2032,3735,2029,3735,2026,3735,2023,3735,2020,3735,3735,3735,3735,3735,3735,3735,3735,3735,3735,3735,3735,3735,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3734,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3733,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3732,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3731,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3730,3701,3730,3684,3730,3666,3730,3649,3730,3632,3730,3615,3730,3597,3730,3580,3730,3563,3730,3546,3730,3528,3730,3511,3730,3494,3730,3476,3459,3442,3425,3407,3390])
					//get_region_polygon (ROI_0, 15, Rows, Columns)
					hv_R1.Clear();
					hv_R1[0] = 633;
					hv_R1[1] = 751;
					hv_R1[2] = 699;
					hv_R1[3] = 711;
					hv_R1[4] = 803;
					hv_R1[5] = 1210;
					hv_R1[6] = 1743;
					hv_R1[7] = 2029;
					hv_R1[8] = 2153;
					hv_R1[9] = 2300;
					hv_R1[10] = 2404;
					hv_R1[11] = 2461;
					hv_R1[12] = 2501;
					hv_R1[13] = 2455;
					hv_R1[14] = 2901;
					hv_R1[15] = 2907;
					hv_R1[16] = 2797;
					hv_R1[17] = 2645;
					hv_R1[18] = 2621;
					hv_R1[19] = 2566;
					hv_R1[20] = 2455;
					hv_R1[21] = 2449;
					hv_R1[22] = 2554;
					hv_R1[23] = 2416;
					hv_R1[24] = 2416;
					hv_R1[25] = 2278;
					hv_R1[26] = 2239;
					hv_R1[27] = 2116;
					hv_R1[28] = 1903;
					hv_R1[29] = 1640;
					hv_R1[30] = 1395;
					hv_R1[31] = 1177;
					hv_R1[32] = 1100;
					hv_R1[33] = 1018;
					hv_R1[34] = 699;
					hv_R1[35] = 705;
					hv_R1[36] = 640;
					hv_R1[37] = 633;
					hv_C1.Clear();
					hv_C1[0] = 3730;
					hv_C1[1] = 3736;
					hv_C1[2] = 3528;
					hv_C1[3] = 3274;
					hv_C1[4] = 3011;
					hv_C1[5] = 2445;
					hv_C1[6] = 2425;
					hv_C1[7] = 2491;
					hv_C1[8] = 2700;
					hv_C1[9] = 2865;
					hv_C1[10] = 3037;
					hv_C1[11] = 3195;
					hv_C1[12] = 3522;
					hv_C1[13] = 3736;
					hv_C1[14] = 3730;
					hv_C1[15] = 3376;
					hv_C1[16] = 3343;
					hv_C1[17] = 3212;
					hv_C1[18] = 3161;
					hv_C1[19] = 3058;
					hv_C1[20] = 2560;
					hv_C1[21] = 2339;
					hv_C1[22] = 2019;
					hv_C1[23] = 2005;
					hv_C1[24] = 1862;
					hv_C1[25] = 1855;
					hv_C1[26] = 1960;
					hv_C1[27] = 2122;
					hv_C1[28] = 2250;
					hv_C1[29] = 2314;
					hv_C1[30] = 2301;
					hv_C1[31] = 2216;
					hv_C1[32] = 2325;
					hv_C1[33] = 2525;
					hv_C1[34] = 2550;
					hv_C1[35] = 2918;
					hv_C1[36] = 3106;
					hv_C1[37] = 3730;
					TupleLength(hv_C1, &hv_Length);
					TupleGenConst(hv_Length, hv_R, &hv_ROW);
					TupleGenConst(hv_Length, hv_C, &hv_COL);
					TupleAdd(hv_R1, hv_ROW, &hv_R1);
					TupleAdd(hv_C1, hv_COL, &hv_C1);
					GenRegionPolygonFilled(&ho_Region1, hv_R1, hv_C1);
					ErosionCircle(ho_Region1, &ho_RegionErosion26, 25);
					//SJ检测BLC脏污
					ReduceDomain(ho_Image, ho_RegionErosion26, &ho_ImageReduced107);
					MedianRect(ho_ImageReduced107, &ho_ImageMedian5, 15, 15);
					MedianRect(ho_ImageReduced107, &ho_ImageMedian26, 250, 250);
					DynThreshold(ho_ImageMedian5, ho_ImageMedian26, &ho_RegionDynThresh14,
						25, "dark");
					Connection(ho_RegionDynThresh14, &ho_ConnectedRegions135);
					SelectShape(ho_ConnectedRegions135, &ho_SelectedRegions143, (HTuple("area").Append("ra")),
						"and", (HTuple(2000).Append(35)), (HTuple(99999).Append(120)));
					SelectGray(ho_SelectedRegions143, ho_Image, &ho_SelectedRegions144, "mean",
						"and", 0, 90);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions144, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 162.052, 2545.59, 454.719, 3877.11);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 975.848, 2236.34, 2292.46, 2815.66);
					SetDictTuple(hv_at, "move", (HTuple(0).Append(180)));
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(2081).Append(2383)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(2).Append(-130)));
					SetDictTuple(hv_at, "area", (HTuple(90000).Append(99999999)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测焊缝毛刺
					GenRectangle1(&ho_ROI_0, 481.169, 3150.5, 574.32, 4008.77);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_00, &ho_RegionDilation21, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation21, &ho_ImageReduced22
						);
					GrayOpeningRect(ho_ImageReduced22, &ho_ImageOpening19, 3, 5);
					MedianRect(ho_ImageOpening19, &ho_ImageMedian8, 3, 3);
					GrayClosingRect(ho_ImageMedian8, &ho_ImageClosing21, 3, 50);
					SubImage(ho_ImageMedian8, ho_ImageClosing21, &ho_ImageSub18, 1, 128);
					Threshold(ho_ImageSub18, &ho_Region23, 0, 30);
					Intersection(ho_Region23, ho_ROI_00, &ho_RegionIntersection7);
					OpeningCircle(ho_RegionIntersection7, &ho_RegionIntersection7, 1.5);
					Connection(ho_RegionIntersection7, &ho_ConnectedRegions26);
					SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions36, "area", "and",
						160, 99999);
					AffineTransRegion(ho_SelectedRegions36, &ho_SelectedRegions36, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_SelectedRegions36, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

					//屏蔽区域
					GenCircle(&ho_ROI_0, 700.19, 2114.01, 178.706);
					GenRectangle1(&ho_TMP_Region, 531.793, 3036.84, 653.253, 4104.99);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 716.928, 933.451, 814.888, 1970.98);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1047.22, 594.08, 2428.61, 740.401);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 931.059, 836.174, HTuple(-120.299).TupleRad(),
						229.591, 59.9407);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2498.46, 1305.43, 145.349);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2488.21, 1161.96, 2656.61, 1448.89);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2466.8, 1593.43, 126.179);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2382.54, 1400.84, 2458.8, 1506.47);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2520.64, 1436.05, 2590.01, 1511.65);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2390.32, 1687.41, 2454.55, 1918.34);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2497.67, 1689.58, 2545.99, 1915.02);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2400.96, 1897.49, 2532.92, 1963.43);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2931.28, 3443.85, HTuple(34.6511).TupleRad(),
						69.2371, 26.7131);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle2(&ho_TMP_Region, 2487.1, 2003.23, HTuple(-43.9261).TupleRad(),
						109.759, 38.2011);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2866.32, 3481.46, 2932.22, 4113.88);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 663.459, 775.459, 3069.35, 4095.89);
					GenRectangle1(&ho_TMP_Region, 604.945, 658.6, 803.893, 2326.26);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 757.082, 845.846, HTuple(-118.217).TupleRad(),
						544.529, 123.583);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 591.611, 2247.63, 715.755, 3145.58);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1605.12, 1546.99, 801.731);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2381.84, 721.102, 3096.19, 1322.98);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2867.18, 1212.74, 3090.34, 1520.02);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 928.616, 2362.04, HTuple(34.9065).TupleRad(),
						217.045, 147.417);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1602.48, 3430.15, 971.408);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1052.44, 2412, 2146.66, 2675.32);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 3685.88, 2514.73, 1315.41);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved64, -15, -60);
					AffineTransRegion(ho_RegionMoved64, &ho_RegionMoved641, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_RegionMoved641, ho_ROI_00, &ho_RegionDifference48);
					ErosionCircle(ho_RegionDifference48, &ho_RegionDifference48, 8);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//检测区域
					GenRectangle1(&ho_ROI_0, 657.786, 628.529, 3068.57, 4092.57);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 600);
					//
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference14);

					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_123);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_123);
					hv___Tmp_Ctrl_Dict_Init_123 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_124);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_124);
					hv___Tmp_Ctrl_Dict_Init_124 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "g_o",
						(HTuple(30).Append(50)));
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_125);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_125);
					hv___Tmp_Ctrl_Dict_Init_125 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
						(HTuple(11).Append(7)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference14, hv_dd.TupleGetDictTuple("LD"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));




				}
				if (0 != (int(hv_ImageNum == 10)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 107.993, -0.4149, 526.535, 4119.07);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 357.808, 74.311, 1177.27, 917.122);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(450).Append(744)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测焊接变形
					GenRectangle1(&ho_ROI_0, 604.737, 964.479, 754.401, 3426.29);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					DilationCircle(ho_ROI_00, &ho_RegionDilation11, 10);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation11, &ho_ImageReduced12
						);
					GrayClosingRect(ho_ImageReduced12, &ho_ImageClosing13, 1, 10);
					GrayOpeningRect(ho_ImageClosing13, &ho_ImageOpening6, 5, 20);
					GrayClosingRect(ho_ImageOpening6, &ho_ImageClosing14, 3, 300);
					SubImage(ho_ImageOpening6, ho_ImageClosing14, &ho_ImageSub10, 1, 128);
					Threshold(ho_ImageSub10, &ho_Region14, 0, 30);
					Connection(ho_Region14, &ho_ConnectedRegions14);
					SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions16, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(150).Append(3)), (HTuple(9999999).Append(999)));
					AffineTransRegion(ho_SelectedRegions16, &ho_SelectedRegions16, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("89"), ho_SelectedRegions16, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "89");

					//镭雕屏蔽区域
					GenRectangle1(&ho_ROI_0, 197.488, -32.6554, 811.888, 4137.1);
					GenRectangle1(&ho_TMP_Region, 778.227, 3754.36, 1374.12, 3895.05);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 800.081, 700.408, 3087.54, 794.053);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1070.42, 583.62, 1155.29, 745.058);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1018.4, 572.908, 2607.18, 655.696);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2654.75, 536.264, HTuple(43.9261).TupleRad(),
						109.759, 59.8034);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2790.3, 387.665, 132.922);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2886.97, 254.642, HTuple(-131.976).TupleRad(),
						83.6107, 47.6382);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2915.75, -150.14925, 3005.76, 214.392);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 2920.05, 514.451, HTuple(-45.5179).TupleRad(),
						82.7646, 39.3595);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2936.63, 552.087, 3190.26, 641.115);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 4072.71, 4032.53, 2649.13);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测大缺陷
					GenRectangle1(&ho_ROI_0, 785.118, -18.459, 3082.49, 4044.36);
					GenCircle(&ho_TMP_Region, 657.063, 631.855, 427.266);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 3942.11, 4008.09, 2656.09);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1627.54, -457.665, 942.153);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1090.67, 193.859, 2169.77, 591.756);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved58, 0, -60);
					AffineTransRegion(ho_RegionMoved58, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_ROI_0, ho_ROI_00, &ho_RegionDifference47);

					ErosionCircle(ho_RegionDifference47, &ho_RegionDifference47, 8);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference47, &ho_ImageReduced69
						);
					GrayClosingRect(ho_ImageReduced69, &ho_ImageClosing59, 5, 5);

					Threshold(ho_ImageClosing59, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					//镭雕检测区域
					GenRectangle1(&ho_ROI_0, 562.344, -96.7, 3177.05, 4214.36);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

					ScaleImage(ho_ImageClosing, &ho_ImageScaled4, 2, -50);
					Threshold(ho_ImageScaled4, &ho_Region16, 0, 50);
					Connection(ho_Region16, &ho_ConnectedRegions19);
					SelectShape(ho_ConnectedRegions19, &ho_ConnectedRegions19, (HTuple("area").Append("circularity")),
						"and", (HTuple(3000).Append(0.7)), (HTuple(9000).Append(1)));
					DilationCircle(ho_ConnectedRegions19, &ho_RegionDilation16, 105);
					Union1(ho_RegionDilation16, &ho_RegionUnion3);

					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 20);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 700);
					//
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference15);

					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_128);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_128);
					hv___Tmp_Ctrl_Dict_Init_128 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_129);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_129);
					hv___Tmp_Ctrl_Dict_Init_129 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_130);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_130);
					hv___Tmp_Ctrl_Dict_Init_130 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						30);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference15, hv_dd.TupleGetDictTuple("LD"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
				if (0 != (int(hv_ImageNum == 11)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 127.993, -84.4149, 566.535, 4119.07);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 335.502, 3249.81, 1179.49, 4193.11);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(997).Append(3475)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测过镭雕
					GenRectangle1(&ho_ROI_0, 616, 413, 750, 1414);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced72);
					//9.07 add-zjy CLC划伤
					MultImage(ho_ImageReduced72, ho_ImageReduced72, &ho_ImageResult10, 0.005,
						0);
					GrayOpeningRect(ho_ImageResult10, &ho_ImageOpening34, 19, 15);
					DynThreshold(ho_ImageResult10, ho_ImageOpening34, &ho_RegionDynThresh3,
						150, "light");
					Connection(ho_RegionDynThresh3, &ho_ConnectedRegions94);
					SmallestRectangle1(ho_ROI_0, &hv_Row14, &hv_Column14, &hv_Row24, &hv_Column24);
					SelectShape(ho_ConnectedRegions94, &ho_SelectedRegions94, (HTuple("area").Append("row")),
						"and", HTuple(400).TupleConcat(hv_Row14 + 5), HTuple(99999).TupleConcat(hv_Row24));
					SelectGray(ho_SelectedRegions94, ho_ImageReduced72, &ho_SelectedRegions94,
						"mean", "and", 210, 255);
					AffineTransRegion(ho_SelectedRegions94, &ho_SelectedRegions94, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("82"), ho_SelectedRegions94, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "82");
					//9.09 add-zjy 焊缝毛刺
					DerivateGauss(ho_ImageResult10, &ho_DerivGauss3, 5, "none");
					ScaleImageMax(ho_DerivGauss3, &ho_ImageScaleMax3);
					AddImage(ho_ImageScaleMax3, ho_ImageScaleMax3, &ho_ImageResult13, 2.6,
						0);
					GrayClosingRect(ho_ImageResult13, &ho_ImageClosing52, 15, 3);
					Threshold(ho_ImageClosing52, &ho_Region102, 0, 210);
					SmallestRectangle1(ho_Region102, &hv_Row15, &hv_Column15, &hv_Row25, &hv_Column25);
					OpeningCircle(ho_Region102, &ho_RegionOpening27, 3.5);
					Connection(ho_RegionOpening27, &ho_ConnectedRegions100);
					SelectShape(ho_ConnectedRegions100, &ho_SelectedRegions105, ((HTuple("area").Append("row")).Append("row2")),
						"and", (HTuple(350).TupleConcat(hv_Row15 + 25)).TupleConcat(0), (HTuple(999999).Append(999)).TupleConcat(hv_Row25 - 1));
					AffineTransRegion(ho_SelectedRegions105, &ho_SelectedRegions105, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_SelectedRegions105, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

					GrayClosingRect(ho_ImageReduced72, &ho_ImageClosing62, 3, 40);
					GrayClosingRect(ho_ImageClosing62, &ho_ImageClosing63, 50, 30);
					SubImage(ho_ImageClosing62, ho_ImageClosing63, &ho_ImageSub52, 1.5, 128);
					Threshold(ho_ImageSub52, &ho_Region86, 0, 30);
					Connection(ho_Region86, &ho_ConnectedRegions85);
					SelectShape(ho_ConnectedRegions85, &ho_SelectedRegions90, "width", "and",
						800, 99999);
					CountObj(ho_SelectedRegions90, &hv_Number33);
					if (0 != hv_Number33)
					{
						Union1(ho_SelectedRegions90, &ho_RegionUnion21);
						ShapeTrans(ho_RegionUnion21, &ho_RegionTrans36, "rectangle1");
						DilationRectangle1(ho_RegionTrans36, &ho_RegionDilation59, 1, 2);
						HeightWidthRatio(ho_RegionDilation59, &hv_Height6, &hv_Width6, &hv_Ratio4);
						MoveRegion(ho_RegionDilation59, &ho_RegionMoved68, -hv_Height6, 0);

						SubImage(ho_ImageReduced72, ho_ImageClosing62, &ho_ImageSub53, 3, 128);
						Threshold(ho_ImageSub53, &ho_Region87, 0, 30);
						ClosingRectangle1(ho_Region87, &ho_RegionClosing19, 50, 1);
						Intersection(ho_RegionClosing19, ho_RegionMoved68, &ho_RegionIntersection20
							);
						OpeningRectangle1(ho_RegionIntersection20, &ho_RegionIntersection20,
							20, 1);
						Connection(ho_RegionIntersection20, &ho_ConnectedRegions86);
						SelectShape(ho_ConnectedRegions86, &ho_SelectedRegions91, (HTuple("width").Append("height")),
							"and", (HTuple(300).Append(20)), (HTuple(99999).Append(9999)));
						AffineTransRegion(ho_SelectedRegions91, &ho_SelectedRegions91, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions91, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					}

					//
					//镭雕屏蔽区域
					GenRectangle1(&ho_ROI_0, 814.584, 1348.06, 1734.31, 1535.3);
					GenRectangle2(&ho_TMP_Region, 785.327, 1529.45, HTuple(48.9909).TupleRad(),
						178.349, 93.6229);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle1(&ho_TMP_Region, 604.368, -40.124, 700.948, 1645.5);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 3756.8, 286.756, 2239.68);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 622.74, -223.297, 1336.5, 45.8355);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 773.615, 7.82109, 3073.89, 4095.46);
					GenRectangle1(&ho_TMP_Region, 583.304, 3367.3, 1079.77, 4136.84);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 3993.37, 170.38, 2753.45);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved59, 0, -60);
					AffineTransRegion(ho_RegionMoved59, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_ROI_0, ho_ROI_00, &ho_RegionDifference48);
					ErosionCircle(ho_RegionDifference48, &ho_RegionDifference48, 8);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference48, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					//镭雕检测区域
					GenRectangle1(&ho_ROI_0, 562.344, -96.7, 3177.05, 4214.36);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

					ScaleImage(ho_ImageClosing, &ho_ImageScaled4, 2, -50);
					Threshold(ho_ImageScaled4, &ho_Region16, 0, 20);
					Connection(ho_Region16, &ho_ConnectedRegions19);
					SelectShape(ho_ConnectedRegions19, &ho_ConnectedRegions19, (HTuple("area").Append("circularity")),
						"and", (HTuple(3000).Append(0.7)), (HTuple(9000).Append(1)));
					DilationCircle(ho_ConnectedRegions19, &ho_RegionDilation16, 105);
					Union1(ho_RegionDilation16, &ho_RegionUnion3);

					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 700);
					//
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					FillUp(ho_RegionDifference, &ho_RegionFillUp1);
					ClosingCircle(ho_RegionFillUp1, &ho_RegionDifference, 30);
					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference);
					Connection(ho_RegionDifference, &ho_ConnectedRegions45);
					SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions50, "area", "and",
						15000, 99999999);
					Union1(ho_SelectedRegions50, &ho_RegionDifference);
					ConcatObj(ho_Reg, ho_RegionDifference, &ho_Reg);
					//检测镭雕
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_133);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_133);
					hv___Tmp_Ctrl_Dict_Init_133 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_134);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_134);
					hv___Tmp_Ctrl_Dict_Init_134 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference, hv_dd.TupleGetDictTuple("LD"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					if (true)
					{

						//
						GenRectangle1(&ho_ROI_0, 340.502, 3220.48, 1180.55, 4035.67);
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced20);
						GrayClosingRect(ho_ImageReduced20, &ho_ImageClosing22, 50, 50);
						ScaleImage(ho_ImageClosing22, &ho_ImageScaled9, 1.5, -50);
						Threshold(ho_ImageScaled9, &ho_Region24, 0, 30);
						OpeningRectangle1(ho_Region24, &ho_RegionOpening6, 50, 50);
						ShapeTrans(ho_RegionOpening6, &ho_RegionTrans11, "rectangle1");

						MoveRegion(ho_RegionTrans11, &ho_RegionMoved22, -240, 0);
						MoveRegion(ho_RegionMoved22, &ho_RegionMoved23, -150, 0);
						Difference(ho_RegionMoved22, ho_RegionMoved23, &ho_RegionDifference16
							);
						MoveRegion(ho_RegionDifference16, &ho_RegionMoved24, 0, 500);
						Difference(ho_RegionDifference16, ho_RegionMoved24, &ho_RegionDifference17
							);

						MoveRegion(ho_RegionDifference17, &ho_RegionMoved25, 0, -2230);
						DilationRectangle1(ho_RegionMoved25, &ho_RegionDilation24, 600, 1);

						MoveRegion(ho_RegionDilation24, &ho_RegionMoved65, 0, -300);
						ConcatObj(ho_Reg, ho_RegionMoved65, &ho_Reg);
						ReduceDomain(ho_Image, ho_RegionDilation24, &ho_ImageReduced21);

						GrayOpeningRect(ho_ImageReduced21, &ho_ImageOpening9, 2, 20);
						GrayClosingRect(ho_ImageOpening9, &ho_ImageClosing23, 1, 500);

						ScaleImage(ho_ImageClosing23, &ho_ImageScaled10, 1.5, -150);
						Threshold(ho_ImageScaled10, &ho_Region25, 0, 30);
						//
						DilationRectangle1(ho_Region25, &ho_Region25, 1, 5);
						OpeningRectangle1(ho_Region25, &ho_RegionOpening7, 600, 1);
						ShapeTrans(ho_RegionOpening7, &ho_RegionTrans14, "rectangle1");
						Connection(ho_RegionTrans14, &ho_ConnectedRegions30);
						SelectShape(ho_ConnectedRegions30, &ho_SelectedRegions30, "area", "and",
							1, 9999999);
						CountObj(ho_SelectedRegions30, &hv_Number9);
						GenEmptyObj(&ho_EmptyObject);
						if (0 != hv_Number9)
						{
							Union1(ho_SelectedRegions30, &ho_RegionUnion7);
							ShapeTrans(ho_RegionUnion7, &ho_RegionTrans15, "rectangle1");
							DilationRectangle1(ho_RegionTrans15, &ho_RegionDilation27, 1, 100);
							MoveRegion(ho_RegionDilation27, &ho_RegionMoved30, 45, 0);

							Difference(ho_Region25, ho_RegionMoved30, &ho_EmptyObject);
							OpeningCircle(ho_EmptyObject, &ho_RegionOpening12, 1.5);
							Intersection(ho_RegionOpening12, ho_RegionMoved65, &ho_EmptyObject);
							Connection(ho_EmptyObject, &ho_ConnectedRegions31);
							SelectShape(ho_ConnectedRegions31, &ho_EmptyObject, "area", "and",
								300, 9999999);
						}


						ShapeTrans(ho_Region25, &ho_RegionTrans12, "rectangle1");
						DilationRectangle1(ho_RegionTrans12, &ho_RegionDilation25, 1, 200);
						MoveRegion(ho_RegionDilation25, &ho_RegionMoved26, 98, 0);

						SubImage(ho_ImageOpening9, ho_ImageClosing23, &ho_ImageSub11, 1, 128);
						Threshold(ho_ImageSub11, &ho_Region26, 0, 30);
						Difference(ho_Region26, ho_RegionMoved26, &ho_RegionDifference18);

						Connection(ho_RegionDifference18, &ho_ConnectedRegions27);
						SelectShape(ho_ConnectedRegions27, &ho_SelectedRegions27, "area", "and",
							150, 999999);
						Union2(ho_SelectedRegions27, ho_EmptyObject, &ho_RegionUnion8);
						AffineTransRegion(ho_RegionUnion8, &ho_RegionUnion8, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_RegionUnion8, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

					}
				}
				if (0 != (int(hv_ImageNum == 12)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 140.868, 865.7999, 491.954, 1706.3);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 395.182, -130.31, 1197.98, 957.985);
					//11.1 add-zjy  89
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced101);
					Threshold(ho_ImageReduced101, &ho_Region92, 0, 100);
					Connection(ho_Region92, &ho_ConnectedRegions129);
					SelectShapeStd(ho_ConnectedRegions129, &ho_SelectedRegions136, "max_area",
						70);
					FillUpShape(ho_SelectedRegions136, &ho_SelectedRegions136, "area", 1, 10000);
					OpeningRectangle1(ho_SelectedRegions136, &ho_RegionOpening41, 3, 35);
					OpeningRectangle1(ho_RegionOpening41, &ho_RegionOpening42, 3, 155);
					Difference(ho_RegionOpening41, ho_RegionOpening42, &ho_RegionDifference20
						);
					Connection(ho_RegionDifference20, &ho_ConnectedRegions130);
					SelectShape(ho_ConnectedRegions130, &ho_SelectedRegions137, "area", "and",
						1500, 99999);
					ConcatObj((*hv_dt).TupleGetDictObject("89"), ho_SelectedRegions137, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "89");

					SetDictTuple(hv_at, "rg_c", (HTuple(50).Append(50)));
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "rc", (HTuple(1020).Append(598)));
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-250)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测镭雕
					GenRectangle1(&ho_ROI_0, 622.677, 1342.4, 3068.57, 3378.7);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
					GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
					SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);

					Threshold(ho_ImageSub, &ho_Region1, 101, 255);
					RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
					RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 250);

					FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
					Connection(ho_RegionFillUp, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999099999);
					Union1(ho_SelectedRegions, &ho_RegionUnion);

					DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

					Threshold(ho_ImageSub, &ho_Region, 0, 100);
					RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
					RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
					FillUp(ho_RegionCount1, &ho_RegionCount1);
					//检测区域
					Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
					Connection(ho_RegionDifference, &ho_ConnectedRegions10);
					SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions7, "area", "and",
						15000, 99999999);
					Union1(ho_SelectedRegions7, &ho_RegionDifference);
					ClosingRectangle1(ho_RegionDifference, &ho_RegionDifference, 200, 200);

					ClosingRectangle1(ho_RegionDifference, &ho_RegionDifferencet, 900, 200);
					Difference(ho_RegionDifferencet, ho_SelectedRegions7, &ho_RegionDifference56
						);
					OpeningCircle(ho_RegionDifference56, &ho_RegionOpening24, 5);
					Connection(ho_RegionOpening24, &ho_ConnectedRegions81);
					SelectShape(ho_ConnectedRegions81, &ho_SelectedRegions78, (HTuple("area").Append("row")),
						"and", (HTuple(800).Append(1250)), (HTuple(9999999).Append(9999)));
					AffineTransRegion(ho_SelectedRegions78, &ho_SelectedRegions78, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					MoveRegion(ho_SelectedRegions78, &ho_SelectedRegions78, -10, 0);
					SelectGray(ho_SelectedRegions78, ho_Image, &ho_SelectedRegions86, "mean",
						"and", 200, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions86, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");
					//9.19 add -zjy 镭雕不全
					ShapeTrans(ho_RegionDifferencet, &ho_RegionTrans49, "inner_rectangle1");
					SmallestRectangle1(ho_RegionTrans49, &hv_Row16, &hv_Column16, &hv_Row26,
						&hv_Column26);
					GenRectangle1(&ho_Rectangle4, hv_Row16 - 150, hv_Column16 + 250, hv_Row16,
						hv_Column26);
					ReduceDomain(ho_Image, ho_Rectangle4, &ho_ImageReduced82);
					Threshold(ho_ImageReduced82, &ho_Region105, 240, 255);
					Connection(ho_Region105, &ho_ConnectedRegions109);
					SelectShapeStd(ho_ConnectedRegions109, &ho_SelectedRegions116, "max_area",
						70);
					FillUp(ho_SelectedRegions116, &ho_RegionFillUp18);
					ClosingRectangle1(ho_RegionFillUp18, &ho_RegionClosing28, 159, 3);
					OpeningRectangle1(ho_RegionClosing28, &ho_RegionOpening29, 599, 3);
					Difference(ho_RegionClosing28, ho_RegionOpening29, &ho_RegionDifference63
						);
					Connection(ho_RegionDifference63, &ho_ConnectedRegions110);
					SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions87, "inner_radius",
						"and", 6, 999);
					SelectGray(ho_SelectedRegions87, ho_ImageReduced82, &ho_SelectedRegions87,
						"mean", "and", 230, 255);
					ConcatObj((*hv_dt).TupleGetDictObject("99"), ho_SelectedRegions87, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "99");

					//大缺陷
					OpeningRectangle1(ho_RegionDifference, &ho_RegionOpening, 600, 100);
					//
					SelectShape(ho_RegionOpening, &ho_SelectedRegions85, "area", "and", 150,
						1500000);
					AffineTransRegion(ho_SelectedRegions85, &ho_SelectedRegions85, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions85, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
					//镭雕屏蔽区域
					GenRectangle1(&ho_ROI_0, 1319.89, 2444.82, 2207.65, 2925.01);
					OpeningCircle(ho_ROI_0, &ho_ROI_0, 85);
					GenRectangle1(&ho_TMP_Region, 1444.76, 2587.98, 2017.41, 2798.92);
					OpeningCircle(ho_TMP_Region, &ho_TMP_Region, 65);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					GenRectangle1(&ho_TMP_Region, 714.106, 1941.61, 1115.06, 2035.26);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 990.544, 2255.16, 313.536);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 1095.23, 1655.53, HTuple(-44.3714).TupleRad(),
						532.575, 82.3106);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1400.4, 1911.66, 3062.21, 2069.65);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//检测严重缺陷
					GenRectangle1(&ho_ROI_0, 835.259, -22.7925, 3102.44, 3278.76);
					GenRectangle1(&ho_TMP_Region, 695.146, -90.5696, 1150.24, 811.359);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 681.625, 2019.21, 1377.95, 3470.36);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1079.52, 2996.39, 1787.55, 3464.51);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1719.54, 3065.36, 3142.73, 3404.62);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_RegionMoved60, 40, -30);
					AffineTransRegion(ho_RegionMoved60, &ho_ROI_001, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					Difference(ho_ROI_001, ho_ROI_00, &ho_RegionDifference49);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference49, &ho_ImageReduced70
						);
					GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing60, 5, 5);
					Threshold(ho_ImageClosing60, &ho_Region83, 0, 60);
					Connection(ho_Region83, &ho_ConnectedRegions84);
					SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions89, "area", "and",
						150, 9999999);
					AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions89, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

					Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference34);
					ConcatObj(ho_Reg, ho_RegionDifference34, &ho_Reg);

					//检测镭雕
					CreateDict(&hv_dd);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_137);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_137);
					hv___Tmp_Ctrl_Dict_Init_137 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_138);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_138);
					hv___Tmp_Ctrl_Dict_Init_138 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
						(HTuple(9).Append(7)));
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_139);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_139);
					hv___Tmp_Ctrl_Dict_Init_139 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
						30);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference34, hv_dd.TupleGetDictTuple("LD"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
				if (0 != (int(hv_ImageNum == 13)))
				{
					//23.12.2 add-zjy 少铣-119
					Threshold(ho_Image, &ho_Region121, 230, 255);
					ClosingRectangle1(ho_Region121, &ho_RegionClosing36, 3, 55);
					Connection(ho_RegionClosing36, &ho_ConnectedRegions137);
					SelectShapeStd(ho_ConnectedRegions137, &ho_SelectedRegions146, "max_area",
						70);
					OpeningRectangle1(ho_SelectedRegions146, &ho_RegionOpening45, 899, 3);
					Connection(ho_RegionOpening45, &ho_ConnectedRegions138);
					SelectShapeStd(ho_ConnectedRegions138, &ho_SelectedRegions147, "max_area",
						70);
					ReduceDomain(ho_Image, ho_SelectedRegions147, &ho_ImageReduced108);
					GrayClosingRect(ho_ImageReduced108, &ho_ImageClosing20, 25, 3);
					DynThreshold(ho_ImageReduced108, ho_ImageClosing20, &ho_RegionDynThresh15,
						9, "dark");
					ClosingRectangle1(ho_RegionDynThresh15, &ho_RegionClosing37, 25, 7);
					Connection(ho_RegionClosing37, &ho_ConnectedRegions139);
					SelectShape(ho_ConnectedRegions139, &ho_SelectedRegions148, "area", "and",
						600, 999999);
					ConcatObj((*hv_dt).TupleGetDictObject("119"), ho_SelectedRegions148, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "119");

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 681.75, 181.265, 1008.66, 1195.08);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 812.508, -107.722, 1689.59, 984.522);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "rc", (HTuple(1502).Append(642)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//RT检测区域
					GenRectangle1(&ho_ROI_0, 688.997, -47.2222, 981.569, 2310.9);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
					GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 130);
					GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 110);
					SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
					Connection(ho_Region55, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(2000).Append(2)), (HTuple(99999).Append(99)));
					CountObj(ho_SelectedRegions61, &hv_Number17);
					if (0 != hv_Number17)
					{
						SortRegion(ho_SelectedRegions61, &ho_SelectedRegions61, "first_point",
							"true", "row");
						SelectObj(ho_SelectedRegions61, &ho_SelectedRegions61, 1);
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_142);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_142);
						hv___Tmp_Ctrl_Dict_Init_142 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_143);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_143);
						hv___Tmp_Ctrl_Dict_Init_143 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_144);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_144);
						hv___Tmp_Ctrl_Dict_Init_144 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_SelectedRegions61, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					}
					else
					{
						AffineTransRegion(ho_Region55, &ho_Region55, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						//concat_obj (dt.['72'], Region55, dt.['72'])
					}
				}
				if (0 != (int(hv_ImageNum == 14)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 584.023, -36.7498, 1146.68, 4141.91);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 807.684, 3218.57, 1643.4, 4186.7);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(1484).Append(3443)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测上基准面
					GenRectangle1(&ho_ROI_0, 681.742, -10.7075, 1120.28, 4310.03);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 120);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 35, 140);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 90);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", ((HTuple(4000).Append(90)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{

						Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						ClosingRectangle1(ho_SelectedRegions12, &ho_SelectedRegions12, 5, 25);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域

						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							CreateDict(&hv_dd);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_147);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_147);
							hv___Tmp_Ctrl_Dict_Init_147 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_148);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_148);
							hv___Tmp_Ctrl_Dict_Init_148 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_149);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_149);
							hv___Tmp_Ctrl_Dict_Init_149 = HTuple(HNULL);
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"1", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));

							GrayClosingRect(ho_ImageOpening17, &ho_ImageClosing2, 20, 10);
							SubImage(ho_ImageOpening17, ho_ImageClosing2, &ho_ImageSub1, 1, 128);
							Threshold(ho_ImageSub1, &ho_Region3, 0, 30);
							Connection(ho_Region3, &ho_ConnectedRegions1);
							SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, (HTuple("width").Append("inner_radius")),
								"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(16)));
							CountObj(ho_SelectedRegions1, &hv_Number3);
							if (0 != hv_Number3)
							{
								DilationRectangle1(ho_SelectedRegions1, &ho_RegionDilation2, 350,
									60);
								MoveRegion(ho_RegionDilation2, &ho_RegionMoved5, -30, 0);
							}
							else
							{
								GenRectangle1(&ho_RegionMoved5, 322.387, 1029.83, 401.407, 3344.79);
							}
							Union2(ho_SelectedRegions8, ho_RegionMoved5, &ho_RegionUnion2);
							DilationRectangle1(ho_RegionUnion2, &ho_RegionDilation12, 1, 30);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
							Threshold(ho_ImageScaled2, &ho_Region32, 80, 255);
							Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 836.91, -4.91026, 951.929, 723.63);
						GenRectangle1(&ho_TMP_Region, 837.903, 724.561, 1036.51, 945.614);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 834.25, 943.789, 993.152, 4099.78);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 988.812, 3283.37, 1025.07, 3625.11);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 951.916, 694.395, 994.39, 731.676);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 989.256, 950.608, 1018.26, 988.924);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 989.04, 3249.76, 1017.01, 3284.97);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 988.843, 3623.39, 1007.49, 3658.59);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						ErosionRectangle1(ho_RegionErosion, &ho_RegionErosion, 1, 20);
					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_151);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_151);
					hv___Tmp_Ctrl_Dict_Init_151 = HTuple(HNULL);

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 15)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 582.183, -4.62977, 1062.1, 4091.29);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 864.517, 173.146, 1634.03, 942.682);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(976).Append(772)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测上基准面
					GenRectangle1(&ho_ROI_0, 737.327, -13.8929, 1109.67, 4115.12);
					GenRectangle1(&ho_TMP_Region, 999.697, 1132.55, 1202.31, 2206.55);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1005.39, -11.8531, 1134.25, 216.52);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1045.22, 3289.31, 1139.84, 3446.24);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 80);

					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 140);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 120);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4040;
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", hv_w.TupleConcat((HTuple(65).Append(6000))), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 50, 10);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1.5, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							CreateDict(&hv_dd);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_154);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_154);
							hv___Tmp_Ctrl_Dict_Init_154 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_155);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_155);
							hv___Tmp_Ctrl_Dict_Init_155 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_156);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_156);
							hv___Tmp_Ctrl_Dict_Init_156 = HTuple(HNULL);
							SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
								"gray", (HTuple(0).Append(150)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"1", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));

							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 40);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
							Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
							Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 861.882, 2.43018, 967.492, 624.637);
						GenRectangle1(&ho_TMP_Region, 864.959, 616.398, 1008.46, 1038.01);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 867.198, 1035.84, 963.841, 2317.11);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 866.214, 2302.98, 1003.86, 2970.54);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 865.109, 2967.57, 1068.64, 3204.73);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 867.794, 3205.7, 980.544, 4096.72);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 975.848, 3198.13, 1018.37, 3239.89);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1006.12, 2937.31, 1038.46, 2974.02);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 963.88, 262.627, 1038.56, 556.877);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);


						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
						ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 12);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}

					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_158);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_158);
					hv___Tmp_Ctrl_Dict_Init_158 = HTuple(HNULL);

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 16)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 669.433, 2296.87, 1008.76, 4067.93);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1201.2, 1968.4, 1759.22, 2550.76);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1361).Append(2430)));
					SetDictTuple(hv_at, "area", (HTuple(55000).Append(9999999)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测
					//检测小塑胶

					//平面溢胶
					GenRectangle1(&ho_ROI_0, 980.261, 1538.76, 1290.01, 1874.29);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced9);
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing11, 10, 10);
					ScaleImage(ho_ImageClosing11, &ho_ImageScaled1, 1.5, -100);
					Threshold(ho_ImageScaled1, &ho_Region12, 200, 255);
					OpeningCircle(ho_Region12, &ho_RegionOpening1, 4.5);
					ShapeTrans(ho_RegionOpening1, &ho_RegionTrans1, "convex");
					AreaCenter(ho_RegionTrans1, &hv_Area2, &hv_Row4, &hv_Column4);
					AreaCenter(ho_ROI_0, &hv_Area3, &hv_Row5, &hv_Column5);
					if (0 != (int((hv_Column4 - hv_Column5)>25)))
					{
						AffineTransRegion(ho_RegionTrans1, &ho_RegionTrans1, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("88"), ho_RegionTrans1, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "88");
					}
					//检测转角
					GenRectangle1(&ho_ROI_0, 503.247, -62.8589, 2289.42, 1669.16);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_161);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_161);
					hv___Tmp_Ctrl_Dict_Init_161 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);

					//*********
					GenRectangle1(&ho_ROI_0, 716.932, 3034.78, 972.039, 4111.71);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced37);
					GrayClosingRect(ho_ImageReduced37, &ho_ImageClosing31, 1, 30);
					ScaleImage(ho_ImageClosing31, &ho_ImageScaled18, 1.5, -100);
					Threshold(ho_ImageScaled18, &ho_Region46, 128, 255);
					OpeningRectangle1(ho_Region46, &ho_Region46, 50, 3);
					ClosingRectangle1(ho_Region46, &ho_RegionClosing8, 50, 1);
					Connection(ho_RegionClosing8, &ho_ConnectedRegions54);
					SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions52, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(500).Append(20)), (HTuple(99999).Append(100)));
					CountObj(ho_SelectedRegions52, &hv_Number14);
					if (0 != hv_Number14)
					{
						ErosionCircle(ho_SelectedRegions52, &ho_RegionErosion4, 3.5);
						//****检测A基准
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_163);
						SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_163);
						hv___Tmp_Ctrl_Dict_Init_163 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_RegionErosion4, hv_dd.TupleGetDictTuple("AG"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
						//**
					}

					GrayOpeningRect(ho_ImageClosing31, &ho_ImageOpening18, 20, 10);
					//
					//检测边缘
					SubImage(ho_ImageOpening18, ho_ImageClosing31, &ho_ImageSub3, 1, 128);
					Threshold(ho_ImageSub3, &ho_Region41, 0, 40);
					Connection(ho_Region41, &ho_ConnectedRegions50);
					SelectShape(ho_ConnectedRegions50, &ho_SelectedRegions49, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(700).Append(2)), (HTuple(99999).Append(20)));
					CountObj(ho_SelectedRegions49, &hv_Number13);
					if (0 != (int(hv_Number13 == 1)))
					{
						//***
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_165);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_165);
						hv___Tmp_Ctrl_Dict_Init_165 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_166);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_166);
						hv___Tmp_Ctrl_Dict_Init_166 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_167);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_167);
						hv___Tmp_Ctrl_Dict_Init_167 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"2", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("2")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("2"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_SelectedRegions49, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
					}
				}
				if (0 != (int(hv_ImageNum == 17)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, -54.2096, -21.8826, 3131.43, 656.633);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1828.07, 1377.51, 2595.13, 2635.57);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(2335).Append(1623)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					if (true)
					{
						//检测黑斑
						GenRectangle1(&ho_ROI_0, -81.4464, 39.352, 3127.6, 577.2);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced121);
						GrayClosingRect(ho_ImageReduced121, &ho_ImageReduced121, 150, 1);
						GrayOpeningRect(ho_ImageReduced121, &ho_ImageOpening41, 10, 35);
						SubImage(ho_ImageOpening41, ho_ImageReduced121, &ho_ImageSub82, 1.5,
							128);
						Threshold(ho_ImageSub82, &ho_Region153, 0, 20);
						ClosingRectangle1(ho_Region153, &ho_RegionClosing76, 1, 50);
						Connection(ho_RegionClosing76, &ho_ConnectedRegions213);
						SelectShape(ho_ConnectedRegions213, &ho_SelectedRegions220, (HTuple("height").Append("inner_radius")),
							"and", (HTuple(2500).Append(3)), (HTuple(99999).Append(25)));
						CountObj(ho_SelectedRegions220, &hv_Number24);
						if (0 != hv_Number24)
						{
							ShapeTrans(ho_SelectedRegions220, &ho_RegionTrans74, "rectangle1");
							DilationRectangle1(ho_RegionTrans74, &ho_RegionDilation145, 40, 1);
							DilationRectangle1(ho_RegionDilation145, &ho_RegionDilation146, 110,
								1);
							Difference(ho_RegionDilation146, ho_RegionDilation145, &ho_RegionDifference151
								);
							Connection(ho_RegionDifference151, &ho_ConnectedRegions214);
							SortRegion(ho_ConnectedRegions214, &ho_SortedRegions15, "first_point",
								"false", "column");
							SelectObj(ho_SortedRegions15, &ho_ObjectSelected13, 1);


							GenRectangle1(&ho_ROI_0, 1152.81, 213.74, 2469.39, 598.974);
							AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
								"nearest_neighbor");
							ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced23);

							MedianRect(ho_ImageReduced23, &ho_ImageMedian13, 15, 55);
							GrayOpeningRect(ho_ImageMedian13, &ho_ImageOpening28, 20, 10);
							GrayClosingRect(ho_ImageOpening28, &ho_ImageClosing55, 200, 125);
							SubImage(ho_ImageOpening28, ho_ImageClosing55, &ho_ImageSub114, 13,
								128);
							Threshold(ho_ImageSub114, &ho_Region128, 0, 30);
							OpeningRectangle1(ho_Region128, &ho_Region128, 1, 150);
							Connection(ho_Region128, &ho_ConnectedRegions189);
							SelectShape(ho_ConnectedRegions189, &ho_SelectedRegions199, (HTuple("width").Append("height")),
								"and", (HTuple(80).Append(800)), (HTuple(120).Append(1200)));
							Union1(ho_SelectedRegions199, &ho_RegionUnion62);

							ClosingRectangle1(ho_RegionUnion62, &ho_RegionClosing69, 1, 400);
							OpeningCircle(ho_RegionClosing69, &ho_RegionClosing69, 10);
							Connection(ho_RegionClosing69, &ho_ConnectedRegions190);
							SortRegion(ho_ConnectedRegions190, &ho_SortedRegions11, "upper_left",
								"true", "column");
							SelectObj(ho_SortedRegions11, &ho_ObjectSelected7, 1);
							CountObj(ho_ObjectSelected7, &hv_Number52);
							if (0 != hv_Number52)
							{

								ShapeTrans(ho_ObjectSelected7, &ho_RegionTrans55, "convex");

								ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans55, &ho_ImageReduced132
									);

								GrayOpeningRect(ho_ImageReduced132, &ho_ImageOpening42, 50, 1);
								SubImage(ho_ImageOpening42, ho_ImageReduced132, &ho_ImageSub115,
									2, 128);
								Threshold(ho_ImageSub115, &ho_Region159, 0, 60);
								Connection(ho_Region159, &ho_ConnectedRegions235);
								SelectShape(ho_ConnectedRegions235, &ho_SelectedRegions238, "area",
									"and", 150, 99999);
								AffineTransRegion(ho_SelectedRegions238, &ho_SelectedRegions238,
									hv_at.TupleGetDictTuple("hom_mat_rot"), "nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("76"), ho_SelectedRegions238,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "76");

								DilationCircle(ho_RegionTrans55, &ho_RegionDilation118, 8);
								//***
								ShapeTrans(ho_RegionDilation118, &ho_RegionTrans71, "rectangle1");
								MoveRegion(ho_RegionTrans71, &ho_RegionMoved39, -1100, 0);
								Difference(ho_RegionDilation118, ho_RegionMoved39, &ho_RegionDifference35
									);
								ShapeTrans(ho_RegionDifference35, &ho_RegionTrans71, "rectangle1");
								MoveRegion(ho_RegionTrans71, &ho_RegionMoved117, 400, 0);
								Difference(ho_RegionTrans71, ho_RegionMoved117, &ho_RegionDifference150
									);
								MoveRegion(ho_RegionDifference150, &ho_RegionMoved118, -600, -30);
								ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved118, &ho_ImageReduced120
									);
								GrayClosingRect(ho_ImageReduced120, &ho_ImageClosing36, 10, 10);
								GrayClosingRect(ho_ImageClosing36, &ho_ImageClosing74, 60, 50);
								SubImage(ho_ImageClosing36, ho_ImageClosing74, &ho_ImageSub81, 8,
									128);
								Threshold(ho_ImageSub81, &ho_Region152, 0, 30);
								OpeningCircle(ho_Region152, &ho_RegionOpening96, 8);
								ShapeTrans(ho_RegionOpening96, &ho_RegionTrans72, "convex");
								ShapeTrans(ho_RegionTrans72, &ho_RegionTrans73, "rectangle1");
								DilationRectangle1(ho_RegionTrans73, &ho_RegionDilation142, 20, 180);
								MoveRegion(ho_RegionDilation142, &ho_RegionMoved119, 80, 0);
								HeightWidthRatio(ho_RegionMoved119, &hv_Height12, &hv_Width12, &hv_Ratio13);
								if (0 != (int(hv_Height12 == 0)))
								{
									MoveRegion(ho_RegionMoved118, &ho_RegionOpening97, 0, 0);
									ErosionRectangle1(ho_RegionOpening97, &ho_RegionOpening97, 30,
										80);
								}
								else
								{
									OpeningCircle(ho_RegionMoved119, &ho_RegionOpening97, (hv_Width12 / 2) - 1);

								}

								MoveRegion(ho_RegionOpening97, &ho_RegionMoved120, 0, 35);
								DilationCircle(ho_RegionMoved120, &ho_RegionDilation143, 35);
								DilationRectangle1(ho_RegionDilation143, &ho_RegionDilation144, 1,
									450);

								Union2(ho_ObjectSelected13, ho_RegionDilation144, &ho_RegionUnion71
									);

								DilationCircle(ho_RegionDifference35, &ho_RegionDilation119, 70);
								Union2(ho_RegionDilation119, ho_RegionUnion71, &ho_RegionUnion72);

								ShapeTrans(ho_RegionDilation119, &ho_RegionTrans56, "rectangle1");
								MoveRegion(ho_RegionTrans56, &ho_RegionMoved93, 0, -130);
								Difference(ho_RegionUnion72, ho_RegionMoved93, &ho_RegionDifference152
									);

								Difference(ho_RegionDilation119, ho_RegionMoved93, &ho_RegionDifference130
									);
								Difference(ho_RegionDifference130, ho_RegionDilation118, &ho_RegionDifference131
									);
								Difference(ho_RegionDifference152, ho_RegionDilation118, &ho_RegionDifference153
									);

								DilationCircle(ho_RegionOpening97, &ho_RegionDilation147, 10);
								Difference(ho_RegionDifference153, ho_RegionDilation147, &ho_RegionDifference154
									);
								ErosionCircle(ho_RegionDifference154, &ho_RegionErosion3, 8);

								//**
								ConcatObj(ho_Reg, ho_RegionErosion3, &ho_Reg);
								//检测塑胶
								CreateDict(&hv_dd);

								CreateDict(&hv___Tmp_Ctrl_Dict_Init_170);
								SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_170);
								hv___Tmp_Ctrl_Dict_Init_170 = HTuple(HNULL);

								CreateDict(&hv___Tmp_Ctrl_Dict_Init_171);
								SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_171);
								hv___Tmp_Ctrl_Dict_Init_171 = HTuple(HNULL);
								CreateDict(&hv___Tmp_Ctrl_Dict_Init_172);
								SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_172);
								hv___Tmp_Ctrl_Dict_Init_172 = HTuple(HNULL);
								CreateDict(&hv___Tmp_Ctrl_Dict_Init_173);
								SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_173);
								hv___Tmp_Ctrl_Dict_Init_173 = HTuple(HNULL);

								CreateDict(&hv___Tmp_Ctrl_Dict_Init_174);
								SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_174);
								hv___Tmp_Ctrl_Dict_Init_174 = HTuple(HNULL);
								SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
									"sub", 5);
								SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
									"ssname", "area");
								SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
									"ssmin", 90);
								SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
									"ssmax", 999999);
								if (0 != (int(hv_ac == -1)))
								{
									CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
									SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
										"0", hv___Tmp_Ctrl_0);
								}
								if (0 != (int(hv_ac == 1)))
								{
									GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
										"keys", HTuple(), &hv_GenParamValue4);
									if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
									{
										CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
											HTuple(), HTuple(), &hv_dd);
									}
								}

								SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
								GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
								if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
								{
									SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
								}
								else
								{
									SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
								}
								SetDictObject(ho_SelectedRegions220, hv_dd.TupleGetDictTuple("RT"),
									"region");
								SetDictObject(ho_RegionErosion3, hv_dd.TupleGetDictTuple("SJ"), "region");
								DefectDetectionAlgorithms(hv_dd, (*hv_dt));
								if (HDevWindowStack::IsOpen())
									DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
										);
								if (HDevWindowStack::IsOpen())
									DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
										);

							}
						}
						else
						{

						}
					}
				}
				if (0 != (int(hv_ImageNum == 18)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2098.81, 2622.79, 2504.25, 4037.75);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1401.59, 3383.85, 2056.95, 4267.41);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "rc", (HTuple(1873).Append(3628)));
					SetDictTuple(hv_at, "scal", (HTuple(2).Append(-80)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测塑胶
					GenRectangle1(&ho_ROI_0, 4.04353, 239.406, 129.326, 382.217);
					GenRectangle1(&ho_TMP_Region, 135.186, 241.476, 831.292, 342.892);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 810.055, 279.93, 1090.08, 350.705);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1090.08, 280.97, 1223.72, 384.883);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1221.58, 301.092, 1468.95, 389.115);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1218.23, 298.853, 1375.85, 307.427);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1453.07, 352.637, 1635.4, 438.945);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1416.29, 383.186, 1502.28, 423.573);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1465.5, 327.427, 1545.27, 354.708);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1542, 345.018, 1588.3, 357.8);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1632.79, 392.454, 1701.89, 457.016);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1634.87, 362.779, 1688.74, 381.419);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1720.38, 427.491, 1783.93, 484.803);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1793.03, 453.873, 1842.15, 523.477);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1843.63, 487.572, 1894.95, 554.245);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1891.68, 526.862, 1937.26, 621.099);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1937.26, 587.961, 1997.35, 669.771);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1999.1, 646.7, 2045.96, 750.639);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2042.32, 713.052, 2091.01, 830.072);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2088.06, 783.858, 2136.75, 914.341);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2117.37, 887.156, 2177.4, 1142.18);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2037.24, 1138.04, 2235.96, 1588.34);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2173.21, 1020.88, 2216.68, 1153.34);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2035.48, 1586.27, 2217.65, 2343.78);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2091.8, 1108.43, 2118.16, 1139.17);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2176.42, 971.624, 2207.5, 1021.33);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2133.95, 838.035, 2160.88, 888.778);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2091.47, 751.047, 2117.37, 786.256);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2042.97, 683.2, 2071.98, 717.374);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1990.61, 617.728, 2024.79, 655.009);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1935.3, 559.945, 1967.56, 587.786);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1973.78, 664.836, 1999.68, 710.401);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2065.87, 833.265, 2085.55, 867.439);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2024.55, 751.442, 2042.12, 790.968);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1805.6, 2368.58, 275.762);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing2, 100);
					ErosionCircle(ho_RegionClosing2, &ho_RegionErosion1, 20);
					MoveRegion(ho_RegionErosion1, &ho_RegionMoved16, -15, 5);
					AffineTransRegion(ho_RegionMoved16, &ho_ROI_0s, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					//检测转角
					GenRectangle1(&ho_ROI_0, 678.562, -184.391, 2483.34, 1669.11);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);

					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);

					MoveRegion(ho_ObjectSelected1, &ho_RegionMoved46, 50, 200);
					ShapeTrans(ho_RegionMoved46, &ho_RegionTrans29, "convex");
					ShapeTrans(ho_RegionTrans29, &ho_RegionTrans30, "rectangle1");
					MoveRegion(ho_RegionTrans30, &ho_RegionMoved47, 0, 200);
					Difference(ho_RegionTrans29, ho_RegionMoved47, &ho_RegionDifference42);
					ShapeTrans(ho_RegionDifference42, &ho_RegionTrans31, "rectangle1");
					MoveRegion(ho_RegionTrans31, &ho_RegionMoved48, -800, -50);
					Union2(ho_RegionMoved48, ho_RegionDifference42, &ho_RegionDifference42);
					Difference(ho_ROI_0s, ho_RegionDifference42, &ho_ROI_0s);
					//检测下基准面
					GenRectangle1(&ho_ROI_0, 1941.81, 2245.64, 2468.44, 4159.06);
					GenRectangle1(&ho_TMP_Region, 1825.5, 2650.46, 2120.78, 3481.37);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 10, 120);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 105, 120);
					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 60);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", ((HTuple(1550).Append(100)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 100, 1);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2.5, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(1600).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							//检测RT
							CreateDict(&hv_dd);

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_177);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_177);
							hv___Tmp_Ctrl_Dict_Init_177 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_178);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_178);
							hv___Tmp_Ctrl_Dict_Init_178 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_179);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_179);
							hv___Tmp_Ctrl_Dict_Init_179 = HTuple(HNULL);
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}

							SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));
							if (HDevWindowStack::IsOpen())
								DispObj(ho_Image, HDevWindowStack::GetActive());
							if (HDevWindowStack::IsOpen())
								DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
									);


							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 50);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 5);
						}
						else
						{
							ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
							Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
							Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 1961.44, 2376.38, 2198.96, 2520.34);
						GenRectangle1(&ho_TMP_Region, 2120.85, 2508.49, 2192.39, 4093.33);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2105.86, 2510.87, 2129.88, 2821.82);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2022.63, 3608.2, 2164.84, 3935.93);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2080.91, 3937.99, 2125.95, 3983.22);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2076, 3572.39, 2123.81, 3614.38);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2075.69, 2519.65, 2111.81, 2556.65);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenCircle(&ho_TMP_Region, 1854, 2317.83, 140.094);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
						MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, 70, 20);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_181);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_181);
					hv___Tmp_Ctrl_Dict_Init_181 = HTuple(HNULL);
					//检测塑胶
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_182);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_182);
					hv___Tmp_Ctrl_Dict_Init_182 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_183);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_183);
					hv___Tmp_Ctrl_Dict_Init_183 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
						"sub", 9);

					//检测A基准
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_184);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_184);
					hv___Tmp_Ctrl_Dict_Init_184 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ROI_0s, hv_dd.TupleGetDictTuple("SJ"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					//9.04 add-zjy RT 压伤
					GenRectangle1(&ho_ROI_0, 2099.43, 1630.95, 2532.99, 4095);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced59);
					Threshold(ho_ImageReduced59, &ho_Region95, 220, 255);
					ClosingRectangle1(ho_Region95, &ho_RegionClosing23, 155, 3);
					Connection(ho_RegionClosing23, &ho_ConnectedRegions92);
					SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions53, (HTuple("area").Append("height")),
						"and", (HTuple(5000).Append(1)), (HTuple(40000).Append(40)));
					ReduceDomain(ho_Image, ho_SelectedRegions53, &ho_ImageReduced79);
					GrayClosingRect(ho_ImageReduced79, &ho_ImageClosing70, 3, 155);
					DynThreshold(ho_ImageReduced79, ho_ImageClosing70, &ho_RegionDynThresh,
						120, "dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions97, ((HTuple("area").Append("height")).Append("width")),
						"and", ((HTuple(40).Append(5)).Append(0)), ((HTuple(99999).Append(25)).Append(80)));

					ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions97, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");
				}
				if (0 != (int(hv_ImageNum == 19)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2054.65, 300.022, 2410.44, 2956.16);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1422.54, 517.379, 2066.41, 1459.69);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(1909).Append(775)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测下基准面
					GenRectangle1(&ho_ROI_0, 2050, 2, 2352, 4122);
					GenRectangle1(&ho_TMP_Region, 1985.9, 199.677, 2122.53, 1075.17);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1958.84, 1564.76, 2119.81, 2439.77);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1957.09, 2657.92, 2106.35, 3565.11);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					//9.12 add-zjy A基准压伤
					MultImage(ho_ImageReduced2, ho_ImageReduced2, &ho_ImageResult16, 0.05,
						0);
					Threshold(ho_ImageResult16, &ho_Region103, 0, 208);
					Connection(ho_Region103, &ho_ConnectedRegions103);
					SelectShape(ho_ConnectedRegions103, &ho_SelectedRegions108, ((HTuple("width").Append("area")).Append("height")),
						"and", ((HTuple(0).Append(150)).Append(15)), ((HTuple(100).Append(9999)).Append(45)));
					ErosionCircle(ho_ROI_0, &ho_RegionErosion25, 19);
					SelectShapeProto(ho_SelectedRegions108, ho_RegionErosion25, &ho_SelectedRegions108,
						"overlaps_rel", 100, 100);
					SelectGray(ho_SelectedRegions108, ho_ImageResult16, &ho_SelectedRegions108,
						"min", "and", 0, 90);
					CountObj(ho_SelectedRegions108, &hv_Number31);
					if (0 != hv_Number31)
					{
						AffineTransRegion(ho_SelectedRegions108, &ho_SelectedRegions108, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions108, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");
					}
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 120);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 105, 100);
					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 3.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4020;
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", hv_w.TupleConcat((HTuple(90).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4090).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							//检测RT
							CreateDict(&hv_dd);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_187);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_187);
							hv___Tmp_Ctrl_Dict_Init_187 = HTuple(HNULL);

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_188);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_188);
							hv___Tmp_Ctrl_Dict_Init_188 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_189);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_189);
							hv___Tmp_Ctrl_Dict_Init_189 = HTuple(HNULL);
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}

							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}
							SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));
							if (HDevWindowStack::IsOpen())
								DispObj(ho_Image, HDevWindowStack::GetActive());
							if (HDevWindowStack::IsOpen())
								DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
									);

							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 50);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
							Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
							Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 2072.38, 2.04244, 2243.5, 64.9914);
						GenRectangle1(&ho_TMP_Region, 2165.03, 65.9204, 2245.35, 4118.83);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2079.48, 1177.21, 2249.89, 1445.43);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2145.59, 2511.9, 2172.51, 3707.93);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2106.54, 3752.85, 2173, 4099.57);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2131.28, 1140.4, 2170.64, 1180.79);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2129.2, 1440.98, 2167.53, 1487.59);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2132.03, 67.9944, 2162.65, 109.474);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}

					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_191);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_191);
					hv___Tmp_Ctrl_Dict_Init_191 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 20)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2038.21, 1300.0516424, 2451.92, 3000.79);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1373.21, 2197.81, 2221.53, 3670.94);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1627).Append(3531)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测下基准面
					GenRectangle1(&ho_ROI_0, 1902.47, -58.8517, 2323.13, 4128.08);

					GenRectangle1(&ho_ROI_01, 1817.5, 3624.45, 2016.45, 4156.93);
					Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

					GenRectangle1(&ho_ROI_01, 1794.35, -41.3639, 2000.61, 471.749);
					Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 70, 240);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 160);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(3800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 3.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 10);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					hv_z = hv_at.TupleGetDictTuple("zoom");
					hv_w = 4000 * hv_z;
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", hv_w.TupleConcat((HTuple(100).Append(5000))), ((HTuple(99999).Append(4000)).Append(3500000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						OpeningRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 50, 30);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);
						ClosingRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 60, 1);
						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 430);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							//检测RT
							CreateDict(&hv_dd);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_194);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_194);
							hv___Tmp_Ctrl_Dict_Init_194 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_195);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_195);
							hv___Tmp_Ctrl_Dict_Init_195 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_196);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_196);
							hv___Tmp_Ctrl_Dict_Init_196 = HTuple(HNULL);
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}

							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}
							SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));
							if (HDevWindowStack::IsOpen())
								DispObj(ho_Image, HDevWindowStack::GetActive());
							if (HDevWindowStack::IsOpen())
								DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
									);

							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 55);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
							Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
							Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 2119.69, -1.83388, 2230.51, 340.725);
						GenRectangle1(&ho_TMP_Region, 2125.5, 339.458, 2234.74, 1751.75);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1973.54, 1780.71, 2232.48, 1890.41);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2119.31, 1872.96, 2233.57, 3513.96);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2131.89, 3503.8, 2233.67, 4099.88);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenCircle(&ho_TMP_Region, 2007.57, 2085.78, 188.685);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 2077.45, 2704.68, 2165.06, 3235.82);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 85);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_198);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_198);
					hv___Tmp_Ctrl_Dict_Init_198 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 21)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2072.48, 84.032, 2499.63, 1289.43);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 83.887, 2739.03, 703.205, 3283.37);
					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(538).Append(2941)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(150)));
					SetDictTuple(hv_at, "scal", (HTuple(2).Append(-190)));
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测小塑胶崩胶
					GenRectangle1(&ho_ROI_0, 674.544, 3809.01, 1003.68, 4006.33);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced63);
					GrayClosingRect(ho_ImageReduced63, &ho_ImageClosing53, 120, 1);
					SubImage(ho_ImageReduced63, ho_ImageClosing53, &ho_ImageSub46, 1, 128);
					Threshold(ho_ImageSub46, &ho_Region77, 0, 30);
					Connection(ho_Region77, &ho_ConnectedRegions78);
					SelectShape(ho_ConnectedRegions78, &ho_SelectedRegions83, "height", "and",
						70, 99999);

					ErosionRectangle1(ho_SelectedRegions83, &ho_RegionErosion23, 1, 5);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionErosion23, &ho_ImageReduced64
						);
					GrayClosingRect(ho_ImageReduced64, &ho_ImageClosing54, 50, 1);
					SubImage(ho_ImageReduced64, ho_ImageClosing54, &ho_ImageSub47, 6, 128);
					Threshold(ho_ImageSub47, &ho_Region78, 0, 30);
					Connection(ho_Region78, &ho_ConnectedRegions79);
					SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions84, "area", "and",
						50, 99999);

					AffineTransRegion(ho_SelectedRegions84, &ho_SelectedRegions84, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("114"), ho_SelectedRegions84, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "114");
					//塑胶区域
					GenRectangle1(&ho_ROI_0, 1992.11, 1714.37, 2161.85, 2494.65);
					GenRectangle1(&ho_TMP_Region, 2029.62, 2390.12, 2182.31, 2896.03);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2182.13, 2517.55, 2212.88, 2668.33);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2030.67, 2888.84, 2146.35, 3145.03);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2144.11, 2890.78, 2186.57, 3012.28);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2170.46, 2656.55, 2204.14, 2817.58);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2009.44, 3034.18, 2128.05, 3206.92);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2008.96, 3206.33, 2092.43, 3301.48);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1992.86, 3294.16, 2047.29, 3371.75);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1950.51, 3348.17, 2014.74, 3435.16);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1855.2, 3394.77, 1963.97, 3493.15);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1782.95, 3460.28, 1877.07, 3580.78);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1706.96, 3524, 1798.12, 3644.12);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1616.66, 3589.77, 1717.69, 3698.1);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1839.8, 3229.66, 213.639);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1501.83, 3634.55, 1624.83, 3739.95);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1322.45, 3653.56, 1507.53, 3777.71);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 738.319, 3650.74, 1340.91, 3812.18);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 933.065, 3812.11, 1089.5, 3842.14);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 14.3886, 3778.18, 772.238, 3871.83);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 679.988, 3728.45, 741.488, 3779.69);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1156.01, 3565.58, 179.349);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1948.6, 1663.43, 2138.46, 1984.03);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing3, 125);
					MoveRegion(ho_RegionClosing3, &ho_RegionMoved6, 10, -35);
					ErosionCircle(ho_RegionMoved6, &ho_RegionErosion2, 19);
					AffineTransRegion(ho_RegionErosion2, &ho_ROI_01, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//边缘
					GenRectangle1(&ho_ROI_0, 2195.44, 6.35105, 2417.87, 2775.85);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced66);
					GrayClosingRect(ho_ImageReduced66, &ho_ImageClosing57, 1, 130);
					GrayOpeningRect(ho_ImageClosing57, &ho_ImageOpening52, 1, 150);
					GrayOpeningRect(ho_ImageOpening52, &ho_ImageOpening53, 30, 10);
					SubImage(ho_ImageOpening53, ho_ImageOpening52, &ho_ImageSub49, 1, 128);
					Threshold(ho_ImageSub49, &ho_Region80, 0, 30);
					Connection(ho_Region80, &ho_ConnectedRegions82);
					SelectShape(ho_ConnectedRegions82, &ho_SelectedRegions87, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(2300).Append(1)), (HTuple(99999).Append(15)));
					CountObj(ho_SelectedRegions87, &hv_Number32);
					if (0 != (int(hv_Number32 == 1)))
					{
						DilationRectangle1(ho_SelectedRegions87, &ho_RegionDilation57, 1, 30);
						MoveRegion(ho_RegionDilation57, &ho_RegionMoved56, 30, 0);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved56, &ho_ImageReduced67
							);
						GrayOpeningRect(ho_ImageReduced67, &ho_ImageOpening54, 1, 100);
						SubImage(ho_ImageOpening54, ho_ImageReduced67, &ho_ImageSub50, 1.5, 128);
						Threshold(ho_ImageSub50, &ho_Region81, 0, 30);
						Connection(ho_Region81, &ho_ConnectedRegions83);
						SelectShape(ho_ConnectedRegions83, &ho_SelectedRegions88, (HTuple("area").Append("circularity")),
							"and", (HTuple(50).Append(0.1)), (HTuple(99999).Append(1)));
						AffineTransRegion(ho_SelectedRegions88, &ho_SelectedRegions88, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("72"), ho_SelectedRegions88, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "72");
					}
					//Rt
					GenRectangle1(&ho_ROI_0, -21.6941, 3582.71, 829.99, 4238.07);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
					MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
					GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
					GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
					SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 1, 128);
					Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
					Connection(ho_Region135, &ho_ConnectedRegions186);
					SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
						"and", (HTuple(800).Append(1)), (HTuple(99999).Append(15)));
					CountObj(ho_SelectedRegions196, &hv_Number51);
					if (0 != (int(hv_Number51 == 1)))
					{
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_201);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_201);
						hv___Tmp_Ctrl_Dict_Init_201 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_202);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_202);
						hv___Tmp_Ctrl_Dict_Init_202 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_203);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_203);
						hv___Tmp_Ctrl_Dict_Init_203 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
						//stop ()
					}
					//检测转角
					GenRectangle1(&ho_ROI_0, 850.148, 2425.7, 2541.21, 4233.79);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
						3000, 9999999);
					SortRegion(ho_SelectedRegions29, &ho_SortedRegions2, "first_point", "false",
						"column");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);

					//检测塑胶
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_205);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_205);
					hv___Tmp_Ctrl_Dict_Init_205 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_206);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_206);
					hv___Tmp_Ctrl_Dict_Init_206 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
						"sub", 8);
					//检测RT
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_207);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_207);
					hv___Tmp_Ctrl_Dict_Init_207 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					MoveRegion(ho_ROI_01, &ho_RegionMoved10, -5, 0);
					SetDictObject(ho_RegionMoved10, hv_dd.TupleGetDictTuple("SJ"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//stop ()
				}
				if (0 != (int(hv_ImageNum == 22)))
				{
					//23.12.2 add-zjy 少铣-119
					Threshold(ho_Image, &ho_Region122, 240, 255);
					ClosingRectangle1(ho_Region122, &ho_RegionClosing38, 3, 55);
					Connection(ho_RegionClosing38, &ho_ConnectedRegions140);
					SelectShape(ho_ConnectedRegions140, &ho_SelectedRegions149, "column1",
						"and", 0, 100);
					ShapeTrans(ho_SelectedRegions149, &ho_RegionTrans7, "rectangle1");
					Union1(ho_RegionTrans7, &ho_RegionUnion26);
					ReduceDomain(ho_Image, ho_RegionUnion26, &ho_ImageReduced109);
					ErosionCircle(ho_RegionUnion26, &ho_RegionErosion27, 15);
					Intensity(ho_RegionUnion26, ho_ImageReduced109, &hv_Mean12, &hv_Deviation13);
					PaintRegion(ho_RegionUnion26, ho_ImageReduced109, &ho_ImageResult20, 250,
						"fill");
					DynThreshold(ho_ImageReduced109, ho_ImageResult20, &ho_RegionDynThresh16,
						70, "dark");
					Connection(ho_RegionDynThresh16, &ho_ConnectedRegions141);
					SelectShape(ho_ConnectedRegions141, &ho_SelectedRegions150, "area", "and",
						500, 9999999);
					SelectShapeProto(ho_SelectedRegions150, ho_RegionErosion27, &ho_SelectedRegions151,
						"overlaps_rel", 90, 100);
					ConcatObj((*hv_dt).TupleGetDictObject("119"), ho_SelectedRegions151, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "119");

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, -16.1286, 3643.37, 3078.49, 4115.02);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1698.06, 2655.17, 2248.44, 3142.76);
					SetDictTuple(hv_at, "point", 1);
					SetDictTuple(hv_at, "rc", (HTuple(1892).Append(2783)));
					SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测RT
					GenRectangle1(&ho_ROI_0, -47.9235, 3303.74, 3071.52, 4197.4);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
					MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
					GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
					GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
					SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 2, 128);
					Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
					Connection(ho_Region135, &ho_ConnectedRegions186);
					SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
						"and", (HTuple(2900).Append(1)), (HTuple(99999).Append(15)));
					CountObj(ho_SelectedRegions196, &hv_Number51);
					if (0 != (int(hv_Number51 == 1)))
					{
						//检测塑胶边缘
						GenRectangle1(&ho_ROI_0, 1188.77, 3681.28, 1856.05, 3772.48);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");

						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced5);
						GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 10, 10);
						MedianRect(ho_ImageOpening1, &ho_ImageMedian, 5, 5);
						GrayClosingRect(ho_ImageMedian, &ho_ImageClosing8, 100, 2);
						SubImage(ho_ImageMedian, ho_ImageClosing8, &ho_ImageSub6, 6, 128);
						Threshold(ho_ImageSub6, &ho_Region7, 0, 60);
						Connection(ho_Region7, &ho_ConnectedRegions11);
						SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions9, "area", "and",
							500, 99999);
						AffineTransRegion(ho_SelectedRegions9, &ho_SelectedRegions9, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("78"), ho_SelectedRegions9, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "78");

						//检测塑胶
						GenRectangle1(&ho_ROI_0, 30.051, 3764.08, 3102.62, 3856.13);
						GenRectangle1(&ho_TMP_Region, 736.492, 3731.56, 2366.99, 3765.51);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_ROI_0, 105);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_210);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_210);
						hv___Tmp_Ctrl_Dict_Init_210 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_211);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_211);
						hv___Tmp_Ctrl_Dict_Init_211 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_212);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_212);
						hv___Tmp_Ctrl_Dict_Init_212 = HTuple(HNULL);
						//检测塑胶
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_213);
						SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_213);
						hv___Tmp_Ctrl_Dict_Init_213 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_214);
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "CAP", hv___Tmp_Ctrl_Dict_Init_214);
						hv___Tmp_Ctrl_Dict_Init_214 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_215);
						SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_215);
						hv___Tmp_Ctrl_Dict_Init_215 = HTuple(HNULL);

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("SJ"), "region");
						SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					}
				}
				if (0 != (int(hv_ImageNum == 23)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1365.26, 34.3714, 1745.88, 3559.34);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1310.5, -14.6707, 1709.71, 3636.18);

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
					Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_218);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_218);
					hv___Tmp_Ctrl_Dict_Init_218 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}
				if (0 != (int(hv_ImageNum == 24)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1279.69, -41.1927, 1688.89, 3821.43);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1692.03, 4142.51);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
					Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_221);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_221);
					hv___Tmp_Ctrl_Dict_Init_221 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "ss_g", (HTuple(220).Append(255)));
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xs_g", (HTuple(240).Append(255)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
							);
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
				if (0 != (int(hv_ImageNum == 25)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1070.71, 1511.72, 1714.89, 4039.54);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1245.98, 949.545, 1758.99, 4093.88);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
					Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_224);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_224);
					hv___Tmp_Ctrl_Dict_Init_224 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "ss_g", (HTuple(200).Append(255)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
							);
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
				if (0 != (int(hv_ImageNum == 26)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1177.01, -0.576, 1690.73, 4108.18);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测边缘
					GenRectangle1(&ho_ROI_0, 1079.02, 100.54, 1792.03, 4100.51);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
					Threshold(ho_ImageScaled28, &ho_Region63, 80, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_227);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_227);
					hv___Tmp_Ctrl_Dict_Init_227 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xm", 30);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
							);
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
				if (0 != (int(hv_ImageNum == 27)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1177.01, -0.576, 1690.73, 4108.18);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1692.03, 4100.51);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
					Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");

					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_230);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_230);
					hv___Tmp_Ctrl_Dict_Init_230 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xm", 90);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 28)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 1369.91, -20.6837, 1750.26, 3302.93);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1752.03, 3900.51);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
					GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

					ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
					Threshold(ho_ImageScaled28, &ho_Region63, 80, 255);
					ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
					OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
					ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");

					//检测侧拍基准面(暗)
					//**CGZB
					CreateDict(&hv_dd);


					CreateDict(&hv___Tmp_Ctrl_Dict_Init_233);
					SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_233);
					hv___Tmp_Ctrl_Dict_Init_233 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "sm", 20);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}

					SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");

					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 29)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 434.748, -6.71404, 1126.79, 1701.9);
					//位置偏移检测区域

					GenRectangle1(&ho_ROI_1, 1048.58, -89.477, 1698.09, 712.169);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1205).Append(451)));
					SetDictTuple(hv_at, "scal", (HTuple(8.5).Append(-350)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "move", (HTuple(300).Append(0)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					if (false)
					{

						//检测转角
						GenRectangle1(&ho_ROI_0, 1016.79, -256.299, 3205.23, 1721.48);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
						GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
						Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
						Connection(ho_Region49, &ho_ConnectedRegions59);
						SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point",
							"true", "row");
						SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_236);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_236);
						hv___Tmp_Ctrl_Dict_Init_236 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					}

					//检测下基准面
					GenRectangle1(&ho_ROI_0, 772.76, 0.432893, 1141.05, 1709.43);
					GenRectangle1(&ho_TMP_Region, 996.22, 559.063, 1281.75, 1407.35);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 50, 50);
					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", ((HTuple(1500).Append(100)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 90, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						OpeningRectangle1(ho_RegionDifference1, &ho_RegionDifference1, 30, 30);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 3, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(1600).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved, &ho_RegionIntersection
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 854.571, 9.76802, 940.342, 1707.1);
						GenRectangle1(&ho_TMP_Region, 942.029, 122.36, 1038.67, 450.28);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 932.647, 1256.29, 957.54, 1710.11);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 954.612, 1557.86, 1109.83, 1705.72);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenCircle(&ho_TMP_Region, 1183.04, 1724.75, 97.8806);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
						ErosionRectangle1(ho_RegionClosing1, &ho_RegionClosing1, 1, 20);
						MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, -20, 0);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}

					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_238);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_238);
					hv___Tmp_Ctrl_Dict_Init_238 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 30)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 501.225, -0.1527, 1178.04, 4099.96);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 850, 2838.23, 1623.49, 3596.18);
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1195).Append(3337)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-80)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测基准面
					GenRectangle1(&ho_ROI_0, 813.795, -41.9569, 1144.77, 4230.62);
					GenRectangle1(&ho_TMP_Region, 1020.19, 1635.48, 1247.79, 2545.84);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1019.16, 3047.03, 1275.73, 3926);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 40);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 95, 50);
					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4050;
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", hv_w.TupleConcat((HTuple(50).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved1, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved1, &ho_RegionIntersection3
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection3, &ho_RegionErosion, 3.5);
						}
					}
					else
					{

						GenRectangle1(&ho_ROI_0, 893.403, -16.5021, 1047.3, 367.047);
						GenRectangle1(&ho_TMP_Region, 891.864, 368.345, 1016.28, 1559.85);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 892.394, 1560.62, 990.11, 2647.21);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 893.174, 2655.28, 1076.21, 2918.04);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 892.015, 2914.75, 988.652, 4036.35);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 891.02, 4036.35, 1081.64, 4112.99);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 988.667, 2614.37, 1030.11, 2651.65);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 987.631, 2911.57, 1029.07, 2954.03);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 989.032, 4008.87, 1027.15, 4042.57);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
						ErosionCircle(ho_RegionClosing1, &ho_RegionErosion5, 15);
						MoveRegion(ho_RegionErosion5, &ho_RegionMoved42, -5, 0);
						AffineTransRegion(ho_RegionMoved42, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");

					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_241);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_241);
					hv___Tmp_Ctrl_Dict_Init_241 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 31)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 587.02, -2.14637, 1118, 4068.95);

					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 700, 372.485, 1740.22, 1928.96);
					//9.29 add A基准压伤
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced90);
					Threshold(ho_ImageReduced90, &ho_Region108, 0, 50);
					OpeningCircle(ho_Region108, &ho_RegionOpening32, 55);
					Connection(ho_RegionOpening32, &ho_ConnectedRegions113);
					SelectShapeStd(ho_ConnectedRegions113, &ho_SelectedRegions99, "max_area",
						70);
					SmallestRectangle1(ho_SelectedRegions99, &hv_Row17, &hv_Column17, &hv_Row27,
						&hv_Column27);
					//gen_rectangle1 (Rectangle1, Row17, 0, Row17+100, Column17-120)
					GenRectangle1(&ho_Rectangle2, hv_Row17 - 30, hv_Column17 + 70, hv_Row17 + 100,
						hv_Column27 - 70);
					GenRectangle1(&ho_Rectangle3, hv_Row17 - 50, hv_Column27 + 700, hv_Row17 + 80,
						hv_Column27 + 1880);
					GenRectangle1(&ho_Rectangle4, hv_Row17, hv_Column27 + 2050, hv_Row17 + 180,
						hv_Width4);
					//union2 (Rectangle1, Rectangle3, RegionLine)
					Union2(ho_Rectangle3, ho_Rectangle4, &ho_RegionLine);
					ReduceDomain(ho_Image, ho_RegionLine, &ho_ImageReduced91);
					Threshold(ho_ImageReduced91, &ho_Region109, 0, 70);
					FillUp(ho_Region109, &ho_RegionClosing27);
					Connection(ho_RegionClosing27, &ho_ConnectedRegions115);
					CountObj(ho_ConnectedRegions115, &hv_NumReg);
					{
						HTuple end_val8455 = hv_NumReg;
						HTuple step_val8455 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val8455, step_val8455); hv_Index1 += step_val8455)
						{
							SelectObj(ho_ConnectedRegions115, &ho_ObjectSelected3, hv_Index1);
							RegionFeatures(ho_ObjectSelected3, "inner_height", &hv_inHval);
							if (0 != (int(hv_inHval<11)))
							{
								OpeningCircle(ho_ObjectSelected3, &ho_RegionOpening33, 9);
							}
							else if (0 != (int(hv_inHval<25)))
							{
								OpeningCircle(ho_ObjectSelected3, &ho_RegionOpening33, hv_inHval + 5);
							}
							else
							{
								ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_ObjectSelected3, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");
							}
							Connection(ho_RegionOpening33, &ho_ConnectedRegions114);
							SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions121, "area", "and",
								150, 99999);
							ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions121, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

						}
					}
					ReduceDomain(ho_Image, ho_Rectangle2, &ho_ImageReduced91);
					Threshold(ho_ImageReduced91, &ho_Region109, 0, 50);
					OpeningRectangle1(ho_Region109, &ho_RegionOpening34, 155, 3);
					Difference(ho_Region109, ho_RegionOpening34, &ho_RegionDifference66);
					Connection(ho_RegionDifference66, &ho_ConnectedRegions116);
					SelectShape(ho_ConnectedRegions116, &ho_SelectedRegions122, (HTuple("area").Append("height")),
						"and", (HTuple(150).Append(15)), (HTuple(99999).Append(999)));
					ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions122, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "rc", (HTuple(1511).Append(1747)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(3).Append(-150)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测基准面
					GenRectangle1(&ho_ROI_0, 827.732, -46.4556, 1266.27, 4115.66);

					GenRectangle1(&ho_ROI_01, 1129.22, -117.663, 1251.9, 438.359);
					Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

					GenRectangle1(&ho_ROI_01, 1120.72, 2539.25, 1378.14, 3685.99);
					Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

					GenRectangle1(&ho_ROI_01, 1122.69, 1374.31, 1329.55, 2036.28);
					Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 40);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 40);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 5);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", ((HTuple(4000).Append(80)).Append(5000)), ((HTuple(99999).Append(1250)).Append(3500000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 80, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 35);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved2, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved2, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{

						GenRectangle1(&ho_ROI_0, 944.38, 0.134597, 1050.26, 538.69);
						GenRectangle1(&ho_TMP_Region, 943.219, 548.695, 1074.79, 2173.16);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 942.787, 2181.64, 1198.67, 2336.65);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 944.35, 2345.16, 1049.06, 3800.67);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 944.677, 3817.56, 1048, 4100.98);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenCircle(&ho_TMP_Region, 1152.17, 2031.75, 160.46);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenCircle(&ho_TMP_Region, 1188.92, 1985.27, 176.713);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1018.96, 850.534, 1124.38, 1357.05);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 95);
						ErosionRectangle1(ho_RegionClosing1, &ho_RegionClosing1, 1, 15);
						MoveRegion(ho_RegionClosing1, &ho_RegionMoved11, -8, 0);
						AffineTransRegion(ho_RegionMoved11, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}
					//检测A基准
					CreateDict(&hv_dd);


					CreateDict(&hv___Tmp_Ctrl_Dict_Init_244);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_244);
					hv___Tmp_Ctrl_Dict_Init_244 = HTuple(HNULL);

					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 32)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 676.864, 2651.97, 1103.09, 4104.41);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 804.092, 2199.39, 1420.33, 2791.13);
					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "rc", (HTuple(1335).Append(2646)));
					SetDictTuple(hv_at, "move", (HTuple(0).Append(-180)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(5).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测基准面
					GenRectangle1(&ho_ROI_0, 837.363, 2462.31, 1109.54, 4098.19);

					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 65, 40);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 5);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, (((HTuple("width").Append("height")).Append("area")).Append("rectangularity")),
						"and", (((HTuple(1600).Append(50)).Append(5000)).Append(0)), (((HTuple(99999).Append(1250)).Append(3500000)).Append(0.8)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						OpeningRectangle1(ho_RegionDifference1, &ho_RegionDifference1, 20, 20);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved2, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved2, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{

						GenRectangle1(&ho_ROI_0, 931.344, 2446.49, 1043.51, 2485.32);
						GenRectangle1(&ho_TMP_Region, 932.111, 2482.71, 1002.56, 3119.94);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 935.744, 3116.83, 1059.02, 3340.52);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 935.465, 3339.36, 1046.78, 4101.48);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle2(&ho_TMP_Region, 996.251, 3058.59, HTuple(-26.5737).TupleRad(),
							74.1051, 34.6445);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1000.63, 2483.39, 1028.14, 2510.36);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 95);
						MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, -30, 0);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_247);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_247);
					hv___Tmp_Ctrl_Dict_Init_247 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (false)
					{

						//Rt
						GenRectangle1(&ho_ROI_0, -21.6941, 3582.71, 1229.99, 4238.07);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
						MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
						GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
						GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
						SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 1, 128);
						Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
						Connection(ho_Region135, &ho_ConnectedRegions186);
						SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
							"and", (HTuple(800).Append(1)), (HTuple(99999).Append(15)));
						CountObj(ho_SelectedRegions196, &hv_Number51);
						if (0 != (int(hv_Number51 == 1)))
						{
							//检测RT
							CreateDict(&hv_dd);
							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_249);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_249);
							hv___Tmp_Ctrl_Dict_Init_249 = HTuple(HNULL);

							SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"),
								"region");
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_250);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_250);
							hv___Tmp_Ctrl_Dict_Init_250 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_251);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_251);
							hv___Tmp_Ctrl_Dict_Init_251 = HTuple(HNULL);
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						}

						//检测转角
						GenRectangle1(&ho_ROI_0, 1256.31, 2406.89, 2877.15, 4203.28);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
						GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
						Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
						Connection(ho_Region49, &ho_ConnectedRegions59);
						SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
							3000, 9999999);
						SortRegion(ho_SelectedRegions29, &ho_SortedRegions2, "first_point", "false",
							"column");
						SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_253);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_253);
						hv___Tmp_Ctrl_Dict_Init_253 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					}
				}
				if (0 != (int(hv_ImageNum == 33)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 680.772, 3196.82, 967.585, 4098.16);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 1151.78, 1999.22, 1764.09, 2541.49);
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(8).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1382).Append(2423)));
					SetDictTuple(hv_at, "area", (HTuple(58000).Append(999999)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//*********
					GenRectangle1(&ho_ROI_0, 932.768, 3065.62, 1004.2, 4102.2);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//****检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_256);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_256);
					hv___Tmp_Ctrl_Dict_Init_256 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 34)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 558.411, -27.1131, 1112.79, 4093.63);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 800, 134.023, 1705.03, 936.796);

					//10.25-zjy A基准压伤
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced97);
					Threshold(ho_ImageReduced97, &ho_Region113, 0, 20);
					Connection(ho_Region113, &ho_ConnectedRegions125);
					SelectShapeStd(ho_ConnectedRegions125, &ho_SelectedRegions132, "max_area",
						70);
					OpeningRectangle1(ho_SelectedRegions132, &ho_RegionOpening37, 3, 55);
					SmallestRectangle1(ho_RegionOpening37, &hv_Row18, &hv_Column18, &hv_Row28,
						&hv_Column28);
					GenRectangle1(&ho_Rectangle8, hv_Row18 - 50, hv_Column28 + 200, hv_Row18 + 50,
						hv_Column28 + 350);
					ReduceDomain(ho_Image, ho_Rectangle8, &ho_ImageReduced98);
					Threshold(ho_ImageReduced98, &ho_Region114, 0, 30);
					OpeningRectangle1(ho_Region114, &ho_RegionOpening38, 3, 19);
					Connection(ho_RegionOpening38, &ho_ConnectedRegions126);
					SelectShape(ho_ConnectedRegions126, &ho_SelectedRegions133, "area", "and",
						50, 99999);
					ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions133, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

					SetDictTuple(hv_at, "point", 2);
					SetDictTuple(hv_at, "rc", (HTuple(1029).Append(758)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					SetDictTuple(hv_at, "area", (HTuple(150000).Append(9999999)));
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测上基准面
					GenRectangle1(&ho_ROI_0, 845.806, 2.25112, 1160.23, 4106.44);
					GenRectangle1(&ho_TMP_Region, 1041.77, 1130.49, 1281.68, 2218.86);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);

					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 40);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4010;
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", hv_w.TupleConcat((HTuple(50).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 30);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved3, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved3, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{
						GenRectangle1(&ho_ROI_0, 923.219, -3.31768, 1021.24, 598.525);
						GenRectangle1(&ho_TMP_Region, 921.945, 586.179, 1058.64, 1022.15);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 921.742, 1020.02, 1013.94, 2295.95);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 922.417, 2294.89, 1060.06, 2969.76);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 923.938, 2969.99, 1118.69, 3202.76);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 923.995, 3203.11, 1036.27, 4102.32);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1031.92, 3201.24, 1068.18, 3238.52);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1057.83, 2936.2, 1086.42, 2977.23);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1014.69, 217.342, 1127.44, 548.19);
						Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
						ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 8);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");

					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_259);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_259);
					hv___Tmp_Ctrl_Dict_Init_259 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(110)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 35)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 656.637, -17.8174, 1086.91, 4136.02);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 730, 3193.8, 1683.1, 4141.73);
					//9.28 add-zjy A基准压伤
					ReduceDomain(ho_Image, ho_ROI_1, &ho_ImageReduced90);
					Threshold(ho_ImageReduced90, &ho_Region108, 0, 50);
					OpeningCircle(ho_Region108, &ho_RegionOpening32, 55);
					Connection(ho_RegionOpening32, &ho_ConnectedRegions113);
					SelectShapeStd(ho_ConnectedRegions113, &ho_SelectedRegions99, "max_area",
						70);
					SmallestRectangle1(ho_SelectedRegions99, &hv_Row17, &hv_Column17, &hv_Row27,
						&hv_Column27);
					GenRectangle1(&ho_Rectangle1, hv_Row17 - 50, hv_Column17 - 2350, hv_Row17 + 50,
						hv_Column17 - 250);
					GenRectangle1(&ho_Rectangle2, hv_Row17 - 80, 0, hv_Row17 + 10, hv_Column17 - 2950);
					GenRectangle1(&ho_Rectangle3, hv_Row17, hv_Column17 - 2670, hv_Row17 + 80,
						hv_Column17 - 2480);
					Union2(ho_Rectangle1, ho_Rectangle2, &ho_RegionLine);
					Union2(ho_RegionLine, ho_Rectangle3, &ho_RegionLine);
					ReduceDomain(ho_Image, ho_RegionLine, &ho_ImageReduced91);
					Threshold(ho_ImageReduced91, &ho_Region109, 0, 50);
					ClosingCircle(ho_Region109, &ho_RegionClosing27, 7);
					FillUp(ho_RegionClosing27, &ho_RegionClosing27);
					Connection(ho_RegionClosing27, &ho_ConnectedRegions115);
					CountObj(ho_ConnectedRegions115, &hv_NumReg);
					{
						HTuple end_val9078 = hv_NumReg;
						HTuple step_val9078 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val9078, step_val9078); hv_Index1 += step_val9078)
						{
							SelectObj(ho_ConnectedRegions115, &ho_ObjectSelected3, hv_Index1);
							RegionFeatures(ho_ObjectSelected3, "inner_height", &hv_inHval);
							if (0 != (int(hv_inHval<11)))
							{
								OpeningCircle(ho_ObjectSelected3, &ho_RegionOpening33, 11);
							}
							else
							{
								OpeningCircle(ho_ObjectSelected3, &ho_RegionOpening33, hv_inHval + 5);
							}
							Connection(ho_RegionOpening33, &ho_ConnectedRegions114);
							SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions121, "area", "and",
								150, 99999);
							ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions121, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

						}
					}



					SetDictTuple(hv_at, "point", 3);
					SetDictTuple(hv_at, "rc", (HTuple(1504).Append(3448)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测上基准面
					GenRectangle1(&ho_ROI_0, 760, -20, 1155, 4090);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);

					GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
					GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 55);
					Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
					Connection(ho_Region34, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
						"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

					SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

					Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
					Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
					Connection(ho_Region27, &ho_ConnectedRegions33);
					FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
						"and", ((HTuple(4000).Append(50)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
					CountObj(ho_SelectedRegions12, &hv_Number27);
					if (0 != hv_Number27)
					{
						Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
						ErosionCircle(ho_Region31, &ho_Region31, 1.5);
						DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
						Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
						Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
						SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
							100000, 9999999);
						SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
							"row");
						SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
						ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

						DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
						ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11
							);
						GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
						GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
						GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
						Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
						Connection(ho_Region6, &ho_ConnectedRegions3);
						//RT检测区域
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions8, &hv_Number28);
						if (0 != hv_Number28)
						{
							GrayClosingRect(ho_ImageOpening17, &ho_ImageClosing2, 20, 10);
							SubImage(ho_ImageOpening17, ho_ImageClosing2, &ho_ImageSub1, 1, 128);
							Threshold(ho_ImageSub1, &ho_Region3, 0, 30);
							Connection(ho_Region3, &ho_ConnectedRegions1);
							SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, (HTuple("width").Append("inner_radius")),
								"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(16)));
							CountObj(ho_SelectedRegions1, &hv_Number3);
							if (0 != hv_Number3)
							{
								DilationRectangle1(ho_SelectedRegions1, &ho_RegionDilation2, 350,
									60);
								MoveRegion(ho_RegionDilation2, &ho_RegionMoved5, -30, 0);
							}
							else
							{
								GenRectangle1(&ho_RegionMoved5, 322.387, 1029.83, 401.407, 3344.79);
							}
							Union2(ho_SelectedRegions8, ho_RegionMoved5, &ho_RegionUnion2);
							DilationRectangle1(ho_RegionUnion2, &ho_RegionDilation12, 1, 30);
							Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
						}
						else
						{
							MoveRegion(ho_ObjectSelected5, &ho_RegionMoved4, 30, 0);
							Intersection(ho_ObjectSelected5, ho_RegionMoved4, &ho_RegionIntersection2
								);
							//A基准检测区域
							ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
						}
					}
					else
					{

						GenRectangle1(&ho_ROI_0, 891.758, -4.49128, 1001.47, 715.006);
						GenRectangle1(&ho_TMP_Region, 892.586, 713.54, 1091.99, 941.403);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 893.716, 939.815, 1044.97, 3292.04);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 894.193, 3287.91, 1076.96, 3633.55);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 896.189, 3629.46, 1043.3, 4094.43);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1000.29, 680.178, 1036.95, 727.07);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
						GenRectangle1(&ho_TMP_Region, 1040.59, 935.855, 1074.32, 976.885);
						Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

						ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
						ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 10);
						AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
					}
					//检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_262);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_262);
					hv___Tmp_Ctrl_Dict_Init_262 = HTuple(HNULL);

					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(80)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 36)))
				{

					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 626, 0, 1056, 1396);
					//位置偏移检测区域
					GenRectangle1(&ho_ROI_1, 819.245, -54.9043, 1671.4, 884.479);

					//9.23 add-zjy a基准压伤 74
					Union2(ho_ROI_1, ho_ROI_0, &ho_RegionUnion25);
					ReduceDomain(ho_Image, ho_RegionUnion25, &ho_ImageReduced87);
					Threshold(ho_ImageReduced87, &ho_Region104, 0, 50);
					FillUpShape(ho_Region104, &ho_Region104, "area", 1, 500);
					OpeningCircle(ho_Region104, &ho_RegionOpening28, 15);
					Connection(ho_RegionOpening28, &ho_ConnectedRegions106);
					SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions115, (HTuple("area").Append("width")),
						"and", (HTuple(50000).Append(300)), (HTuple(9999999).Append(1300)));
					RegionFeatures(ho_SelectedRegions115, "row", &hv_Rval);
					OpeningRectangle1(ho_SelectedRegions115, &ho_RegionOpening30, 299, 3);
					Difference(ho_SelectedRegions115, ho_RegionOpening30, &ho_RegionDifference62
						);
					Connection(ho_RegionDifference62, &ho_RegionDifference62);
					SelectShape(ho_RegionDifference62, &ho_SelectedRegions117, (HTuple("height").Append("row")),
						"and", (HTuple(10).Append(0)), HTuple(99999).TupleConcat(hv_Rval));
					ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_SelectedRegions117, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");


					SetDictTuple(hv_at, "point", 4);
					SetDictTuple(hv_at, "rc", (HTuple(1514).Append(635)));
					SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);
					if (0 != hv_af)
					{

						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"AffineTransformation", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
							{
								CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
									HTuple(), HTuple(), &hv_at);
							}
						}
					}
					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");
					SetDictObject(ho_ROI_1, hv_at, "trareg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

					//检测基准
					GenRectangle1(&ho_ROI_0, 924.643, 9.15763, 1053.68, 1058.35);
					GenRectangle1(&ho_TMP_Region, 927.334, 1038.61, 1090.7, 1241.58);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 926.319, 1239.94, 1080.36, 1438.77);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing, 85);
					ErosionCircle(ho_RegionClosing, &ho_RegionClosing, 18);
					MoveRegion(ho_RegionClosing, &ho_RegionClosing, -8, 0);
					AffineTransRegion(ho_RegionClosing, &ho_RegionClosing, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_265);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_265);
					hv___Tmp_Ctrl_Dict_Init_265 = HTuple(HNULL);
					SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionClosing, hv_dd.TupleGetDictTuple("AG"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_ImageNum == 37)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2752.45, 124.402, 3068.43, 1464.38);
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);

					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测螺柱偏位
					GenRectangle1(&ho_ROI_0, 2775.33, 2178.96, 3032.88, 2737.91);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageClosing39, 10, 10);
					GrayClosingRect(ho_ImageClosing39, &ho_ImageClosing48, 3, 200);
					SubImage(ho_ImageClosing39, ho_ImageClosing48, &ho_ImageSub40, 2, 128);
					Threshold(ho_ImageSub40, &ho_Region36, 0, 50);
					Connection(ho_Region36, &ho_ConnectedRegions43);
					SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions75, "width", "and",
						80, 99999);
					CountObj(ho_SelectedRegions75, &hv_Number11);
					if (0 != hv_Number11)
					{
						Union1(ho_SelectedRegions75, &ho_RegionUnion5);
						ShapeTrans(ho_RegionUnion5, &ho_RegionTrans33, "rectangle1");
						MoveRegion(ho_RegionTrans33, &ho_RegionMoved49, -20, 0);
						Difference(ho_RegionUnion5, ho_RegionMoved49, &ho_RegionDifference43);
						//检测燕尾
						MoveRegion(ho_RegionDifference43, &ho_RegionMoved54, -80, 0);
						DilationRectangle1(ho_RegionMoved54, &ho_RegionDilation54, 260, 90);
						DilationCircle(ho_RegionDilation54, &ho_RegionDilation55, 6);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation55, &ho_ImageReduced62
							);
						MedianRect(ho_ImageReduced62, &ho_ImageMedian24, 5, 5);
						GrayClosingRect(ho_ImageMedian24, &ho_ImageClosing38, 120, 20);
						SubImage(ho_ImageMedian24, ho_ImageClosing38, &ho_ImageSub45, 2.2, 128);
						ScaleImage(ho_ImageSub45, &ho_ImageScaled15, 1.5, -20);
						Threshold(ho_ImageScaled15, &ho_Region76, 0, 30);
						Connection(ho_Region76, &ho_ConnectedRegions77);
						SelectShape(ho_ConnectedRegions77, &ho_SelectedRegions82, "area", "and",
							1500, 99999);
						CountObj(ho_SelectedRegions82, &hv_Number18);
						if (0 != (int(hv_Number18 == 2)))
						{
							HeightWidthRatio(ho_SelectedRegions82, &hv_Height, &hv_Width, &hv_Ratio);
							hv_d = HTuple(hv_Width[0]) - HTuple(hv_Width[1]);
							if (0 != (int((hv_d.TupleAbs())>25)))
							{
								AffineTransRegion(ho_SelectedRegions82, &ho_SelectedRegions82, hv_at.TupleGetDictTuple("hom_mat_rot"),
									"nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_SelectedRegions82,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
					}
				}
				if (0 != (int(hv_ImageNum == 40)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2808.56, 2944.87, 3263.76, 3937.99);
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);

					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测螺柱偏位
					GenRectangle1(&ho_ROI_0, 2758.84, 1313.49, 3150.07, 1924.06);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageClosing39, 10, 10);
					GrayClosingRect(ho_ImageClosing39, &ho_ImageClosing48, 3, 200);
					SubImage(ho_ImageClosing39, ho_ImageClosing48, &ho_ImageSub40, 2, 128);
					Threshold(ho_ImageSub40, &ho_Region36, 0, 50);
					Connection(ho_Region36, &ho_ConnectedRegions43);
					SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions75, "width", "and",
						80, 99999);
					CountObj(ho_SelectedRegions75, &hv_Number11);
					if (0 != hv_Number11)
					{
						Union1(ho_SelectedRegions75, &ho_RegionUnion5);
						ShapeTrans(ho_RegionUnion5, &ho_RegionTrans33, "rectangle1");
						MoveRegion(ho_RegionTrans33, &ho_RegionMoved49, -20, 0);
						Difference(ho_RegionUnion5, ho_RegionMoved49, &ho_RegionDifference43);
						//检测燕尾
						MoveRegion(ho_RegionDifference43, &ho_RegionMoved54, -80, 0);
						DilationRectangle1(ho_RegionMoved54, &ho_RegionDilation54, 260, 90);
						DilationCircle(ho_RegionDilation54, &ho_RegionDilation55, 6);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation55, &ho_ImageReduced62
							);
						MedianRect(ho_ImageReduced62, &ho_ImageMedian24, 5, 5);
						GrayClosingRect(ho_ImageMedian24, &ho_ImageClosing38, 100, 20);
						SubImage(ho_ImageMedian24, ho_ImageClosing38, &ho_ImageSub45, 2.2, 128);
						ScaleImage(ho_ImageSub45, &ho_ImageScaled15, 1.5, -10);
						Threshold(ho_ImageScaled15, &ho_Region76, 0, 30);
						Connection(ho_Region76, &ho_ConnectedRegions77);
						SelectShape(ho_ConnectedRegions77, &ho_SelectedRegions82, "area", "and",
							1500, 99999);
						CountObj(ho_SelectedRegions82, &hv_Number18);
						if (0 != (int(hv_Number18 == 2)))
						{
							HeightWidthRatio(ho_SelectedRegions82, &hv_Height, &hv_Width, &hv_Ratio);
							hv_d = HTuple(hv_Width[0]) - HTuple(hv_Width[1]);
							if (0 != (int((hv_d.TupleAbs())>25)))
							{
								AffineTransRegion(ho_SelectedRegions82, &ho_SelectedRegions82, hv_at.TupleGetDictTuple("hom_mat_rot"),
									"nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_SelectedRegions82,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}
						//8.24 add-zjy  检测燕尾
						Threshold(ho_ImageReduced32, &ho_Region94, 200, 255);
						ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 15, 255);
						Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
						ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans37, "rectangle1");
						ShapeTrans(ho_RegionClosing22, &ho_RegionTrans41, "rectangle1");
						Difference(ho_RegionTrans41, ho_RegionTrans37, &ho_RegionDifference52
							);
						OpeningRectangle1(ho_RegionDifference52, &ho_RegionOpening21, 3, 25);
						SmallestRectangle1(ho_RegionOpening21, &hv_Row13, &hv_Column13, &hv_Row23,
							&hv_Column23);

						GenRectangle2(&ho_ROI_def0, hv_Row23 - 100, hv_Column13 - 30, HTuple(180).TupleRad(),
							40, 15);
						GenMeasureRectangle2(hv_Row23 - 100, hv_Column13 - 30, HTuple(180).TupleRad(),
							40, 15, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
						MeasurePos(ho_ImageReduced32, hv_MeasureHandle, 1, 7, "all", "first",
							&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
						if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
						{
							hv_disPP = hv_Column13 - hv_ColumnEdge1;
							if (0 != (int(hv_disPP<45)))
							{
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def0, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}

						MoveRegion(ho_RegionDifference43, &ho_RegionMoved50, -500, 250);
						//**
						DilationRectangle1(ho_RegionMoved50, &ho_RegionDilation47, 300, 400);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation47, &ho_ImageReduced56
							);
						GrayClosingRect(ho_ImageReduced56, &ho_ImageClosing49, 20, 20);
						GrayOpeningRect(ho_ImageClosing49, &ho_ImageOpening12, 200, 200);
						SubImage(ho_ImageOpening12, ho_ImageClosing49, &ho_ImageSub41, 3, 128);
						Threshold(ho_ImageSub41, &ho_Region71, 0, 30);
						SelectShape(ho_Region71, &ho_SelectedRegions76, (HTuple("width").Append("height")),
							"and", (HTuple(210).Append(210)), (HTuple(99999).Append(90999)));
						CountObj(ho_SelectedRegions76, &hv_Number29);
						if (0 != (int(hv_Number29 == 0)))
						{
							AffineTransRegion(ho_RegionDilation47, &ho_RegionDilation47, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("112"), ho_RegionDilation47,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "112");
						}
					}
				}
				if (0 != (int(hv_ImageNum == 41)))
				{
					//仿射变换
					CreateDict(&hv_at);
					//角度偏移检测区域
					GenRectangle1(&ho_ROI_0, 2808.56, 2944.87, 3263.76, 3937.99);
					SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
					SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
					SetDictTuple(hv_at, "zoom", hv_zoom);

					SetDictObject(ho_Image, hv_at, "image");
					SetDictObject(ho_ROI_0, hv_at, "rotreg");

					AffineTransformation(hv_at);
					GenEmptyObj(&ho_ImageAffineTrans);
					ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
					//检测螺柱偏位
					GenRectangle1(&ho_ROI_0, 2758.84, 1313.49, 3150.07, 1924.06);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageClosing39, 10, 10);
					GrayClosingRect(ho_ImageClosing39, &ho_ImageClosing48, 3, 200);
					SubImage(ho_ImageClosing39, ho_ImageClosing48, &ho_ImageSub40, 2, 128);
					Threshold(ho_ImageSub40, &ho_Region36, 0, 50);
					Connection(ho_Region36, &ho_ConnectedRegions43);
					SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions75, "width", "and",
						80, 99999);
					CountObj(ho_SelectedRegions75, &hv_Number11);
					if (0 != hv_Number11)
					{
						Union1(ho_SelectedRegions75, &ho_RegionUnion5);
						ShapeTrans(ho_RegionUnion5, &ho_RegionTrans33, "rectangle1");
						MoveRegion(ho_RegionTrans33, &ho_RegionMoved49, -20, 0);
						Difference(ho_RegionUnion5, ho_RegionMoved49, &ho_RegionDifference43);
						//检测燕尾
						MoveRegion(ho_RegionDifference43, &ho_RegionMoved54, -80, 0);
						DilationRectangle1(ho_RegionMoved54, &ho_RegionDilation54, 260, 90);
						DilationCircle(ho_RegionDilation54, &ho_RegionDilation55, 6);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation55, &ho_ImageReduced62
							);
						MedianRect(ho_ImageReduced62, &ho_ImageMedian24, 5, 5);
						GrayClosingRect(ho_ImageMedian24, &ho_ImageClosing38, 100, 20);
						SubImage(ho_ImageMedian24, ho_ImageClosing38, &ho_ImageSub45, 2.7, 128);
						ScaleImage(ho_ImageSub45, &ho_ImageScaled15, 1.2, -10);
						Threshold(ho_ImageScaled15, &ho_Region76, 0, 30);
						Connection(ho_Region76, &ho_ConnectedRegions77);
						SelectShape(ho_ConnectedRegions77, &ho_SelectedRegions82, "area", "and",
							1500, 99999);
						CountObj(ho_SelectedRegions82, &hv_Number18);
						if (0 != (int(hv_Number18 == 2)))
						{
							HeightWidthRatio(ho_SelectedRegions82, &hv_Height, &hv_Width, &hv_Ratio);
							hv_d = HTuple(hv_Width[0]) - HTuple(hv_Width[1]);
							if (0 != (int((hv_d.TupleAbs())>25)))
							{
								AffineTransRegion(ho_SelectedRegions82, &ho_SelectedRegions82, hv_at.TupleGetDictTuple("hom_mat_rot"),
									"nearest_neighbor");
								ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_SelectedRegions82,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
							}
						}

						MoveRegion(ho_RegionDifference43, &ho_RegionMoved50, -500, 250);
						DilationRectangle1(ho_RegionMoved50, &ho_RegionDilation47, 300, 400);
						ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation47, &ho_ImageReduced56
							);
						GrayClosingRect(ho_ImageReduced56, &ho_ImageClosing49, 20, 20);
						GrayOpeningRect(ho_ImageClosing49, &ho_ImageOpening12, 250, 250);
						SubImage(ho_ImageOpening12, ho_ImageClosing49, &ho_ImageSub41, 4, 128);
						Threshold(ho_ImageSub41, &ho_Region71, 0, 40);
						Connection(ho_Region71, &ho_ConnectedRegions80);
						FillUp(ho_ConnectedRegions80, &ho_RegionFillUp10);
						SelectShape(ho_RegionFillUp10, &ho_SelectedRegions76, ((HTuple("width").Append("height")).Append("circularity")),
							"and", ((HTuple(210).Append(210)).Append(0.65)), ((HTuple(99999).Append(90999)).Append(17)));
						CountObj(ho_SelectedRegions76, &hv_Number29);
						if (0 != (int(hv_Number29 == 0)))
						{
							AffineTransRegion(ho_RegionDilation47, &ho_RegionDilation47, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("112"), ho_RegionDilation47,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "112");
						}
					}
				}
				if (0 != (int(hv_ImageNum == 44)))
				{
					//8.24 add-zjy  检测燕尾
					GenRectangle1(&ho_ROI_0, 2680, 2054, 3300, 2760);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region94, 200, 255);
					ClosingRectangle1(ho_Region94, &ho_RegionClosing22, 15, 255);
					Connection(ho_RegionClosing22, &ho_ConnectedRegions91);
					ShapeTrans(ho_ConnectedRegions91, &ho_RegionTrans37, "rectangle1");
					ShapeTrans(ho_RegionClosing22, &ho_RegionTrans41, "rectangle1");
					Difference(ho_RegionTrans41, ho_RegionTrans37, &ho_RegionDifference52);
					OpeningRectangle1(ho_RegionDifference52, &ho_RegionOpening21, 3, 25);
					SmallestRectangle1(ho_RegionOpening21, &hv_Row13, &hv_Column13, &hv_Row23,
						&hv_Column23);
					ScaleImageMax(ho_ImageReduced78, &ho_ImageScaleMax);

					GenRectangle2(&ho_ROI_def0, hv_Row23 - 100, hv_Column13 - 30, HTuple(180).TupleRad(),
						40, 15);
					GenMeasureRectangle2(hv_Row23 - 100, hv_Column13 - 30, HTuple(180).TupleRad(),
						40, 15, hv_Width4, hv_Height4, "nearest_neighbor", &hv_MeasureHandle);
					MeasurePos(ho_ImageReduced78, hv_MeasureHandle, 1.1, 7, "all", "first",
						&hv_RowEdge, &hv_ColumnEdge1, &hv_Amplitude, &hv_Distance);
					if (0 != (int((hv_ColumnEdge1.TupleLength()) != 0)))
					{
						hv_disPP = hv_Column13 - hv_ColumnEdge1;
						if (0 != (int(hv_disPP<42)))
						{
							ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_ROI_def0, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
						}
					}

				}
			}
			//*************
			GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
			{
				HTuple end_val9572 = (hv_GenParamValue.TupleLength()) - 1;
				HTuple step_val9572 = 1;
				for (hv_Index10 = 0; hv_Index10.Continue(end_val9572, step_val9572); hv_Index10 += step_val9572)
				{
					TupleNumber(HTuple(hv_GenParamValue[hv_Index10]), &hv_Number22);

					Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
						&ho_ConnectedRegions167);
					SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
						1, 9999999);
					Union1(ho_SelectedRegions114, &ho_RegionUnion67);
					CountObj(ho_RegionUnion67, &hv_Number39);
					if (0 != (int(hv_Number39 == 0)))
					{
						RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
					}
					else if (0 != hv_Number39)
					{
						Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
						if (0 != (HTuple(HTuple(int(hv_Number22>89)).TupleAnd(int(hv_Number22<96))).TupleAnd(int(hv_Number22 != 90))))
						{
							RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
						}
					}

				}
			}
		}
		return 1;
	}
	
	catch (HException& ExceptionHandler)
	{
	HTuple err;
	ExceptionHandler.ToHTuple(&err);
	string strErr = err.ToString();
	string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84GrayLumenDefects1Station error:" + strErr;
	VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;

}


int JSZCAlgorithmsDLLQ1::Det_Bjizhun_region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_Region3, ho_ConnectedRegions6;
	HObject  ho_SelectedRegions8, ho_ImageClosing, ho_DerivGaussImage;
	HObject  ho_ImageConverted, ho_ImageMedian, ho_ImageMedian1;
	HObject  ho_RegionDynThresh, ho_ConnectedRegions7, ho_SelectedRegions9;
	HObject  ho_ImageOpening3, ho_ImageSub5, ho_Region23, ho_ConnectedRegions34;
	HObject  ho_ImageMean, ho_RegionDynThresh1, ho_RegionClosing1;
	HObject  ho_ConnectedRegions8, ho_SelectedRegions12, ho_SelectedRegions13;
	HObject  ho_SelectedRegions10, ho_ImageMean1, ho_RegionClosing2;
	HObject  ho_ConnectedRegions9, ho_SelectedRegions11, ho_SelectedUnion222;
	HObject  ho_SelectedRegions990, ho_SelectedRegions32, ho_SelectedRegions121;
	HObject  ho_Region1, ho_ConnectedRegions2, ho_SelectedRegions3;
	HObject  ho_Region2, ho_ConnectedRegions3, ho_SelectedRegions4;
	HObject  ho_RegionUnion1, ho_RegionClosing, ho_ConnectedRegions4;
	HObject  ho_SelectedRegions5, ho_SelectedRegions6, ho_ImageReduced;
	HObject  ho_Region4, ho_RegionUnion3, ho_ObjectSelected;
	HObject  ho_RegionDilation, ho_RegionDifference, ho_Region;
	HObject  ho_RegionOpening2, ho_ConnectedRegions1, ho_SelectedRegions2;
	HObject  ho_Region62, ho_ConnectedRegions62, ho_SelectedRegions63;
	HObject  ho_RegionOpening1, ho_ConnectedRegions, ho_SelectedRegions;
	HObject  ho_RegionUnion, ho_RegionClosing23, ho_RegionOpening;
	HObject  ho_RegionErosion4, ho_ImageReduced52, ho_ImageOpening4;
	HObject  ho_ImageSub7, ho_Region27, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions33, ho_SelectedRegions7, ho_RegionUnion2;
	HObject  ho_ConnectedRegions5, ho_SelectedRegions161, ho_SelectedRegions1;
	HObject  ho_SelectedRegions162, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Mean4, hv_Deviation4;
	HTuple  hv_Number1, hv_Number, hv_Number2, hv_Area, hv_Row;
	HTuple  hv_Column, hv_i, hv_Mean, hv_Deviation, hv_Mean1;
	HTuple  hv_Deviation1, hv_Abs, hv_Mean2, hv_Deviation2;
	HTuple  hv_Exception, hv___Tmp_Ctrl_Dict_Init_0, hv___Tmp_Ctrl_Dict_Init_1;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_0, "comp", 0);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("Bjizhun")) >= 0)).TupleAnd(((hv_dd.TupleGetDictTuple("Bjizhun")).TupleConcat(hv___Tmp_Ctrl_Dict_Init_0)).TupleTestEqualDictItem((HTuple("mode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			Intensity(hv_dd.TupleGetDictObject("region"), ho_ImageReduced17, &hv_Mean4,
				&hv_Deviation4);

			if (0 != (int(hv_Mean4<110)))
			{
				ConcatObj(ho_ImageReduced17, hv_dt.TupleGetDictObject("44"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "44");
			}
			if (0 != (int(hv_Mean4 >= 110)))
			{

				//*检测点状压上和黑点
				Threshold(ho_ImageReduced17, &ho_Region3, 248, 255);
				Connection(ho_Region3, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions8, "area", "and", 70000,
					999999);
				CountObj(ho_SelectedRegions8, &hv_Number1);
				if (0 != (int(hv_Number1 == 0)))
				{
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing, 3, 1);

					DerivateGauss(ho_ImageReduced17, &ho_DerivGaussImage, 1, "none");
					ConvertImageType(ho_DerivGaussImage, &ho_ImageConverted, "byte");
					MedianRect(ho_ImageConverted, &ho_ImageMedian, 3, 3);
					MedianRect(ho_ImageConverted, &ho_ImageMedian1, 25, 25);
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 45,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions9, ((HTuple("area").Append("height")).Append("anisometry")),
						"and", ((HTuple(550).Append(20)).Append(1)), ((HTuple(99999).Append(85)).Append(5.5)));

					GrayClosingRect(ho_ImageReduced17, &ho_ImageOpening3, 59, 81);
					SubImage(ho_ImageReduced17, ho_ImageOpening3, &ho_ImageSub5, 1.0, 128);


					Threshold(ho_ImageSub5, &ho_Region23, 0, 70);
					Connection(ho_Region23, &ho_ConnectedRegions34);
					//YJH考试新增
					MeanImage(ho_ImageReduced17, &ho_ImageMean, 13, 59);
					DynThreshold(ho_ImageReduced17, ho_ImageMean, &ho_RegionDynThresh1, 69,
						"dark");
					ClosingRectangle1(ho_RegionDynThresh1, &ho_RegionClosing1, 6, 3);
					Connection(ho_RegionClosing1, &ho_ConnectedRegions8);
					SelectGray(ho_ConnectedRegions8, ho_ImageReduced17, &ho_SelectedRegions12,
						"mean", "and", 0, 25);
					SelectShape(ho_SelectedRegions12, &ho_SelectedRegions13, (HTuple("area").Append("anisometry")),
						"and", (HTuple(35).Append(0)), (HTuple(999).Append(5)));
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions10, ((HTuple("area").Append("anisometry")).Append("height")),
						"and", ((HTuple(110).Append(6)).Append(25)), ((HTuple(9999).Append(15)).Append(40)));
					MeanImage(ho_ImageReduced17, &ho_ImageMean1, 186, 9);
					DynThreshold(ho_ImageReduced17, ho_ImageMean1, &ho_RegionDynThresh1, 67,
						"dark");
					ClosingRectangle1(ho_RegionDynThresh1, &ho_RegionClosing2, 9, 3);
					Connection(ho_RegionClosing2, &ho_ConnectedRegions9);
					SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions11, (HTuple("area").Append("anisometry")),
						"and", (HTuple(300).Append(1)), (HTuple(4999).Append(4)));
					Union2(ho_SelectedRegions10, ho_SelectedRegions11, &ho_SelectedUnion222
						);
					Union2(ho_SelectedUnion222, ho_SelectedRegions13, &ho_SelectedRegions990
						);
					ConcatObj(ho_SelectedRegions990, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");

					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, ((HTuple("area").Append("anisometry")).Append("circularity")),
						"and", ((HTuple(55).Append(1e-5)).Append(0.18)), ((HTuple(2200).Append(3.5)).Append(1)));
					SelectGray(ho_SelectedRegions32, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions121,
						"mean", "and", 0, 82);
					CountObj(ho_SelectedRegions121, &hv_Number);
					Threshold(ho_ImageSub5, &ho_Region1, 0, 40);
					Connection(ho_Region1, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, ((HTuple("area").Append("anisometry")).Append("phi")),
						"and", (HTuple(12075).Append(0)).TupleConcat(HTuple(-40).TupleRad()),
						(HTuple(99999).Append(17.5)).TupleConcat(HTuple(40).TupleRad()));
					ConcatObj(ho_SelectedRegions3, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
					Threshold(ho_ImageSub5, &ho_Region2, 0, 15);
					Connection(ho_Region2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
						"and", (HTuple(20).Append(0)), (HTuple(2400).Append(8.8)));
					Union1(ho_SelectedRegions4, &ho_RegionUnion1);
					ClosingRectangle1(ho_RegionUnion1, &ho_RegionClosing, 10, 10);
					Connection(ho_RegionClosing, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, (HTuple("area").Append("anisometry")),
						"and", (HTuple(55).Append(0)), (HTuple(99999).Append(8.8)));
					SelectGray(ho_SelectedRegions5, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions6,
						"mean", "and", 0, 102);
					ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_SelectedRegions6, &ho_ImageReduced
						);
					Threshold(ho_ImageReduced, &ho_Region4, 0, 75);
					Union2(ho_Region4, ho_SelectedRegions9, &ho_Region4);
					Union1(ho_Region4, &ho_Region4);
					CountObj(ho_Region4, &hv_Number2);
					Union2(ho_SelectedRegions6, ho_SelectedRegions9, &ho_RegionUnion3);
					if (0 != hv_Number2)
					{
						AreaCenter(ho_Region4, &hv_Area, &hv_Row, &hv_Column);
						if (0 != (int(hv_Area>20)))
						{
							ConcatObj(ho_RegionUnion3, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
						}
					}
					{
						HTuple end_val85 = hv_Number;
						HTuple step_val85 = 1;
						for (hv_i = 1; hv_i.Continue(end_val85, step_val85); hv_i += step_val85)
						{
							SelectObj(ho_SelectedRegions121, &ho_ObjectSelected, hv_i);
							DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, 43, 6);
							Difference(ho_RegionDilation, ho_ObjectSelected, &ho_RegionDifference
								);
							Intensity(ho_ObjectSelected, hv_dd.TupleGetDictObject("image"), &hv_Mean,
								&hv_Deviation);
							Intensity(ho_RegionDifference, hv_dd.TupleGetDictObject("image"), &hv_Mean1,
								&hv_Deviation1);
							TupleAbs(hv_Mean1 - hv_Mean, &hv_Abs);
							if (0 != (int(hv_Abs>41)))
							{
								ConcatObj(ho_ObjectSelected, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
							}
						}
					}
					//检测明显黑点
					Threshold(ho_ImageReduced17, &ho_Region, 0, 30);
					OpeningRectangle1(ho_Region, &ho_RegionOpening2, 2, 2);
					Connection(ho_RegionOpening2, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and",
						60, 99999);
					ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
				}
			}
		}
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_1, "comp", 1);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("Bjizhun")) >= 0)).TupleAnd(((hv_dd.TupleGetDictTuple("Bjizhun")).TupleConcat(hv___Tmp_Ctrl_Dict_Init_1)).TupleTestEqualDictItem((HTuple("mode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			Intensity(hv_dd.TupleGetDictObject("region"), ho_ImageReduced17, &hv_Mean4,
				&hv_Deviation4);
			if (0 != (int(hv_Mean4>135)))
			{
				ConcatObj(ho_ImageReduced17, hv_dt.TupleGetDictObject("44"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "44");
			}
			if (0 != (int(hv_Mean4 <= 135)))
			{

				Threshold(ho_ImageReduced17, &ho_Region62, 0, 110);
				Connection(ho_Region62, &ho_ConnectedRegions62);
				SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions63, "area", "and",
					18000, 9999999);
				OpeningRectangle1(ho_SelectedRegions63, &ho_RegionOpening1, 5, 5);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 1550,
					999999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);
				ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing23, 100, 10);
				OpeningRectangle1(ho_RegionClosing23, &ho_RegionOpening, 20, 20);
				ErosionRectangle1(ho_RegionOpening, &ho_RegionErosion4, 10, 1);
				ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionErosion4, &ho_ImageReduced52
					);
				GrayOpeningRect(ho_ImageReduced52, &ho_ImageOpening4, 11, 11);
				SubImage(ho_ImageReduced52, ho_ImageOpening4, &ho_ImageSub7, 1.5, 128);
				Threshold(ho_ImageSub7, &ho_Region27, 210, 255);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions33, (HTuple("area").Append("anisometry")),
					"and", (HTuple(25).Append(0)), (HTuple(1200).Append(6.2)));
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions7, (((HTuple("anisometry").Append("phi")).Append("area")).Append("ratio")),
					"and", (HTuple(6.5).TupleConcat(HTuple(-15).TupleRad())).TupleConcat((HTuple(100).Append(0.19))),
					(HTuple(35).TupleConcat(HTuple(15).TupleRad())).TupleConcat((HTuple(9999).Append(7))));
				Union2(ho_SelectedRegions7, ho_SelectedRegions33, &ho_RegionUnion2);
				Connection(ho_RegionUnion2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions161, (((HTuple("area").Append("anisometry")).Append("inner_radius")).Append("ratio")),
					"and", (((HTuple(240).Append(0)).Append(2)).Append(0.19)), (((HTuple(1200).Append(27.3)).Append(77)).Append(9)));
				SelectGray(ho_ConnectedRegions5, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions1,
					"mean", "and", 115, 255);
				CountObj(ho_SelectedRegions1, &hv_Number);
				{
					HTuple end_val141 = hv_Number;
					HTuple step_val141 = 1;
					for (hv_i = 1; hv_i.Continue(end_val141, step_val141); hv_i += step_val141)
					{
						SelectObj(ho_SelectedRegions1, &ho_ObjectSelected, hv_i);
						DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, 23, 6);
						Difference(ho_RegionDilation, ho_ObjectSelected, &ho_RegionDifference);
						Intensity(ho_ObjectSelected, hv_dd.TupleGetDictObject("image"), &hv_Mean,
							&hv_Deviation);
						Intensity(ho_RegionDifference, hv_dd.TupleGetDictObject("image"), &hv_Mean1,
							&hv_Deviation1);
						TupleAbs(hv_Mean1 - hv_Mean, &hv_Abs);
						if (0 != (HTuple(int(hv_Abs>70)).TupleAnd(int(hv_Mean1<100))))
						{
							ConcatObj(ho_ObjectSelected, hv_dt.TupleGetDictObject("58"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "58");
						}
					}
				}
				Intensity(ho_SelectedRegions161, hv_dd.TupleGetDictObject("image"), &hv_Mean2,
					&hv_Deviation2);
				SelectGray(ho_SelectedRegions161, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions162,
					"mean", "and", 140, 255);

				//var_threshold (ImageReduced17, Region3, 45, 45, 0.2, 22, 'dark')
				//connection (Region3, ConnectedRegions5)
				//select_shape (ConnectedRegions5, SelectedRegions6, 'area', 'and', 50, 99999)
				//union2 (SelectedRegions1, SelectedRegions6, RegionUnion2)
				//closing_rectangle1 (RegionUnion2, RegionClosing1, 10, 10)
				//connection (RegionClosing1, ConnectedRegions6)
				//intersection (ConnectedRegions6, dt.['55'], RegionIntersection)



				ConcatObj(ho_SelectedRegions162, hv_dt.TupleGetDictObject("58"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "58");
			}
		}
		return 1;
		}
		catch (HException& ExceptionHandler)
		{
			HTuple err;
			ExceptionHandler.ToHTuple(&err);
			string strErr = err.ToString();
			string strerr = "DET_Bjizhun error:" + strErr;
			VeErrMessage.push_back(QString::fromStdString(strerr));
		}
		reg = -1;
		return -1;

}

int JSZCAlgorithmsDLLQ1::Det_LD_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_ImageMedian8, ho_ImageClosing10;
	HObject  ho_Regions, ho_ConnectedRegions72, ho_SelectedRegions72;
	HObject  ho_SelectedRegions74, ho_RegionUnion20, ho_ImageMedian;
	HObject  ho_ImageMedian1, ho_RegionDynThresh, ho_RegionClosing1;
	HObject  ho_ConnectedRegions7, ho_SelectedRegions6, ho_RegionUnion1;
	HObject  ho_SelectedRegions7, ho_SelectedRegions, ho_RegionDifference;
	HObject  ho_DerivGauss, ho_ImageConverted, ho_ImageRank;
	HObject  ho_ImageZoomed, ho_ImageMedian2, ho_ImageMedian3;
	HObject  ho_RegionZoom, ho_RegionErosion, ho_RegionDynThresh2;
	HObject  ho_RegionIntersection, ho_ConnectedRegions2, ho_SelectedRegions4;
	HObject  ho_SelectedRegions5, ho_RegionZoom1, ho_RegionDynThresh1;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions2, ho_Region26;
	HObject  ho_ConnectedRegions92, ho_SelectedRegions106, ho_RegionUnion2;
	HObject  ho_Region107, ho_ConnectedRegions152, ho_SelectedRegions179;
	HObject  ho_Region, ho_ConnectedRegions, ho_SelectedRegions1;
	HObject  ho_RegionUnion, ho_RegionClosing, ho_ConnectedRegions1;
	HObject  ho_SelectedRegions3, ho_SelectedRegions8, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Value5, hv_Number;
	HTuple  hv_Area, hv_Row, hv_Column, hv_Number2, hv_Exception;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		if (0 != (int((hv_GenParamValue.TupleFind("LD")) >= 0)))
		{
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
			GrayClosingRect(ho_ImageMedian8, &ho_ImageClosing10, 11, 11);
			//大面黑（未见光或者大的黑色缺陷）
			AutoThreshold(ho_ImageClosing10, &ho_Regions, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("auto_thre"));
			Connection(ho_Regions, &ho_ConnectedRegions72);
			SelectGray(ho_ConnectedRegions72, ho_ImageClosing10, &ho_SelectedRegions72,
				"mean", "and", 0, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_gray_mean_value"));
			SelectShape(ho_SelectedRegions72, &ho_SelectedRegions74, (HTuple("area").Append("ratio")),
				"and", (HTuple(500).Append(0.05)), (HTuple(9999999).Append(14)));
			Union1(ho_SelectedRegions74, &ho_RegionUnion20);
			RegionFeatures(ho_RegionUnion20, "area", &hv_Value5);
			if (0 != (HTuple(int(hv_Value5>1000)).TupleAnd(int(hv_Value5<6.5e6))))
			{
				ConcatObj(ho_SelectedRegions74, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			}
			//检测常规黑色缺陷（压伤）
			MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 95, 95);
			DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_black"),
				"dark");
			ClosingCircle(ho_RegionDynThresh, &ho_RegionClosing1, 1.8);
			Connection(ho_RegionClosing1, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions6, "area", "and", 70,
				9999);
			Union1(ho_SelectedRegions6, &ho_RegionUnion1);
			ClosingCircle(ho_RegionUnion1, &ho_ConnectedRegions7, 3.5);
			Connection(ho_ConnectedRegions7, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions7, ((HTuple("area").Append("ratio")).Append("anisometry")),
				"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_balck_area")).TupleConcat((HTuple(0).Append(0))),
				((HTuple(99999).Append(4.5)).Append(15)));
			SelectShape(ho_SelectedRegions7, &ho_SelectedRegions, "circularity", "and",
				0.6, 1);
			ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("49"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "49");
			Difference(ho_SelectedRegions7, ho_SelectedRegions, &ho_RegionDifference);
			ConcatObj(ho_RegionDifference, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 3, "none");
			ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
			RankRect(ho_ImageConverted, &ho_ImageRank, 15, 15, 55);
			//检测大的压伤
			ZoomImageFactor(ho_ImageRank, &ho_ImageZoomed, 0.5, 0.5, "constant");
			MedianRect(ho_ImageZoomed, &ho_ImageMedian2, 3, 3);
			MedianRect(ho_ImageZoomed, &ho_ImageMedian3, 85, 85);
			ZoomRegion(hv_dd.TupleGetDictObject("region"), &ho_RegionZoom, 0.5, 0.5);
			ErosionRectangle1(ho_RegionZoom, &ho_RegionErosion, 21, 21);

			DynThreshold(ho_ImageMedian2, ho_ImageMedian3, &ho_RegionDynThresh2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("der_black_value"),
				"dark");
			Intersection(ho_RegionDynThresh2, ho_RegionErosion, &ho_RegionIntersection);
			Connection(ho_RegionIntersection, &ho_ConnectedRegions2);
			SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions4, "area", "and", 500,
				99999);
			SelectGray(ho_SelectedRegions4, ho_ImageZoomed, &ho_SelectedRegions5, "mean",
				"and", 0, 97);
			ZoomRegion(ho_SelectedRegions5, &ho_RegionZoom1, 2, 2);
			ConcatObj(ho_RegionZoom1, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			//检测白色缺陷
			DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh1, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_light"),
				"light");
			Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_white_area")).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_ratio_value")),
				HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_ratio_value")));
			ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");

			//检测大的亮白（灰度240+）
			Threshold(ho_ImageMedian, &ho_Region26, 230, 255);
			Connection(ho_Region26, &ho_ConnectedRegions92);
			SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions106, "area", "and", 250,
				49999);
			CountObj(ho_SelectedRegions106, &hv_Number);
			if (0 != hv_Number)
			{
				Union1(ho_SelectedRegions106, &ho_RegionUnion2);
				AreaCenter(ho_RegionUnion2, &hv_Area, &hv_Row, &hv_Column);
				if (0 != (int(hv_Area >= 1800)))
				{
					ConcatObj(ho_SelectedRegions106, hv_dt.TupleGetDictObject("46"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "46");
				}
				else if (0 != (HTuple(int(hv_Area>500)).TupleAnd(int(hv_Area<1800))))
				{
					ConcatObj(ho_SelectedRegions106, hv_dt.TupleGetDictObject("51"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "51");
				}
			}

			//长浅黑
			VarThreshold(ho_ImageMedian, &ho_Region107, 50, 25, 0.2, 18, "dark");
			Connection(ho_Region107, &ho_ConnectedRegions152);
			SelectShape(ho_ConnectedRegions152, &ho_SelectedRegions179, ((HTuple("area").Append("ratio")).Append("anisometry")),
				"and", ((HTuple(1080).Append(0)).Append(0)), ((HTuple(99999).Append(20)).Append(17)));
			CountObj(ho_SelectedRegions179, &hv_Number2);
			if (0 != (int(hv_Number2>9)))
			{
				ConcatObj(ho_SelectedRegions179, hv_dt.TupleGetDictObject("42"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "42");
			}
			//长横黑
			VarThreshold(ho_ImageMedian, &ho_Region, 1, 35, 0.2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("var_dark_value"),
				"dark");
			Connection(ho_Region, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, (HTuple("area").Append("ratio")),
				"and", (HTuple(50).Append(0)), (HTuple(99999).Append(1.3)));
			Union1(ho_SelectedRegions1, &ho_RegionUnion);
			ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing, 36, 1);
			Connection(ho_RegionClosing, &ho_ConnectedRegions1);
			SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions3, (HTuple("area").Append("width")),
				"and", (HTuple(150).Append(190)), (HTuple(99999).Append(9999)));
			SelectGray(ho_SelectedRegions3, ho_ImageReduced17, &ho_SelectedRegions8, "mean",
				"and", 0, 100);
			ConcatObj(ho_SelectedRegions8, hv_dt.TupleGetDictObject("42"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "42");
			//脏污检测

		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_LD_Region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::Det_RT_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_Region84, ho_ConnectedRegions122;
	HObject  ho_SelectedRegions139, ho_RegionUnion46, ho_RegionClosing39;
	HObject  ho_RegionDifference45, ho_ConnectedRegions124, ho_SelectedRegions141;
	HObject  ho_SelectedRegions1, ho_SelectedRegions2, ho_SelectedRegions;
	HObject  ho_ImageScaled, ho_ImageMedian33, ho_Region116;
	HObject  ho_ConnectedRegions166, ho_SelectedRegions195, ho_RegionUnion57;
	HObject  ho_RegionClosing51, ho_RegionDifference66, ho_RegionOpening52;
	HObject  ho_ConnectedRegions168, ho_RegionIntersection, ho_SelectedRegions196;
	HObject  ho_RegionOpening53, ho_RegionDifference67, ho_ConnectedRegions169;
	HObject  ho_SelectedRegions197, ho_RegionUnion, ho_ImageClosing12;
	HObject  ho_ImageSub24, ho_Region88, ho_ConnectedRegions118;
	HObject  ho_SelectedRegions135, ho_SelectedRegions3, ho_RegionClosing;
	HObject  ho_ImageOpening10, ho_ImageSub23, ho_Region45, ho_ConnectedRegions29;
	HObject  ho_SelectedRegions47, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Value12, hv_Mean;
	HTuple  hv_Deviation, hv_Exception, hv___Tmp_Ctrl_Dict_Init_0;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1, hv___Tmp_Ctrl_Dict_Init_2;

	try
	{


		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测RT转角区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_0, "comp", 0);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_zhuanjiao")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_0)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			if (0 != ((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("mode")))
			{
				ScaleImage(ho_ImageReduced17, &ho_ImageReduced17, 2.01, 0);
			}
			Threshold(ho_ImageReduced17, &ho_Region84, (hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_thr"),
				255);

			Connection(ho_Region84, &ho_ConnectedRegions122);
			SelectShape(ho_ConnectedRegions122, &ho_SelectedRegions139, ((HTuple("area").Append("circularity")).Append("anisometry")),
				"and", (HTuple(68).Append(0)).TupleConcat((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_anisometry_value")),
				((HTuple(99999).Append(0.65)).Append(99)));
			Union1(ho_SelectedRegions139, &ho_RegionUnion46);
			ClosingCircle(ho_RegionUnion46, &ho_RegionClosing39, (hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("closing_cir_value"));
			Difference(ho_RegionClosing39, ho_SelectedRegions139, &ho_RegionDifference45
				);
			Connection(ho_RegionDifference45, &ho_ConnectedRegions124);
			SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions141, (HTuple("area").Append("anisometry")),
				"and", ((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_area")).TupleConcat(1e-5),
				(HTuple(99999).Append(9)));
			SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions1, (HTuple("area").Append("anisometry")),
				"and", (HTuple(50).Append(0)), (HTuple(99999).Append(17)));
			SelectGray(ho_SelectedRegions1, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions2,
				"mean", "and", 0, 130);
			SelectGray(ho_SelectedRegions141, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions,
				"mean", "and", 0, 137);

			//concat_obj (SelectedRegions, dt.['63'], dt.['63'])
			RegionFeatures(ho_RegionClosing39, "width", &hv_Value12);
			if (0 != (int(hv_Value12>100)))
			{
				ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
				ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
			}
		}
		//检测垂直区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_1, "comp", 1);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_chuizhi")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_1)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			//检测黑色内凹
			ScaleImage(ho_ImageReduced17, &ho_ImageScaled, 1.31, -25);
			MedianRect(ho_ImageScaled, &ho_ImageMedian33, 3, 3);
			Threshold(ho_ImageMedian33, &ho_Region116, 152, 255);
			Connection(ho_Region116, &ho_ConnectedRegions166);
			SelectShape(ho_ConnectedRegions166, &ho_SelectedRegions195, "area", "and",
				150, 99999);
			Union1(ho_SelectedRegions195, &ho_RegionUnion57);
			ClosingRectangle1(ho_RegionUnion57, &ho_RegionClosing51, 50, 120);
			Difference(ho_RegionClosing51, ho_RegionUnion57, &ho_RegionDifference66);
			OpeningRectangle1(ho_RegionDifference66, &ho_RegionOpening52, 2, 2);
			Connection(ho_RegionOpening52, &ho_ConnectedRegions168);
			Intersection(ho_ConnectedRegions168, hv_dd.TupleGetDictObject("region"), &ho_RegionIntersection
				);
			SelectShape(ho_RegionIntersection, &ho_SelectedRegions196, (HTuple("width").Append("anisometry")),
				"and", (HTuple(4).Append(0)), (HTuple(99999).Append(11)));
			Intensity(ho_SelectedRegions196, ho_ImageMedian33, &hv_Mean, &hv_Deviation);
			if (0 != (int(hv_Mean<135)))
			{
				ConcatObj(ho_SelectedRegions196, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
			}
			//检测外凸(多为白色)
			OpeningRectangle1(ho_RegionClosing51, &ho_RegionOpening53, 1, 200);
			Difference(ho_RegionClosing51, ho_RegionOpening53, &ho_RegionDifference67);
			Connection(ho_RegionDifference67, &ho_ConnectedRegions169);
			SelectShape(ho_ConnectedRegions169, &ho_SelectedRegions197, (HTuple("width").Append("area")),
				"and", ((hv_dd.TupleGetDictTuple("RT_chuizhi")).TupleGetDictTuple("min_width_value")).TupleConcat(100),
				(HTuple(55).Append(2999)));
			ConcatObj(ho_SelectedRegions197, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
		}
		//检测水平区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_2, "comp", 2);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_shuipin")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_2)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			//threshold (ImageReduced17, Region, 168, 255)
			//connection (Region, ConnectedRegions)
			//select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999)
			//union1 (SelectedRegions, RegionUnion)

			GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing12, 1, 100);

			//黑
			SubImage(ho_ImageReduced17, ho_ImageClosing12, &ho_ImageSub24, 1, 128);
			Threshold(ho_ImageSub24, &ho_Region88, 0, 50);
			Connection(ho_Region88, &ho_ConnectedRegions118);
			SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, ((HTuple("area").Append("ratio")).Append("height")),
				"and", ((HTuple(20).Append(0.01)).Append(4)), ((HTuple(99999).Append(5)).Append(99)));
			SelectGray(ho_SelectedRegions135, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions3,
				"mean", "and", 0, 125);
			ConcatObj(ho_SelectedRegions3, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");

			//threshold (ImageReduced17, Region, 180, 255)
			//connection (Region, ConnectedRegions)
			//select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999)
			//union1 (SelectedRegions, RegionUnion)
			//closing_rectangle1 (RegionUnion, RegionClosing, 10, 1)
			//opening_rectangle1 (RegionClosing, RegionOpening, 500, 1)
			//difference (RegionClosing, RegionOpening, RegionDifference)
			//opening_rectangle1 (RegionDifference, RegionOpening1, 1, 3)
			//connection (RegionOpening1, ConnectedRegions1)
			//select_shape (ConnectedRegions1, SelectedRegions1, ['area','column','height'], 'and', [50,0,4], [600,4000,99])
			//concat_obj (SelectedRegions1, dt.['63'], dt.['63'])
			GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening10, 1, 320);

			SubImage(ho_ImageOpening10, ho_ImageClosing12, &ho_ImageSub23, 1, 128);
			Threshold(ho_ImageSub23, &ho_Region45, 0, 60);

			Connection(ho_Region45, &ho_ConnectedRegions29);
			SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, ((HTuple("area").Append("ratio")).Append("height")),
				"and", ((HTuple(10).Append(0.089)).Append(3)), ((HTuple(800).Append(8)).Append(99)));
			Union2(ho_SelectedRegions3, ho_SelectedRegions47, &ho_RegionUnion);
			ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing, 10, 10);
			ConcatObj(ho_RegionClosing, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_RT_Region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
	}

int JSZCAlgorithmsDLLQ1::Det_SJ_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_ImageMedian8, ho_Region73;
	HObject  ho_ConnectedRegions96, ho_SelectedRegions, ho_DerivGauss;
	HObject  ho_ImageMedian30, ho_ImageMedian31, ho_RegionDynThresh12;
	HObject  ho_ImageMean, ho_RegionDynThresh, ho_ImageMean1;
	HObject  ho_RegionDynThresh1, ho_ConnectedRegions1, ho_SelectedRegions2;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions5, ho_RegionUnion2;
	HObject  ho_RegionClosing2, ho_ConnectedRegions3, ho_SelectedRegions4;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions3, ho_RegionUnion1;
	HObject  ho_RegionClosing1, ho_ConnectedRegions155, ho_SelectedRegions182;
	HObject  ho_RegionUnion, ho_RegionClosing, ho_ConnectedRegions;
	HObject  ho_SelectedRegions1, ho_ImageClosing5, ho_ImageSub9;
	HObject  ho_Region40, ho_ConnectedRegions41, ho_SelectedRegions40;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Exception;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测塑胶区域
		if (0 != (int((hv_GenParamValue.TupleFind("SJ")) >= 0)))
		{
			ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0, 5, 11);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);

			//大亮白(Bsj漏铁)
			//erosion_rectangle1 (dd.region, RegionErosion, 20, 20)
			//reduce_domain (ImageReduced17, RegionErosion, ImageReduced)
			Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
				255);
			Connection(ho_Region73, &ho_ConnectedRegions96);
			SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
				"and", (HTuple(15).Append(0.01)), (HTuple(3999).Append(16)));
			ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("41"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "41");

			//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
			//connection (Region29, ConnectedRegions39)
			//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
			//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
			//小面积黑
			DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
			ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");

			MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 75, 75);

			DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"),
				"dark");
			//YJH新增
			MeanImage(ho_ImageReduced17, &ho_ImageMean, 289, 7);
			DynThreshold(ho_ImageReduced17, ho_ImageMean, &ho_RegionDynThresh, 33, "dark");
			MeanImage(ho_ImageReduced17, &ho_ImageMean1, 500, 20);
			DynThreshold(ho_ImageReduced17, ho_ImageMean1, &ho_RegionDynThresh1, 29, "dark");
			Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
			SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and", 135,
				999);
			Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, "area", "and", 24,
				99999);
			Union1(ho_SelectedRegions5, &ho_RegionUnion2);
			ClosingCircle(ho_RegionUnion2, &ho_RegionClosing2, 13.5);
			Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
			SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
				"and", (HTuple(135).Append(1)), (HTuple(99999).Append(11)));
			Connection(ho_RegionDynThresh12, &ho_ConnectedRegions2);
			SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "area", "and", 10,
				99999);
			Union1(ho_SelectedRegions3, &ho_RegionUnion1);
			ClosingCircle(ho_RegionUnion1, &ho_RegionClosing1, 20.5);
			Connection(ho_RegionClosing1, &ho_ConnectedRegions155);
			SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value")),
				HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value")));
			Union1(ho_SelectedRegions182, &ho_RegionUnion);
			ClosingCircle(ho_RegionUnion, &ho_RegionClosing, 13.5);
			Connection(ho_RegionClosing, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, "area", "and", 140,
				99999);

			//YJH新增
			Union2(ho_SelectedRegions2, ho_SelectedRegions4, &ho_SelectedRegions2);
			Union2(ho_SelectedRegions2, ho_SelectedRegions1, &ho_SelectedRegions1);
			ConcatObj(ho_SelectedRegions1, hv_dt.TupleGetDictObject("61"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "61");

			//大面积黑
			GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
			SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
			Threshold(ho_ImageSub9, &ho_Region40, 0, 50);


			Connection(ho_Region40, &ho_ConnectedRegions41);
			SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0.2),
				(HTuple(999999).Append(7)));
			ConcatObj(ho_SelectedRegions40, hv_dt.TupleGetDictObject("61"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "61");
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_SJ_Region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84GrayLumenDefects3Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Rectangle, ho_ImageReduced98, ho_Reg;
	HObject  ho_e, ho_EmptyRegion, ho_ROI_0, ho_ImageReduced26;
	HObject  ho_Region26, ho_ConnectedRegions22, ho_SelectedRegions4;
	HObject  ho_Region71, ho_Region72, ho_Region73, ho_Region74;
	HObject  ho_Region75, ho_Region76, ho_RegionUnion50, ho_RegionUnion51;
	HObject  ho_RegionUnion58, ho_RegionUnion59, ho_RegionUnion60;
	HObject  ho_RegionMoved28, ho_ImageReduced31, ho_ImageClosing7;
	HObject  ho_Region34, ho_ConnectedRegions37, ho_SelectedRegions37;
	HObject  ho_RegionDilation9, ho_RegionMoved25, ho_RegionDifference22;
	HObject  ho_RegionMoved88, ho_ImageReduced119, ho_ImageMean9;
	HObject  ho_ImageMean10, ho_RegionDynThresh14, ho_ConnectedRegions181;
	HObject  ho_RegionErosion40, ho_SelectedRegions224, ho_RegionUnion70;
	HObject  ho_RegionClosing91, ho_ConnectedRegions182, ho_SelectedRegions225;
	HObject  ho_ImageReduced8, ho_Region8, ho_RegionOpening43;
	HObject  ho_ConnectedRegions12, ho_SelectedRegions12, ho_RegionClosing5;
	HObject  ho_RegionErosion5, ho_RegionIntersection24, ho_RegionOpening76;
	HObject  ho_RegionDifference70, ho_RegionOpening77, ho_ConnectedRegions178;
	HObject  ho_SelectedRegions192, ho_RegionMoved3, ho_ImageReduced9;
	HObject  ho_ImageClosing2, ho_ImageSub1, ho_Region9, ho_RegionClosing40;
	HObject  ho_ConnectedRegions19, ho_SelectedRegions22, ho_SelectedRegions100;
	HObject  ho_RegionDifference13, ho_RegionOpening9, ho_ConnectedRegions20;
	HObject  ho_SelectedRegions20, ho_ImageReduced11, ho_ImageClosing4;
	HObject  ho_ImageSub2, ho_Region10, ho_ConnectedRegions21;
	HObject  ho_SelectedRegions21, ho_SelectedRegions23, ho_ImageReduced54;
	HObject  ho_Region65, ho_RegionOpening20, ho_RegionClosing19;
	HObject  ho_ConnectedRegions75, ho_SelectedRegions77, ho_SelectedRegions102;
	HObject  ho_RegionDilation16, ho_RegionErosion25, ho_RegionMoved12;
	HObject  ho_ImageReduced67, ho_Region69, ho_RegionOpening32;
	HObject  ho_ConnectedRegions89, ho_SelectedRegions103, ho_RegionUnion33;
	HObject  ho_RegionClosing17, ho_RegionMoved5, ho_RegionMoved7;
	HObject  ho_RegionDifference20, ho_ImageReduced29, ho_Region28;
	HObject  ho_ConnectedRegions45, ho_SelectedRegions49, ho_RegionClosing18;
	HObject  ho_RegionTrans, ho_RegionDilation20, ho_RegionDifference21;
	HObject  ho_ConnectedRegions7, ho_SelectedRegions123, ho_ImageReduced30;
	HObject  ho_ImageRank, ho_ImageClosing19, ho_ImageSub14;
	HObject  ho_Region21, ho_ConnectedRegions113, ho_SelectedRegions119;
	HObject  ho_RegionUnion24, ho_RegionClosing39, ho_ConnectedRegions114;
	HObject  ho_SelectedRegions120, ho_SelectedRegions116, ho_RegionUnion40;
	HObject  ho_Region106, ho_RegionClosing79, ho_RegionOpening66;
	HObject  ho_ConnectedRegions163, ho_SelectedRegions199, ho_ImageReduced114;
	HObject  ho_ImageMean7, ho_RegionDynThresh9, ho_ConnectedRegions169;
	HObject  ho_SelectedRegions229, ho_RegionDilation73, ho_RegionDilation72;
	HObject  ho_RegionMoved84, ho_RegionDifference85, ho_ImageReduced144;
	HObject  ho_ImageScaled9, ho_ImageMedian14, ho_ImageMedian15;
	HObject  ho_RegionDynThresh18, ho_ConnectedRegions217, ho_SelectedRegions205;
	HObject  ho_RegionErosion42, ho_ImageReduced132, ho_Region129;
	HObject  ho_RegionClosing100, ho_ImageRank6, ho_Region134;
	HObject  ho_ConnectedRegions209, ho_SelectedRegions232, ho_RegionUnion56;
	HObject  ho_ImageClosing33, ho_ImageSub28, ho_ImageRank7;
	HObject  ho_Region128, ho_RegionIntersection23, ho_ConnectedRegions203;
	HObject  ho_SelectedRegions254, ho_SelectedRegions252, ho_RegionUnion74;
	HObject  ho_RegionClosing99, ho_ConnectedRegions204, ho_SelectedRegions253;
	HObject  ho_ImageReduced118, ho_Region114, ho_RegionClosing74;
	HObject  ho_ConnectedRegions179, ho_SelectedRegions212, ho_RegionDilation55;
	HObject  ho_RegionDifference81, ho_ConnectedRegions205, ho_SelectedRegions218;
	HObject  ho_RegionErosion43, ho_ImageReduced133, ho_Region130;
	HObject  ho_ConnectedRegions206, ho_SelectedRegions219, ho_ImageReduced34;
	HObject  ho_Region77, ho_ConnectedRegions50, ho_SelectedRegions84;
	HObject  ho_RegionDilation59, ho_RegionDilation60, ho_RegionDifference76;
	HObject  ho_ImageReduced127, ho_ImageRank3, ho_ImageMedian9;
	HObject  ho_ImageClosing30, ho_ImageSub20, ho_Region122;
	HObject  ho_RegionErosion41, ho_RegionIntersection22, ho_ConnectedRegions195;
	HObject  ho_SelectedRegions243, ho_RegionOpening38, ho_RegionTrans6;
	HObject  ho_RegionMoved, ho_RegionDifference2, ho_ConnectedRegions25;
	HObject  ho_SelectedRegions25, ho_RegionErosion26, ho_ImageReduced10;
	HObject  ho_ImageClosing12, ho_ImageSub24, ho_Region88, ho_ConnectedRegions118;
	HObject  ho_SelectedRegions135, ho_ImageOpening10, ho_ImageSub23;
	HObject  ho_Region45, ho_ConnectedRegions29, ho_SelectedRegions47;
	HObject  ho_RegionMoved8, ho_RegionDilation17, ho_RegionClosing71;
	HObject  ho_RegionOpening41, ho_SelectedRegions136, ho_ImageReduced25;
	HObject  ho_ConnectedRegions98, ho_SelectedRegions111, ho_RegionUnion39;
	HObject  ho_ROI_1, ho_Region33, ho_RegionClosing12, ho_ConnectedRegions36;
	HObject  ho_SelectedRegions54, ho_RegionUnion7, ho_RegionDilation35;
	HObject  ho_ImageReduced42, ho_ImageMedian5, ho_Region51;
	HObject  ho_ConnectedRegions56, ho_SelectedRegions56, ho_RegionDilation3;
	HObject  ho_RegionMoved29, ho_RegionDifference34, ho_RegionDifference55;
	HObject  ho_RegionIntersection1, ho_TMP_Region, ho_RegionMoved87;
	HObject  ho_RegionDilation78, ho_RegionErosion56, ho_RegionMoved93;
	HObject  ho_ImageReduced165, ho_Region159, ho_ConnectedRegions252;
	HObject  ho_SelectedRegions307, ho_RegionOpening90, ho_RegionDifference99;
	HObject  ho_ConnectedRegions253, ho_SelectedRegions308, ho_RegionMoved94;
	HObject  ho_RegionIntersection33, ho_ImageReduced41, ho_ImageReduced17;
	HObject  ho_ImageMedian, ho_ImageMedian1, ho_RegionDynThresh;
	HObject  ho_RegionClosing1, ho_SelectedRegions6, ho_RegionUnion1;
	HObject  ho_SelectedRegions7, ho_SelectedRegions, ho_RegionDifference;
	HObject  ho_DerivGauss, ho_ImageConverted, ho_ImageZoomed;
	HObject  ho_ImageMedian2, ho_ImageMedian3, ho_RegionZoom;
	HObject  ho_RegionErosion, ho_RegionDynThresh2, ho_RegionIntersection;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions5, ho_RegionZoom1;
	HObject  ho_RegionDynThresh1, ho_ConnectedRegions4, ho_SelectedRegions2;
	HObject  ho_ConnectedRegions92, ho_SelectedRegions106, ho_RegionUnion2;
	HObject  ho_Region107, ho_ConnectedRegions152, ho_SelectedRegions179;
	HObject  ho_Region, ho_ConnectedRegions, ho_SelectedRegions1;
	HObject  ho_RegionUnion, ho_RegionClosing, ho_ConnectedRegions1;
	HObject  ho_SelectedRegions3, ho_SelectedRegions8, ho_RegionClosing2;
	HObject  ho_ConnectedRegions3, ho_SelectedRegions9, ho_RegionUnion3;
	HObject  ho_RegionDilation76, ho_ImageReduced158, ho_ImageRank11;
	HObject  ho_ImageMedian19, ho_RegionDynThresh20, ho_ConnectedRegions241;
	HObject  ho_SelectedRegions295, ho_RegionErosion53, ho_ImageOpening5;
	HObject  ho_ImageSub36, ho_Region152, ho_ConnectedRegions240;
	HObject  ho_SelectedRegions292, ho_SelectedRegions291, ho_RegionDifference92;
	HObject  ho_Region158, ho_ConnectedRegions243, ho_RegionIntersection30;
	HObject  ho_SelectedRegions296, ho_RegionIntersection29;
	HObject  ho_SelectedRegions293, ho_RegionUnion79, ho_RegionClosing113;
	HObject  ho_ConnectedRegions242, ho_SelectedRegions294, ho_RegionTrans12;
	HObject  ho_RegionMoved59, ho_RegionDifference67, ho_RegionDilation50;
	HObject  ho_ImageReduced101, ho_ConnectedRegions165, ho_SelectedRegions200;
	HObject  ho_RegionClosing80, ho_RegionOpening67, ho_SelectedRegions201;
	HObject  ho_Region97, ho_ConnectedRegions139, ho_SelectedRegions172;
	HObject  ho_ObjectSelected1, ho_RegionOpening58, ho_RegionDifference68;
	HObject  ho_RegionDilation49, ho_RegionMoved60, ho_RegionDifference69;
	HObject  ho_ConnectedRegions141, ho_SelectedRegions174, ho_RegionUnion55;
	HObject  ho_RegionClosing46, ho_RegionDifference57, ho_ConnectedRegions125;
	HObject  ho_SelectedRegions153, ho_RegionUnion49, ho_RegionDilation45;
	HObject  ho_ImageReduced94, ho_ImageClosing22, ho_ImageSub7;
	HObject  ho_Region89, ho_RegionOpening14, ho_ConnectedRegions126;
	HObject  ho_SelectedRegions154, ho_ImageClosing21, ho_ImageClosing23;
	HObject  ho_ImageSub8, ho_Region90, ho_RegionOpening55, ho_RegionClosing48;
	HObject  ho_ConnectedRegions127, ho_SelectedRegions155, ho_SelectedRegions156;
	HObject  ho_RegionClosing61, ho_RegionDifference63, ho_ImageReduced64;
	HObject  ho_ImageClosing9, ho_Region78, ho_ConnectedRegions9;
	HObject  ho_RegionClosing6, ho_RegionOpening12, ho_SelectedRegions13;
	HObject  ho_RegionDilation4, ho_RegionMoved30, ho_RegionErosion12;
	HObject  ho_RegionDifference8, ho_ImageReduced121, ho_ImageMean13;
	HObject  ho_RegionDynThresh17, ho_RegionClosing93, ho_ConnectedRegions189;
	HObject  ho_SelectedRegions236, ho_ImageReduced7, ho_Region7;
	HObject  ho_RegionOpening3, ho_ConnectedRegions11, ho_SelectedRegions11;
	HObject  ho_RegionDilation1, ho_RegionDifference3, ho_RegionOpening35;
	HObject  ho_ImageReduced22, ho_RegionOpening15, ho_ConnectedRegions32;
	HObject  ho_SelectedRegions31, ho_RegionTrans7, ho_RegionOpening17;
	HObject  ho_RegionMoved24, ho_ImageReduced110, ho_ImageMean5;
	HObject  ho_RegionDynThresh7, ho_ConnectedRegions159, ho_SelectedRegions194;
	HObject  ho_Region35, ho_RegionOpening23, ho_ConnectedRegions46;
	HObject  ho_SelectedRegions50, ho_SelectedRegions110, ho_Region110;
	HObject  ho_ConnectedRegions166, ho_SelectedRegions202, ho_RegionClosing81;
	HObject  ho_RegionOpening68, ho_SelectedRegions203, ho_ImageReduced46;
	HObject  ho_Region58, ho_ConnectedRegions55, ho_SelectedRegions55;
	HObject  ho_RegionErosion15, ho_RegionMoved14, ho_ImageReduced82;
	HObject  ho_ImageMedian27, ho_ImageMedian28, ho_RegionDynThresh11;
	HObject  ho_ConnectedRegions130, ho_SelectedRegions149, ho_RegionOpening16;
	HObject  ho_RegionTrans15, ho_RegionDilation77, ho_RegionMoved89;
	HObject  ho_RegionMoved90, ho_RegionDifference95, ho_ImageReduced161;
	HObject  ho_Region154, ho_RegionErosion55, ho_ImageReduced162;
	HObject  ho_ImageClosing39, ho_ImageSub38, ho_Region155;
	HObject  ho_ConnectedRegions248, ho_SelectedRegions303, ho_RegionUnion82;
	HObject  ho_RegionMoved9, ho_SelectedRegions99, ho_RegionDifference9;
	HObject  ho_RegionOpening8, ho_ConnectedRegions16, ho_SelectedRegions18;
	HObject  ho_RegionMoved22, ho_RegionDifference37, ho_ConnectedRegions94;
	HObject  ho_SelectedRegions108, ho_RegionErosion20, ho_RegionMoved27;
	HObject  ho_ImageReduced68, ho_ConnectedRegions112, ho_SelectedRegions117;
	HObject  ho_ImageMedian21, ho_ImageClosing13, ho_ImageSub18;
	HObject  ho_ConnectedRegions148, ho_SelectedRegions173, ho_RegionUnion52;
	HObject  ho_RegionOpening34, ho_ConnectedRegions95, ho_SelectedRegions109;
	HObject  ho_SelectedRegions144, ho_RegionUnion37, ho_ImageReduced43;
	HObject  ho_EdgeAmplitude3, ho_ImageScaled19, ho_Region31;
	HObject  ho_ConnectedRegions66, ho_SelectedRegions60, ho_RegionClosing50;
	HObject  ho_RegionTrans1, ho_RegionMoved32, ho_RegionDifference66;
	HObject  ho_ConnectedRegions69, ho_SelectedRegions67, ho_ImageReduced2;
	HObject  ho_ImageClosing36, ho_Region49, ho_ConnectedRegions59;
	HObject  ho_SelectedRegions29, ho_RegionUnion34, ho_RegionDilation61;
	HObject  ho_Region84, ho_ConnectedRegions122, ho_SelectedRegions139;
	HObject  ho_RegionUnion46, ho_RegionDifference45, ho_ConnectedRegions124;
	HObject  ho_SelectedRegions141, ho_RegionMoved72, ho_ImageReduced120;
	HObject  ho_Region116, ho_ConnectedRegions187, ho_SelectedRegions234;
	HObject  ho_RegionOpening74, ho_ConnectedRegions188, ho_SelectedRegions235;
	HObject  ho_RegionOpening18, ho_RegionClosing14, ho_RegionDilation5;
	HObject  ho_RegionDifference12, ho_ImageMedian8, ho_ImageClosing10;
	HObject  ho_Regions, ho_ConnectedRegions72, ho_SelectedRegions72;
	HObject  ho_SelectedRegions74, ho_RegionUnion20, ho_SelectedRegions287;
	HObject  ho_RegionZoom2, ho_ImageClosing25, ho_ImageRank1;
	HObject  ho_Regions3, ho_ConnectedRegions133, ho_SelectedRegions165;
	HObject  ho_SelectedRegions171, ho_RegionClosing60, ho_RegionDifference61;
	HObject  ho_ConnectedRegions134, ho_SelectedRegions166, ho_RegionOpening48;
	HObject  ho_RegionDilation48, ho_RegionDifference62, ho_RegionIntersection13;
	HObject  ho_RegionErosion6, ho_RegionMoved61, ho_RegionMoved62;
	HObject  ho_RegionMoved63, ho_ImageReduced33, ho_Region91;
	HObject  ho_ConnectedRegions129, ho_SelectedRegions161, ho_RegionClosing54;
	HObject  ho_ImageReduced95, ho_Region36, ho_ConnectedRegions49;
	HObject  ho_SelectedRegions53, ho_RegionTrans11, ho_SelectedRegions57;
	HObject  ho_SelectedRegions58, ho_RegionDifference26, ho_ImageReduced44;
	HObject  ho_Region55, ho_ConnectedRegions67, ho_SelectedRegions68;
	HObject  ho_RegionClosing15, ho_RegionErosion16, ho_ImageReduced45;
	HObject  ho_ImageClosing8, ho_ImageSub13, ho_Region56, ho_ConnectedRegions68;
	HObject  ho_SelectedRegions69, ho_RegionClosing103, ho_RegionDifference86;
	HObject  ho_RegionOpening81, ho_ConnectedRegions218, ho_SelectedRegions266;
	HObject  ho_RegionUnion68, ho_RegionErosion46, ho_ImageReduced145;
	HObject  ho_Region140, ho_ConnectedRegions219, ho_SelectedRegions267;
	HObject  ho_ImageReduced111, ho_ImageScaled6, ho_Region104;
	HObject  ho_ConnectedRegions160, ho_SelectedRegions195, ho_RegionClosing75;
	HObject  ho_RegionMoved66, ho_RegionDilation52, ho_ImageReduced5;
	HObject  ho_ImageScaled7, ho_ImageMean6, ho_RegionDynThresh8;
	HObject  ho_ConnectedRegions161, ho_RegionClosing76, ho_SelectedRegions196;
	HObject  ho_ImageReduced146, ho_Region141, ho_ConnectedRegions220;
	HObject  ho_SelectedRegions268, ho_RegionOpening82, ho_RegionDifference87;
	HObject  ho_ConnectedRegions221, ho_RegionOpening83, ho_SelectedRegions269;
	HObject  ho_SelectedRegions36, ho_RegionClosing27, ho_RegionUnion10;
	HObject  ho_RegionErosion11, ho_ImageReduced15, ho_ImageMedian16;
	HObject  ho_Region16, ho_ConnectedRegions18, ho_SelectedRegions15;
	HObject  ho_RegionDilation8, ho_RegionMoved10, ho_RegionDifference19;
	HObject  ho_RegionClosing115, ho_RegionErosion54, ho_RegionDifference93;
	HObject  ho_RegionDifference94, ho_RegionIntersection31;
	HObject  ho_ConnectedRegions247, ho_SelectedRegions300, ho_SelectedRegions167;
	HObject  ho_RegionMoved33, ho_RegionClosing111, ho_RegionDifference91;
	HObject  ho_RegionOpening86, ho_ConnectedRegions236, ho_SelectedRegions286;
	HObject  ho_ImageReduced155, ho_ImageClosing24, ho_ImageSub10;
	HObject  ho_Region94, ho_RegionOpening33, ho_ConnectedRegions131;
	HObject  ho_SelectedRegions163, ho_RegionUnion53, ho_RegionMoved91;
	HObject  ho_ImageReduced163, ho_ImageScaled10, ho_Region156;
	HObject  ho_ConnectedRegions249, ho_SelectedRegions304, ho_RegionClosing117;
	HObject  ho_RegionMoved92, ho_RegionDifference96, ho_RegionDifference97;
	HObject  ho_RegionClosing118, ho_RegionDifference98, ho_RegionOpening89;
	HObject  ho_ConnectedRegions250, ho_SelectedRegions305, ho_RegionIntersection32;
	HObject  ho_RegionOpening42, ho_Region79, ho_RegionUnion13;
	HObject  ho_RegionUnion14, ho_RegionUnion16, ho_RegionMoved34;
	HObject  ho_ImageReduced65, ho_Region64, ho_RegionClosing24;
	HObject  ho_ConnectedRegions71, ho_SelectedRegions76, ho_RegionDilation6;
	HObject  ho_RegionMoved79, ho_SelectedRegions164, ho_RegionMoved74;
	HObject  ho_RegionDifference75, ho_ConnectedRegions246, ho_SelectedRegions299;
	HObject  ho_RegionOpening88, ho_ImageReduced100, ho_ImageMedian17;
	HObject  ho_Region142, ho_ConnectedRegions222, ho_SelectedRegions270;
	HObject  ho_RegionUnion69, ho_RegionCount1, ho_SelectedRegions271;
	HObject  ho_ROI_J, ho_ImageReduced106, ho_Region100, ho_ConnectedRegions147;
	HObject  ho_RegionOpening62, ho_RegionClosing68, ho_SelectedRegions185;
	HObject  ho_Rectangle2, ho_ImageReduced107, ho_Region101;
	HObject  ho_RegionClosing69, ho_RegionOpening63, ho_ConnectedRegions149;
	HObject  ho_SelectedRegions186, ho_ROI_JA, ho_RegionMoved64;
	HObject  ho_ImageReduced108, ho_Region102, ho_ConnectedRegions151;
	HObject  ho_SelectedRegions188, ho_RegionUnion61, ho_RegionClosing70;
	HObject  ho_RegionOpening64, ho_ConnectedRegions150, ho_SelectedRegions187;
	HObject  ho_RegionUnion57, ho_ImageReduced117, ho_Region113;
	HObject  ho_RegionClosing88, ho_ConnectedRegions158, ho_SelectedRegions191;
	HObject  ho_RegionDifference72, ho_RegionOpening72, ho_RegionClosing89;
	HObject  ho_ConnectedRegions180, ho_SelectedRegions221, ho_SelectedRegions222;
	HObject  ho_RegionDilation56, ho_RegionMoved71, ho_SelectedRegions220;
	HObject  ho_RegionOpening1, ho_RegionErosion17, ho_ROI_11;
	HObject  ho_ImageReduced69, ho_Region81, ho_ConnectedRegions74;
	HObject  ho_SelectedRegions96, ho_RegionDilation36, ho_Rectangle1;
	HObject  ho_ROI_3, ho_ROI_4, ho_ConnectedRegions96, ho_SelectedRegions310;
	HObject  ho_SelectedRegions80, ho_RegionErosion2, ho_ImageReduced57;
	HObject  ho_ImageMedian6, ho_RegionDynThresh4, ho_SelectedRegions81;
	HObject  ho_RegionUnion38, ho_RegionDifference29, ho_RegionDifference30;
	HObject  ho_RegionDifference1, ho_RegionDifference36, ho_RegionErosion37;
	HObject  ho_ImageReduced18, ho_Region24, ho_RegionClosing8;
	HObject  ho_RegionErosion13, ho_ImageReduced23, ho_ImageClosing3;
	HObject  ho_ImageSub6, ho_Region25, ho_ConnectedRegions27;
	HObject  ho_SelectedRegions27, ho_ImageReduced138, ho_Region136;
	HObject  ho_RegionClosing66, ho_RegionOpening80, ho_RegionErosion44;
	HObject  ho_ImageReduced139, ho_ImageRank9, ho_ImageMedian12;
	HObject  ho_ImageMedian13, ho_RegionDynThresh6, ho_ConnectedRegions213;
	HObject  ho_SelectedRegions261, ho_SelectedRegions262, ho_ImageReduced39;
	HObject  ho_Region50, ho_RegionClosing36, ho_RegionErosion21;
	HObject  ho_ImageReduced70, ho_ImageClosing14, ho_ImageSub19;
	HObject  ho_ConnectedRegions99, ho_SelectedRegions112, ho_ImageReduced85;
	HObject  ho_Region92, ho_ConnectedRegions140, ho_RegionClosing42;
	HObject  ho_RegionErosion27, ho_RegionMoved31, ho_ImageReduced86;
	HObject  ho_ImageClosing16, ho_ImageSub25, ho_Region93, ho_ConnectedRegions132;
	HObject  ho_SelectedRegions151, ho_SelectedRegions152, ho_ImageReduced123;
	HObject  ho_RegionDilation80, ho_RegionErosion57, ho_RegionMoved96;
	HObject  ho_ImageReduced167, ho_ImageClosing40, ho_ImageSub39;
	HObject  ho_Region161, ho_RegionOpening91, ho_ConnectedRegions255;
	HObject  ho_SelectedRegions311, ho_RegionUnion84, ho_RegionClosing120;
	HObject  ho_RegionDilation81, ho_RegionMoved97, ho_RegionDifference100;
	HObject  ho_ImageReduced168, ho_ImageReduced91, ho_Region98;
	HObject  ho_ConnectedRegions137, ho_SelectedRegions158, ho_SelectedRegions159;
	HObject  ho_RegionClosing45, ho_RegionErosion29, ho_ImageReduced92;
	HObject  ho_ImageClosing17, ho_ImageSub27, ho_Region99, ho_ConnectedRegions138;
	HObject  ho_SelectedRegions160, ho_ROI_10, ho_ImageReduced147;
	HObject  ho_Region143, ho_ConnectedRegions223, ho_SelectedRegions272;
	HObject  ho_RegionErosion47, ho_ImageReduced148, ho_Region144;
	HObject  ho_ConnectedRegions224, ho_SelectedRegions273, ho_RegionUnion76;
	HObject  ho_RegionClosing106, ho_ConnectedRegions227, ho_SelectedRegions276;
	HObject  ho_RegionClosing104, ho_RegionDilation74, ho_RegionDifference88;
	HObject  ho_RegionErosion48, ho_ImageReduced149, ho_Region145;
	HObject  ho_ConnectedRegions225, ho_SelectedRegions274, ho_RegionUnion75;
	HObject  ho_RegionClosing105, ho_ConnectedRegions226, ho_SelectedRegions275;
	HObject  ho_ImageReduced160, ho_ImageOpening6, ho_ImageSub37;
	HObject  ho_Region153, ho_RegionClosing116, ho_ConnectedRegions211;
	HObject  ho_SelectedRegions301, ho_SelectedRegions302, ho_RegionOpening60;
	HObject  ho_RegionDifference84, ho_ConnectedRegions210, ho_SelectedRegions257;
	HObject  ho_RegionOpening79, ho_SelectedRegions258, ho_RegionDilation70;
	HObject  ho_RegionMoved82, ho_ImageReduced137, ho_ImageRank8;
	HObject  ho_ImageClosing34, ho_ImageSub32, ho_Region135;
	HObject  ho_ConnectedRegions212, ho_SelectedRegions309, ho_RegionUnion83;
	HObject  ho_RegionClosing119, ho_ConnectedRegions254, ho_SelectedRegions259;
	HObject  ho_SelectedRegions260, ho_ImageMedian22, ho_RegionDynThresh22;
	HObject  ho_SelectedRegions175, ho_RegionUnion42, ho_RegionClosing30;
	HObject  ho_RegionTrans3, ho_RegionDilation33, ho_RegionClosing13;
	HObject  ho_ConnectedRegions8, ho_RegionErosion1, ho_RegionMoved36;
	HObject  ho_RegionClosing58, ho_RegionDifference60, ho_ConnectedRegions90;
	HObject  ho_SelectedRegions162, ho_RegionDilation47, ho_RegionMoved37;
	HObject  ho_ImageReduced1, ho_Region2, ho_ConnectedRegions5;
	HObject  ho_RegionClosing21, ho_RegionOpening30, ho_RegionMoved16;
	HObject  ho_RegionMoved17, ho_RegionDifference4, ho_RegionOpening56;
	HObject  ho_ConnectedRegions128, ho_SelectedRegions157, ho_ImageReduced20;
	HObject  ho_ImageClosing1, ho_Region60, ho_ConnectedRegions63;
	HObject  ho_RegionErosion7, ho_RegionMoved13, ho_ImageReduced32;
	HObject  ho_ImageOpening3, ho_ImageSub5, ho_Region23, ho_ConnectedRegions34;
	HObject  ho_SelectedRegions32, ho_SelectedRegions85, ho_RegionDifference15;
	HObject  ho_RegionOpening10, ho_ConnectedRegions23, ho_SelectedRegions30;
	HObject  ho_ImageReduced13, ho_Region14, ho_ConnectedRegions24;
	HObject  ho_SelectedRegions33, ho_ConnectedRegions35, ho_SelectedRegions34;
	HObject  ho_RegionMoved35, ho_RegionDifference58, ho_RegionErosion33;
	HObject  ho_ImageReduced99, ho_Region115, ho_RegionClosing16;
	HObject  ho_ConnectedRegions10, ho_SelectedRegions10, ho_ImageReduced36;
	HObject  ho_Region46, ho_RegionOpening26, ho_RegionOpening70;
	HObject  ho_RegionDilation37, ho_RegionMoved58, ho_ConnectedRegions173;
	HObject  ho_SelectedRegions209, ho_RegionUnion64, ho_RegionClosing83;
	HObject  ho_ConnectedRegions174, ho_SelectedRegions210, ho_SelectedRegions211;
	HObject  ho_RegionUnion23, ho_RegionMoved69, ho_RegionDilation54;
	HObject  ho_ImageReduced113, ho_Region111, ho_ConnectedRegions168;
	HObject  ho_RegionClosing82, ho_RegionOpening69, ho_SelectedRegions204;
	HObject  ho_RegionOpening29, ho_RegionMoved11, ho_RegionDifference40;
	HObject  ho_SelectedRegions19, ho_ImageReduced105, ho_Region29;
	HObject  ho_RegionOpening54, ho_ConnectedRegions39, ho_SelectedRegions198;
	HObject  ho_RegionClosing52, ho_RegionOpening51, ho_RegionDifference64;
	HObject  ho_ConnectedRegions164, ho_SelectedRegions193, ho_RegionClosing72;
	HObject  ho_RegionUnion35, ho_ConnectedRegions85, ho_SelectedRegions91;
	HObject  ho_Region96, ho_ConnectedRegions136, ho_SelectedRegions169;
	HObject  ho_SelectedRegions170, ho_ConnectedRegions26, ho_SelectedRegions26;
	HObject  ho_RegionMoved6, ho_ImageReduced24, ho_Region30;
	HObject  ho_ConnectedRegions43, ho_SelectedRegions39, ho_RegionClosing10;
	HObject  ho_RegionOpening22, ho_RegionClosing28, ho_RegionMoved4;
	HObject  ho_SelectedRegions121, ho_RegionDifference32, ho_RegionOpening31;
	HObject  ho_ConnectedRegions87, ho_RegionErosion19, ho_ImageReduced66;
	HObject  ho_ImageClosing6, ho_ImageSub17, ho_Region68, ho_ConnectedRegions88;
	HObject  ho_SelectedRegions101, ho_ImageReduced143, ho_ImageScaled8;
	HObject  ho_ImageRank10, ho_ImageClosing37, ho_ImageSub34;
	HObject  ho_Region139, ho_ConnectedRegions216, ho_SelectedRegions265;
	HObject  ho_ImageReduced102, ho_Region108, ho_ConnectedRegions234;
	HObject  ho_SelectedRegions283, ho_RegionUnion78, ho_RegionClosing109;
	HObject  ho_ConnectedRegions153, ho_SelectedRegions180, ho_RegionClosing49;
	HObject  ho_RegionErosion34, ho_ImageReduced103, ho_ImageClosing20;
	HObject  ho_ImageSub30, ho_Region109, ho_ConnectedRegions154;
	HObject  ho_SelectedRegions181, ho_ImageReduced75, ho_Region40;
	HObject  ho_RegionOpening37, ho_SelectedRegions104, ho_SelectedRegions129;
	HObject  ho_RegionClosing55, ho_RegionOpening39, ho_RegionTrans10;
	HObject  ho_RegionDifference71, ho_ConnectedRegions93, ho_SelectedRegions105;
	HObject  ho_RegionMoved19, ho_RegionMoved21, ho_RegionDifference54;
	HObject  ho_RegionErosion10, ho_ImageReduced62, ho_ImageClosing15;
	HObject  ho_ImageSub3, ho_RegionErosion23, ho_RegionMoved46;
	HObject  ho_ImageReduced76, ho_Region66, ho_ConnectedRegions81;
	HObject  ho_SelectedRegions89, ho_ImageMedian7, ho_RegionDynThresh5;
	HObject  ho_ConnectedRegions82, ho_SelectedRegions90, ho_SelectedRegions122;
	HObject  ho_RegionUnion47, ho_RegionClosing34, ho_ConnectedRegions83;
	HObject  ho_SelectedRegions93, ho_RegionDifference49, ho_RegionDifference50;
	HObject  ho_ConnectedRegions84, ho_SelectedRegions92, ho_ObjectSelected;
	HObject  ho_RegionIntersection8, ho_RegionUnion48, ho_SelectedRegions118;
	HObject  ho_ImageClosing5, ho_Region67, ho_RegionOpening45;
	HObject  ho_ConnectedRegions86, ho_SelectedRegions94, ho_ImageReduced4;
	HObject  ho_Region1, ho_RegionOpening59, ho_RegionClosing4;
	HObject  ho_RegionErosion3, ho_RegionOpening11, ho_ImageRank2;
	HObject  ho_ImageClosing29, ho_ImageSub16, ho_Region121;
	HObject  ho_ConnectedRegions194, ho_SelectedRegions241, ho_SelectedRegions242;
	HObject  ho_RegionOpening21, ho_ImageMean11, ho_ImageMean12;
	HObject  ho_RegionDynThresh16, ho_ConnectedRegions185, ho_SelectedRegions230;
	HObject  ho_SelectedRegions231, ho_RegionOpening27, ho_SelectedRegions126;
	HObject  ho_RegionUnion9, ho_ImageReduced104, ho_ImageMean2;
	HObject  ho_ConnectedRegions146, ho_SelectedRegions184, ho_RegionClosing78;
	HObject  ho_RegionOpening44, ho_ImageMean1, ho_ConnectedRegions144;
	HObject  ho_RegionClosing67, ho_ConnectedRegions145, ho_SelectedRegions183;
	HObject  ho_RegionOpening24, ho_ImageReduced6, ho_ImageScaled4;
	HObject  ho_Region11, ho_ConnectedRegions6, ho_SelectedRegions28;
	HObject  ho_RegionDilation11, ho_RegionMoved18, ho_RegionMoved20;
	HObject  ho_RegionMoved23, ho_RegionDifference10, ho_RegionErosion14;
	HObject  ho_ImageReduced16, ho_ImageScaled3, ho_Region5;
	HObject  ho_RegionOpening2, ho_SelectedRegions24, ho_RegionDilation10;
	HObject  ho_RegionDifference5, ho_RegionErosion8, ho_ImageReduced19;
	HObject  ho_Region17, ho_RegionOpening6, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions35, ho_RegionClosing7, ho_RegionDilation12;
	HObject  ho_RegionTrans9, ho_RegionDifference14, ho_RegionDifference27;
	HObject  ho_ConnectedRegions51, ho_SelectedRegions59, ho_ConnectedRegions78;
	HObject  ho_SelectedRegions86, ho_RegionTrans4, ho_RegionMoved26;
	HObject  ho_RegionUnion11, ho_ImageReduced3, ho_Region6;
	HObject  ho_RegionOpening, ho_ConnectedRegions14, ho_SelectedRegions16;
	HObject  ho_RegionUnion43, ho_RegionOpening5, ho_RegionDilation2;
	HObject  ho_RegionOpening7, ho_RegionMoved1, ho_RegionDifference6;
	HObject  ho_ImageScaled, ho_Region37, ho_RegionClosing51;
	HObject  ho_ConnectedRegions52, ho_SelectedRegions61, ho_RegionUnion21;
	HObject  ho_RegionClosing20, ho_ConnectedRegions53, ho_SelectedRegions62;
	HObject  ho_RegionOpening28, ho_RegionDilation21, ho_RegionUnion25;
	HObject  ho_Region39, ho_ConnectedRegions54, ho_SelectedRegions63;
	HObject  ho_RegionUnion26, ho_RegionUnion27, ho_RegionDilation23;
	HObject  ho_RegionDifference28, ho_ConnectedRegions57, ho_SelectedRegions64;
	HObject  ho_ImageReduced63, ho_Regions1, ho_Region70, ho_ConnectedRegions91;
	HObject  ho_SelectedRegions95, ho_SelectedRegions148, ho_ImageReduced37;
	HObject  ho_Region41, ho_ConnectedRegions58, ho_SelectedRegions65;
	HObject  ho_RegionDilation24, ho_ImageReduced38, ho_Region42;
	HObject  ho_ConnectedRegions60, ho_SelectedRegions66, ho_RegionDifference31;
	HObject  ho_RegionErosion9, ho_ImageReduced53, ho_ImageMedian30;
	HObject  ho_ImageMedian31, ho_RegionDynThresh15, ho_RegionErosion38;
	HObject  ho_RegionIntersection14, ho_ConnectedRegions183;
	HObject  ho_SelectedRegions227, ho_RegionUnion71, ho_RegionClosing92;
	HObject  ho_ConnectedRegions184, ho_SelectedRegions228, ho_ImageReduced14;
	HObject  ho_Region15, ho_RegionClosing3, ho_ConnectedRegions28;
	HObject  ho_ImageReduced81, ho_Region54, ho_RegionClosing47;
	HObject  ho_ConnectedRegions109, ho_SelectedRegions125, ho_RegionTrans13;
	HObject  ho_RegionDilation22, ho_RegionDifference74, ho_ROI_33;
	HObject  ho_RegionClosing44, ho_RegionOpening57, ho_SelectedRegions223;
	HObject  ho_RegionClosing90, ho_RegionOpening73, ho_RegionDilation71;
	HObject  ho_RegionErosion31, ho_RegionDynThresh12, ho_ImageMean;
	HObject  ho_ConnectedRegions155, ho_SelectedRegions182, ho_ImageSub9;
	HObject  ho_ConnectedRegions41, ho_SelectedRegions40, ho_ImageReduced140;
	HObject  ho_RegionErosion35, ho_RegionDynThresh10, ho_RegionIntersection20;
	HObject  ho_ConnectedRegions172, ho_SelectedRegions208, ho_ImageReduced40;
	HObject  ho_Region32, ho_SelectedRegions75, ho_RegionClosing57;
	HObject  ho_RegionDifference59, ho_ConnectedRegions77, ho_SelectedRegions79;
	HObject  ho_RegionDilation46, ho_RegionMoved56, ho_ImageReduced96;
	HObject  ho_RegionMoved57, ho_ImageReduced97, ho_RegionOpening71;
	HObject  ho_Regions2, ho_SelectedRegions176, ho_ImageReduced47;
	HObject  ho_Region43, ho_ConnectedRegions61, ho_SelectedRegions70;
	HObject  ho_RegionDilation25, ho_ImageReduced93, ho_ImageClosing18;
	HObject  ho_SelectedRegions146, ho_RegionDilation44, ho_RegionDifference38;
	HObject  ho_RegionIntersection16, ho_RegionClosing73, ho_RegionDilation51;
	HObject  ho_RegionMoved65, ho_ImageClosing26, ho_ImageSub11;
	HObject  ho_Region95, ho_ConnectedRegions135, ho_SelectedRegions168;
	HObject  ho_RegionUnion54, ho_RegionDifference65, ho_SelectedRegions140;
	HObject  ho_RegionClosing41, ho_RegionDifference33, ho_ImageReduced74;
	HObject  ho_SelectedRegions150, ho_RegionIntersection7, ho_RegionIntersection28;
	HObject  ho_ImageReduced157, ho_ImageMedian18, ho_RegionDynThresh19;
	HObject  ho_ConnectedRegions239, ho_SelectedRegions290, ho_RegionClosing112;
	HObject  ho_RegionDilation32, ho_Region38, ho_ConnectedRegions40;
	HObject  ho_EdgeAmplitude4, ho_ImageScaled5, ho_RegionClosing25;
	HObject  ho_RegionOpening19, ho_RegionDilation79, ho_RegionMoved95;
	HObject  ho_ImageReduced166, ho_Region160, ho_RegionUnion8;
	HObject  ho_RegionClosing38, ho_ConnectedRegions97, ho_SelectedRegions73;
	HObject  ho_SelectedRegions38, ho_ImageReduced, ho_SelectedRegions226;
	HObject  ho_Region149, ho_RegionErosion51, ho_RegionIntersection26;
	HObject  ho_ConnectedRegions231, ho_SelectedRegions280, ho_Region20;
	HObject  ho_ConnectedRegions38, ho_SelectedRegions44, ho_RegionDilation15;
	HObject  ho_ImageReduced56, ho_Region57, ho_ConnectedRegions70;
	HObject  ho_SelectedRegions78, ho_RegionDilation31, ho_SelectedRegions87;
	HObject  ho_RegionDifference82, ho_ImageReduced134, ho_ImageOpening2;
	HObject  ho_ImageSub29, ho_Region131, ho_ConnectedRegions207;
	HObject  ho_ConnectedRegions15, ho_SelectedRegions14, ho_RegionClosing33;
	HObject  ho_RegionDifference7, ho_ConnectedRegions17, ho_SelectedRegions17;
	HObject  ho_RegionMoved47, ho_RegionMoved49, ho_RegionDifference35;
	HObject  ho_RegionTrans8, ho_RegionMoved48, ho_RegionIntersection3;
	HObject  ho_ImageReduced77, ho_Region3, ho_RegionDifference46;
	HObject  ho_ImageReduced79, ho_Region82, ho_ConnectedRegions115;
	HObject  ho_SelectedRegions130, ho_RegionDilation39, ho_RegionMoved52;
	HObject  ho_RegionIntersection12, ho_ImageReduced84, ho_RegionMoved50;
	HObject  ho_RegionDifference51, ho_RegionMoved51, ho_RegionDilation38;
	HObject  ho_ImageReduced80, ho_Region83, ho_ConnectedRegions116;
	HObject  ho_SelectedRegions132, ho_RegionUnion12, ho_RegionClosing43;
	HObject  ho_ImageReduced83, ho_SelectedRegions138, ho_RegionDilation40;
	HObject  ho_RegionMoved53, ho_RegionDifference52, ho_RegionUnion41;
	HObject  ho_RegionIntersection9, ho_Region13, ho_RegionIntersection11;
	HObject  ho_RegionDifference42, ho_ConnectedRegions105, ho_SelectedRegions127;
	HObject  ho_ImageReduced78, ho_Region80, ho_ConnectedRegions108;
	HObject  ho_SelectedRegions128, ho_RegionOpening36, ho_ConnectedRegions103;
	HObject  ho_SelectedRegions124, ho_RegionDilation7, ho_RegionIntersection10;
	HObject  ho_RegionErosion18, ho_RegionDifference18, ho_RegionMoved40;
	HObject  ho_RegionIntersection6, ho_RegionDilation, ho_RegionMoved2;
	HObject  ho_ImageReduced12, ho_RegionOpening4, ho_ConnectedRegions100;
	HObject  ho_RegionMoved38, ho_RegionDifference11, ho_RegionOpening46;
	HObject  ho_RegionIntersection2, ho_RegionMoved39, ho_RegionIntersection4;
	HObject  ho_RegionIntersection5, ho_ConnectedRegions102;
	HObject  ho_ConnectedRegions104, ho_SelectedRegions97, ho_RegionUnion17;
	HObject  ho_RegionClosing35, ho_RegionOpening47, ho_ConnectedRegions101;
	HObject  ho_SelectedRegions83, ho_RegionErosion28, ho_RegionTrans5;
	HObject  ho_RegionMoved45, ho_ImageReduced73, ho_ConnectedRegions111;
	HObject  ho_SelectedRegions115, ho_SelectedRegions131, ho_ConnectedRegions117;
	HObject  ho_SelectedRegions133, ho_SelectedRegions134, ho_ImageReduced128;
	HObject  ho_Region123, ho_RegionOpening75, ho_ConnectedRegions196;
	HObject  ho_SelectedRegions244, ho_RegionDilation62, ho_RegionMoved77;
	HObject  ho_ImageReduced129, ho_ImageMedian10, ho_ImageRank4;
	HObject  ho_ImageClosing31, ho_ImageSub21, ho_Region124;
	HObject  ho_ConnectedRegions197, ho_SelectedRegions246, ho_SelectedRegions245;
	HObject  ho_ImageReduced35, ho_Region4, ho_ConnectedRegions106;
	HObject  ho_SelectedRegions98, ho_RegionClosing37, ho_RegionMoved42;
	HObject  ho_RegionMoved43, ho_ImageReduced71, ho_ConnectedRegions110;
	HObject  ho_SelectedRegions107, ho_SelectedRegions147, ho_ImageReduced72;
	HObject  ho_RegionOpening50, ho_RegionTrans2, ho_RegionMoved44;
	HObject  ho_Region85, ho_RegionOpening52, ho_ConnectedRegions119;
	HObject  ho_RegionDilation41, ho_RegionDifference53, ho_ConnectedRegions120;
	HObject  ho_ImageReduced87, ho_SelectedRegions113, ho_ImageReduced150;
	HObject  ho_Region146, ho_ConnectedRegions228, ho_SelectedRegions277;
	HObject  ho_RegionDilation75, ho_RegionMoved85, ho_ImageReduced151;
	HObject  ho_Region147, ho_RegionClosing107, ho_ConnectedRegions229;
	HObject  ho_SelectedRegions278, ho_RegionClosing108, ho_RegionErosion49;
	HObject  ho_ImageReduced152, ho_RegionErosion50, ho_ImageMean4;
	HObject  ho_Region148, ho_ConnectedRegions230, ho_RegionIntersection25;
	HObject  ho_SelectedRegions279, ho_SelectedRegions284, ho_RegionClosing110;
	HObject  ho_RegionOpening25, ho_RegionDifference24, ho_ConnectedRegions48;
	HObject  ho_SelectedRegions52, ho_RegionDifference25, ho_ImageReduced21;
	HObject  ho_Region18, ho_ConnectedRegions30, ho_RegionClosing9;
	HObject  ho_RegionDilation13, ho_RegionDifference90, ho_RegionOpening85;
	HObject  ho_RegionIntersection27, ho_ConnectedRegions235;
	HObject  ho_SelectedRegions285, ho_RegionErosion24, ho_ImageClosing11;
	HObject  ho_Region12, ho_ConnectedRegions107, ho_RegionUnion22;
	HObject  ho_RegionUnion45, ho_ImageReduced60, ho_Region62;
	HObject  ho_ConnectedRegions76, ho_RegionOpening40, ho_ConnectedRegions79;
	HObject  ho_RegionOpening65, ho_RegionTrans14, ho_RegionMoved68;
	HObject  ho_RegionIntersection18, ho_RegionMoved67, ho_RegionDilation53;
	HObject  ho_RegionUnion63, ho_ImageReduced112, ho_ImageTexture;
	HObject  ho_ImageTexture1, ho_ImageResult, ho_Region105;
	HObject  ho_RegionIntersection17, ho_RegionCount, ho_ConnectedRegions162;
	HObject  ho_SelectedRegions197, ho_RegionMoved15, ho_RegionUnion44;
	HObject  ho_RegionErosion4, ho_RegionOpening49, ho_RegionErosion22;
	HObject  ho_RegionMoved41, ho_ImageReduced61, ho_ImageClosing;
	HObject  ho_ImageSub, ho_Region63, ho_ConnectedRegions80;
	HObject  ho_SelectedRegions88, ho_RegionUnion19, ho_RegionMoved75;
	HObject  ho_RegionDilation57, ho_RegionUnion72, ho_ImageReduced124;
	HObject  ho_Region118, ho_RegionClosing95, ho_ImageReduced125;
	HObject  ho_Region119, ho_ConnectedRegions192, ho_SelectedRegions239;
	HObject  ho_RegionClosing96, ho_RegionDilation58, ho_RegionMoved76;
	HObject  ho_RegionUnion73, ho_ImageReduced126, ho_ImageClosing28;
	HObject  ho_ImageSub15, ho_Region120, ho_ConnectedRegions193;
	HObject  ho_SelectedRegions240, ho_ImageReduced159, ho_ImageMedian20;
	HObject  ho_RegionDynThresh21, ho_ConnectedRegions244, ho_SelectedRegions297;
	HObject  ho_RegionUnion80, ho_RegionClosing114, ho_ConnectedRegions245;
	HObject  ho_SelectedRegions298, ho_ImageReduced153, ho_Region150;
	HObject  ho_ConnectedRegions232, ho_SelectedRegions281, ho_RegionUnion77;
	HObject  ho_RegionDifference89, ho_RegionErosion52, ho_RegionMoved86;
	HObject  ho_ImageReduced154, ho_ImageClosing38, ho_ImageSub35;
	HObject  ho_Region151, ho_RegionOpening84, ho_ConnectedRegions233;
	HObject  ho_SelectedRegions282, ho_Region126, ho_ConnectedRegions201;
	HObject  ho_SelectedRegions250, ho_RegionUnion66, ho_RegionMoved70;
	HObject  ho_RegionErosion36, ho_RegionDilation68, ho_ImageReduced116;
	HObject  ho_ConnectedRegions171, ho_SelectedRegions213, ho_RegionUnion65;
	HObject  ho_RegionClosing121, ho_ConnectedRegions176, ho_SelectedRegions214;
	HObject  ho_RegionMoved73, ho_ImageReduced122, ho_Region117;
	HObject  ho_ConnectedRegions190, ho_SelectedRegions237, ho_RegionClosing94;
	HObject  ho_RegionDifference73, ho_ConnectedRegions191, ho_SelectedRegions238;
	HObject  ho_RegionMoved83, ho_ImageReduced141, ho_Region137;
	HObject  ho_RegionClosing102, ho_ConnectedRegions214, ho_SelectedRegions263;
	HObject  ho_RegionClosing101, ho_RegionErosion45, ho_ImageReduced142;
	HObject  ho_ImageClosing35, ho_ImageSub33, ho_Region138;
	HObject  ho_ConnectedRegions215, ho_SelectedRegions264, ho_RegionUnion62;
	HObject  ho_RegionClosing98, ho_RegionDilation66, ho_RegionMoved80;
	HObject  ho_RegionDilation67, ho_RegionDifference80, ho_ImageReduced131;
	HObject  ho_ImageRank5, ho_ImageOpening1, ho_ImageSub26;
	HObject  ho_Region127, ho_ConnectedRegions202, ho_SelectedRegions251;
	HObject  ho_RegionClosing62, ho_RegionDifference78, ho_ConnectedRegions199;
	HObject  ho_SelectedRegions248, ho_RegionDilation64, ho_RegionDilation63;
	HObject  ho_RegionDilation65, ho_RegionMoved78, ho_RegionDifference77;
	HObject  ho_ConnectedRegions198, ho_SelectedRegions247, ho_RegionDifference79;
	HObject  ho_ImageReduced130, ho_ImageMedian11, ho_ImageClosing32;
	HObject  ho_ImageSub22, ho_Region125, ho_RegionClosing97;
	HObject  ho_ConnectedRegions200, ho_SelectedRegions249, ho_RegionClosing22;
	HObject  ho_RegionClosing23, ho_ImageReduced48, ho_Region27;
	HObject  ho_ConnectedRegions42, ho_SelectedRegions46, ho_RegionDilation19;
	HObject  ho_ImageReduced49, ho_Region44, ho_ConnectedRegions44;
	HObject  ho_SelectedRegions48, ho_RegionDilation26, ho_RegionUnion5;
	HObject  ho_RegionUnion28, ho_RegionUnion29, ho_RegionDifference23;
	HObject  ho_ImageReduced50, ho_Region47, ho_ConnectedRegions47;
	HObject  ho_SelectedRegions51, ho_RegionUnion30, ho_RegionClosing26;
	HObject  ho_RegionDilation27, ho_RegionDifference39, ho_ImageReduced51;
	HObject  ho_Region48, ho_ConnectedRegions62, ho_SelectedRegions71;
	HObject  ho_RegionUnion31, ho_RegionDilation28, ho_RegionDifference41;
	HObject  ho_ImageReduced52, ho_Region52, ho_ConnectedRegions64;
	HObject  ho_RegionDilation29, ho_RegionDifference43, ho_ImageReduced55;
	HObject  ho_Region53, ho_ConnectedRegions65, ho_RegionUnion32;
	HObject  ho_RegionClosing29, ho_RegionDilation30, ho_RegionDifference44;
	HObject  ho_ImageReduced58, ho_Region59, ho_ImageReduced59;
	HObject  ho_Region61, ho_ConnectedRegions73, ho_SelectedRegions82;
	HObject  ho_RegionClosing32, ho_RegionDilation34, ho_RegionErosion32;
	HObject  ho_ImageReduced115, ho_ImageMedian4, ho_RegionDynThresh13;
	HObject  ho_RegionIntersection19, ho_ConnectedRegions175;
	HObject  ho_RegionClosing84, ho_RegionClosing56, ho_RegionClosing59;
	HObject  ho_RegionClosing53, ho_RegionClosing31, ho_RegionUnion36;
	HObject  ho_RegionDifference47, ho_RegionDifference48, ho_ImageReduced27;
	HObject  ho_Region19, ho_RegionClosing87, ho_SelectedRegions43;
	HObject  ho_RegionUnion18, ho_RegionDilation14, ho_RegionClosing64;
	HObject  ho_RegionOpening13, ho_RegionDifference16, ho_ConnectedRegions31;
	HObject  ho_SelectedRegions41, ho_RegionDifference17, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions42, ho_Region103, ho_RegionClosing77;
	HObject  ho_SelectedRegions189, ho_ConnectedRegions156, ho_Rectangle3;
	HObject  ho_ImageReduced109, ho_ImageMean3, ho_RegionDynThresh3;
	HObject  ho_RegionIntersection15, ho_ConnectedRegions157;
	HObject  ho_SelectedRegions190, ho_RegionUnion6, ho_RegionClosing85;
	HObject  ho_ConnectedRegions177, ho_SelectedRegions215, ho_RegionDilation69;
	HObject  ho_ImageReduced136, ho_Region133, ho_RegionOpening78;
	HObject  ho_ConnectedRegions142, ho_SelectedRegions177, ho_RegionClosing65;
	HObject  ho_RegionOpening61, ho_ConnectedRegions143, ho_SelectedRegions178;
	HObject  ho_RegionUnion81, ho_RegionErosion39, ho_RegionIntersection21;
	HObject  ho_ConnectedRegions186, ho_SelectedRegions233, ho_SelectedRegions217;
	HObject  ho_SelectedRegions216, ho_RegionUnion4, ho_ImageMean8;
	HObject  ho_ImageClosing27, ho_ImageSub12, ho_Region112;
	HObject  ho_ConnectedRegions170, ho_SelectedRegions206, ho_SelectedRegions207;
	HObject  ho_ImageReduced28, ho_Region22, ho_SelectedRegions45;
	HObject  ho_RegionUnion15, ho_RegionClosing11, ho_RegionDilation18;
	HObject  ho_RegionClosing86, ho_ImageReduced164, ho_Region157;
	HObject  ho_ConnectedRegions251, ho_SelectedRegions306, ho_ImageReduced156;
	HObject  ho_Regions4, ho_ConnectedRegions237, ho_SelectedRegions288;
	HObject  ho_RegionOpening87, ho_ConnectedRegions238, ho_SelectedRegions289;
	HObject  ho_RegionMoved81, ho_RegionDifference83, ho_ImageReduced135;
	HObject  ho_ImageOpening4, ho_ImageSub31, ho_Region132, ho_ConnectedRegions208;
	HObject  ho_SelectedRegions255, ho_SelectedRegions256, ho_RegionClosing63;
	HObject  ho_SelectedRegions137, ho_RegionOpening53, ho_ImageReduced88;
	HObject  ho_ImageScaled1, ho_Region86, ho_ConnectedRegions121;
	HObject  ho_SelectedRegions142, ho_RegionDilation42, ho_RegionMoved54;
	HObject  ho_ImageReduced89, ho_RegionErosion30, ho_ImageScaled2;
	HObject  ho_SelectedRegions145, ho_ImageReduced90, ho_ImageOpening;
	HObject  ho_ImageSub4, ho_Region87, ho_SelectedRegions143;
	HObject  ho_RegionDilation43, ho_RegionMoved55, ho_RegionDifference56;
	HObject  ho_ConnectedRegions123, ho_ConnectedRegions167;
	HObject  ho_SelectedRegions114, ho_RegionUnion67, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_Width, hv_Height, hv_Mean5, hv_Deviation5;
	HTuple  hv_Newtuple, hv_Newtuple1, hv_n, hv_Index, hv_f;
	HTuple  hv_c, hv_dd, hv_Area3, hv_Row3, hv_Column3, hv_Number19;
	HTuple  hv_R, hv_C, hv_R1, hv_C1, hv_R2, hv_C2, hv_R3, hv_C3;
	HTuple  hv_R4, hv_C4, hv_R5, hv_C5, hv_R6, hv_C6, hv_Mean4;
	HTuple  hv_Deviation4, hv_Number, hv_Value7, hv_Max3, hv_Value8;
	HTuple  hv_Value16, hv_Number72, hv_Number81, hv_Number84;
	HTuple  hv_Value29, hv_Number82, hv_Number71, hv_Value28;
	HTuple  hv_Max19, hv_Number35, hv_Area4, hv_Row4, hv_Column4;
	HTuple  hv_Number67, hv_Value11, hv_Area, hv_Row, hv_Column;
	HTuple  hv_Number2, hv_Number1, hv_Area1, hv_Row1, hv_Column1;
	HTuple  hv_Number96, hv_Number95, hv_Number64, hv_i, hv_Number65;
	HTuple  hv_Area12, hv_Row13, hv_Column13, hv_Number31, hv_Number33;
	HTuple  hv_Value22, hv_Max14, hv_Number32, hv_Value25, hv_Max17;
	HTuple  hv_Min2, hv_a, hv_Number63, hv_Area11, hv_Row12;
	HTuple  hv_Column12, hv_Number36, hv_Area5, hv_Row5, hv_Column5;
	HTuple  hv_Number76, hv_Value2, hv_Max1, hv_Area6, hv_Row6;
	HTuple  hv_Column6, hv_Number99, hv_Area14, hv_Row17, hv_Column17;
	HTuple  hv_Value10, hv_Value12, hv_Number74, hv_Number75;
	HTuple  hv_Number54, hv_Value5, hv_Mean6, hv_Deviation6;
	HTuple  hv_Mean7, hv_Deviation7, hv_Mean8, hv_Deviation8;
	HTuple  hv_Number88, hv_Number89, hv_Number90, hv_Number55;
	HTuple  hv_Number94, hv_Row11, hv_Column11, hv_Row21, hv_Column21;
	HTuple  hv_Number93, hv_Value34, hv_Max22, hv_Number62;
	HTuple  hv_Area10, hv_Row10, hv_Column10, hv_Number14, hv_R7;
	HTuple  hv_C7, hv_R8, hv_C8, hv_R9, hv_C9, hv_Number97;
	HTuple  hv_Mean10, hv_Deviation10, hv_Value31, hv_Number69;
	HTuple  hv_Row15, hv_Column15, hv_Row22, hv_Column22, hv_A;
	HTuple  hv_B, hv_Number66, hv_Area13, hv_Row14, hv_Column14;
	HTuple  hv_Number59, hv_Value4, hv_Max5, hv_Number101, hv_Number60;
	HTuple  hv_Value18, hv_Min1, hv_Value32, hv_Max20, hv_Number85;
	HTuple  hv_Value35, hv_Min3, hv_Number37, hv_Value27, hv_Max18;
	HTuple  hv_Mean, hv_Deviation, hv_Value, hv_Max, hv_Value3;
	HTuple  hv_Number38, hv_Value6, hv_Max2, hv_Number28, hv_Value19;
	HTuple  hv_Max12, hv_Number11, hv_Number21, hv_Number12;
	HTuple  hv_Number13, hv_Area8, hv_Row8, hv_Column8, hv_Value36;
	HTuple  hv_Max23, hv_Number27, hv_Value13, hv_Max6, hv_Value1;
	HTuple  hv_Min, hv_Number68, hv_Area2, hv_Row2, hv_Column2;
	HTuple  hv_Number3, hv_Number34, hv_Number53, hv_Mean2;
	HTuple  hv_Deviation2, hv_Mean3, hv_Deviation3, hv_Abs;
	HTuple  hv_Number40, hv_Number29, hv_Number8, hv_Value26;
	HTuple  hv_Max8, hv_Number57, hv_Number18, hv_Area7, hv_Row7;
	HTuple  hv_Column7, hv_Max4, hv_Number7, hv_Number20, hv_Number100;
	HTuple  hv_Area15, hv_Row18, hv_Column18, hv_Mean9, hv_Deviation9;
	HTuple  hv_Number4, hv_Value9, hv_Max9, hv_Number58, hv_Number25;
	HTuple  hv_Number24, hv_Mean1, hv_Deviation1, hv_Number23;
	HTuple  hv_Value17, hv_Max10, hv_Number22, hv_Area9, hv_Row9;
	HTuple  hv_Column9, hv_Max11, hv_Number78, hv_Number9, hv_Number15;
	HTuple  hv_Number91, hv_Value33, hv_Max21, hv_Number41;
	HTuple  hv_Number92, hv_Number16, hv_Value15, hv_Number30;
	HTuple  hv_Value21, hv_Number10, hv_Value14, hv_Number77;
	HTuple  hv_Number43, hv_Number80, hv_Number73, hv_Number86;
	HTuple  hv_Number87, hv_Value30, hv_Number44, hv_Number79;
	HTuple  hv_Number52, hv_Value23, hv_Max15, hv_Max7, hv_Number45;
	HTuple  hv_Number56, hv_Value24, hv_Max16, hv_Number42;
	HTuple  hv_Number46, hv_Number70, hv_Row16, hv_Column16;
	HTuple  hv_Radius, hv_Number83, hv_Number98, hv_Number61;
	HTuple  hv_Number47, hv_Number48, hv_Number49, hv_Number17;
	HTuple  hv_Number5, hv_Number6, hv_Number50, hv_Mean11;
	HTuple  hv_Deviation11, hv_Number51, hv_Value20, hv_Max13;
	HTuple  hv_Number26, hv_s, hv_g, hv_GenParamValue, hv_Index10;
	HTuple  hv_Number39, hv_Exception, hv___Tmp_Ctrl_Dict_Init_2;
	HTuple  hv___Tmp_Ctrl_Dict_Init_3, hv___Tmp_Ctrl_Dict_Init_4;
	HTuple  hv___Tmp_Ctrl_Dict_Init_5, hv___Tmp_Ctrl_Dict_Init_6;
	HTuple  hv___Tmp_Ctrl_Dict_Init_7;

	try
	{
		//[0]-T41=B基准塑胶漏贴
		//[1]-T42=BLC划伤
		//[2]-T43=打磨纹
		//[3]-T44=打磨痕
		//[4]-T45=BLC漏铁
		//[5]-T46=BLC漏镭雕
		//[6]-T47=LC划伤
		//[7]-T48=BLC未见光
		//[8]-T49=BLC气孔
		//[9]-T50=IO孔毛刺
		//[10]-T51=异色
		//[11]-T52=裂纹
		//[12]-T53=混金属压伤
		//[13]-T54=BLC刀纹
		//[14]-T55=B基准压伤亮
		//[15]-T56=BLC亮边
		//[16]-T57=毛边
		//[17]-T58=B基准压伤暗
		//[18]-T59=热钻孔脱落
		//[19]-T60=BLC过切
		//[20]-T61=B基准塑胶压伤
		//[21]-T62=BLC压伤
		//[22]-T63=BRT压伤
		//[23]-T64=BLC焊缝毛刺
		//[24]-T65=抓胶柱偏位
		//[26]-T66=拉胶柱缺失
		//[27]-T67=拉胶柱偏位
		//[28]-T68=抓胶柱缺失
		//黑图返回
		GetImageSize(ho_Image, &hv_Width, &hv_Height);
		GenRectangle1(&ho_Rectangle, 100, 100, hv_Width - 500, hv_Height - 400);
		ReduceDomain(ho_Image, ho_Rectangle, &ho_ImageReduced98);
		Intensity(ho_Rectangle, ho_ImageReduced98, &hv_Mean5, &hv_Deviation5);
		if (0 != (int(hv_Mean5<10)))
		{
			return 1;
		}
		//黑图返回结束
		GenEmptyObj(&ho_Reg);
		//初始化区域
		CreateDict(&(*hv_dt));
		TupleGenConst(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), "DT", &hv_Newtuple);
		TupleGenConst(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), "_T", &hv_Newtuple1);
		hv_n = (hv_Newtuple + HTuple::TupleGenSequence(41, 200, 1)) + hv_Newtuple1;
		//n := ['DT41_T','DT42_T','DT43_T','DT44_T','DT45_T','DT46_T','DT47_T','DT48_T','DT49_T','DT50_T','DT51_T','DT52_T','DT53_T','DT54_T','DT55_T','DT56_T','DT57_T','DT58_T','DT59_T','DT60_T','DT61_T','DT62_T','DT63_T']
		GenEmptyRegion(&ho_e);
		for (hv_Index = 41; hv_Index <= 70; hv_Index += 1)
		{
			hv_f = hv_Index + "";
			SetDictObject(ho_e, (*hv_dt), hv_f);
		}
		//dt := dict{}
		//n := ['DT41_T','DT42_T','DT43_T','DT44_T','DT45_T','DT46_T','DT47_T','DT48_T','DT49_T','DT50_T','DT51_T','DT52_T','DT53_T','DT54_T','DT55_T','DT56_T','DT57_T','DT58_T','DT59_T','DT60_T','DT61_T','DT62_T','DT63_T']
		//gen_empty_region (EmptyRegion)
		//for Index := 0 to |n|-1 by 1
		//dt.[n[Index]] := EmptyRegion
		//endfor
		//c==1检测B基准c==0不检测（以前测试用的，不用管）
		hv_c = 1;
		Rgb1ToGray(ho_Image, &ho_Image);

		CreateDict(&hv_dd);
		SetDictObject(ho_Image, hv_dd, "image");
		//**dd.region在每个检测区域先全局初始化
		//********镭雕区域缺陷检测*****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
		SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_2);
		hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.8);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 64);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 160);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_white_area", 120);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_ratio_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_ratio_value", 7.2);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_aniso_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_aniso_value", 8);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 55);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 17);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 9);
		//********塑胶区域缺陷检测****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
		SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_3);
		hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_light", 45);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 90);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_white_area", 160);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_ratio_value", 0.17);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "max_ratio_value", 6);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_aniso_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "max_aniso_value", 8);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 1600);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 190);
		//***dd.RTmode==0时，转角
		//***dd.RTmode==1时，垂直
		//***dd.RTmode==2时，水平
		//********RTzhuanjiao缺陷检测****************1-12,mode=1,13以后,mode=0
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
		SetDictTuple(hv_dd, "RT_zhuanjiao", hv___Tmp_Ctrl_Dict_Init_4);
		hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 1);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 138);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value", 130);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
			4);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 60);
		//********RTshuiping缺陷检测****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
		SetDictTuple(hv_dd, "RT_shuipin", hv___Tmp_Ctrl_Dict_Init_5);
		hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);


		//********RTchuizhi缺陷检测******************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
		SetDictTuple(hv_dd, "RT_chuizhi", hv___Tmp_Ctrl_Dict_Init_6);
		hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_chuizhi"), "min_width_value", 7);
		//********B基准缺陷*****dd.bijizhun.mode==1检测白（1-12） dd.bijizhun.mode==0检测黑
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_7);
		SetDictTuple(hv_dd, "Bjizhun", hv___Tmp_Ctrl_Dict_Init_7);
		hv___Tmp_Ctrl_Dict_Init_7 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "opening_width_value", 1560);
		if (0 != (HTuple(int(hv_StaNum == 3)).TupleAnd(int(hv_CamNum == 1))))
		{

			//********************三工位检测逻辑*************************
			//***一般逻辑
			//1.提取定位点
			//2.根据定位点偏移检测区域（检测区域在开始时已经画出，若要重新画可参考3-1-8注释部分）
			//3.检测缺陷
			//***追加检测
			//1.提取检测区域(多数为直接画框后提取缺陷)
			//2.检测缺陷
			//***********************************************************
			if (0 != (int(hv_ImageNum == 1)))
			{
				//提取镭雕检测区域
				//提取定位点
				GenRectangle1(&ho_ROI_0, 633.252, 489.463, 1444.14, 1076.96);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced26);
				Threshold(ho_ImageReduced26, &ho_Region26, 177, 255);
				Connection(ho_Region26, &ho_ConnectedRegions22);
				SelectShape(ho_ConnectedRegions22, &ho_SelectedRegions4, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.7)), (HTuple(99999).Append(1)));
				AreaCenter(ho_SelectedRegions4, &hv_Area3, &hv_Row3, &hv_Column3);
				CountObj(ho_SelectedRegions4, &hv_Number19);
				//判断有无值，防止图像报错，且若提取不到，直接skip
				if (0 != hv_Number19)
				{
					//定位偏移并画出检测区域
					hv_R = hv_Row3 - 1036;
					hv_C = hv_Column3 - 714;

					hv_R1.Clear();
					hv_R1[0] = 658;
					hv_R1[1] = 675;
					hv_R1[2] = 796;
					hv_R1[3] = 798;
					hv_R1[4] = 866;
					hv_R1[5] = 942;
					hv_R1[6] = 1273;
					hv_R1[7] = 1344;
					hv_R1[8] = 1380;
					hv_R1[9] = 1389;
					hv_R1[10] = 1441;
					hv_R1[11] = 1510;
					hv_R1[12] = 1794;
					hv_R1[13] = 1790;
					hv_R1[14] = 1153;
					hv_R1[15] = 1132;
					hv_R1[16] = 1083;
					hv_R1[17] = 978;
					hv_R1[18] = 953;
					hv_R1[19] = 923;
					hv_R1[20] = 915;
					hv_R1[21] = 943;
					hv_R1[22] = 970;
					hv_R1[23] = 977;
					hv_R1[24] = 1070;
					hv_R1[25] = 1106;
					hv_R1[26] = 1115;
					hv_R1[27] = 1092;
					hv_R1[28] = 1062;
					hv_R1[29] = 966;
					hv_R1[30] = 922;
					hv_R1[31] = 885;
					hv_R1[32] = 685;
					hv_R1[33] = 661;
					hv_R1[34] = 658;
					hv_C1.Clear();
					hv_C1[0] = 2668;
					hv_C1[1] = 4061;
					hv_C1[2] = 4061;
					hv_C1[3] = 3787;
					hv_C1[4] = 3685;
					hv_C1[5] = 3658;
					hv_C1[6] = 3652;
					hv_C1[7] = 3616;
					hv_C1[8] = 3543;
					hv_C1[9] = 2667;
					hv_C1[10] = 2585;
					hv_C1[11] = 2548;
					hv_C1[12] = 2540;
					hv_C1[13] = 1977;
					hv_C1[14] = 1971;
					hv_C1[15] = 2012;
					hv_C1[16] = 2035;
					hv_C1[17] = 2035;
					hv_C1[18] = 2022;
					hv_C1[19] = 1971;
					hv_C1[20] = 2196;
					hv_C1[21] = 2214;
					hv_C1[22] = 2263;
					hv_C1[23] = 2402;
					hv_C1[24] = 2402;
					hv_C1[25] = 2422;
					hv_C1[26] = 2574;
					hv_C1[27] = 2601;
					hv_C1[28] = 2608;
					hv_C1[29] = 2607;
					hv_C1[30] = 2569;
					hv_C1[31] = 2588;
					hv_C1[32] = 2599;
					hv_C1[33] = 2617;
					hv_C1[34] = 2668;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 2022;
					hv_R2[1] = 2101;
					hv_R2[2] = 2089;
					hv_R2[3] = 2031;
					hv_R2[4] = 2022;
					hv_C2.Clear();
					hv_C2[0] = 799;
					hv_C2[1] = 799;
					hv_C2[2] = 753;
					hv_C2[3] = 754;
					hv_C2[4] = 799;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					hv_R3.Clear();
					hv_R3[0] = 2024;
					hv_R3[1] = 2030;
					hv_R3[2] = 2276;
					hv_R3[3] = 2326;
					hv_R3[4] = 2398;
					hv_R3[5] = 3037;
					hv_R3[6] = 3037;
					hv_R3[7] = 2876;
					hv_R3[8] = 2839;
					hv_R3[9] = 2771;
					hv_R3[10] = 2024;
					hv_R3[11] = 2024;
					hv_C3.Clear();
					hv_C3[0] = 1158;
					hv_C3[1] = 1245;
					hv_C3[2] = 980;
					hv_C3[3] = 934;
					hv_C3[4] = 900;
					hv_C3[5] = 900;
					hv_C3[6] = 753;
					hv_C3[7] = 753;
					hv_C3[8] = 839;
					hv_C3[9] = 873;
					hv_C3[10] = 873;
					hv_C3[11] = 1158;
					GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
					hv_R4.Clear();
					hv_R4[0] = 2027;
					hv_R4[1] = 2671;
					hv_R4[2] = 2768;
					hv_R4[3] = 2803;
					hv_R4[4] = 2803;
					hv_R4[5] = 2918;
					hv_R4[6] = 2962;
					hv_R4[7] = 2956;
					hv_R4[8] = 2906;
					hv_R4[9] = 2803;
					hv_R4[10] = 2806;
					hv_R4[11] = 2783;
					hv_R4[12] = 2675;
					hv_R4[13] = 2664;
					hv_R4[14] = 2662;
					hv_R4[15] = 2714;
					hv_R4[16] = 2714;
					hv_R4[17] = 2822;
					hv_R4[18] = 2852;
					hv_R4[19] = 2859;
					hv_R4[20] = 2849;
					hv_R4[21] = 2815;
					hv_R4[22] = 2714;
					hv_R4[23] = 2714;
					hv_R4[24] = 2767;
					hv_R4[25] = 2882;
					hv_R4[26] = 2883;
					hv_R4[27] = 3037;
					hv_R4[28] = 3037;
					hv_R4[29] = 2456;
					hv_R4[30] = 2385;
					hv_R4[31] = 2087;
					hv_R4[32] = 2086;
					hv_R4[33] = 2027;
					hv_C4.Clear();
					hv_C4[0] = 1303;
					hv_C4[1] = 1311;
					hv_C4[2] = 1380;
					hv_C4[3] = 1461;
					hv_C4[4] = 1499;
					hv_C4[5] = 1496;
					hv_C4[6] = 1544;
					hv_C4[7] = 1689;
					hv_C4[8] = 1717;
					hv_C4[9] = 1713;
					hv_C4[10] = 2347;
					hv_C4[11] = 2419;
					hv_C4[12] = 2560;
					hv_C4[13] = 2617;
					hv_C4[14] = 3254;
					hv_C4[15] = 3255;
					hv_C4[16] = 3346;
					hv_C4[17] = 3341;
					hv_C4[18] = 3358;
					hv_C4[19] = 3380;
					hv_C4[20] = 3497;
					hv_C4[21] = 3517;
					hv_C4[22] = 3514;
					hv_C4[23] = 3565;
					hv_C4[24] = 3640;
					hv_C4[25] = 3639;
					hv_C4[26] = 3538;
					hv_C4[27] = 3538;
					hv_C4[28] = 941;
					hv_C4[29] = 935;
					hv_C4[30] = 952;
					hv_C4[31] = 1242;
					hv_C4[32] = 1260;
					hv_C4[33] = 1303;
					GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
					hv_R5.Clear();
					hv_R5[0] = 2220;
					hv_R5[1] = 2274;
					hv_R5[2] = 2501;
					hv_R5[3] = 2501;
					hv_R5[4] = 2220;
					hv_C5.Clear();
					hv_C5[0] = 3612;
					hv_C5[1] = 3646;
					hv_C5[2] = 3650;
					hv_C5[3] = 3611;
					hv_C5[4] = 3612;
					GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
					hv_R6.Clear();
					hv_R6[0] = 2270;
					hv_R6[1] = 2679;
					hv_R6[2] = 2746;
					hv_R6[3] = 2772;
					hv_R6[4] = 2291;
					hv_R6[5] = 2270;
					hv_C6.Clear();
					hv_C6[0] = 799;
					hv_C6[1] = 796;
					hv_C6[2] = 777;
					hv_C6[3] = 753;
					hv_C6[4] = 753;
					hv_C6[5] = 799;
					GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
					GenRectangle1(&ho_ROI_0, 2213.41, 3563.02, 2612.28, 3695.49);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
					Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
					Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
					Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
					Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
					Union2(ho_ROI_0, ho_RegionUnion60, &ho_RegionUnion60);

					GenRectangle1(&ho_ROI_0, 2658.97, 2740.89, 3027.61, 3203.16);
					MoveRegion(ho_ROI_0, &ho_RegionMoved28, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved28, &ho_ImageReduced31);
					GrayClosingRect(ho_ImageReduced31, &ho_ImageClosing7, 3, 3);
					Threshold(ho_ImageClosing7, &ho_Region34, 0, 67);
					Connection(ho_Region34, &ho_ConnectedRegions37);
					SelectShape(ho_ConnectedRegions37, &ho_SelectedRegions37, "area", "and",
						6150, 99999);
					DilationCircle(ho_SelectedRegions37, &ho_RegionDilation9, 28.5);

					MoveRegion(ho_RegionUnion60, &ho_RegionMoved25, hv_R, hv_C);
					ErosionRectangle1(ho_RegionMoved25, &ho_RegionMoved25, 59, 51);
					//提取检测区域结束
					Difference(ho_RegionMoved25, ho_RegionDilation9, &ho_RegionDifference22
						);

					GenRectangle1(&ho_ROI_0, 2285.37, 969.148, 2598.52, 1188.63);
					MoveRegion(ho_ROI_0, &ho_RegionMoved88, hv_R, hv_C);
					Difference(ho_RegionDifference22, ho_RegionMoved88, &ho_RegionDifference22
						);
					//局部初始化判断条件
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 240);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 35);
					SetDictObject(ho_RegionDifference22, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 23);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 15);
					Det_LD_Region(hv_dd, (*hv_dt));

					//jl add 检测半圆环形状划伤
					ReduceDomain(ho_Image, ho_RegionDifference22, &ho_ImageReduced119);
					MeanImage(ho_ImageReduced119, &ho_ImageMean9, 50, 50);
					MeanImage(ho_ImageReduced119, &ho_ImageMean10, 3, 3);
					DynThreshold(ho_ImageMean10, ho_ImageMean9, &ho_RegionDynThresh14, 29,
						"dark");
					Connection(ho_RegionDynThresh14, &ho_ConnectedRegions181);
					ErosionRectangle1(ho_RegionDifference22, &ho_RegionErosion40, 22, 20);
					SelectShape(ho_ConnectedRegions181, &ho_SelectedRegions224, "area", "and",
						25, 99999);
					Intersection(ho_SelectedRegions224, ho_RegionErosion40, &ho_SelectedRegions224
						);
					Union1(ho_SelectedRegions224, &ho_RegionUnion70);
					ClosingCircle(ho_RegionUnion70, &ho_RegionClosing91, 5);
					Connection(ho_RegionClosing91, &ho_ConnectedRegions182);
					SelectShape(ho_ConnectedRegions182, &ho_SelectedRegions225, ((HTuple("area").Append("anisometry")).Append("row")),
						"and", ((HTuple(1150).Append(7)).Append(0)), ((HTuple(99999).Append(15)).Append(2300)));
					ConcatObj(ho_SelectedRegions225, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					//定位点提取不到的话，偏移值设置为0
					hv_R = 0;
					hv_C = 0;
				}
				//检测基准面压伤（3-1-1到3-1-12处的B基准压上基本全滤掉了，放着就好）
				GenRectangle1(&ho_ROI_0, 351.637, 1707.8046, 710.268, 4098.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);

				Intensity(ho_ROI_0, ho_ImageReduced8, &hv_Mean4, &hv_Deviation4);
				if (0 != (int(hv_Mean4<120)))
				{
					if (false)
					{
						//检测打磨横（现已不检测，软件滤除）
						ConcatObj(ho_ImageReduced8, (*hv_dt).TupleGetDictObject("44"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "44");
					}
				}
				if (0 != (int(hv_Mean4 >= 120)))
				{
					Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
					OpeningRectangle1(ho_Region8, &ho_RegionOpening43, 4, 2);
					Connection(ho_RegionOpening43, &ho_ConnectedRegions12);
					SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
						1e5, 1e7);
					OpeningCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 6.5);
					ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 40, 15);
					ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 10, 52);
					Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
					OpeningRectangle1(ho_Region8, &ho_RegionOpening43, 4, 2);
					Connection(ho_RegionOpening43, &ho_ConnectedRegions12);
					SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
						1e5, 1e7);
					OpeningCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 6.5);
					ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 50, 15);
					//检测镭雕不全
					GenRectangle1(&ho_ROI_0, 84.4623, 1577.72, 726.17, 2279.36);
					Intersection(ho_RegionClosing5, ho_ROI_0, &ho_RegionIntersection24);
					OpeningRectangle1(ho_RegionIntersection24, &ho_RegionOpening76, 50, 210);
					Difference(ho_RegionIntersection24, ho_RegionOpening76, &ho_RegionDifference70
						);
					OpeningRectangle1(ho_RegionDifference70, &ho_RegionOpening77, 10, 10);
					Connection(ho_RegionOpening77, &ho_ConnectedRegions178);
					SelectShape(ho_ConnectedRegions178, &ho_SelectedRegions192, (HTuple("area").Append("height")),
						"and", (HTuple(10000).Append(200)), (HTuple(99999).Append(9999)));
					ConcatObj(ho_SelectedRegions192, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");

					ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 10, 52);
					MoveRegion(ho_RegionErosion5, &ho_RegionMoved3, 20, 0);
					ReduceDomain(ho_ImageReduced8, ho_RegionMoved3, &ho_ImageReduced9);
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 11, 11);
					SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
					Threshold(ho_ImageSub1, &ho_Region9, 0, 35);
					ClosingRectangle1(ho_Region9, &ho_RegionClosing40, 49, 19);
					Connection(ho_Region9, &ho_ConnectedRegions19);
					SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (HTuple("area").Append("anisometry")),
						"and", (HTuple(330).Append(0)), (HTuple(1200).Append(5.5)));
					SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions100, "mean",
						"and", 0, 105);
					if (0 != hv_c)
					{
						ConcatObj(ho_SelectedRegions100, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}
					Difference(ho_RegionClosing5, ho_RegionMoved3, &ho_RegionDifference13);
					OpeningRectangle1(ho_RegionDifference13, &ho_RegionOpening9, 7, 43);
					Connection(ho_RegionOpening9, &ho_ConnectedRegions20);
					SelectShape(ho_ConnectedRegions20, &ho_SelectedRegions20, "area", "and",
						15000, 199999);
					ReduceDomain(ho_Image, ho_SelectedRegions20, &ho_ImageReduced11);
					GrayClosingRect(ho_ImageReduced11, &ho_ImageClosing4, 31, 31);
					SubImage(ho_ImageReduced11, ho_ImageClosing4, &ho_ImageSub2, 1, 128);
					Threshold(ho_ImageSub2, &ho_Region10, 0, 40);
					Connection(ho_Region10, &ho_ConnectedRegions21);
					SelectShape(ho_ConnectedRegions21, &ho_SelectedRegions21, "area", "and",
						20, 99999);
					SelectGray(ho_SelectedRegions21, ho_Image, &ho_SelectedRegions23, "mean",
						"and", 0, 100);
					ConcatObj(ho_SelectedRegions23, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//检测过切     (这段时间产品无该缺陷，考虑到误判，暂时不检测)
				GenRectangle1(&ho_ROI_0, 457.429, 2582.64, 816.377, 4093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 40, 65, 0.2, 12, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 30, 3);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, (HTuple("width").Append("height")),
					"and", (HTuple(1050).Append(14)), (HTuple(99999).Append(999)));
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>2)))
				{
					//concat_obj (SelectedRegions77, dt.['60'], dt.['60'])
				}
				//检测开裂
				if (0 != hv_Number)
				{
					RegionFeatures(ho_SelectedRegions77, "row", &hv_Value7);
					TupleMax(hv_Value7, &hv_Max3);
					SelectShape(ho_SelectedRegions77, &ho_SelectedRegions102, "row", "and",
						hv_Max3, hv_Max3);
					DilationRectangle1(ho_SelectedRegions102, &ho_RegionDilation16, 1, 81);
					ErosionRectangle1(ho_RegionDilation16, &ho_RegionErosion25, 31, 1);
					MoveRegion(ho_RegionErosion25, &ho_RegionMoved12, 87, 0);
					ReduceDomain(ho_Image, ho_RegionMoved12, &ho_ImageReduced67);
					VarThreshold(ho_ImageReduced67, &ho_Region69, 40, 40, 0.2, 14, "dark");
					OpeningRectangle1(ho_Region69, &ho_RegionOpening32, 3, 2);
					Connection(ho_RegionOpening32, &ho_ConnectedRegions89);
					SelectShape(ho_ConnectedRegions89, &ho_SelectedRegions103, ((HTuple("area").Append("ratio")).Append("column")),
						"and", ((HTuple(150).Append(0)).Append(0)), ((HTuple(99999).Append(1.5)).Append(3500)));
					Union1(ho_SelectedRegions103, &ho_RegionUnion33);
					RegionFeatures(ho_RegionUnion33, "area", &hv_Value8);
					if (0 != (int(hv_Value8>430)))
					{
						ConcatObj(ho_RegionUnion33, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");
					}
				}
				//检测焊缝毛刺
				if (0 != (int(hv_Mean4 >= 120)))
				{
					ClosingRectangle1(ho_RegionClosing5, &ho_RegionClosing17, 1010, 10);
					MoveRegion(ho_RegionClosing17, &ho_RegionMoved5, 55, 0);
					MoveRegion(ho_RegionClosing17, &ho_RegionMoved7, 4, 0);
					Difference(ho_RegionMoved5, ho_RegionMoved7, &ho_RegionDifference20);
					ReduceDomain(ho_Image, ho_RegionDifference20, &ho_ImageReduced29);
					Threshold(ho_ImageReduced29, &ho_Region28, 220, 255);

					Connection(ho_Region28, &ho_ConnectedRegions45);
					SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
						1500, 99999);
					ClosingRectangle1(ho_SelectedRegions49, &ho_RegionClosing18, 400, 400);
					ShapeTrans(ho_RegionClosing18, &ho_RegionTrans, "convex");
					DilationRectangle1(ho_RegionTrans, &ho_RegionDilation20, 151, 51);
					Difference(ho_RegionDifference20, ho_RegionDilation20, &ho_RegionDifference21
						);
					Connection(ho_RegionDifference21, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions123, "width", "and",
						800, 99999);
					ReduceDomain(ho_Image, ho_SelectedRegions123, &ho_ImageReduced30);
					RankRect(ho_ImageReduced30, &ho_ImageRank, 10, 5, 30);
					GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
					SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
					Threshold(ho_ImageSub14, &ho_Region21, 0, 35);
					Connection(ho_Region21, &ho_ConnectedRegions113);
					SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
						27, 99999);
					Union1(ho_SelectedRegions119, &ho_RegionUnion24);
					ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
					Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
					SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, (HTuple("area").Append("height")),
						"and", (HTuple(150).Append(15)), (HTuple(99999).Append(99)));
					SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
						"and", 0, 110);
					Union1(ho_SelectedRegions116, &ho_RegionUnion40);
					RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
					if (0 != (int(hv_Value16>500)))
					{
						ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					}
					//YJH新增镭雕不全
					Threshold(ho_ImageReduced29, &ho_Region106, 240, 255);
					ClosingRectangle1(ho_Region106, &ho_RegionClosing79, 15, 1);
					OpeningCircle(ho_RegionClosing79, &ho_RegionOpening66, 3.5);
					Connection(ho_RegionOpening66, &ho_ConnectedRegions163);
					SelectShape(ho_ConnectedRegions163, &ho_SelectedRegions199, ((HTuple("area").Append("width")).Append("height")),
						"and", ((HTuple(15000).Append(900)).Append(1)), ((HTuple(49999).Append(2000)).Append(30)));
					ConcatObj(ho_SelectedRegions199, (*hv_dt).TupleGetDictObject("46"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "46");
				}
				GenRectangle1(&ho_ROI_0, 1817.22, -22.5038, 3071.08, 333.364);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced114);
				MeanImage(ho_ImageReduced114, &ho_ImageMean7, 50, 5);
				DynThreshold(ho_ImageReduced114, ho_ImageMean7, &ho_RegionDynThresh9, 45,
					"light");
				Connection(ho_RegionDynThresh9, &ho_ConnectedRegions169);
				SelectShape(ho_ConnectedRegions169, &ho_SelectedRegions229, "height", "and",
					450, 99999);
				CountObj(ho_SelectedRegions229, &hv_Number72);
				if (0 != (int(hv_Number72 == 1)))
				{
					DilationRectangle1(ho_SelectedRegions229, &ho_RegionDilation73, 40, 1);
					DilationRectangle1(ho_SelectedRegions229, &ho_RegionDilation72, 100, 10);
					MoveRegion(ho_RegionDilation72, &ho_RegionMoved84, 0, 70);
					Difference(ho_RegionMoved84, ho_RegionDilation73, &ho_RegionDifference85
						);
					ReduceDomain(ho_Image, ho_RegionDifference85, &ho_ImageReduced144);
					ScaleImage(ho_ImageReduced144, &ho_ImageScaled9, 2, 0);
					MedianRect(ho_ImageScaled9, &ho_ImageMedian14, 3, 3);
					MedianRect(ho_ImageScaled9, &ho_ImageMedian15, 45, 185);
					DynThreshold(ho_ImageMedian14, ho_ImageMedian15, &ho_RegionDynThresh18,
						15, "dark");
					Connection(ho_RegionDynThresh18, &ho_ConnectedRegions217);
					SelectShape(ho_ConnectedRegions217, &ho_SelectedRegions205, (HTuple("area").Append("anisometry")),
						"and", (HTuple(500).Append(1)), (HTuple(99999).Append(6)));
					ConcatObj(ho_SelectedRegions205, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}

				//检测明显塑胶崩角
				GenRectangle1(&ho_ROI_0, 523.203, 1010.06, 1187.82, 1740.3);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ErosionRectangle1(ho_ROI_0, &ho_RegionErosion42, 20, 20);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced132);
				Threshold(ho_ImageReduced132, &ho_Region129, 0, 80);
				ClosingRectangle1(ho_Region129, &ho_RegionClosing100, 5, 5);
				CountObj(ho_RegionClosing100, &hv_Number81);
				if (0 != hv_Number81)
				{
					ReduceDomain(ho_ImageReduced132, ho_RegionClosing100, &ho_ImageReduced132
						);
					RankRect(ho_ImageReduced132, &ho_ImageRank6, 3, 3, 5);
					//jl add 先找一次
					VarThreshold(ho_ImageRank6, &ho_Region134, 250, 250, 0.3, 8, "dark");
					Connection(ho_Region134, &ho_ConnectedRegions209);
					SelectShape(ho_ConnectedRegions209, &ho_SelectedRegions232, "area", "and",
						600, 99999);
					Union1(ho_SelectedRegions232, &ho_RegionUnion56);
					CountObj(ho_RegionUnion56, &hv_Number84);
					if (0 != hv_Number84)
					{
						RegionFeatures(ho_RegionUnion56, "area", &hv_Value29);
						if (0 != (int(hv_Value29>4000)))
						{
							ConcatObj(ho_RegionUnion56, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}
					GrayClosingRect(ho_ImageRank6, &ho_ImageClosing33, 48, 48);
					SubImage(ho_ImageRank6, ho_ImageClosing33, &ho_ImageSub28, 3, 128);
					RankRect(ho_ImageSub28, &ho_ImageRank7, 5, 5, 5);
					Threshold(ho_ImageRank7, &ho_Region128, 0, 100);
					Intersection(ho_Region128, ho_RegionErosion42, &ho_RegionIntersection23
						);
					Connection(ho_RegionIntersection23, &ho_ConnectedRegions203);
					SelectShape(ho_ConnectedRegions203, &ho_SelectedRegions254, "area", "and",
						150, 99999);
					SelectShape(ho_ConnectedRegions203, &ho_SelectedRegions252, "area", "and",
						250, 99999);
					CountObj(ho_SelectedRegions254, &hv_Number82);
					if (0 != (int(hv_Number82<28)))
					{
						Union1(ho_SelectedRegions252, &ho_RegionUnion74);
						ClosingRectangle1(ho_RegionUnion74, &ho_RegionClosing99, 2, 1);
						Connection(ho_RegionClosing99, &ho_ConnectedRegions204);
						SelectShape(ho_ConnectedRegions204, &ho_SelectedRegions253, "area", "and",
							2200, 7000);
						ConcatObj(ho_SelectedRegions253, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}
				//检测明显塑胶混铁屑
				GenRectangle1(&ho_ROI_0, -11.6323, 498.273, 840.825, 1681.74);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced118);
				Threshold(ho_ImageReduced118, &ho_Region114, 150, 255);
				ClosingRectangle1(ho_Region114, &ho_RegionClosing74, 18, 10);
				Connection(ho_RegionClosing74, &ho_ConnectedRegions179);
				SelectShape(ho_ConnectedRegions179, &ho_SelectedRegions212, (HTuple("area").Append("width")),
					"and", (HTuple(5150).Append(700)), (HTuple(99999).Append(1800)));
				CountObj(ho_SelectedRegions212, &hv_Number71);
				if (0 != hv_Number71)
				{
					DilationRectangle1(ho_SelectedRegions212, &ho_RegionDilation55, 900, 10);
					MoveRegion(ho_RegionDilation55, &ho_RegionDilation55, 0, -400);
					Difference(ho_ImageReduced118, ho_RegionDilation55, &ho_RegionDifference81
						);
					Connection(ho_RegionDifference81, &ho_ConnectedRegions205);
					RegionFeatures(ho_ConnectedRegions205, "row", &hv_Value28);
					TupleMax(hv_Value28, &hv_Max19);
					SelectShape(ho_ConnectedRegions205, &ho_SelectedRegions218, (HTuple("area").Append("row")),
						"and", HTuple(15000).TupleConcat(hv_Max19 - 50), HTuple(999999).TupleConcat(hv_Max19 + 50));
					ErosionRectangle1(ho_SelectedRegions218, &ho_RegionErosion43, 10, 3);
					ReduceDomain(ho_ImageReduced118, ho_RegionErosion43, &ho_ImageReduced133
						);
					Threshold(ho_ImageReduced133, &ho_Region130, 190, 255);
					Connection(ho_Region130, &ho_ConnectedRegions206);
					SelectShape(ho_ConnectedRegions206, &ho_SelectedRegions219, (HTuple("area").Append("column")),
						"and", (HTuple(320).Append(900)), (HTuple(9999).Append(9999)));
					ConcatObj(ho_SelectedRegions219, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");
				}
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 640.231, 2301.29, 1839.77, 3068.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced34);
				Threshold(ho_ImageReduced34, &ho_Region77, 0, 60);
				Connection(ho_Region77, &ho_ConnectedRegions50);
				SelectShape(ho_ConnectedRegions50, &ho_SelectedRegions84, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(70000).Append(200)).Append(0)), ((HTuple(199999).Append(800)).Append(600)));
				//jl add 检测孔边缘缺陷
				DilationRectangle1(ho_SelectedRegions84, &ho_RegionDilation59, 50, 50);
				DilationRectangle1(ho_SelectedRegions84, &ho_RegionDilation60, 5, 5);
				Difference(ho_RegionDilation59, ho_RegionDilation60, &ho_RegionDifference76
					);
				ReduceDomain(ho_ImageReduced34, ho_RegionDifference76, &ho_ImageReduced127
					);
				RankRect(ho_ImageReduced127, &ho_ImageRank3, 10, 10, 5);
				MedianRect(ho_ImageRank3, &ho_ImageMedian9, 10, 10);
				GrayClosingRect(ho_ImageMedian9, &ho_ImageClosing30, 80, 80);
				SubImage(ho_ImageMedian9, ho_ImageClosing30, &ho_ImageSub20, 1.5, 128);
				Threshold(ho_ImageSub20, &ho_Region122, 0, 80);
				ErosionRectangle1(ho_RegionDifference76, &ho_RegionErosion41, 8, 8);
				Intersection(ho_Region122, ho_RegionErosion41, &ho_RegionIntersection22);
				Connection(ho_RegionIntersection22, &ho_ConnectedRegions195);
				SelectShape(ho_ConnectedRegions195, &ho_SelectedRegions243, "area", "and",
					400, 1500);
				ConcatObj(ho_SelectedRegions243, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				CountObj(ho_SelectedRegions84, &hv_Number35);
				if (0 != hv_Number35)
				{
					AreaCenter(ho_SelectedRegions84, &hv_Area4, &hv_Row4, &hv_Column4);
					hv_R = hv_Row4 - 1385;
					hv_C = hv_Column4 - 2695;
					//基准面压伤
					GenRectangle1(&ho_ROI_0, 270.637, -17.8046, 710.268, 4048.45);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);

					Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
					OpeningRectangle1(ho_Region8, &ho_RegionOpening38, 3, 3);
					Connection(ho_RegionOpening38, &ho_ConnectedRegions12);
					SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
						3e5, 1e7);
					ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 100, 10);
					//碰伤
					ShapeTrans(ho_RegionClosing5, &ho_RegionTrans6, "rectangle2");
					MoveRegion(ho_RegionTrans6, &ho_RegionMoved, -50, 0);
					Difference(ho_RegionMoved, ho_RegionTrans6, &ho_RegionDifference2);
					Connection(ho_RegionDifference2, &ho_ConnectedRegions25);
					SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions25, "area", "and",
						15000, 299999);
					ErosionRectangle1(ho_SelectedRegions25, &ho_RegionErosion26, 1, 57);
					ReduceDomain(ho_Image, ho_RegionErosion26, &ho_ImageReduced10);
					GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing12, 1, 100);
					//黑
					SubImage(ho_ImageReduced10, ho_ImageClosing12, &ho_ImageSub24, 1, 128);
					Threshold(ho_ImageSub24, &ho_Region88, 0, 35);
					Connection(ho_Region88, &ho_ConnectedRegions118);
					SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, (HTuple("area").Append("ratio")),
						"and", (HTuple(450).Append(0.01)), (HTuple(99999).Append(5)));
					ConcatObj(ho_SelectedRegions135, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");

					GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening10, 1, 320);

					SubImage(ho_ImageOpening10, ho_ImageClosing12, &ho_ImageSub23, 1, 128);
					Threshold(ho_ImageSub23, &ho_Region45, 0, 60);
					Connection(ho_Region45, &ho_ConnectedRegions29);
					SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, (HTuple("area").Append("ratio")),
						"and", (HTuple(150).Append(0.01)), (HTuple(99999).Append(8)));
					ConcatObj(ho_SelectedRegions47, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					//
					ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 5, 57);
					MoveRegion(ho_RegionErosion5, &ho_RegionMoved8, 23, 0);
					ShapeTrans(ho_RegionMoved8, &ho_RegionMoved8, "convex");
					ReduceDomain(ho_ImageReduced8, ho_RegionMoved8, &ho_ImageReduced9);
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 31, 11);
					SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 4, 128);
					Threshold(ho_ImageSub1, &ho_Region9, 0, 40);
					DilationRectangle1(ho_Region9, &ho_RegionDilation17, 3, 3);
					ClosingCircle(ho_RegionDilation17, &ho_RegionClosing71, 3.5);
					ErosionRectangle1(ho_RegionClosing71, &ho_RegionOpening41, 3, 3);
					OpeningCircle(ho_RegionOpening41, &ho_RegionOpening41, 3.5);
					Connection(ho_RegionOpening41, &ho_ConnectedRegions19);
					SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (((HTuple("area").Append("ratio")).Append("inner_radius")).Append("anisometry")),
						"and", (((HTuple(150).Append(0.205)).Append(1.5)).Append(0)), (((HTuple(1500).Append(9)).Append(19)).Append(5.5)));
					SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions136, "mean",
						"and", 0, 160);
					if (0 != hv_c)
					{
						ConcatObj(ho_SelectedRegions136, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}
					//提取镭雕检测区域
					GenRectangle1(&ho_ROI_0, 520.975, 0, 3080.57, 4157.21);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					//先检测白
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region75, 220, 255);
					Connection(ho_Region75, &ho_ConnectedRegions98);
					SelectShape(ho_ConnectedRegions98, &ho_SelectedRegions111, ((HTuple("area").Append("ratio")).Append("column")),
						"and", ((HTuple(1550).Append(0.09)).Append(0)), ((HTuple(99999).Append(7)).Append(2100)));
					Union1(ho_SelectedRegions111, &ho_RegionUnion39);
					SelectShape(ho_RegionUnion39, &ho_RegionUnion39, "area", "and", 3000, 15999);
					//gen_rectangle1 (ROI_1, 412.026, 505.649, 1014.72, 2272.78)
					//difference (RegionUnion39, ROI_1, RegionUnion39)
					CountObj(ho_RegionUnion39, &hv_Number67);
					if (0 != hv_Number67)
					{
						RegionFeatures(ho_RegionUnion39, "area", &hv_Value11);
						if (0 != (HTuple(int(hv_Value11>500)).TupleAnd(int(hv_Value11<10000))))
						{
							ConcatObj(ho_RegionUnion39, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
						}
					}

					Threshold(ho_ImageReduced25, &ho_Region33, 0, 44);
					ClosingRectangle1(ho_Region33, &ho_RegionClosing12, 20, 1);
					Connection(ho_RegionClosing12, &ho_ConnectedRegions36);
					SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions54, "area", "and",
						55000, 9999999);
					Union1(ho_SelectedRegions54, &ho_RegionUnion7);
					DilationRectangle1(ho_RegionUnion7, &ho_RegionDilation35, 31, 31);

					GenRectangle1(&ho_ROI_0, 846.683, 3128.28, 1173.77, 3736.7);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced42);
					MedianRect(ho_ImageReduced42, &ho_ImageMedian5, 15, 25);
					Threshold(ho_ImageMedian5, &ho_Region51, 0, 70);
					Connection(ho_Region51, &ho_ConnectedRegions56);
					SelectShape(ho_ConnectedRegions56, &ho_SelectedRegions56, "area", "and",
						1500, 99999);
					DilationCircle(ho_SelectedRegions56, &ho_RegionDilation3, 35);
					//画提取框
					hv_R1.Clear();
					hv_R1[0] = 569;
					hv_R1[1] = 569;
					hv_R1[2] = 569;
					hv_R1[3] = 569;
					hv_R1[4] = 569;
					hv_R1[5] = 570;
					hv_R1[6] = 571;
					hv_R1[7] = 575;
					hv_R1[8] = 570;
					hv_R1[9] = 572;
					hv_R1[10] = 648;
					hv_R1[11] = 650;
					hv_R1[12] = 705;
					hv_R1[13] = 679;
					hv_R1[14] = 674;
					hv_R1[15] = 674;
					hv_R1[16] = 702;
					hv_R1[17] = 698;
					hv_R1[18] = 627;
					hv_R1[19] = 569;
					hv_R1[20] = 569;
					hv_C1.Clear();
					hv_C1[0] = 778;
					hv_C1[1] = 1506;
					hv_C1[2] = 1509;
					hv_C1[3] = 1559;
					hv_C1[4] = 1562;
					hv_C1[5] = 1681;
					hv_C1[6] = 1684;
					hv_C1[7] = 1773;
					hv_C1[8] = 1775;
					hv_C1[9] = 2073;
					hv_C1[10] = 2070;
					hv_C1[11] = 2095;
					hv_C1[12] = 2085;
					hv_C1[13] = 1974;
					hv_C1[14] = 1199;
					hv_C1[15] = 935;
					hv_C1[16] = 808;
					hv_C1[17] = 797;
					hv_C1[18] = 796;
					hv_C1[19] = 748;
					hv_C1[20] = 778;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 568;
					hv_R2[1] = 581;
					hv_R2[2] = 637;
					hv_R2[3] = 744;
					hv_R2[4] = 800;
					hv_R2[5] = 1384;
					hv_R2[6] = 1452;
					hv_R2[7] = 1508;
					hv_R2[8] = 1576;
					hv_R2[9] = 1959;
					hv_R2[10] = 1955;
					hv_R2[11] = 1927;
					hv_R2[12] = 965;
					hv_R2[13] = 888;
					hv_R2[14] = 779;
					hv_R2[15] = 732;
					hv_R2[16] = 725;
					hv_R2[17] = 570;
					hv_R2[18] = 568;
					hv_C2.Clear();
					hv_C2[0] = 262;
					hv_C2[1] = 655;
					hv_C2[2] = 716;
					hv_C2[3] = 733;
					hv_C2[4] = 776;
					hv_C2[5] = 768;
					hv_C2[6] = 726;
					hv_C2[7] = 610;
					hv_C2[8] = 556;
					hv_C2[9] = 533;
					hv_C2[10] = 458;
					hv_C2[11] = 451;
					hv_C2[12] = 452;
					hv_C2[13] = 434;
					hv_C2[14] = 336;
					hv_C2[15] = 257;
					hv_C2[16] = 14;
					hv_C2[17] = 14;
					hv_C2[18] = 262;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					hv_R3.Clear();
					hv_R3[0] = 579;
					hv_R3[1] = 592;
					hv_R3[2] = 1098;
					hv_R3[3] = 1083;
					hv_R3[4] = 780;
					hv_R3[5] = 711;
					hv_R3[6] = 699;
					hv_R3[7] = 654;
					hv_R3[8] = 647;
					hv_R3[9] = 585;
					hv_R3[10] = 579;
					hv_C3.Clear();
					hv_C3[0] = 2290;
					hv_C3[1] = 4080;
					hv_C3[2] = 4080;
					hv_C3[3] = 2134;
					hv_C3[4] = 2131;
					hv_C3[5] = 2152;
					hv_C3[6] = 2209;
					hv_C3[7] = 2201;
					hv_C3[8] = 2169;
					hv_C3[9] = 2241;
					hv_C3[10] = 2290;
					GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
					hv_R4.Clear();
					hv_R4[0] = 1131;
					hv_R4[1] = 1144;
					hv_R4[2] = 1309;
					hv_R4[3] = 1312;
					hv_R4[4] = 1342;
					hv_R4[5] = 1390;
					hv_R4[6] = 1409;
					hv_R4[7] = 1459;
					hv_R4[8] = 1578;
					hv_R4[9] = 1809;
					hv_R4[10] = 1968;
					hv_R4[11] = 1972;
					hv_R4[12] = 1940;
					hv_R4[13] = 1892;
					hv_R4[14] = 1131;
					hv_R4[15] = 1131;
					hv_C4.Clear();
					hv_C4[0] = 2235;
					hv_C4[1] = 4080;
					hv_C4[2] = 4080;
					hv_C4[3] = 3838;
					hv_C4[4] = 3613;
					hv_C4[5] = 3331;
					hv_C4[6] = 3324;
					hv_C4[7] = 3149;
					hv_C4[8] = 2858;
					hv_C4[9] = 2472;
					hv_C4[10] = 2279;
					hv_C4[11] = 2257;
					hv_C4[12] = 2227;
					hv_C4[13] = 2123;
					hv_C4[14] = 2128;
					hv_C4[15] = 2235;
					GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
					hv_R5.Clear();
					hv_R5[0] = 1356;
					hv_R5[1] = 1356;
					hv_R5[2] = 3007;
					hv_R5[3] = 3001;
					hv_R5[4] = 2983;
					hv_R5[5] = 2760;
					hv_R5[6] = 2683;
					hv_R5[7] = 2642;
					hv_R5[8] = 2605;
					hv_R5[9] = 2555;
					hv_R5[10] = 2422;
					hv_R5[11] = 2391;
					hv_R5[12] = 2365;
					hv_R5[13] = 2227;
					hv_R5[14] = 2145;
					hv_R5[15] = 2143;
					hv_R5[16] = 2114;
					hv_R5[17] = 2057;
					hv_R5[18] = 1959;
					hv_R5[19] = 2022;
					hv_R5[20] = 2023;
					hv_R5[21] = 1910;
					hv_R5[22] = 1755;
					hv_R5[23] = 1554;
					hv_R5[24] = 1477;
					hv_R5[25] = 1411;
					hv_R5[26] = 1379;
					hv_R5[27] = 1356;
					hv_C5.Clear();
					hv_C5[0] = 4012;
					hv_C5[1] = 4080;
					hv_C5[2] = 4080;
					hv_C5[3] = 2193;
					hv_C5[4] = 1628;
					hv_C5[5] = 1728;
					hv_C5[6] = 1712;
					hv_C5[7] = 1656;
					hv_C5[8] = 1635;
					hv_C5[9] = 1643;
					hv_C5[10] = 1725;
					hv_C5[11] = 1764;
					hv_C5[12] = 1767;
					hv_C5[13] = 1881;
					hv_C5[14] = 1890;
					hv_C5[15] = 1999;
					hv_C5[16] = 2066;
					hv_C5[17] = 2112;
					hv_C5[18] = 2125;
					hv_C5[19] = 2215;
					hv_C5[20] = 2317;
					hv_C5[21] = 2452;
					hv_C5[22] = 2677;
					hv_C5[23] = 3069;
					hv_C5[24] = 3281;
					hv_C5[25] = 3532;
					hv_C5[26] = 3708;
					hv_C5[27] = 4012;
					GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
					hv_R6.Clear();
					hv_R6[0] = 1992;
					hv_R6[1] = 1999;
					hv_R6[2] = 2060;
					hv_R6[3] = 2092;
					hv_R6[4] = 2135;
					hv_R6[5] = 2144;
					hv_R6[6] = 2160;
					hv_R6[7] = 2190;
					hv_R6[8] = 2366;
					hv_R6[9] = 2519;
					hv_R6[10] = 2574;
					hv_R6[11] = 2658;
					hv_R6[12] = 2666;
					hv_R6[13] = 2697;
					hv_R6[14] = 2722;
					hv_R6[15] = 2975;
					hv_R6[16] = 3018;
					hv_R6[17] = 3017;
					hv_R6[18] = 2945;
					hv_R6[19] = 2929;
					hv_R6[20] = 2937;
					hv_R6[21] = 2967;
					hv_R6[22] = 3059;
					hv_R6[23] = 3059;
					hv_R6[24] = 2993;
					hv_R6[25] = 2995;
					hv_R6[26] = 2982;
					hv_R6[27] = 2904;
					hv_R6[28] = 2828;
					hv_R6[29] = 2735;
					hv_R6[30] = 1997;
					hv_R6[31] = 1992;
					hv_C6.Clear();
					hv_C6[0] = 528;
					hv_C6[1] = 554;
					hv_C6[2] = 568;
					hv_C6[3] = 593;
					hv_C6[4] = 680;
					hv_C6[5] = 1792;
					hv_C6[6] = 1821;
					hv_C6[7] = 1820;
					hv_C6[8] = 1677;
					hv_C6[9] = 1582;
					hv_C6[10] = 1568;
					hv_C6[11] = 1580;
					hv_C6[12] = 1532;
					hv_C6[13] = 1533;
					hv_C6[14] = 1563;
					hv_C6[15] = 1445;
					hv_C6[16] = 1381;
					hv_C6[17] = 1265;
					hv_C6[18] = 1110;
					hv_C6[19] = 975;
					hv_C6[20] = 897;
					hv_C6[21] = 815;
					hv_C6[22] = 714;
					hv_C6[23] = 14;
					hv_C6[24] = 14;
					hv_C6[25] = 208;
					hv_C6[26] = 270;
					hv_C6[27] = 373;
					hv_C6[28] = 434;
					hv_C6[29] = 452;
					hv_C6[30] = 453;
					hv_C6[31] = 528;
					GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
					Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
					Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
					Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
					Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
					MoveRegion(ho_RegionUnion60, &ho_RegionMoved29, hv_R, hv_C);
					Difference(ho_RegionMoved29, ho_RegionDilation35, &ho_RegionDifference34
						);
					Difference(ho_RegionDifference34, ho_RegionDilation3, &ho_RegionDifference55
						);
					Intersection(ho_RegionDifference55, ho_Image, &ho_RegionIntersection1);
					ErosionRectangle1(ho_RegionIntersection1, &ho_RegionIntersection1, 24,
						37);
					GenRectangle1(&ho_ROI_0, 572.516, -10.8825, 692.577, 717.657);
					GenRectangle1(&ho_TMP_Region, 1920.75, 312.252, 2193.8, 684.608);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					Difference(ho_RegionIntersection1, ho_ROI_0, &ho_RegionIntersection1);
					MoveRegion(ho_Region71, &ho_RegionMoved87, hv_R - 20, hv_C);
					//检测固定缺口
					DilationRectangle1(ho_RegionMoved87, &ho_RegionDilation78, 1, 50);
					ErosionRectangle1(ho_RegionDilation78, &ho_RegionErosion56, 100, 1);
					MoveRegion(ho_RegionErosion56, &ho_RegionMoved93, 90, 0);
					ReduceDomain(ho_Image, ho_RegionMoved93, &ho_ImageReduced165);
					Threshold(ho_ImageReduced165, &ho_Region159, 0, 60);
					Connection(ho_Region159, &ho_ConnectedRegions252);
					SelectShape(ho_ConnectedRegions252, &ho_SelectedRegions307, "area", "and",
						15000, 99999);
					OpeningRectangle1(ho_SelectedRegions307, &ho_RegionOpening90, 50, 3);
					Difference(ho_SelectedRegions307, ho_RegionOpening90, &ho_RegionDifference99
						);
					Connection(ho_RegionDifference99, &ho_ConnectedRegions253);
					SelectShape(ho_ConnectedRegions253, &ho_SelectedRegions308, "area", "and",
						800, 99999);
					MoveRegion(ho_SelectedRegions307, &ho_RegionMoved94, -50, 0);
					Intersection(ho_SelectedRegions308, ho_RegionMoved94, &ho_RegionIntersection33
						);
					ConcatObj(ho_RegionIntersection33, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

					Difference(ho_RegionIntersection1, ho_RegionMoved87, &ho_RegionIntersection1
						);
					ReduceDomain(ho_ImageReduced25, ho_RegionIntersection1, &ho_ImageReduced41
						);
					//*镭雕
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 35);
					SetDictObject(ho_RegionIntersection1, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 18);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 120);

					ReduceDomain(ho_ImageReduced41, hv_dd.TupleGetDictObject("region"), &ho_ImageReduced17
						);

					//检测常规黑色缺陷（压伤）
					MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 95, 95);
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_black"),
						"dark");
					ClosingCircle(ho_RegionDynThresh, &ho_RegionClosing1, 1.3);
					Connection(ho_RegionClosing1, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions6, "area", "and",
						70, 9999);
					Union1(ho_SelectedRegions6, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_ConnectedRegions7, 3.5);
					Connection(ho_ConnectedRegions7, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions7, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_balck_area")).TupleConcat((HTuple(0).Append(0))),
						((HTuple(99999).Append(3.49)).Append(15)));
					SelectShape(ho_SelectedRegions7, &ho_SelectedRegions, "rectangularity",
						"and", 0.3, 1);
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("49"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "49");
					Difference(ho_SelectedRegions7, ho_SelectedRegions, &ho_RegionDifference
						);
					ConcatObj(ho_RegionDifference, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 3, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
					RankRect(ho_ImageConverted, &ho_ImageRank, 15, 15, 55);
					//检测大的压伤
					ZoomImageFactor(ho_ImageRank, &ho_ImageZoomed, 0.5, 0.5, "constant");
					MedianRect(ho_ImageZoomed, &ho_ImageMedian2, 3, 3);
					MedianRect(ho_ImageZoomed, &ho_ImageMedian3, 95, 95);
					ZoomRegion(hv_dd.TupleGetDictObject("region"), &ho_RegionZoom, 0.5, 0.5);
					ErosionRectangle1(ho_RegionZoom, &ho_RegionErosion, 21, 21);

					DynThreshold(ho_ImageMedian2, ho_ImageMedian3, &ho_RegionDynThresh2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("der_black_value"),
						"dark");
					Intersection(ho_RegionDynThresh2, ho_RegionErosion, &ho_RegionIntersection
						);
					Connection(ho_RegionIntersection, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions4, "area", "and",
						500, 99999);
					SelectGray(ho_SelectedRegions4, ho_ImageZoomed, &ho_SelectedRegions5, "mean",
						"and", 0, 97);
					ZoomRegion(ho_SelectedRegions5, &ho_RegionZoom1, 2, 2);
					ConcatObj(ho_RegionZoom1, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					//检测白色缺陷
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh1, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_light"),
						"light");
					Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_white_area")).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_ratio_value")),
						HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_ratio_value")));
					ConcatObj(ho_SelectedRegions2, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

					//检测大的亮白（灰度240+）
					Threshold(ho_ImageMedian, &ho_Region26, 230, 255);
					Connection(ho_Region26, &ho_ConnectedRegions92);
					SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions106, "area", "and",
						250, 49999);
					CountObj(ho_SelectedRegions106, &hv_Number);
					if (0 != hv_Number)
					{
						Union1(ho_SelectedRegions106, &ho_RegionUnion2);
						AreaCenter(ho_RegionUnion2, &hv_Area, &hv_Row, &hv_Column);
						if (0 != (int(hv_Area >= 1800)))
						{
							ConcatObj(ho_SelectedRegions106, (*hv_dt).TupleGetDictObject("46"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "46");
						}
						else if (0 != (HTuple(int(hv_Area>500)).TupleAnd(int(hv_Area<1800))))
						{
							ConcatObj(ho_SelectedRegions106, (*hv_dt).TupleGetDictObject("51"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "51");
						}
					}

					//长浅黑
					VarThreshold(ho_ImageMedian, &ho_Region107, 50, 25, 0.2, 20, "dark");
					Connection(ho_Region107, &ho_ConnectedRegions152);
					SelectShape(ho_ConnectedRegions152, &ho_SelectedRegions179, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((HTuple(1080).Append(0)).Append(0)), ((HTuple(99999).Append(20)).Append(17)));
					CountObj(ho_SelectedRegions179, &hv_Number2);
					if (0 != (int(hv_Number2>9)))
					{
						ConcatObj(ho_SelectedRegions179, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					}
					//长横黑
					VarThreshold(ho_ImageMedian, &ho_Region, 1, 35, 0.2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("var_dark_value"),
						"dark");
					Connection(ho_Region, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, (HTuple("area").Append("ratio")),
						"and", (HTuple(50).Append(0)), (HTuple(99999).Append(1.3)));
					Union1(ho_SelectedRegions1, &ho_RegionUnion);
					ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing, 36, 1);
					Connection(ho_RegionClosing, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions3, (HTuple("area").Append("width")),
						"and", (HTuple(150).Append(190)), (HTuple(99999).Append(9999)));
					SelectGray(ho_SelectedRegions3, ho_ImageReduced17, &ho_SelectedRegions8,
						"mean", "and", 0, 115);
					ConcatObj(ho_SelectedRegions8, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					//刀纹
					ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing2, 16, 16);
					Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions9, (HTuple("area").Append("anisometry")),
						"and", (HTuple(250).Append(8)), (HTuple(99999).Append(50)));
					Union1(ho_SelectedRegions9, &ho_RegionUnion3);
					CountObj(ho_RegionUnion3, &hv_Number1);
					if (0 != hv_Number1)
					{
						AreaCenter(ho_RegionUnion3, &hv_Area1, &hv_Row1, &hv_Column1);
						if (0 != (int(hv_Area1>20000)))
						{
							ConcatObj(ho_SelectedRegions9, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
						}
					}
					//jl add 白色区域检测更白色的划伤

					DilationRectangle1(ho_RegionMoved87, &ho_RegionDilation76, 1, 18);
					ReduceDomain(ho_Image, ho_RegionDilation76, &ho_ImageReduced158);
					RankRect(ho_ImageReduced158, &ho_ImageRank11, 3, 3, 5);
					MedianRect(ho_ImageRank11, &ho_ImageMedian19, 45, 45);
					DynThreshold(ho_ImageRank11, ho_ImageMedian19, &ho_RegionDynThresh20, 45,
						"light");
					Connection(ho_RegionDynThresh20, &ho_ConnectedRegions241);

					SelectShape(ho_ConnectedRegions241, &ho_SelectedRegions295, (HTuple("area").Append("anisometry")),
						"and", (HTuple(10).Append(1)), (HTuple(500).Append(2.5)));
					CountObj(ho_SelectedRegions295, &hv_Number96);

					if (0 != (int(hv_Number96<408)))
					{
						ErosionRectangle1(ho_RegionDilation76, &ho_RegionErosion53, 1, 30);
						RankRect(ho_ImageReduced158, &ho_ImageRank11, 15, 2, 3);
						GrayOpeningRect(ho_ImageRank11, &ho_ImageOpening5, 50, 40);
						SubImage(ho_ImageRank11, ho_ImageOpening5, &ho_ImageSub36, 1, 128);
						Threshold(ho_ImageSub36, &ho_Region152, 168, 255);
						Connection(ho_Region152, &ho_ConnectedRegions240);
						Intersection(ho_ConnectedRegions240, ho_RegionErosion53, &ho_ConnectedRegions241
							);
						Connection(ho_ConnectedRegions241, &ho_ConnectedRegions241);
						SelectShape(ho_ConnectedRegions241, &ho_SelectedRegions292, (HTuple("area").Append("anisometry")),
							"and", (HTuple(100).Append(5)), (HTuple(99999).Append(500)));
						CountObj(ho_SelectedRegions292, &hv_Number95);
						if (0 != (int(hv_Number95<20)))
						{
							SelectShape(ho_ConnectedRegions241, &ho_SelectedRegions291, (HTuple("area").Append("anisometry")),
								"and", (HTuple(850).Append(6)), (HTuple(99999).Append(500)));
							ConcatObj(ho_SelectedRegions291, (*hv_dt).TupleGetDictObject("42"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
						}
						Difference(ho_RegionDilation76, ho_RegionErosion53, &ho_RegionDifference92
							);
						Threshold(ho_ImageSub36, &ho_Region158, 178, 255);
						Connection(ho_Region158, &ho_ConnectedRegions243);
						Intersection(ho_ConnectedRegions243, ho_RegionDifference92, &ho_RegionIntersection30
							);
						SelectShape(ho_RegionIntersection30, &ho_SelectedRegions296, "width",
							"and", 850, 99999);
						ConcatObj(ho_SelectedRegions296, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					}
					else
					{
						ErosionRectangle1(ho_RegionDilation76, &ho_RegionErosion53, 1, 17);
						Intersection(ho_ConnectedRegions241, ho_RegionErosion53, &ho_RegionIntersection29
							);
						SelectShape(ho_RegionIntersection29, &ho_SelectedRegions293, (HTuple("area").Append("anisometry")),
							"and", (HTuple(100).Append(3)), (HTuple(99999).Append(500)));

						Union1(ho_SelectedRegions293, &ho_RegionUnion79);
						ClosingCircle(ho_RegionUnion79, &ho_RegionClosing113, 23.5);
						Connection(ho_RegionClosing113, &ho_ConnectedRegions242);
						SelectShape(ho_ConnectedRegions242, &ho_SelectedRegions294, (HTuple("area").Append("anisometry")),
							"and", (HTuple(850).Append(5)), (HTuple(99999).Append(500)));
						ConcatObj(ho_SelectedRegions294, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					}
					//检测B基准下方缺陷(该算法还有些问题，暂时先屏蔽)
					ShapeTrans(ho_RegionIntersection1, &ho_RegionTrans12, "convex");
					MoveRegion(ho_RegionTrans12, &ho_RegionMoved59, -60, 0);
					Difference(ho_RegionMoved59, ho_RegionTrans12, &ho_RegionDifference67);
					DilationRectangle1(ho_RegionDifference67, &ho_RegionDilation50, 1, 10);
					OpeningRectangle1(ho_RegionDilation50, &ho_RegionDilation50, 2900, 5);
					ReduceDomain(ho_Image, ho_RegionDilation50, &ho_ImageReduced101);
					//YJH新增漏镭雕
					Threshold(ho_ImageReduced101, &ho_Region107, 240, 255);
					Connection(ho_Region107, &ho_ConnectedRegions165);
					SelectShape(ho_ConnectedRegions165, &ho_SelectedRegions200, "area", "and",
						150, 99999);
					ClosingRectangle1(ho_SelectedRegions200, &ho_RegionClosing80, 15, 1);
					OpeningCircle(ho_RegionClosing80, &ho_RegionOpening67, 3.5);
					SelectShape(ho_RegionOpening67, &ho_SelectedRegions201, (HTuple("area").Append("width")),
						"and", (HTuple(8000).Append(400)), (HTuple(59999).Append(2200)));
					//concat_obj (SelectedRegions201, dt.['46'], dt.['46'])

					VarThreshold(ho_ImageReduced101, &ho_Region97, 10, 60, 0.2, 20, "dark");
					Connection(ho_Region97, &ho_ConnectedRegions139);
					SelectShape(ho_ConnectedRegions139, &ho_SelectedRegions172, "width", "and",
						400, 99999);
					CountObj(ho_SelectedRegions172, &hv_Number64);
					if (0 != hv_Number64)
					{
						{
							HTuple end_val795 = hv_Number64;
							HTuple step_val795 = 1;
							for (hv_i = 1; hv_i.Continue(end_val795, step_val795); hv_i += step_val795)
							{
								SelectObj(ho_SelectedRegions172, &ho_ObjectSelected1, hv_i);
								OpeningRectangle1(ho_ObjectSelected1, &ho_RegionOpening58, 40, 1);
								Difference(ho_ObjectSelected1, ho_RegionOpening58, &ho_RegionDifference68
									);
								DilationRectangle1(ho_ObjectSelected1, &ho_RegionDilation49, 1, 50);
								MoveRegion(ho_RegionDilation49, &ho_RegionMoved60, -29, 0);
								Difference(ho_RegionDifference68, ho_RegionMoved60, &ho_RegionDifference69
									);
								Connection(ho_RegionDifference69, &ho_ConnectedRegions141);
								SelectShape(ho_ConnectedRegions141, &ho_SelectedRegions174, ((HTuple("height").Append("ratio")).Append("area")),
									"and", ((HTuple(10).Append(0.08)).Append(50)), ((HTuple(99999).Append(6)).Append(9999)));
								Union1(ho_SelectedRegions174, &ho_RegionUnion55);
								CountObj(ho_RegionUnion55, &hv_Number65);
								if (0 != hv_Number65)
								{
									AreaCenter(ho_RegionUnion55, &hv_Area12, &hv_Row13, &hv_Column13);
									if (0 != (int(hv_Area12>1000)))
									{
										//concat_obj (RegionUnion55, dt.['62'], dt.['62'])
									}
								}
							}
						}
					}
					//检测毛刺
					ClosingRectangle1(ho_RegionMoved29, &ho_RegionClosing46, 10, 90);
					Difference(ho_RegionClosing46, ho_RegionMoved29, &ho_RegionDifference57
						);
					Connection(ho_RegionDifference57, &ho_ConnectedRegions125);
					SelectShape(ho_ConnectedRegions125, &ho_SelectedRegions153, ((HTuple("area").Append("width")).Append("ratio")),
						"and", ((HTuple(150).Append(1000)).Append(0)), ((HTuple(199999).Append(9999)).Append(0.2)));
					Union1(ho_SelectedRegions153, &ho_RegionUnion49);
					DilationRectangle1(ho_RegionUnion49, &ho_RegionDilation45, 11, 67);
					ReduceDomain(ho_Image, ho_RegionDilation45, &ho_ImageReduced94);

					GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing22, 1, 80);
					SubImage(ho_ImageReduced94, ho_ImageClosing22, &ho_ImageSub7, 1, 128);
					Threshold(ho_ImageSub7, &ho_Region89, 0, 35);
					OpeningRectangle1(ho_Region89, &ho_RegionOpening14, 4, 2);
					Connection(ho_RegionOpening14, &ho_ConnectedRegions126);
					SelectShape(ho_ConnectedRegions126, &ho_SelectedRegions154, (HTuple("area").Append("ratio")),
						"and", (HTuple(190).Append(0.2)), (HTuple(99999).Append(0.4)));
					CountObj(ho_SelectedRegions154, &hv_Number31);
					if (0 != (int(hv_Number31>120)))
					{
						ConcatObj(ho_SelectedRegions154, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
					}
					GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing21, 1, 4);
					GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing23, 31, 31);
					SubImage(ho_ImageClosing21, ho_ImageClosing23, &ho_ImageSub8, 1, 128);
					VarThreshold(ho_ImageSub8, &ho_Region90, 35, 35, 0.2, 12, "dark");
					OpeningRectangle1(ho_Region90, &ho_RegionOpening55, 3, 2);
					ClosingRectangle1(ho_RegionOpening55, &ho_RegionClosing48, 12, 1);
					Connection(ho_RegionClosing48, &ho_ConnectedRegions127);
					SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions155, "width", "and",
						530, 99999);
					SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions156, "width", "and",
						140, 1000);
					CountObj(ho_SelectedRegions156, &hv_Number33);
					if (0 != hv_Number33)
					{
						RegionFeatures(ho_SelectedRegions156, "height", &hv_Value22);
						TupleMax(hv_Value22, &hv_Max14);
					}
					else
					{
						hv_Max14 = 0;
					}

					CountObj(ho_SelectedRegions155, &hv_Number32);
					//判断条件1
					if (0 != (HTuple(HTuple(int(hv_Number32>1)).TupleAnd(int(hv_Number33<5))).TupleAnd(int(hv_Max14<42))))
					{
						ConcatObj(ho_SelectedRegions155, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
					}
					//判断条件2
					if (0 != (HTuple(int(hv_Number33>1)).TupleAnd(int(hv_Number33<4))))
					{
						RegionFeatures(ho_SelectedRegions156, "row", &hv_Value25);
						TupleMax(hv_Value25, &hv_Max17);
						TupleMin(hv_Value25, &hv_Min2);
						hv_a = hv_Max17 - hv_Min2;
						//放弃该方法
						if (0 != (int(hv_a == 0)))
						{
							ConcatObj(ho_SelectedRegions156, (*hv_dt).TupleGetDictObject("54"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
						}
					}
					//判断条件3
					if (0 != (int(hv_Number32 == 1)))
					{
						ClosingRectangle1(ho_SelectedRegions155, &ho_RegionClosing61, 1, 20);
						Difference(ho_RegionClosing61, ho_SelectedRegions155, &ho_RegionDifference63
							);
						CountObj(ho_RegionDifference63, &hv_Number63);
						if (0 != hv_Number63)
						{
							AreaCenter(ho_RegionDifference63, &hv_Area11, &hv_Row12, &hv_Column12);
							if (0 != (int(hv_Area11>9000)))
							{
								ConcatObj(ho_SelectedRegions155, (*hv_dt).TupleGetDictObject("54"),
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
							}
						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1927.55, 1313.15, 3029.8, 1880.73);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced64);
				GrayClosingRect(ho_ImageReduced64, &ho_ImageClosing9, 3, 3);
				Threshold(ho_ImageClosing9, &ho_Region78, 0, 66);
				Connection(ho_Region78, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and", 30,
					99999);
				Union1(ho_SelectedRegions8, &ho_RegionUnion);
				ClosingCircle(ho_RegionUnion, &ho_RegionClosing6, 13.5);
				OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening12, 5, 5);
				Connection(ho_RegionOpening12, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions13, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.38)), (HTuple(39999).Append(1)));
				DilationCircle(ho_SelectedRegions13, &ho_RegionDilation4, 23.5);
				CountObj(ho_SelectedRegions13, &hv_Number36);
				if (0 != hv_Number36)
				{
					AreaCenter(ho_SelectedRegions13, &hv_Area5, &hv_Row5, &hv_Column5);
					hv_R = hv_Row5 - 2847;
					hv_C = hv_Column5 - 1703;
				}
				if (0 != (int(hv_Number36 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				hv_R1.Clear();
				hv_R1[0] = 602;
				hv_R1[1] = 608;
				hv_R1[2] = 648;
				hv_R1[3] = 655;
				hv_R1[4] = 950;
				hv_R1[5] = 1011;
				hv_R1[6] = 1022;
				hv_R1[7] = 1028;
				hv_R1[8] = 1028;
				hv_R1[9] = 998;
				hv_R1[10] = 949;
				hv_R1[11] = 660;
				hv_R1[12] = 656;
				hv_R1[13] = 617;
				hv_R1[14] = 620;
				hv_R1[15] = 3066;
				hv_R1[16] = 3066;
				hv_R1[17] = 2678;
				hv_R1[18] = 2429;
				hv_R1[19] = 2237;
				hv_R1[20] = 2096;
				hv_R1[21] = 2057;
				hv_R1[22] = 2057;
				hv_R1[23] = 2012;
				hv_R1[24] = 1895;
				hv_R1[25] = 1721;
				hv_R1[26] = 1531;
				hv_R1[27] = 1526;
				hv_R1[28] = 1429;
				hv_R1[29] = 1179;
				hv_R1[30] = 1092;
				hv_R1[31] = 1074;
				hv_R1[32] = 1075;
				hv_R1[33] = 1122;
				hv_R1[34] = 1111;
				hv_R1[35] = 1117;
				hv_R1[36] = 602;
				hv_R1[37] = 602;
				hv_C1.Clear();
				hv_C1[0] = 44;
				hv_C1[1] = 2400;
				hv_C1[2] = 2403;
				hv_C1[3] = 2426;
				hv_C1[4] = 2428;
				hv_C1[5] = 2491;
				hv_C1[6] = 2530;
				hv_C1[7] = 3336;
				hv_C1[8] = 3586;
				hv_C1[9] = 3653;
				hv_C1[10] = 3685;
				hv_C1[11] = 3687;
				hv_C1[12] = 3706;
				hv_C1[13] = 3709;
				hv_C1[14] = 4090;
				hv_C1[15] = 4090;
				hv_C1[16] = 2661;
				hv_C1[17] = 2477;
				hv_C1[18] = 2315;
				hv_C1[19] = 2160;
				hv_C1[20] = 2107;
				hv_C1[21] = 2049;
				hv_C1[22] = 1984;
				hv_C1[23] = 1954;
				hv_C1[24] = 1813;
				hv_C1[25] = 1554;
				hv_C1[26] = 1546;
				hv_C1[27] = 1690;
				hv_C1[28] = 1755;
				hv_C1[29] = 1756;
				hv_C1[30] = 1705;
				hv_C1[31] = 1640;
				hv_C1[32] = 1388;
				hv_C1[33] = 1316;
				hv_C1[34] = 1156;
				hv_C1[35] = 5;
				hv_C1[36] = 5;
				hv_C1[37] = 44;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 1113;
				hv_R2[1] = 1116;
				hv_R2[2] = 1137;
				hv_R2[3] = 1171;
				hv_R2[4] = 1405;
				hv_R2[5] = 1452;
				hv_R2[6] = 1486;
				hv_R2[7] = 1488;
				hv_R2[8] = 1433;
				hv_R2[9] = 1183;
				hv_R2[10] = 1129;
				hv_R2[11] = 1113;
				hv_C2.Clear();
				hv_C2[0] = 1449;
				hv_C2[1] = 1627;
				hv_C2[2] = 1674;
				hv_C2[3] = 1701;
				hv_C2[4] = 1706;
				hv_C2[5] = 1687;
				hv_C2[6] = 1634;
				hv_C2[7] = 1419;
				hv_C2[8] = 1349;
				hv_C2[9] = 1343;
				hv_C2[10] = 1385;
				hv_C2[11] = 1449;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 1152;
				hv_R3[1] = 1159;
				hv_R3[2] = 1460;
				hv_R3[3] = 1516;
				hv_R3[4] = 1530;
				hv_R3[5] = 1641;
				hv_R3[6] = 1692;
				hv_R3[7] = 1543;
				hv_R3[8] = 1426;
				hv_R3[9] = 1395;
				hv_R3[10] = 1334;
				hv_R3[11] = 1332;
				hv_R3[12] = 1153;
				hv_R3[13] = 1152;
				hv_C3.Clear();
				hv_C3[0] = 41;
				hv_C3[1] = 1305;
				hv_C3[2] = 1300;
				hv_C3[3] = 1379;
				hv_C3[4] = 1500;
				hv_C3[5] = 1501;
				hv_C3[6] = 1499;
				hv_C3[7] = 1216;
				hv_C3[8] = 898;
				hv_C3[9] = 769;
				hv_C3[10] = 358;
				hv_C3[11] = 5;
				hv_C3[12] = 5;
				hv_C3[13] = 41;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 1365;
				hv_R4[1] = 1377;
				hv_R4[2] = 1420;
				hv_R4[3] = 1469;
				hv_R4[4] = 1558;
				hv_R4[5] = 1672;
				hv_R4[6] = 1806;
				hv_R4[7] = 2073;
				hv_R4[8] = 2107;
				hv_R4[9] = 2156;
				hv_R4[10] = 2795;
				hv_R4[11] = 2797;
				hv_R4[12] = 2875;
				hv_R4[13] = 2972;
				hv_R4[14] = 3015;
				hv_R4[15] = 3041;
				hv_R4[16] = 3044;
				hv_R4[17] = 3027;
				hv_R4[18] = 1368;
				hv_R4[19] = 1365;
				hv_C4.Clear();
				hv_C4[0] = 167;
				hv_C4[1] = 398;
				hv_C4[2] = 672;
				hv_C4[3] = 867;
				hv_C4[4] = 1124;
				hv_C4[5] = 1371;
				hv_C4[6] = 1593;
				hv_C4[7] = 1940;
				hv_C4[8] = 1905;
				hv_C4[9] = 1891;
				hv_C4[10] = 1889;
				hv_C4[11] = 1877;
				hv_C4[12] = 1871;
				hv_C4[13] = 1839;
				hv_C4[14] = 1793;
				hv_C4[15] = 1731;
				hv_C4[16] = 1503;
				hv_C4[17] = 5;
				hv_C4[18] = 5;
				hv_C4[19] = 167;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);

				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				MoveRegion(ho_RegionUnion58, &ho_RegionMoved30, hv_R, hv_C);
				ErosionRectangle1(ho_RegionMoved30, &ho_RegionErosion12, 85, 65);
				Difference(ho_RegionErosion12, ho_RegionDilation4, &ho_RegionDifference8);

				//*镭雕
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 35);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 62);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
				SetDictObject(ho_RegionDifference8, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));
				ReduceDomain(ho_Image, ho_RegionDifference8, &ho_ImageReduced121);
				//JLADD检测镭雕上长横划痕
				MeanImage(ho_ImageReduced121, &ho_ImageMean13, 45, 45);
				DynThreshold(ho_ImageReduced121, ho_ImageMean13, &ho_RegionDynThresh17, 55,
					"dark");
				ClosingRectangle1(ho_RegionDynThresh17, &ho_RegionClosing93, 50, 1);
				Connection(ho_RegionClosing93, &ho_ConnectedRegions189);
				SelectShape(ho_ConnectedRegions189, &ho_SelectedRegions236, ((HTuple("area").Append("ratio")).Append("width")),
					"and", ((HTuple(1050).Append(0.0001)).Append(500)), ((HTuple(99999).Append(0.01)).Append(5000)));
				CountObj(ho_SelectedRegions236, &hv_Number76);
				if (0 != (int(hv_Number76<5)))
				{
					ConcatObj(ho_SelectedRegions236, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				}
				//检测BLC毛刺
				ClosingRectangle1(ho_RegionMoved30, &ho_RegionClosing46, 10, 90);
				Difference(ho_RegionClosing46, ho_RegionMoved30, &ho_RegionDifference57);
				Connection(ho_RegionDifference57, &ho_ConnectedRegions125);
				SelectShape(ho_ConnectedRegions125, &ho_SelectedRegions153, ((HTuple("area").Append("width")).Append("ratio")),
					"and", ((HTuple(150).Append(1000)).Append(0)), ((HTuple(199999).Append(9999)).Append(0.2)));
				Union1(ho_SelectedRegions153, &ho_RegionUnion49);
				DilationRectangle1(ho_RegionUnion49, &ho_RegionDilation45, 11, 91);
				ReduceDomain(ho_Image, ho_RegionDilation45, &ho_ImageReduced94);

				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing22, 1, 80);
				SubImage(ho_ImageReduced94, ho_ImageClosing22, &ho_ImageSub7, 1, 128);
				Threshold(ho_ImageSub7, &ho_Region89, 0, 30);
				OpeningRectangle1(ho_Region89, &ho_RegionOpening14, 4, 2);
				Connection(ho_RegionOpening14, &ho_ConnectedRegions126);
				SelectShape(ho_ConnectedRegions126, &ho_SelectedRegions154, (HTuple("area").Append("ratio")),
					"and", (HTuple(80).Append(0.1)), (HTuple(99999).Append(0.4)));
				CountObj(ho_SelectedRegions154, &hv_Number31);
				if (0 != (int(hv_Number31>49)))
				{
					ConcatObj(ho_SelectedRegions154, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing21, 1, 4);
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing23, 31, 31);
				SubImage(ho_ImageClosing21, ho_ImageClosing23, &ho_ImageSub8, 1, 128);
				VarThreshold(ho_ImageSub8, &ho_Region90, 1, 30, 0.2, 12, "dark");
				ClosingRectangle1(ho_Region90, &ho_RegionClosing48, 10, 1);
				Connection(ho_RegionClosing48, &ho_ConnectedRegions127);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions155, "width", "and",
					350, 99999);
				CountObj(ho_SelectedRegions155, &hv_Number32);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions156, "width", "and",
					150, 99999);
				CountObj(ho_SelectedRegions156, &hv_Number33);
				RegionFeatures(ho_SelectedRegions156, "height", &hv_Value22);
				TupleMax(hv_Value22, &hv_Max14);
				if (0 != (HTuple(HTuple(int(hv_Number32>1)).TupleAnd(int(hv_Number33<4))).TupleAnd(int(hv_Max14<32))))
				{
					ConcatObj(ho_SelectedRegions155, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}
				//开裂
				GenRectangle1(&ho_ROI_0, 557.036, 1843.48, 866.536, 2400.47);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced7);
				VarThreshold(ho_ImageReduced7, &ho_Region7, 60, 60, 0.2, 10, "dark");
				OpeningRectangle1(ho_Region7, &ho_RegionOpening3, 3, 3);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions11);
				RegionFeatures(ho_ConnectedRegions11, "width", &hv_Value2);
				TupleMax(hv_Value2, &hv_Max1);
				SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions11, "width", "and",
					hv_Max1, hv_Max1);
				DilationRectangle1(ho_SelectedRegions11, &ho_RegionDilation1, 11, 101);
				Difference(ho_ROI_0, ho_RegionDilation1, &ho_RegionDifference3);
				OpeningRectangle1(ho_RegionDifference3, &ho_RegionOpening35, 460, 10);
				ReduceDomain(ho_ImageReduced7, ho_RegionOpening35, &ho_ImageReduced22);
				VarThreshold(ho_ImageReduced22, &ho_Region21, 60, 60, 0.2, 22, "dark");
				OpeningRectangle1(ho_Region21, &ho_RegionOpening15, 2, 2);
				Connection(ho_RegionOpening15, &ho_ConnectedRegions32);
				SelectShape(ho_ConnectedRegions32, &ho_SelectedRegions31, (HTuple("area").Append("ratio")),
					"and", (HTuple(180).Append(0)), (HTuple(99999).Append(1.4)));
				ConcatObj(ho_SelectedRegions31, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");

				//基准面压伤
				GenRectangle1(&ho_ROI_0, 371.637, -17.8046, 710.268, 4108.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);
				Threshold(ho_ImageReduced8, &ho_Region8, 178, 255);
				OpeningCircle(ho_Region8, &ho_Region8, 13.5);
				Connection(ho_Region8, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
					1e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 90, 30);
				//碰伤(该点位蓝色区域不检测，银色区域可以检测)
				ShapeTrans(ho_RegionClosing5, &ho_RegionTrans7, "rectangle1");
				MoveRegion(ho_RegionTrans7, &ho_RegionMoved, -30, 0);
				Difference(ho_RegionMoved, ho_RegionTrans7, &ho_RegionDifference2);
				Connection(ho_RegionDifference2, &ho_ConnectedRegions25);
				SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions25, "area", "and",
					15000, 299999);
				ReduceDomain(ho_Image, ho_SelectedRegions25, &ho_ImageReduced10);
				GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing12, 1, 100);
				//
				OpeningRectangle1(ho_RegionClosing5, &ho_RegionOpening17, 100, 10);
				ErosionRectangle1(ho_RegionOpening17, &ho_RegionErosion5, 5, 54);
				MoveRegion(ho_RegionErosion5, &ho_RegionMoved24, 16, 0);
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved24, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 31, 31);
				SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
				Threshold(ho_ImageSub1, &ho_Region9, 0, 40);
				Connection(ho_Region9, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(67).Append(0.17)).Append(0)), ((HTuple(1800).Append(3)).Append(4)));
				SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions3, "mean",
					"and", 0, 155);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions3, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//YJH新增
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved24, &ho_ImageReduced110);
				MeanImage(ho_ImageReduced110, &ho_ImageMean5, 25, 25);
				DynThreshold(ho_ImageReduced110, ho_ImageMean5, &ho_RegionDynThresh7, 55,
					"dark");
				Connection(ho_RegionDynThresh7, &ho_ConnectedRegions159);
				SelectShape(ho_ConnectedRegions159, &ho_SelectedRegions194, (HTuple("area").Append("ratio")),
					"and", (HTuple(150).Append(0.17)), (HTuple(1999).Append(15)));
				ConcatObj(ho_SelectedRegions194, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				//下侧缝隙出缺陷
				ClosingRectangle1(ho_RegionClosing5, &ho_RegionClosing17, 1010, 10);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved5, 65, 0);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved7, 4, 0);
				Difference(ho_RegionMoved5, ho_RegionMoved7, &ho_RegionDifference20);
				ReduceDomain(ho_Image, ho_RegionDifference20, &ho_ImageReduced29);

				Threshold(ho_ImageReduced29, &ho_Region28, 0, 40);
				Connection(ho_Region28, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
					1500, 99999);
				ClosingRectangle1(ho_SelectedRegions49, &ho_RegionClosing18, 400, 400);
				ShapeTrans(ho_RegionClosing18, &ho_RegionTrans, "convex");
				DilationRectangle1(ho_RegionTrans, &ho_RegionDilation20, 51, 51);
				Difference(ho_RegionDifference20, ho_RegionDilation20, &ho_RegionDifference21
					);
				ReduceDomain(ho_Image, ho_RegionDifference21, &ho_ImageReduced30);
				RankRect(ho_ImageReduced30, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 106);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, ((HTuple("area").Append("height")).Append("ratio")),
					"and", ((HTuple(150).Append(15)).Append(0.11)), ((HTuple(99999).Append(99)).Append(7)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 120);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>280)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}
				VarThreshold(ho_ImageReduced30, &ho_Region35, 150, 15, 0.2, 13, "dark");
				OpeningRectangle1(ho_Region35, &ho_RegionOpening23, 3, 3);
				Connection(ho_RegionOpening23, &ho_ConnectedRegions46);
				SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions50, ((HTuple("area").Append("ratio")).Append("column")),
					"and", ((HTuple(720).Append(0.5)).Append(0)), ((HTuple(99999).Append(6)).Append(2950)));
				SelectGray(ho_SelectedRegions50, ho_Image, &ho_SelectedRegions110, "mean",
					"and", 0, 88);
				ConcatObj(ho_SelectedRegions110, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//YJH新增漏镭雕
				Threshold(ho_ImageReduced30, &ho_Region110, 240, 255);
				Connection(ho_Region110, &ho_ConnectedRegions166);
				SelectShape(ho_ConnectedRegions166, &ho_SelectedRegions202, "area", "and",
					250, 99999);
				ClosingRectangle1(ho_SelectedRegions202, &ho_RegionClosing81, 15, 1);
				OpeningCircle(ho_RegionClosing81, &ho_RegionOpening68, 5.5);
				SelectShape(ho_RegionOpening68, &ho_SelectedRegions203, (HTuple("area").Append("width")),
					"and", (HTuple(3000).Append(300)), (HTuple(59999).Append(2900)));
				ConcatObj(ho_SelectedRegions203, (*hv_dt).TupleGetDictObject("46"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "46");
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 142.86, 2974.95, 1166.86, 3659.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 188, 255);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.7)), (HTuple(99999).Append(1)));

				CountObj(ho_SelectedRegions55, &hv_Number19);
				if (0 != hv_Number19)
				{
					AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
					hv_R = hv_Row6 - 860;
					hv_C = hv_Column6 - 3306;
					hv_R1.Clear();
					hv_R1[0] = 673;
					hv_R1[1] = 676;
					hv_R1[2] = 710;
					hv_R1[3] = 853;
					hv_R1[4] = 912;
					hv_R1[5] = 940;
					hv_R1[6] = 941;
					hv_R1[7] = 1076;
					hv_R1[8] = 1118;
					hv_R1[9] = 1126;
					hv_R1[10] = 1138;
					hv_R1[11] = 1126;
					hv_R1[12] = 1148;
					hv_R1[13] = 1146;
					hv_R1[14] = 1213;
					hv_R1[15] = 2593;
					hv_R1[16] = 2636;
					hv_R1[17] = 2697;
					hv_R1[18] = 3032;
					hv_R1[19] = 3032;
					hv_R1[20] = 3017;
					hv_R1[21] = 3032;
					hv_R1[22] = 3028;
					hv_R1[23] = 3011;
					hv_R1[24] = 3023;
					hv_R1[25] = 2915;
					hv_R1[26] = 674;
					hv_R1[27] = 673;
					hv_C1.Clear();
					hv_C1[0] = 358;
					hv_C1[1] = 1429;
					hv_C1[2] = 1459;
					hv_C1[3] = 1477;
					hv_C1[4] = 1509;
					hv_C1[5] = 1584;
					hv_C1[6] = 1948;
					hv_C1[7] = 1959;
					hv_C1[8] = 2005;
					hv_C1[9] = 2577;
					hv_C1[10] = 2603;
					hv_C1[11] = 2775;
					hv_C1[12] = 2812;
					hv_C1[13] = 2928;
					hv_C1[14] = 3026;
					hv_C1[15] = 3009;
					hv_C1[16] = 2961;
					hv_C1[17] = 2927;
					hv_C1[18] = 2918;
					hv_C1[19] = 1034;
					hv_C1[20] = 1033;
					hv_C1[21] = 562;
					hv_C1[22] = 392;
					hv_C1[23] = 380;
					hv_C1[24] = 45;
					hv_C1[25] = 30;
					hv_C1[26] = 30;
					hv_C1[27] = 358;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					ErosionRectangle1(ho_Region71, &ho_RegionErosion15, 41, 51);
					MoveRegion(ho_RegionErosion15, &ho_RegionMoved14, hv_R, hv_C);
					ErosionRectangle1(ho_RegionMoved14, &ho_RegionMoved14, 10, 20);
					ReduceDomain(ho_Image, ho_RegionMoved14, &ho_ImageReduced17);
					//*镭雕
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 33);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 71);
					SetDictObject(ho_RegionMoved14, hv_dd, "region");
					Det_LD_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					ErosionRectangle1(ho_ROI_0, &ho_ROI_0, 121, 301);
					MoveRegion(ho_ROI_0, &ho_ROI_0, 70, 0);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}
				//裂伤
				GenRectangle1(&ho_ROI_0, 713.111, 25.8314, 1465.28, 1436.03);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced82);
				MedianRect(ho_ImageReduced82, &ho_ImageMedian27, 3, 3);
				MedianRect(ho_ImageReduced82, &ho_ImageMedian28, 80, 80);
				DynThreshold(ho_ImageMedian27, ho_ImageMedian28, &ho_RegionDynThresh11, 15,
					"dark");
				Connection(ho_RegionDynThresh11, &ho_ConnectedRegions130);
				SelectShape(ho_ConnectedRegions130, &ho_SelectedRegions149, "phi", "and",
					HTuple(30).TupleRad(), HTuple(70).TupleRad());

				//基准面压伤
				GenRectangle1(&ho_ROI_0, 411.637, -17.8046, 710.268, 2448.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);
				Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
				OpeningRectangle1(ho_Region8, &ho_RegionOpening16, 5, 2);
				Connection(ho_RegionOpening16, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
					1e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 60, 20);
				//检测塑胶
				ShapeTrans(ho_RegionClosing5, &ho_RegionTrans15, "rectangle1");
				DilationRectangle1(ho_RegionTrans15, &ho_RegionDilation77, 1, 120);
				MoveRegion(ho_RegionDilation77, &ho_RegionMoved89, 60, 0);
				MoveRegion(ho_RegionMoved89, &ho_RegionMoved90, 0, 300);
				Difference(ho_RegionMoved90, ho_RegionMoved89, &ho_RegionDifference95);
				ReduceDomain(ho_Image, ho_RegionDifference95, &ho_ImageReduced161);
				Threshold(ho_ImageReduced161, &ho_Region154, 0, 120);
				ErosionRectangle1(ho_Region154, &ho_RegionErosion55, 11, 11);
				ReduceDomain(ho_ImageReduced161, ho_RegionErosion55, &ho_ImageReduced162);
				GrayClosingRect(ho_ImageReduced162, &ho_ImageClosing39, 28, 28);
				SubImage(ho_ImageReduced162, ho_ImageClosing39, &ho_ImageSub38, 1, 128);
				Threshold(ho_ImageSub38, &ho_Region155, 0, 100);
				Connection(ho_Region155, &ho_ConnectedRegions248);
				SelectShape(ho_ConnectedRegions248, &ho_SelectedRegions303, (HTuple("area").Append("ratio")),
					"and", (HTuple(300).Append(0.5)), (HTuple(99999).Append(8)));
				Union1(ho_SelectedRegions303, &ho_RegionUnion82);
				CountObj(ho_RegionUnion82, &hv_Number99);
				if (0 != hv_Number99)
				{
					AreaCenter(ho_RegionUnion82, &hv_Area14, &hv_Row17, &hv_Column17);
					if (0 != (int(hv_Area14>900)))
					{
						ConcatObj(ho_RegionUnion82, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}
				ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 5, 57);
				MoveRegion(ho_RegionErosion5, &ho_RegionMoved9, 21, 0);
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved9, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 11, 11);
				SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
				Threshold(ho_ImageSub1, &ho_Region9, 0, 30);
				Connection(ho_Region9, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (HTuple("area").Append("anisometry")),
					"and", (HTuple(70).Append(0)), (HTuple(1600).Append(4.5)));
				SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions99, "mean",
					"and", 0, 15);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions99, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				Difference(ho_RegionClosing5, ho_RegionMoved9, &ho_RegionDifference9);
				OpeningRectangle1(ho_RegionDifference9, &ho_RegionOpening8, 3, 3);
				Connection(ho_RegionOpening8, &ho_ConnectedRegions16);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions18, "area", "and",
					50000, 999999);
				ErosionRectangle1(ho_SelectedRegions18, &ho_RegionErosion, 2, 2);

				//下方缺陷
				//shape_trans (RegionClosing5, RegionClosing5, 'rectangle1')
				MoveRegion(ho_RegionClosing5, &ho_RegionMoved22, 65, 0);
				Difference(ho_RegionMoved22, ho_RegionClosing5, &ho_RegionDifference37);
				Connection(ho_RegionDifference37, &ho_ConnectedRegions94);
				SelectShape(ho_ConnectedRegions94, &ho_SelectedRegions108, "width", "and",
					1250, 99999);
				ErosionRectangle1(ho_SelectedRegions108, &ho_RegionErosion20, 181, 6);
				MoveRegion(ho_RegionErosion20, &ho_RegionMoved27, 0, -130);
				Connection(ho_RegionMoved27, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, "width", "and", 650,
					99999);
				ReduceDomain(ho_Image, ho_SelectedRegions2, &ho_ImageReduced68);
				RankRect(ho_ImageReduced68, &ho_ImageRank, 10, 5, 35);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 98);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 70);
				Connection(ho_Region21, &ho_ConnectedRegions112);
				SelectShape(ho_ConnectedRegions112, &ho_SelectedRegions117, ((HTuple("area").Append("height")).Append("column")),
					"and", ((HTuple(410).Append(18)).Append(0)), ((HTuple(99999).Append(99)).Append(1380)));
				SelectGray(ho_SelectedRegions117, ho_Image, &ho_SelectedRegions7, "mean",
					"and", 0, 94.5);
				ConcatObj(ho_SelectedRegions7, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

				MedianRect(ho_ImageReduced68, &ho_ImageMedian21, 7, 7);
				GrayClosingRect(ho_ImageMedian21, &ho_ImageClosing13, 41, 41);
				SubImage(ho_ImageMedian21, ho_ImageClosing13, &ho_ImageSub18, 2, 128);
				Threshold(ho_ImageSub18, &ho_Region72, 0, 40);
				Connection(ho_Region72, &ho_ConnectedRegions148);
				SelectShape(ho_ConnectedRegions148, &ho_SelectedRegions173, "ratio", "and",
					0.3, 5);
				Union1(ho_SelectedRegions173, &ho_RegionUnion52);
				OpeningRectangle1(ho_RegionUnion52, &ho_RegionOpening34, 4, 9);
				Connection(ho_RegionOpening34, &ho_ConnectedRegions95);
				SelectShape(ho_ConnectedRegions95, &ho_SelectedRegions109, (HTuple("area").Append("ratio")),
					"and", (HTuple(370).Append(0.4)), (HTuple(99999).Append(6)));
				SelectGray(ho_SelectedRegions109, ho_Image, &ho_SelectedRegions144, "mean",
					"and", 0, 70);
				Union1(ho_SelectedRegions144, &ho_RegionUnion37);
				RegionFeatures(ho_RegionUnion37, "area", &hv_Value10);
				if (0 != (int(hv_Value10>750)))
				{
					//concat_obj (RegionUnion37, dt.['64'], dt.['64'])
				}
				//检测RT
				GenRectangle1(&ho_ROI_0, 241.179, 2599.46, 1008.47, 3963.27);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 70, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, 100, -100);
				Difference(ho_RegionTrans1, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);
				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 8);
				ReduceDomain(ho_Image, ho_RegionDilation61, &ho_ImageReduced17);
				Threshold(ho_ImageReduced17, &ho_Region84, 130, 255);

				Connection(ho_Region84, &ho_ConnectedRegions122);
				SelectShape(ho_ConnectedRegions122, &ho_SelectedRegions139, ((HTuple("area").Append("circularity")).Append("anisometry")),
					"and", (HTuple(68).Append(0)).TupleConcat((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_anisometry_value")),
					((HTuple(99999).Append(0.65)).Append(99)));
				Union1(ho_SelectedRegions139, &ho_RegionUnion46);
				ClosingCircle(ho_RegionUnion46, &ho_RegionClosing39, 130);
				Difference(ho_RegionClosing39, ho_SelectedRegions139, &ho_RegionDifference45
					);
				Connection(ho_RegionDifference45, &ho_ConnectedRegions124);
				SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions141, (HTuple("area").Append("anisometry")),
					"and", ((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_area")).TupleConcat(1e-5),
					(HTuple(99999).Append(9)));
				SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions1, (HTuple("area").Append("anisometry")),
					"and", (HTuple(50).Append(0)), (HTuple(99999).Append(17)));
				SelectGray(ho_SelectedRegions1, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions2,
					"mean", "and", 0, 100);
				SelectGray(ho_SelectedRegions141, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions,
					"mean", "and", 0, 101);

				//concat_obj (SelectedRegions, dt.['63'], dt.['63'])
				RegionFeatures(ho_RegionClosing39, "width", &hv_Value12);
				if (0 != (int(hv_Value12>100)))
				{
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					ConcatObj(ho_SelectedRegions2, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}
				//jladd检测圆孔旁边塑胶溢出
				GenRectangle1(&ho_ROI_0, 1172.71, 3091.98, 1688.16, 3331.89);
				MoveRegion(ho_ROI_0, &ho_RegionMoved72, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionMoved72, &ho_ImageReduced120);
				Threshold(ho_ImageReduced120, &ho_Region116, 0, 65);
				Connection(ho_Region116, &ho_ConnectedRegions187);
				SelectShape(ho_ConnectedRegions187, &ho_SelectedRegions234, "circularity",
					"and", 0.6, 0.9999);
				CountObj(ho_SelectedRegions234, &hv_Number74);
				if (0 != (int(hv_Number74 == 0)))
				{
					OpeningRectangle1(ho_ConnectedRegions187, &ho_RegionOpening74, 40, 40);
					Connection(ho_RegionOpening74, &ho_ConnectedRegions188);
					SelectShape(ho_ConnectedRegions188, &ho_SelectedRegions235, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.6).Append(3000)), (HTuple(0.9999).Append(20000)));
					CountObj(ho_SelectedRegions235, &hv_Number75);
					if (0 != (int(hv_Number75 == 2)))
					{
						ConcatObj(ho_SelectedRegions235, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 306.7, 1594.01, 1769.56, 2606.31);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 66);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.4)), (HTuple(99999).Append(1)));
				CountObj(ho_SelectedRegions55, &hv_Number54);
				if (0 != (int(hv_Number54 == 1)))
				{
					AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
					DilationCircle(ho_SelectedRegions55, &ho_RegionDilation5, 25.5);
					hv_R = hv_Row6 - 990;
					hv_C = hv_Column6 - 2168;
					hv_R1.Clear();
					hv_R1[0] = 43;
					hv_R1[1] = 145;
					hv_R1[2] = 185;
					hv_R1[3] = 254;
					hv_R1[4] = 714;
					hv_R1[5] = 771;
					hv_R1[6] = 823;
					hv_R1[7] = 849;
					hv_R1[8] = 849;
					hv_R1[9] = 867;
					hv_R1[10] = 898;
					hv_R1[11] = 1012;
					hv_R1[12] = 1018;
					hv_R1[13] = 1117;
					hv_R1[14] = 1154;
					hv_R1[15] = 1290;
					hv_R1[16] = 1328;
					hv_R1[17] = 1329;
					hv_R1[18] = 1236;
					hv_R1[19] = 1187;
					hv_R1[20] = 1071;
					hv_R1[21] = 1017;
					hv_R1[22] = 996;
					hv_R1[23] = 900;
					hv_R1[24] = 951;
					hv_R1[25] = 1216;
					hv_R1[26] = 1299;
					hv_R1[27] = 1362;
					hv_R1[28] = 1372;
					hv_R1[29] = 1922;
					hv_R1[30] = 1931;
					hv_R1[31] = 2003;
					hv_R1[32] = 2078;
					hv_R1[33] = 2372;
					hv_R1[34] = 2285;
					hv_R1[35] = 2274;
					hv_R1[36] = 2239;
					hv_R1[37] = 2207;
					hv_R1[38] = 2099;
					hv_R1[39] = 2047;
					hv_R1[40] = 1958;
					hv_R1[41] = 1959;
					hv_R1[42] = 2013;
					hv_R1[43] = 2133;
					hv_R1[44] = 2176;
					hv_R1[45] = 2278;
					hv_R1[46] = 2281;
					hv_R1[47] = 2336;
					hv_R1[48] = 2440;
					hv_R1[49] = 2461;
					hv_R1[50] = 2461;
					hv_R1[51] = 2568;
					hv_R1[52] = 3031;
					hv_R1[53] = 3031;
					hv_R1[54] = 2041;
					hv_R1[55] = 2047;
					hv_R1[56] = 2030;
					hv_R1[57] = 1991;
					hv_R1[58] = 1881;
					hv_R1[59] = 1306;
					hv_R1[60] = 1228;
					hv_R1[61] = 1209;
					hv_R1[62] = 1203;
					hv_R1[63] = 43;
					hv_R1[64] = 43;
					hv_C1.Clear();
					hv_C1[0] = 2994;
					hv_C1[1] = 2990;
					hv_C1[2] = 2941;
					hv_C1[3] = 2910;
					hv_C1[4] = 2912;
					hv_C1[5] = 2935;
					hv_C1[6] = 2989;
					hv_C1[7] = 3167;
					hv_C1[8] = 3092;
					hv_C1[9] = 3076;
					hv_C1[10] = 3061;
					hv_C1[11] = 3072;
					hv_C1[12] = 3025;
					hv_C1[13] = 2840;
					hv_C1[14] = 2825;
					hv_C1[15] = 2833;
					hv_C1[16] = 2877;
					hv_C1[17] = 3004;
					hv_C1[18] = 3195;
					hv_C1[19] = 3220;
					hv_C1[20] = 3221;
					hv_C1[21] = 3176;
					hv_C1[22] = 3227;
					hv_C1[23] = 3229;
					hv_C1[24] = 3249;
					hv_C1[25] = 3252;
					hv_C1[26] = 3279;
					hv_C1[27] = 3361;
					hv_C1[28] = 3498;
					hv_C1[29] = 3490;
					hv_C1[30] = 3358;
					hv_C1[31] = 3267;
					hv_C1[32] = 3243;
					hv_C1[33] = 3230;
					hv_C1[34] = 3215;
					hv_C1[35] = 3172;
					hv_C1[36] = 3207;
					hv_C1[37] = 3214;
					hv_C1[38] = 3213;
					hv_C1[39] = 3178;
					hv_C1[40] = 2997;
					hv_C1[41] = 2872;
					hv_C1[42] = 2822;
					hv_C1[43] = 2819;
					hv_C1[44] = 2838;
					hv_C1[45] = 3031;
					hv_C1[46] = 3075;
					hv_C1[47] = 3057;
					hv_C1[48] = 3057;
					hv_C1[49] = 3081;
					hv_C1[50] = 3150;
					hv_C1[51] = 3108;
					hv_C1[52] = 3105;
					hv_C1[53] = 30;
					hv_C1[54] = 30;
					hv_C1[55] = 1173;
					hv_C1[56] = 1220;
					hv_C1[57] = 1257;
					hv_C1[58] = 1274;
					hv_C1[59] = 1274;
					hv_C1[60] = 1223;
					hv_C1[61] = 1148;
					hv_C1[62] = 31;
					hv_C1[63] = 30;
					hv_C1[64] = 2994;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					ErosionRectangle1(ho_Region71, &ho_RegionErosion15, 41, 11);
					MoveRegion(ho_RegionErosion15, &ho_RegionMoved14, hv_R, hv_C);
					Difference(ho_RegionMoved14, ho_RegionDilation5, &ho_RegionDifference12
						);

					ReduceDomain(ho_Image, ho_RegionDifference12, &ho_ImageReduced17);

					MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
					GrayClosingRect(ho_ImageMedian8, &ho_ImageClosing10, 11, 11);
					//大面黑（未见光或者大的黑色缺陷）
					AutoThreshold(ho_ImageClosing10, &ho_Regions, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("auto_thre"));
					Connection(ho_Regions, &ho_ConnectedRegions72);
					SelectGray(ho_ConnectedRegions72, ho_ImageClosing10, &ho_SelectedRegions72,
						"mean", "and", 0, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_gray_mean_value"));
					SelectShape(ho_SelectedRegions72, &ho_SelectedRegions74, (HTuple("area").Append("ratio")),
						"and", (HTuple(500).Append(0.05)), (HTuple(9999999).Append(14)));
					Union1(ho_SelectedRegions74, &ho_RegionUnion20);
					RegionFeatures(ho_RegionUnion20, "area", &hv_Value5);
					if (0 != (HTuple(int(hv_Value5>1000)).TupleAnd(int(hv_Value5<6.5e6))))
					{
						ConcatObj(ho_SelectedRegions74, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					}
					//检测常规黑色缺陷（压伤）
					MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 95, 95);
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 36,
						"dark");
					ClosingCircle(ho_RegionDynThresh, &ho_RegionClosing1, 1.3);
					Connection(ho_RegionClosing1, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions6, "area", "and",
						70, 9999);
					Union1(ho_SelectedRegions6, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_ConnectedRegions7, 2.1);
					Connection(ho_ConnectedRegions7, &ho_ConnectedRegions7);
					SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions7, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((HTuple(280).Append(0)).Append(0)), ((HTuple(99999).Append(4.9)).Append(15)));
					SelectShape(ho_SelectedRegions7, &ho_SelectedRegions, "rectangularity",
						"and", 0.3, 1);
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("49"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "49");
					Difference(ho_SelectedRegions7, ho_SelectedRegions, &ho_RegionDifference
						);
					ConcatObj(ho_RegionDifference, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 3, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
					RankRect(ho_ImageConverted, &ho_ImageRank, 15, 15, 55);
					//检测大的压伤
					ZoomImageFactor(ho_ImageRank, &ho_ImageZoomed, 0.5, 0.5, "constant");
					MedianRect(ho_ImageZoomed, &ho_ImageMedian2, 3, 3);
					MedianRect(ho_ImageZoomed, &ho_ImageMedian3, 95, 95);
					ZoomRegion(ho_RegionDifference12, &ho_RegionZoom, 0.5, 0.5);
					ErosionRectangle1(ho_RegionZoom, &ho_RegionErosion, 21, 21);

					DynThreshold(ho_ImageMedian2, ho_ImageMedian3, &ho_RegionDynThresh2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("der_black_value"),
						"dark");
					Intersection(ho_RegionDynThresh2, ho_RegionErosion, &ho_RegionIntersection
						);
					Connection(ho_RegionIntersection, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions4, "area", "and",
						1100, 99999);
					SelectGray(ho_SelectedRegions4, ho_ImageZoomed, &ho_SelectedRegions5, "mean",
						"and", 0, 88);
					ZoomRegion(ho_SelectedRegions5, &ho_RegionZoom1, 2, 2);
					ConcatObj(ho_RegionZoom1, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions287, (HTuple("area").Append("ratio")),
						"and", (HTuple(6150).Append(15)), (HTuple(99999).Append(250)));
					ZoomRegion(ho_SelectedRegions287, &ho_RegionZoom2, 2, 2);
					ConcatObj(ho_RegionZoom2, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					//检测白色缺陷
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh1, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_light"),
						"light");
					Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_white_area")).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_ratio_value")),
						(HTuple(99999).Append(5.5)));
					ConcatObj(ho_SelectedRegions2, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

					//检测大的亮白（灰度240+）
					Threshold(ho_ImageMedian, &ho_Region26, 230, 255);
					Connection(ho_Region26, &ho_ConnectedRegions92);
					SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions106, "area", "and",
						250, 49999);
					CountObj(ho_SelectedRegions106, &hv_Number);
					if (0 != hv_Number)
					{
						Union1(ho_SelectedRegions106, &ho_RegionUnion2);
						AreaCenter(ho_RegionUnion2, &hv_Area, &hv_Row, &hv_Column);
						if (0 != (int(hv_Area >= 1800)))
						{
							ConcatObj(ho_SelectedRegions106, (*hv_dt).TupleGetDictObject("46"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "46");
						}
						else if (0 != (HTuple(int(hv_Area>500)).TupleAnd(int(hv_Area<1800))))
						{
							ConcatObj(ho_SelectedRegions106, (*hv_dt).TupleGetDictObject("51"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "51");
						}
					}
					//长浅黑
					VarThreshold(ho_ImageMedian, &ho_Region107, 50, 25, 0.2, 19, "dark");
					Connection(ho_Region107, &ho_ConnectedRegions152);
					SelectShape(ho_ConnectedRegions152, &ho_SelectedRegions179, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((HTuple(1080).Append(0)).Append(0)), ((HTuple(99999).Append(20)).Append(17)));
					CountObj(ho_SelectedRegions179, &hv_Number2);
					if (0 != (int(hv_Number2>9)))
					{
						ConcatObj(ho_SelectedRegions179, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					}
					//长横黑
					VarThreshold(ho_ImageMedian, &ho_Region, 1, 35, 0.2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("var_dark_value"),
						"dark");
					Connection(ho_Region, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, (HTuple("area").Append("ratio")),
						"and", (HTuple(50).Append(0)), (HTuple(99999).Append(1.3)));
					Union1(ho_SelectedRegions1, &ho_RegionUnion);
					ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing, 36, 1);
					Connection(ho_RegionClosing, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions3, (HTuple("area").Append("width")),
						"and", (HTuple(150).Append(190)), (HTuple(99999).Append(9999)));
					SelectGray(ho_SelectedRegions3, ho_ImageReduced17, &ho_SelectedRegions8,
						"mean", "and", 0, 115);
					ConcatObj(ho_SelectedRegions8, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					//刀纹
					ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing2, 16, 16);
					Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions9, (HTuple("area").Append("anisometry")),
						"and", (HTuple(250).Append(8)), (HTuple(99999).Append(50)));
					Union1(ho_SelectedRegions9, &ho_RegionUnion3);
					CountObj(ho_RegionUnion3, &hv_Number1);
					if (0 != hv_Number1)
					{
						AreaCenter(ho_RegionUnion3, &hv_Area1, &hv_Row1, &hv_Column1);
						if (0 != (int(hv_Area1>20000)))
						{
							ConcatObj(ho_SelectedRegions9, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
						}
					}
					//检测未见光
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing25, 2, 2);
					RankRect(ho_ImageClosing25, &ho_ImageRank1, 15, 15, 5);
					AutoThreshold(ho_ImageRank1, &ho_Regions3, 1.5);
					Connection(ho_Regions3, &ho_ConnectedRegions133);
					SelectShape(ho_ConnectedRegions133, &ho_SelectedRegions165, ((HTuple("area").Append("width")).Append("height")),
						"and", ((HTuple(15000).Append(0)).Append(0)), ((HTuple(9799999).Append(1800)).Append(450)));
					SelectGray(ho_SelectedRegions165, ho_Image, &ho_SelectedRegions171, "mean",
						"and", 0, 92);
					ClosingRectangle1(ho_RegionDifference12, &ho_RegionClosing60, 500, 1500);
					Difference(ho_RegionClosing60, ho_RegionDifference12, &ho_RegionDifference61
						);
					Connection(ho_RegionDifference61, &ho_ConnectedRegions134);
					SelectShape(ho_ConnectedRegions134, &ho_SelectedRegions166, (HTuple("area").Append("column")),
						"and", (HTuple(133350).Append(0)), (HTuple(93339999).Append(1600)));

					OpeningRectangle1(ho_SelectedRegions166, &ho_RegionOpening48, 16, 3);
					DilationRectangle1(ho_RegionOpening48, &ho_RegionDilation48, 400, 900);
					Difference(ho_RegionDilation48, ho_RegionOpening48, &ho_RegionDifference62
						);
					Intersection(ho_SelectedRegions171, ho_RegionDifference62, &ho_RegionIntersection13
						);
					//YJH
					ErosionRectangle1(ho_RegionOpening48, &ho_RegionErosion6, 1, 350);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved61, -700, 30);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved62, 700, 30);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved63, 1, 1500);
					Intensity(ho_RegionMoved61, ho_ImageRank1, &hv_Mean6, &hv_Deviation6);
					Intensity(ho_RegionMoved62, ho_ImageRank1, &hv_Mean7, &hv_Deviation7);
					Intensity(ho_RegionMoved63, ho_ImageRank1, &hv_Mean8, &hv_Deviation8);
					if (0 != (int((hv_Mean8 - hv_Mean6)>40)))
					{
						ConcatObj(ho_RegionMoved61, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
					}
					if (0 != (int((hv_Mean8 - hv_Mean7)>40)))
					{
						ConcatObj(ho_RegionMoved62, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
					}
					ConcatObj(ho_RegionIntersection13, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
				}
				if (0 != (int(hv_Number54 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//检测拉胶
				GenRectangle1(&ho_ROI_0, 1399.68, 3649.22, 1871.65, 3881.7);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced33);
				Threshold(ho_ImageReduced33, &ho_Region91, 0, 100);
				Connection(ho_Region91, &ho_ConnectedRegions129);
				SelectShape(ho_ConnectedRegions129, &ho_SelectedRegions161, "area", "and",
					11150, 299999);
				ClosingRectangle1(ho_SelectedRegions161, &ho_RegionClosing54, 90, 10);
				ReduceDomain(ho_Image, ho_RegionClosing54, &ho_ImageReduced95);
				Threshold(ho_ImageReduced95, &ho_Region36, 140, 255);
				Connection(ho_Region36, &ho_ConnectedRegions49);
				SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions53, "area", "and",
					900, 4900);
				CountObj(ho_SelectedRegions53, &hv_Number2);
				if (0 != (int(hv_Number2<2)))
				{
					ConcatObj(ho_SelectedRegions53, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
				}
				//BLC
				if (0 != (int(hv_Number2 == 2)))
				{
					ShapeTrans(ho_SelectedRegions53, &ho_RegionTrans11, "rectangle2");
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions57, "phi", "and",
						HTuple(86.2).TupleRad(), HTuple(93.8).TupleRad());
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions58, "phi", "and",
						HTuple(-93.8).TupleRad(), HTuple(-86.2).TupleRad());
					Union2(ho_SelectedRegions57, ho_SelectedRegions58, &ho_RegionUnion20);
					Difference(ho_SelectedRegions53, ho_RegionUnion20, &ho_RegionDifference26
						);
					ConcatObj(ho_RegionDifference26, (*hv_dt).TupleGetDictObject("67"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "67");
				}
				GenRectangle1(&ho_ROI_0, 1317.94, 3445.29, 2034.97, 3623.32);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced44);
				Threshold(ho_ImageReduced44, &ho_Region55, 195, 255);
				Connection(ho_Region55, &ho_ConnectedRegions67);
				SelectShape(ho_ConnectedRegions67, &ho_SelectedRegions68, "area", "and",
					10050, 99999);
				ClosingRectangle1(ho_SelectedRegions68, &ho_RegionClosing15, 45, 30);
				ErosionRectangle1(ho_RegionClosing15, &ho_RegionErosion16, 11, 5);
				ReduceDomain(ho_ImageReduced44, ho_RegionErosion16, &ho_ImageReduced45);
				GrayClosingRect(ho_ImageReduced45, &ho_ImageClosing8, 21, 21);
				SubImage(ho_ImageReduced45, ho_ImageClosing8, &ho_ImageSub13, 1, 128);
				Threshold(ho_ImageSub13, &ho_Region56, 0, 50);
				Connection(ho_Region56, &ho_ConnectedRegions68);
				SelectShape(ho_ConnectedRegions68, &ho_SelectedRegions69, "area", "and",
					50, 99999);
				ConcatObj(ho_SelectedRegions69, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
				CountObj(ho_SelectedRegions69, &hv_Number88);
				if (0 != (int(hv_Number88 == 0)))
				{
					ClosingRectangle1(ho_SelectedRegions68, &ho_RegionClosing103, 20, 200);
					Difference(ho_RegionClosing103, ho_RegionClosing15, &ho_RegionDifference86
						);
					OpeningRectangle1(ho_RegionDifference86, &ho_RegionOpening81, 8, 5);
					Connection(ho_RegionOpening81, &ho_ConnectedRegions218);
					SelectShape(ho_ConnectedRegions218, &ho_SelectedRegions266, "area", "and",
						2000, 99999);
					CountObj(ho_SelectedRegions266, &hv_Number89);
					//选取突出的两个孔
					if (0 != (int(hv_Number89 == 2)))
					{
						Union1(ho_SelectedRegions266, &ho_RegionUnion68);
						ErosionRectangle1(ho_RegionUnion68, &ho_RegionErosion46, 5, 5);
						ReduceDomain(ho_Image, ho_RegionErosion46, &ho_ImageReduced145);
						Threshold(ho_ImageReduced145, &ho_Region140, 165, 255);
						Connection(ho_Region140, &ho_ConnectedRegions219);
						SelectShape(ho_ConnectedRegions219, &ho_SelectedRegions267, "area", "and",
							400, 2900);
						ConcatObj(ho_SelectedRegions267, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					}
				}

				//YJH新增B基准
				GenRectangle1(&ho_ROI_0, 24.0662, 3450.06, 3052.49, 4054.1);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced111);
				ScaleImage(ho_ImageReduced111, &ho_ImageScaled6, 5, -150);
				Threshold(ho_ImageScaled6, &ho_Region104, 228, 255);
				Connection(ho_Region104, &ho_ConnectedRegions160);
				SelectShape(ho_ConnectedRegions160, &ho_SelectedRegions195, (HTuple("area").Append("height")),
					"and", (HTuple(9900).Append(1000)), (HTuple(59999).Append(4000)));
				ClosingRectangle1(ho_SelectedRegions195, &ho_RegionClosing75, 2, 55);
				MoveRegion(ho_RegionClosing75, &ho_RegionMoved66, 0, -95);
				DilationRectangle1(ho_RegionMoved66, &ho_RegionDilation52, 110, 1);
				ReduceDomain(ho_Image, ho_RegionDilation52, &ho_ImageReduced5);
				ScaleImage(ho_ImageReduced5, &ho_ImageScaled7, 25, -400);
				MeanImage(ho_ImageScaled7, &ho_ImageMean6, 17, 47);
				DynThreshold(ho_ImageScaled7, ho_ImageMean6, &ho_RegionDynThresh8, 65, "dark");
				Connection(ho_RegionDynThresh8, &ho_ConnectedRegions161);
				ClosingCircle(ho_ConnectedRegions161, &ho_RegionClosing76, 4.5);
				SelectShape(ho_RegionClosing76, &ho_SelectedRegions196, "area", "and", 900,
					2999);
				ConcatObj(ho_SelectedRegions196, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//jl add test RT
				GenRectangle1(&ho_ROI_0, 2.42571, 3934.59, 3068.57, 4080.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced146);
				Threshold(ho_ImageReduced146, &ho_Region141, 78, 255);
				Connection(ho_Region141, &ho_ConnectedRegions220);
				SelectShape(ho_ConnectedRegions220, &ho_SelectedRegions268, "height", "and",
					2050, 99999);
				CountObj(ho_SelectedRegions268, &hv_Number90);
				if (0 != (int(hv_Number90 == 1)))
				{
					OpeningRectangle1(ho_SelectedRegions268, &ho_RegionOpening82, 4, 60);
					Difference(ho_SelectedRegions268, ho_RegionOpening82, &ho_RegionDifference87
						);
					Connection(ho_RegionDifference87, &ho_ConnectedRegions221);
					OpeningRectangle1(ho_ConnectedRegions221, &ho_RegionOpening83, 2, 2);
					SelectShape(ho_RegionOpening83, &ho_SelectedRegions269, (((HTuple("area").Append("ratio")).Append("rectangularity")).Append("row")),
						"and", (((HTuple(550).Append(5)).Append(0.2)).Append(350)), (((HTuple(99999).Append(11)).Append(0.7)).Append(2800)));
					ConcatObj(ho_SelectedRegions269, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				GenRectangle1(&ho_ROI_0, 31.6829, 1365.81, 605.123, 1881.48);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 72);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.5)), (HTuple(99999).Append(1)));
				CountObj(ho_SelectedRegions55, &hv_Number55);
				if (0 != hv_Number55)
				{
					AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
					DilationCircle(ho_SelectedRegions55, &ho_RegionDilation5, 23.5);
					hv_R = hv_Row6 - 393;
					hv_C = hv_Column6 - 1682;
					//镭雕区域
					GenRectangle1(&ho_ROI_0, 2.975, 0.47, 3200.57, 4157.21);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region33, 60, 250);
					ClosingCircle(ho_Region33, &ho_Region33, 9.5);
					Connection(ho_Region33, &ho_ConnectedRegions36);

					SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions36, "area", "and",
						5e5, 9e6);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing27, 50, 20);
					Union1(ho_RegionClosing27, &ho_RegionUnion10);
					ErosionRectangle1(ho_RegionUnion10, &ho_RegionErosion11, 51, 61);

					GenRectangle1(&ho_ROI_0, 200.157, 1500.99, 610.861, 1886.42);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced15);
					MedianRect(ho_ImageReduced15, &ho_ImageMedian16, 19, 19);
					Threshold(ho_ImageMedian16, &ho_Region16, 0, 69);
					Connection(ho_Region16, &ho_ConnectedRegions18);
					SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions15, (HTuple("area").Append("circularity")),
						"and", (HTuple(6150).Append(0.5)), (HTuple(99999).Append(1)));
					DilationCircle(ho_SelectedRegions15, &ho_RegionDilation8, 38.5);
					MoveRegion(ho_RegionDilation8, &ho_RegionMoved10, 0, 0);
					Difference(ho_RegionErosion11, ho_RegionMoved10, &ho_RegionDifference19
						);
					ReduceDomain(ho_Image, ho_RegionDifference19, &ho_ImageReduced17);
					//*镭雕
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 37);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictObject(ho_RegionDifference19, hv_dd, "region");
					Det_LD_Region(hv_dd, (*hv_dt));
					//检测边沿缺陷
					ClosingRectangle1(ho_RegionUnion10, &ho_RegionClosing115, 150, 1);
					ErosionRectangle1(ho_RegionClosing115, &ho_RegionErosion54, 120, 120);
					Difference(ho_RegionClosing115, ho_RegionErosion54, &ho_RegionDifference93
						);
					Difference(ho_RegionClosing115, ho_RegionUnion10, &ho_RegionDifference94
						);
					Intersection(ho_RegionDifference94, ho_RegionDifference93, &ho_RegionIntersection31
						);
					Connection(ho_RegionIntersection31, &ho_ConnectedRegions247);
					SelectShape(ho_ConnectedRegions247, &ho_SelectedRegions300, (HTuple("area").Append("height")),
						"and", (HTuple(1500).Append(20)), (HTuple(99999).Append(150)));
					ConcatObj(ho_SelectedRegions300, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

					//检测未见光
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing25, 2, 2);
					RankRect(ho_ImageClosing25, &ho_ImageRank1, 18, 18, 4);
					AutoThreshold(ho_ImageRank1, &ho_Regions3, 1.3);
					Connection(ho_Regions3, &ho_ConnectedRegions133);
					SelectShape(ho_ConnectedRegions133, &ho_SelectedRegions165, (HTuple("area").Append("height")),
						"and", (HTuple(10000).Append(0)), (HTuple(799999).Append(600)));
					SelectGray(ho_SelectedRegions165, ho_Image, &ho_SelectedRegions167, "mean",
						"and", 0, 96);
					ClosingRectangle1(ho_RegionDifference19, &ho_RegionClosing60, 500, 1500);
					Difference(ho_RegionClosing60, ho_RegionDifference19, &ho_RegionDifference61
						);
					Connection(ho_RegionDifference61, &ho_ConnectedRegions134);
					SelectShape(ho_ConnectedRegions134, &ho_SelectedRegions166, (HTuple("area").Append("column")),
						"and", (HTuple(133350).Append(2500)), (HTuple(93339999).Append(4600)));
					OpeningRectangle1(ho_SelectedRegions166, &ho_RegionOpening48, 16, 3);
					DilationRectangle1(ho_RegionOpening48, &ho_RegionDilation48, 400, 900);
					Difference(ho_RegionDilation48, ho_RegionOpening48, &ho_RegionDifference62
						);
					Intersection(ho_SelectedRegions167, ho_RegionDifference62, &ho_RegionIntersection13
						);
					ConcatObj(ho_RegionIntersection13, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
					//YJH
					ErosionRectangle1(ho_RegionOpening48, &ho_RegionErosion6, 1, 390);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved61, -650, -30);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved62, 650, -30);
					MoveRegion(ho_RegionErosion6, &ho_RegionMoved63, -1301, -2801);
					Intensity(ho_RegionMoved61, ho_ImageRank1, &hv_Mean6, &hv_Deviation6);
					Intensity(ho_RegionMoved62, ho_ImageRank1, &hv_Mean7, &hv_Deviation7);
					Intensity(ho_RegionMoved63, ho_ImageRank1, &hv_Mean8, &hv_Deviation8);
					if (0 != (int((hv_Mean8 - hv_Mean6)>40)))
					{
						ConcatObj(ho_RegionMoved61, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
					}
					if (0 != (int((hv_Mean8 - hv_Mean7)>40)))
					{
						ConcatObj(ho_RegionMoved62, (*hv_dt).TupleGetDictObject("48"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "48");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, -32.6829, 40.46, 692.894, 619.751);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 45);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					86150, 399999);
				CountObj(ho_SelectedRegions55, &hv_Number94);
				if (0 != hv_Number94)
				{
					SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
						&hv_Column21);

					hv_R = hv_Row21 - 536;
					hv_C = hv_Column21 - 409;
					hv_R1.Clear();
					hv_R1[0] = 23;
					hv_R1[1] = 102;
					hv_R1[2] = 213;
					hv_R1[3] = 536;
					hv_R1[4] = 558;
					hv_R1[5] = 557;
					hv_R1[6] = 501;
					hv_R1[7] = 474;
					hv_R1[8] = 481;
					hv_R1[9] = 519;
					hv_R1[10] = 577;
					hv_R1[11] = 667;
					hv_R1[12] = 754;
					hv_R1[13] = 935;
					hv_R1[14] = 984;
					hv_R1[15] = 925;
					hv_R1[16] = 727;
					hv_R1[17] = 714;
					hv_R1[18] = 558;
					hv_R1[19] = 545;
					hv_R1[20] = 411;
					hv_R1[21] = 326;
					hv_R1[22] = 23;
					hv_R1[23] = 23;
					hv_C1.Clear();
					hv_C1[0] = 1598;
					hv_C1[1] = 1563;
					hv_C1[2] = 1578;
					hv_C1[3] = 1417;
					hv_C1[4] = 1370;
					hv_C1[5] = 1233;
					hv_C1[6] = 1125;
					hv_C1[7] = 1026;
					hv_C1[8] = 881;
					hv_C1[9] = 788;
					hv_C1[10] = 718;
					hv_C1[11] = 660;
					hv_C1[12] = 640;
					hv_C1[13] = 655;
					hv_C1[14] = 626;
					hv_C1[15] = 599;
					hv_C1[16] = 390;
					hv_C1[17] = 17;
					hv_C1[18] = 15;
					hv_C1[19] = 239;
					hv_C1[20] = 392;
					hv_C1[21] = 423;
					hv_C1[22] = 430;
					hv_C1[23] = 1598;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 23;
					hv_R2[1] = 505;
					hv_R2[2] = 505;
					hv_R2[3] = 316;
					hv_R2[4] = 226;
					hv_R2[5] = 184;
					hv_R2[6] = 134;
					hv_R2[7] = 23;
					hv_R2[8] = 23;
					hv_C2.Clear();
					hv_C2[0] = 4077;
					hv_C2[1] = 4077;
					hv_C2[2] = 1588;
					hv_C2[3] = 1688;
					hv_C2[4] = 1682;
					hv_C2[5] = 1627;
					hv_C2[6] = 1602;
					hv_C2[7] = 1660;
					hv_C2[8] = 4077;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					hv_R3.Clear();
					hv_R3[0] = 259;
					hv_R3[1] = 292;
					hv_R3[2] = 529;
					hv_R3[3] = 549;
					hv_R3[4] = 603;
					hv_R3[5] = 719;
					hv_R3[6] = 954;
					hv_R3[7] = 1332;
					hv_R3[8] = 1750;
					hv_R3[9] = 2195;
					hv_R3[10] = 2466;
					hv_R3[11] = 2786;
					hv_R3[12] = 3051;
					hv_R3[13] = 3051;
					hv_R3[14] = 1061;
					hv_R3[15] = 997;
					hv_R3[16] = 864;
					hv_R3[17] = 750;
					hv_R3[18] = 677;
					hv_R3[19] = 614;
					hv_R3[20] = 564;
					hv_R3[21] = 531;
					hv_R3[22] = 530;
					hv_R3[23] = 610;
					hv_R3[24] = 598;
					hv_R3[25] = 527;
					hv_R3[26] = 386;
					hv_R3[27] = 259;
					hv_C3.Clear();
					hv_C3[0] = 1622;
					hv_C3[1] = 1642;
					hv_C3[2] = 1533;
					hv_C3[3] = 1498;
					hv_C3[4] = 1467;
					hv_C3[5] = 1463;
					hv_C3[6] = 1400;
					hv_C3[7] = 1346;
					hv_C3[8] = 1343;
					hv_C3[9] = 1407;
					hv_C3[10] = 1487;
					hv_C3[11] = 1624;
					hv_C3[12] = 1780;
					hv_C3[13] = 766;
					hv_C3[14] = 772;
					hv_C3[15] = 760;
					hv_C3[16] = 689;
					hv_C3[17] = 691;
					hv_C3[18] = 721;
					hv_C3[19] = 770;
					hv_C3[20] = 838;
					hv_C3[21] = 924;
					hv_C3[22] = 1019;
					hv_C3[23] = 1202;
					hv_C3[24] = 1441;
					hv_C3[25] = 1495;
					hv_C3[26] = 1550;
					hv_C3[27] = 1622;
					GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
					hv_R4.Clear();
					hv_R4[0] = 783;
					hv_R4[1] = 787;
					hv_R4[2] = 804;
					hv_R4[3] = 999;
					hv_R4[4] = 1118;
					hv_R4[5] = 1300;
					hv_R4[6] = 1338;
					hv_R4[7] = 1357;
					hv_R4[8] = 1359;
					hv_R4[9] = 1380;
					hv_R4[10] = 1445;
					hv_R4[11] = 1446;
					hv_R4[12] = 1565;
					hv_R4[13] = 1584;
					hv_R4[14] = 1601;
					hv_R4[15] = 1593;
					hv_R4[16] = 785;
					hv_R4[17] = 783;
					hv_C4.Clear();
					hv_C4[0] = 33;
					hv_C4[1] = 354;
					hv_C4[2] = 390;
					hv_C4[3] = 574;
					hv_C4[4] = 588;
					hv_C4[5] = 574;
					hv_C4[6] = 555;
					hv_C4[7] = 523;
					hv_C4[8] = 460;
					hv_C4[9] = 408;
					hv_C4[10] = 365;
					hv_C4[11] = 337;
					hv_C4[12] = 311;
					hv_C4[13] = 284;
					hv_C4[14] = 220;
					hv_C4[15] = 14;
					hv_C4[16] = 14;
					hv_C4[17] = 33;
					GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
					hv_R5.Clear();
					hv_R5[0] = 986;
					hv_R5[1] = 1054;
					hv_R5[2] = 1142;
					hv_R5[3] = 3051;
					hv_R5[4] = 3051;
					hv_R5[5] = 2978;
					hv_R5[6] = 2969;
					hv_R5[7] = 2919;
					hv_R5[8] = 2899;
					hv_R5[9] = 2812;
					hv_R5[10] = 2774;
					hv_R5[11] = 2774;
					hv_R5[12] = 2630;
					hv_R5[13] = 2625;
					hv_R5[14] = 2563;
					hv_R5[15] = 2566;
					hv_R5[16] = 2533;
					hv_R5[17] = 2479;
					hv_R5[18] = 1050;
					hv_R5[19] = 986;
					hv_C5.Clear();
					hv_C5[0] = 685;
					hv_C5[1] = 724;
					hv_C5[2] = 731;
					hv_C5[3] = 719;
					hv_C5[4] = 189;
					hv_C5[5] = 182;
					hv_C5[6] = 127;
					hv_C5[7] = 104;
					hv_C5[8] = 137;
					hv_C5[9] = 137;
					hv_C5[10] = 124;
					hv_C5[11] = 68;
					hv_C5[12] = 58;
					hv_C5[13] = 23;
					hv_C5[14] = 24;
					hv_C5[15] = 532;
					hv_C5[16] = 589;
					hv_C5[17] = 620;
					hv_C5[18] = 632;
					hv_C5[19] = 685;
					GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
					hv_R6.Clear();
					hv_R6[0] = 1425;
					hv_R6[1] = 2443;
					hv_R6[2] = 2495;
					hv_R6[3] = 2512;
					hv_R6[4] = 2505;
					hv_R6[5] = 2471;
					hv_R6[6] = 2465;
					hv_R6[7] = 2427;
					hv_R6[8] = 2425;
					hv_R6[9] = 2425;
					hv_R6[10] = 2385;
					hv_R6[11] = 1896;
					hv_R6[12] = 1867;
					hv_R6[13] = 1846;
					hv_R6[14] = 1844;
					hv_R6[15] = 1717;
					hv_R6[16] = 1712;
					hv_R6[17] = 1634;
					hv_R6[18] = 1516;
					hv_R6[19] = 1596;
					hv_R6[20] = 1635;
					hv_R6[21] = 1653;
					hv_R6[22] = 1645;
					hv_R6[23] = 1598;
					hv_R6[24] = 1508;
					hv_R6[25] = 1467;
					hv_R6[26] = 1463;
					hv_R6[27] = 1444;
					hv_R6[28] = 1425;
					hv_C6.Clear();
					hv_C6[0] = 587;
					hv_C6[1] = 577;
					hv_C6[2] = 534;
					hv_C6[3] = 483;
					hv_C6[4] = 14;
					hv_C6[5] = 14;
					hv_C6[6] = 39;
					hv_C6[7] = 39;
					hv_C6[8] = 115;
					hv_C6[9] = 265;
					hv_C6[10] = 301;
					hv_C6[11] = 304;
					hv_C6[12] = 294;
					hv_C6[13] = 259;
					hv_C6[14] = 16;
					hv_C6[15] = 14;
					hv_C6[16] = 293;
					hv_C6[17] = 369;
					hv_C6[18] = 395;
					hv_C6[19] = 395;
					hv_C6[20] = 416;
					hv_C6[21] = 451;
					hv_C6[22] = 542;
					hv_C6[23] = 575;
					hv_C6[24] = 574;
					hv_C6[25] = 538;
					hv_C6[26] = 461;
					hv_C6[27] = 563;
					hv_C6[28] = 587;
					GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
					Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
					Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
					Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
					Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
					MoveRegion(ho_RegionUnion60, &ho_RegionMoved33, hv_R, hv_C);
					ErosionRectangle1(ho_RegionMoved33, &ho_RegionMoved33, 47, 59);
					//jl add 刀纹检测
					ClosingRectangle1(ho_RegionMoved33, &ho_RegionClosing111, 150, 150);
					Difference(ho_RegionClosing111, ho_RegionMoved33, &ho_RegionDifference91
						);
					OpeningRectangle1(ho_RegionDifference91, &ho_RegionOpening86, 50, 500);
					Connection(ho_RegionOpening86, &ho_ConnectedRegions236);
					CountObj(ho_ConnectedRegions236, &hv_Number93);
					if (0 != (int(hv_Number93 == 2)))
					{
						RegionFeatures(ho_ConnectedRegions236, "height", &hv_Value34);
						TupleMax(hv_Value34, &hv_Max22);
						SelectShape(ho_ConnectedRegions236, &ho_SelectedRegions286, "height",
							"and", hv_Max22, hv_Max22);
						DilationRectangle1(ho_SelectedRegions286, &ho_SelectedRegions286, 10,
							1);
						ReduceDomain(ho_Image, ho_SelectedRegions286, &ho_ImageReduced155);
						GrayClosingRect(ho_ImageReduced155, &ho_ImageClosing24, 47, 3);
						SubImage(ho_ImageReduced155, ho_ImageClosing24, &ho_ImageSub10, 1, 128);
						Threshold(ho_ImageSub10, &ho_Region94, 0, 60);
						OpeningRectangle1(ho_Region94, &ho_RegionOpening33, 4, 2);
						Connection(ho_RegionOpening33, &ho_ConnectedRegions131);
						SelectShape(ho_ConnectedRegions131, &ho_SelectedRegions163, (HTuple("area").Append("width")),
							"and", (HTuple(50).Append(9)), (HTuple(1999).Append(99)));
						Union1(ho_SelectedRegions163, &ho_RegionUnion53);
						CountObj(ho_RegionUnion53, &hv_Number62);
						if (0 != hv_Number62)
						{
							AreaCenter(ho_RegionUnion53, &hv_Area10, &hv_Row10, &hv_Column10);
							if (0 != (int(hv_Area10>4500)))
							{
								ConcatObj(ho_RegionUnion53, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
							}

						}
					}

					ReduceDomain(ho_Image, ho_RegionMoved33, &ho_ImageReduced17);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 26);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 22);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 299);
					SetDictObject(ho_RegionMoved33, hv_dd, "region");
					Det_LD_Region(hv_dd, (*hv_dt));

					//jl add 缺口检测

					GenRectangle1(&ho_ROI_0, 1278.04, 1114.2, 2839.32, 2606.31);
					MoveRegion(ho_ROI_0, &ho_RegionMoved91, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved91, &ho_ImageReduced163);
					ScaleImage(ho_ImageReduced163, &ho_ImageScaled10, 1.01, -20);
					Threshold(ho_ImageScaled10, &ho_Region156, 0, 18);
					Connection(ho_Region156, &ho_ConnectedRegions249);
					SelectShape(ho_ConnectedRegions249, &ho_SelectedRegions304, "area", "and",
						5e5, 9999999);
					ClosingRectangle1(ho_SelectedRegions304, &ho_RegionClosing117, 900, 50);
					MoveRegion(ho_RegionClosing117, &ho_RegionMoved92, 0, 100);
					Difference(ho_RegionClosing117, ho_RegionMoved92, &ho_RegionDifference96
						);
					Difference(ho_RegionMoved91, ho_RegionClosing117, &ho_RegionDifference97
						);
					ClosingCircle(ho_RegionDifference97, &ho_RegionClosing118, 1003.5);
					Difference(ho_RegionClosing118, ho_RegionDifference97, &ho_RegionDifference98
						);
					OpeningCircle(ho_RegionDifference98, &ho_RegionOpening89, 3.5);
					Connection(ho_RegionOpening89, &ho_ConnectedRegions250);
					SelectShape(ho_ConnectedRegions250, &ho_SelectedRegions305, "area", "and",
						2000, 99999);
					Intersection(ho_SelectedRegions305, ho_RegionDifference96, &ho_RegionIntersection32
						);
					ConcatObj(ho_RegionIntersection32, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

				}
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 101.9, 1278.04, 1465.28, 2354.7);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 4, 4);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					86150, 999999);
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				hv_R = hv_Row11 - 772;
				hv_C = hv_Column11 - 1628;

				//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 82, 150)
				//opening_rectangle1 (Region33, RegionOpening42, 1, 1)
				//connection (RegionOpening42, ConnectedRegions36)

				//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 2e4, 9e6)
				//closing_rectangle1 (SelectedRegions36, RegionClosing27, 50, 20)

				//erosion_rectangle1 (RegionClosing27, RegionErosion11, 51, 51)
				//count_obj (RegionErosion11, Number14)
				//for i := 1 to Number14 by 1
				//select_obj (RegionErosion11, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 28;
				hv_R1[1] = 294;
				hv_R1[2] = 347;
				hv_R1[3] = 362;
				hv_R1[4] = 28;
				hv_R1[5] = 28;
				hv_C1.Clear();
				hv_C1[0] = 819;
				hv_C1[1] = 810;
				hv_C1[2] = 763;
				hv_C1[3] = 699;
				hv_C1[4] = 702;
				hv_C1[5] = 819;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 28;
				hv_R2[1] = 1300;
				hv_R2[2] = 1283;
				hv_R2[3] = 1283;
				hv_R2[4] = 1310;
				hv_R2[5] = 1382;
				hv_R2[6] = 1351;
				hv_R2[7] = 424;
				hv_R2[8] = 419;
				hv_R2[9] = 337;
				hv_R2[10] = 28;
				hv_R2[11] = 28;
				hv_C2.Clear();
				hv_C2[0] = 892;
				hv_C2[1] = 890;
				hv_C2[2] = 857;
				hv_C2[3] = 757;
				hv_C2[4] = 741;
				hv_C2[5] = 739;
				hv_C2[6] = 695;
				hv_C2[7] = 701;
				hv_C2[8] = 800;
				hv_C2[9] = 878;
				hv_C2[10] = 881;
				hv_C2[11] = 892;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 28;
				hv_R3[1] = 265;
				hv_R3[2] = 350;
				hv_R3[3] = 377;
				hv_R3[4] = 377;
				hv_R3[5] = 479;
				hv_R3[6] = 513;
				hv_R3[7] = 513;
				hv_R3[8] = 499;
				hv_R3[9] = 450;
				hv_R3[10] = 381;
				hv_R3[11] = 382;
				hv_R3[12] = 342;
				hv_R3[13] = 266;
				hv_R3[14] = 243;
				hv_R3[15] = 247;
				hv_R3[16] = 280;
				hv_R3[17] = 368;
				hv_R3[18] = 413;
				hv_R3[19] = 413;
				hv_R3[20] = 398;
				hv_R3[21] = 363;
				hv_R3[22] = 291;
				hv_R3[23] = 245;
				hv_R3[24] = 234;
				hv_R3[25] = 312;
				hv_R3[26] = 314;
				hv_R3[27] = 796;
				hv_R3[28] = 811;
				hv_R3[29] = 882;
				hv_R3[30] = 1280;
				hv_R3[31] = 1275;
				hv_R3[32] = 1230;
				hv_R3[33] = 1192;
				hv_R3[34] = 1035;
				hv_R3[35] = 921;
				hv_R3[36] = 810;
				hv_R3[37] = 759;
				hv_R3[38] = 748;
				hv_R3[39] = 766;
				hv_R3[40] = 810;
				hv_R3[41] = 900;
				hv_R3[42] = 1023;
				hv_R3[43] = 1957;
				hv_R3[44] = 2045;
				hv_R3[45] = 2151;
				hv_R3[46] = 2639;
				hv_R3[47] = 2772;
				hv_R3[48] = 2887;
				hv_R3[49] = 2972;
				hv_R3[50] = 3015;
				hv_R3[51] = 3046;
				hv_R3[52] = 3046;
				hv_R3[53] = 2993;
				hv_R3[54] = 2964;
				hv_R3[55] = 2964;
				hv_R3[56] = 2976;
				hv_R3[57] = 2753;
				hv_R3[58] = 2729;
				hv_R3[59] = 2695;
				hv_R3[60] = 2680;
				hv_R3[61] = 2643;
				hv_R3[62] = 2590;
				hv_R3[63] = 1603;
				hv_R3[64] = 1532;
				hv_R3[65] = 1492;
				hv_R3[66] = 1480;
				hv_R3[67] = 1315;
				hv_R3[68] = 1244;
				hv_R3[69] = 1222;
				hv_R3[70] = 1222;
				hv_R3[71] = 1252;
				hv_R3[72] = 116;
				hv_R3[73] = 28;
				hv_R3[74] = 28;
				hv_C3.Clear();
				hv_C3[0] = 1323;
				hv_C3[1] = 1334;
				hv_C3[2] = 1404;
				hv_C3[3] = 1473;
				hv_C3[4] = 1534;
				hv_C3[5] = 1533;
				hv_C3[6] = 1560;
				hv_C3[7] = 1663;
				hv_C3[8] = 1691;
				hv_C3[9] = 1719;
				hv_C3[10] = 1719;
				hv_C3[11] = 2345;
				hv_C3[12] = 2451;
				hv_C3[13] = 2535;
				hv_C3[14] = 2617;
				hv_C3[15] = 3365;
				hv_C3[16] = 3340;
				hv_C3[17] = 3340;
				hv_C3[18] = 3379;
				hv_C3[19] = 3489;
				hv_C3[20] = 3508;
				hv_C3[21] = 3524;
				hv_C3[22] = 3524;
				hv_C3[23] = 3495;
				hv_C3[24] = 3542;
				hv_C3[25] = 3638;
				hv_C3[26] = 3660;
				hv_C3[27] = 3665;
				hv_C3[28] = 3525;
				hv_C3[29] = 3466;
				hv_C3[30] = 3463;
				hv_C3[31] = 3371;
				hv_C3[32] = 3317;
				hv_C3[33] = 3299;
				hv_C3[34] = 3298;
				hv_C3[35] = 3259;
				hv_C3[36] = 3159;
				hv_C3[37] = 3042;
				hv_C3[38] = 1908;
				hv_C3[39] = 1819;
				hv_C3[40] = 1738;
				hv_C3[41] = 1655;
				hv_C3[42] = 1607;
				hv_C3[43] = 1594;
				hv_C3[44] = 1554;
				hv_C3[45] = 1536;
				hv_C3[46] = 1535;
				hv_C3[47] = 1564;
				hv_C3[48] = 1632;
				hv_C3[49] = 1734;
				hv_C3[50] = 1828;
				hv_C3[51] = 2006;
				hv_C3[52] = 1399;
				hv_C3[53] = 1393;
				hv_C3[54] = 1358;
				hv_C3[55] = 1255;
				hv_C3[56] = 1235;
				hv_C3[57] = 1231;
				hv_C3[58] = 1242;
				hv_C3[59] = 1290;
				hv_C3[60] = 1411;
				hv_C3[61] = 1452;
				hv_C3[62] = 1475;
				hv_C3[63] = 1477;
				hv_C3[64] = 1456;
				hv_C3[65] = 1409;
				hv_C3[66] = 1211;
				hv_C3[67] = 1209;
				hv_C3[68] = 1165;
				hv_C3[69] = 1117;
				hv_C3[70] = 1015;
				hv_C3[71] = 958;
				hv_C3[72] = 957;
				hv_C3[73] = 960;
				hv_C3[74] = 1323;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 28;
				hv_R4[1] = 220;
				hv_R4[2] = 188;
				hv_R4[3] = 171;
				hv_R4[4] = 147;
				hv_R4[5] = 29;
				hv_R4[6] = 28;
				hv_C4.Clear();
				hv_C4[0] = 3665;
				hv_C4[1] = 3665;
				hv_C4[2] = 3617;
				hv_C4[3] = 3588;
				hv_C4[4] = 3615;
				hv_C4[5] = 3615;
				hv_C4[6] = 3665;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
				hv_R5.Clear();
				hv_R5[0] = 621;
				hv_R5[1] = 653;
				hv_R5[2] = 654;
				hv_R5[3] = 803;
				hv_R5[4] = 800;
				hv_R5[5] = 621;
				hv_C5.Clear();
				hv_C5[0] = 3723;
				hv_C5[1] = 3804;
				hv_C5[2] = 4070;
				hv_C5[3] = 4070;
				hv_C5[4] = 3723;
				hv_C5[5] = 3723;
				GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
				hv_R6.Clear();
				hv_R6[0] = 876;
				hv_R6[1] = 882;
				hv_R6[2] = 1681;
				hv_R6[3] = 1693;
				hv_R6[4] = 1690;
				hv_R6[5] = 1653;
				hv_R6[6] = 1542;
				hv_R6[7] = 1362;
				hv_R6[8] = 1353;
				hv_R6[9] = 1286;
				hv_R6[10] = 1280;
				hv_R6[11] = 906;
				hv_R6[12] = 881;
				hv_R6[13] = 876;
				hv_C6.Clear();
				hv_C6[0] = 3774;
				hv_C6[1] = 4070;
				hv_C6[2] = 4070;
				hv_C6[3] = 3858;
				hv_C6[4] = 3583;
				hv_C6[5] = 3571;
				hv_C6[6] = 3485;
				hv_C6[7] = 3482;
				hv_C6[8] = 3517;
				hv_C6[9] = 3541;
				hv_C6[10] = 3557;
				hv_C6[11] = 3555;
				hv_C6[12] = 3602;
				hv_C6[13] = 3774;
				GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
				hv_R7.Clear();
				hv_R7[0] = 1286;
				hv_R7[1] = 1344;
				hv_R7[2] = 1480;
				hv_R7[3] = 1482;
				hv_R7[4] = 1448;
				hv_R7[5] = 1324;
				hv_R7[6] = 1286;
				hv_C7.Clear();
				hv_C7[0] = 1073;
				hv_C7[1] = 1137;
				hv_C7[2] = 1143;
				hv_C7[3] = 1033;
				hv_C7[4] = 958;
				hv_C7[5] = 1007;
				hv_C7[6] = 1073;
				GenRegionPolygonFilled(&ho_Region77, hv_R7, hv_C7);
				hv_R8.Clear();
				hv_R8[0] = 1813;
				hv_R8[1] = 1817;
				hv_R8[2] = 1928;
				hv_R8[3] = 1930;
				hv_R8[4] = 1958;
				hv_R8[5] = 2492;
				hv_R8[6] = 2525;
				hv_R8[7] = 2524;
				hv_R8[8] = 2593;
				hv_R8[9] = 2598;
				hv_R8[10] = 2493;
				hv_R8[11] = 2442;
				hv_R8[12] = 2426;
				hv_R8[13] = 1988;
				hv_R8[14] = 1920;
				hv_R8[15] = 1865;
				hv_R8[16] = 1816;
				hv_R8[17] = 1813;
				hv_C8.Clear();
				hv_C8[0] = 3899;
				hv_C8[1] = 4070;
				hv_C8[2] = 4070;
				hv_C8[3] = 3562;
				hv_C8[4] = 3519;
				hv_C8[5] = 3514;
				hv_C8[6] = 3557;
				hv_C8[7] = 4070;
				hv_C8[8] = 4070;
				hv_C8[9] = 3507;
				hv_C8[10] = 3507;
				hv_C8[11] = 3473;
				hv_C8[12] = 3440;
				hv_C8[13] = 3439;
				hv_C8[14] = 3461;
				hv_C8[15] = 3554;
				hv_C8[16] = 3597;
				hv_C8[17] = 3899;
				GenRegionPolygonFilled(&ho_Region78, hv_R8, hv_C8);
				hv_R9.Clear();
				hv_R9[0] = 2660;
				hv_R9[1] = 2662;
				hv_R9[2] = 3046;
				hv_R9[3] = 3046;
				hv_R9[4] = 2990;
				hv_R9[5] = 2948;
				hv_R9[6] = 2871;
				hv_R9[7] = 2778;
				hv_R9[8] = 2705;
				hv_R9[9] = 2695;
				hv_R9[10] = 2691;
				hv_R9[11] = 2665;
				hv_R9[12] = 2660;
				hv_C9.Clear();
				hv_C9[0] = 4037;
				hv_C9[1] = 4070;
				hv_C9[2] = 4069;
				hv_C9[3] = 3124;
				hv_C9[4] = 3125;
				hv_C9[5] = 3194;
				hv_C9[6] = 3271;
				hv_C9[7] = 3325;
				hv_C9[8] = 3344;
				hv_C9[9] = 3361;
				hv_C9[10] = 3443;
				hv_C9[11] = 3496;
				hv_C9[12] = 4037;
				GenRegionPolygonFilled(&ho_Region79, hv_R9, hv_C9);

				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
				Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
				Union2(ho_RegionUnion60, ho_Region77, &ho_RegionUnion13);
				Union2(ho_RegionUnion13, ho_Region78, &ho_RegionUnion14);
				Union2(ho_RegionUnion14, ho_Region79, &ho_RegionUnion16);
				MoveRegion(ho_RegionUnion16, &ho_RegionMoved34, hv_R, hv_C);
				ErosionRectangle1(ho_RegionMoved34, &ho_RegionMoved34, 31, 21);
				GenRectangle1(&ho_ROI_0, 15.7425, 2780.8, 732.776, 3164.16);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced65);
				GrayClosingRect(ho_ImageReduced65, &ho_ImageClosing10, 3, 3);
				Threshold(ho_ImageClosing10, &ho_Region64, 0, 68);
				ClosingCircle(ho_Region64, &ho_RegionClosing24, 3.5);
				Connection(ho_RegionClosing24, &ho_ConnectedRegions71);
				SelectShape(ho_ConnectedRegions71, &ho_SelectedRegions76, (HTuple("area").Append("circularity")),
					"and", (HTuple(5150).Append(0.5)), (HTuple(99999).Append(1)));
				DilationCircle(ho_SelectedRegions76, &ho_RegionDilation6, 43.5);
				Difference(ho_RegionMoved34, ho_RegionDilation6, &ho_RegionMoved34);

				GenRectangle1(&ho_ROI_0, 379.251, 3475.22, 535.872, 3800.49);
				MoveRegion(ho_ROI_0, &ho_RegionMoved79, hv_R, hv_C);
				Difference(ho_RegionMoved34, ho_RegionMoved79, &ho_RegionMoved34);
				ReduceDomain(ho_Image, ho_RegionMoved34, &ho_ImageReduced17);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 33);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictObject(ho_RegionMoved34, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));
				//jl 刀纹检测
				ClosingRectangle1(ho_RegionMoved34, &ho_SelectedRegions164, 120, 10);
				MoveRegion(ho_SelectedRegions164, &ho_RegionMoved74, -30, 0);
				Difference(ho_RegionMoved74, ho_RegionMoved34, &ho_RegionDifference75);
				Connection(ho_RegionDifference75, &ho_ConnectedRegions246);
				SelectShape(ho_ConnectedRegions246, &ho_SelectedRegions299, ((HTuple("area").Append("column")).Append("ratio")),
					"and", ((HTuple(31150).Append(0)).Append(1)), ((HTuple(199999).Append(1300)).Append(8)));
				OpeningRectangle1(ho_SelectedRegions299, &ho_RegionOpening88, 5, 50);
				CountObj(ho_RegionOpening88, &hv_Number97);
				if (0 != (int(hv_Number97 == 1)))
				{
					ReduceDomain(ho_Image, ho_RegionOpening88, &ho_ImageReduced100);
					GrayClosingRect(ho_ImageReduced100, &ho_ImageClosing24, 37, 3);
					SubImage(ho_ImageReduced100, ho_ImageClosing24, &ho_ImageSub10, 1, 128);
					Threshold(ho_ImageSub10, &ho_Region94, 0, 60);
					OpeningRectangle1(ho_Region94, &ho_RegionOpening33, 4, 2);
					Connection(ho_RegionOpening33, &ho_ConnectedRegions131);
					SelectShape(ho_ConnectedRegions131, &ho_SelectedRegions163, (HTuple("area").Append("width")),
						"and", (HTuple(45).Append(14)), (HTuple(1999).Append(99)));
					Union1(ho_SelectedRegions163, &ho_RegionUnion53);
					CountObj(ho_RegionUnion53, &hv_Number62);
					if (0 != hv_Number62)
					{
						AreaCenter(ho_RegionUnion53, &hv_Area10, &hv_Row10, &hv_Column10);
						if (0 != (int(hv_Area10>1500)))
						{
							ConcatObj(ho_RegionUnion53, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
						}
					}
				}

				//jl add 镭雕不全
				Intensity(ho_RegionMoved34, ho_ImageReduced17, &hv_Mean10, &hv_Deviation10);
				if (0 != (int(hv_Mean10<153)))
				{
					MedianRect(ho_ImageReduced17, &ho_ImageMedian17, 5, 35);
					VarThreshold(ho_ImageMedian17, &ho_Region142, 35, 25, 0.2, 20, "dark");
					Connection(ho_Region142, &ho_ConnectedRegions222);
					SelectShape(ho_ConnectedRegions222, &ho_SelectedRegions270, (HTuple("area").Append("height")),
						"and", (HTuple(400).Append(150)), (HTuple(99999).Append(9999)));
					Union1(ho_SelectedRegions270, &ho_RegionUnion69);
					RankRegion(ho_RegionUnion69, &ho_RegionCount1, 10, 10, 10);
					SelectShape(ho_RegionCount1, &ho_SelectedRegions271, "width", "and", 100,
						1500);
					RegionFeatures(ho_SelectedRegions271, "area", &hv_Value31);
					if (0 != (int(hv_Value31>100000)))
					{
						ConcatObj(ho_SelectedRegions271, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
					}
				}
				//YJH卷边
				GenRectangle1(&ho_ROI_J, 2327.26, 3490.38, 2554.97, 3883.62);
				ReduceDomain(ho_Image, ho_ROI_J, &ho_ImageReduced106);
				Threshold(ho_ImageReduced106, &ho_Region100, 0, 55);
				Connection(ho_Region100, &ho_ConnectedRegions147);
				OpeningCircle(ho_ConnectedRegions147, &ho_RegionOpening62, 13.5);
				ClosingRectangle1(ho_RegionOpening62, &ho_RegionClosing68, 25, 15);
				SelectShape(ho_RegionClosing68, &ho_SelectedRegions185, "area", "and", 20150,
					79999);
				CountObj(ho_SelectedRegions185, &hv_Number69);
				if (0 != (int(hv_Number69 == 1)))
				{
					SmallestRectangle1(ho_SelectedRegions185, &hv_Row15, &hv_Column15, &hv_Row22,
						&hv_Column22);
					GenRectangle1(&ho_Rectangle2, hv_Row22 + 50, hv_Column15 - 130, hv_Row22 + 130,
						hv_Column15 - 50);
					ReduceDomain(ho_Image, ho_Rectangle2, &ho_ImageReduced107);
					Threshold(ho_ImageReduced107, &ho_Region101, 25, 69);
					ClosingCircle(ho_Region101, &ho_RegionClosing69, 3.5);
					OpeningCircle(ho_RegionClosing69, &ho_RegionOpening63, 5.5);
					Connection(ho_RegionOpening63, &ho_ConnectedRegions149);
					SelectShape(ho_ConnectedRegions149, &ho_SelectedRegions186, "area", "and",
						500, 3999);

					hv_A = 2503;
					hv_B = 3567;
					GenRegionRuns(&ho_ROI_JA, (((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((HTuple(2459).Append(2460)).Append(2461)).Append(2462)).Append(2463)).Append(2464)).Append(2465)).Append(2466)).Append(2467)).Append(2468)).Append(2469)).Append(2470)).Append(2471)).Append(2472)).Append(2473)).Append(2474)).Append(2475)).Append(2476)).Append(2477)).Append(2478)).Append(2479)).Append(2480)).Append(2481)).Append(2482)).Append(2483)).Append(2484)).Append(2485)).Append(2486)).Append(2487)).Append(2488)).Append(2489)).Append(2490)).Append(2491)).Append(2492)).Append(2493)).Append(2494)).Append(2495)).Append(2496)).Append(2497)).Append(2498)).Append(2499)).Append(2500)).Append(2501)).Append(2502)).Append(2503)).Append(2504)).Append(2505)).Append(2506)).Append(2507)).Append(2508)).Append(2509)).Append(2510)).Append(2511)).Append(2512)).Append(2513)).Append(2514)).Append(2515)).Append(2516)).Append(2517)).Append(2518)).Append(2519)).Append(2520)).Append(2521)).Append(2522)).Append(2523)).Append(2524)).Append(2525)).Append(2526)).Append(2527)).Append(2528)).Append(2529)).Append(2530)).Append(2531)).Append(2532)).Append(2533)).Append(2534)).Append(2535)).Append(2536)).Append(2537)).Append(2538)).Append(2539)).Append(2540)).Append(2541)).Append(2542)).Append(2543)).Append(2544)).Append(2545)).Append(2546)).Append(2547)).Append(2548)).Append(2549)).Append(2550)).Append(2551)).Append(2552)).Append(2553)).Append(2554)).Append(2555)).Append(2556)).Append(2557)).Append(2558)).Append(2559)).Append(2560)).Append(2561)).Append(2562)).Append(2563)).Append(2564)).Append(2565)).Append(2566)).Append(2567)).Append(2568)).Append(2569)).Append(2570)).Append(2571)).Append(2572)).Append(2573)).Append(2574)).Append(2575)).Append(2576)).Append(2577)).Append(2578)).Append(2579)).Append(2580)).Append(2581)).Append(2582)).Append(2583)).Append(2584)).Append(2585)).Append(2586)).Append(2587)).Append(2588)).Append(2589)).Append(2590)).Append(2591)).Append(2592)).Append(2593)).Append(2594)).Append(2595)).Append(2596)).Append(2597)).Append(2598)).Append(2599)).Append(2600)).Append(2601)).Append(2602)).Append(2603)).Append(2604)).Append(2605)).Append(2606)).Append(2607)).Append(2608)).Append(2609)).Append(2610)).Append(2611)).Append(2612)).Append(2613)).Append(2614)).Append(2615)).Append(2616)).Append(2617)).Append(2618)).Append(2619)).Append(2620)).Append(2621)).Append(2622)).Append(2623)).Append(2624)).Append(2625)).Append(2626)).Append(2627)).Append(2628)).Append(2629)).Append(2630)).Append(2631)).Append(2632)),
						(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((HTuple(3439).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3439)).Append(3440)).Append(3440)).Append(3440)).Append(3440)).Append(3440)).Append(3440)).Append(3440)).Append(3440)).Append(3441)).Append(3441)).Append(3441)).Append(3441)).Append(3441)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3442)).Append(3443)).Append(3444)).Append(3444)).Append(3446)).Append(3447)).Append(3447)).Append(3447)).Append(3448)).Append(3448)).Append(3449)).Append(3449)).Append(3450)).Append(3450)).Append(3450)).Append(3452)).Append(3452)).Append(3452)).Append(3452)).Append(3453)).Append(3453)).Append(3453)).Append(3454)).Append(3455)).Append(3455)).Append(3455)).Append(3456)).Append(3456)).Append(3456)).Append(3457)).Append(3457)).Append(3457)).Append(3458)).Append(3458)).Append(3459)).Append(3460)).Append(3461)).Append(3461)).Append(3462)).Append(3463)).Append(3464)).Append(3465)).Append(3467)).Append(3470)).Append(3471)).Append(3473)),
						(((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((((HTuple(3439).Append(3439)).Append(3440)).Append(3441)).Append(3443)).Append(3447)).Append(3448)).Append(3450)).Append(3451)).Append(3453)).Append(3457)).Append(3459)).Append(3461)).Append(3465)).Append(3466)).Append(3467)).Append(3469)).Append(3472)).Append(3473)).Append(3474)).Append(3476)).Append(3477)).Append(3477)).Append(3478)).Append(3479)).Append(3480)).Append(3480)).Append(3480)).Append(3482)).Append(3482)).Append(3483)).Append(3485)).Append(3485)).Append(3486)).Append(3487)).Append(3489)).Append(3489)).Append(3491)).Append(3491)).Append(3492)).Append(3492)).Append(3494)).Append(3494)).Append(3495)).Append(3496)).Append(3496)).Append(3496)).Append(3497)).Append(3497)).Append(3497)).Append(3498)).Append(3499)).Append(3499)).Append(3500)).Append(3502)).Append(3502)).Append(3502)).Append(3502)).Append(3503)).Append(3503)).Append(3503)).Append(3504)).Append(3504)).Append(3504)).Append(3505)).Append(3505)).Append(3506)).Append(3506)).Append(3507)).Append(3507)).Append(3507)).Append(3508)).Append(3508)).Append(3509)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3510)).Append(3509)).Append(3509)).Append(3509)).Append(3509)).Append(3508)).Append(3508)).Append(3507)).Append(3507)).Append(3507)).Append(3507)).Append(3507)).Append(3507)).Append(3507)).Append(3506)).Append(3506)).Append(3506)).Append(3506)).Append(3505)).Append(3505)).Append(3505)).Append(3505)).Append(3504)).Append(3504)).Append(3502)).Append(3502)).Append(3502)).Append(3501)).Append(3501)).Append(3500)).Append(3499)).Append(3499)).Append(3499)).Append(3498)).Append(3498)).Append(3498)).Append(3498)).Append(3497)).Append(3496)).Append(3496)).Append(3494)).Append(3494)).Append(3494)).Append(3494)).Append(3492)).Append(3492)).Append(3491)).Append(3490)).Append(3488)).Append(3488)).Append(3487)).Append(3486)).Append(3486)).Append(3486)).Append(3485)).Append(3484)).Append(3484)).Append(3483)).Append(3482)).Append(3480)));
					MoveRegion(ho_ROI_JA, &ho_RegionMoved64, hv_Row22 - hv_A, hv_Column15 - hv_B);
					ReduceDomain(ho_Image, ho_RegionMoved64, &ho_ImageReduced108);
					Threshold(ho_ImageReduced108, &ho_Region102, 0, 85);
					Connection(ho_Region102, &ho_ConnectedRegions151);
					SelectShape(ho_ConnectedRegions151, &ho_SelectedRegions188, "area", "and",
						50, 9999);
					Union1(ho_SelectedRegions188, &ho_RegionUnion61);
					ClosingCircle(ho_RegionUnion61, &ho_RegionClosing70, 9.5);
					OpeningCircle(ho_RegionClosing70, &ho_RegionOpening64, 4);
					Connection(ho_RegionOpening64, &ho_ConnectedRegions150);
					SelectShape(ho_ConnectedRegions150, &ho_SelectedRegions187, "area", "and",
						500, 4999);
					Union2(ho_SelectedRegions186, ho_SelectedRegions187, &ho_RegionUnion57);
					ConcatObj(ho_RegionUnion57, (*hv_dt).TupleGetDictObject("57"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "57");
				}

				//jl add
				GenRectangle1(&ho_ROI_0, 55.0886, 107.751, 3039.32, 376.917);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced117);
				Threshold(ho_ImageReduced117, &ho_Region113, 88, 255);
				ClosingRectangle1(ho_Region113, &ho_RegionClosing88, 1, 100);
				Connection(ho_RegionClosing88, &ho_ConnectedRegions158);
				SelectShape(ho_ConnectedRegions158, &ho_SelectedRegions191, "height", "and",
					1250, 99999);
				CountObj(ho_SelectedRegions191, &hv_Number66);
				if (0 != (int(hv_Number66 == 1)))
				{
					//检测大RT
					Difference(ho_SelectedRegions191, ho_Region113, &ho_RegionDifference72);
					OpeningRectangle1(ho_RegionDifference72, &ho_RegionOpening72, 3, 1);
					ClosingRectangle1(ho_RegionOpening72, &ho_RegionClosing89, 4, 4);
					Connection(ho_RegionClosing89, &ho_ConnectedRegions180);
					SelectShape(ho_ConnectedRegions180, &ho_SelectedRegions221, (HTuple("area").Append("ratio")),
						"and", (HTuple(220).Append(0)), (HTuple(99999).Append(5)));
					SelectGray(ho_SelectedRegions221, ho_Image, &ho_SelectedRegions222, "mean",
						"and", 0, 45);
					ConcatObj(ho_SelectedRegions222, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}
				//END
				//不检测了
				//connection (RegionClosing88, ConnectedRegions178)
				//select_shape (ConnectedRegions178, SelectedRegions218, 'height', 'and', 1050, 99999)
				//union1 (SelectedRegions218, RegionUnion68)
				//dilation_rectangle1 (RegionUnion68, RegionDilation55, 8, 5)
				//dilation_rectangle1 (RegionDilation55, RegionDilation56, 10, 1)
				//move_region (RegionDilation56, RegionMoved71, 0, 10)
				//difference (RegionMoved71, RegionDilation55, RegionDifference70)
				//reduce_domain (ImageReduced117, RegionDifference70, ImageReduced118)
				//var_threshold (ImageReduced118, Region114, 3, 50, 0.2, 32, 'light')
				//connection (Region114, ConnectedRegions179)
				//select_shape (ConnectedRegions179, SelectedRegions219, 'area', 'and', 10, 99999)
				//select_gray (SelectedRegions219, ImageReduced118, SelectedRegions220, 'mean', 'and', 70, 255)
				//union1 (SelectedRegions220, RegionUnion69)
				//count_obj (RegionUnion69, Number66)
				//if (Number66)
				//area_center (RegionUnion69, Area13, Row14, Column14)
				//if (Area13>120)
				//concat_obj (RegionUnion69, dt.['41'], dt.['41'])
				//endif
				//endif

			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1716.37, 1055.68, 2776.53, 1471.13);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 188, 255);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(7000).Append(0.5)), (HTuple(999999).Append(1)));
				CountObj(ho_SelectedRegions55, &hv_Number59);
				if (0 != hv_Number59)
				{
					SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
						&hv_Column21);
					hv_R = hv_Row11 - 2411;
					hv_C = hv_Column11 - 1201;
					//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
					//reduce_domain (Image, ROI_0, ImageReduced25)
					//threshold (ImageReduced25, Region33, 70, 180)
					//opening_rectangle1 (Region33, RegionOpening1, 6, 3)
					//closing_rectangle1 (RegionOpening1, RegionClosing, 3, 1)
					//connection (RegionClosing, ConnectedRegions36)

					//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 7e4, 9e6)
					//closing_rectangle1 (SelectedRegions36, RegionClosing27, 50, 20)
					//erosion_rectangle1 (RegionClosing27, RegionErosion17, 31, 31)
					//count_obj (RegionErosion17, Number14)
					//for i := 1 to Number14 by 1
					//select_obj (RegionErosion17, ObjectSelected1, i)
					//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
					//gen_region_polygon (Region73, Rows, Columns)
					//endfor
					hv_R1.Clear();
					hv_R1[0] = 18;
					hv_R1[1] = 166;
					hv_R1[2] = 237;
					hv_R1[3] = 303;
					hv_R1[4] = 368;
					hv_R1[5] = 420;
					hv_R1[6] = 453;
					hv_R1[7] = 530;
					hv_R1[8] = 565;
					hv_R1[9] = 539;
					hv_R1[10] = 454;
					hv_R1[11] = 439;
					hv_R1[12] = 402;
					hv_R1[13] = 300;
					hv_R1[14] = 199;
					hv_R1[15] = 126;
					hv_R1[16] = 116;
					hv_R1[17] = 114;
					hv_R1[18] = 88;
					hv_R1[19] = 92;
					hv_R1[20] = 820;
					hv_R1[21] = 676;
					hv_R1[22] = 572;
					hv_R1[23] = 521;
					hv_R1[24] = 516;
					hv_R1[25] = 537;
					hv_R1[26] = 631;
					hv_R1[27] = 646;
					hv_R1[28] = 666;
					hv_R1[29] = 881;
					hv_R1[30] = 903;
					hv_R1[31] = 958;
					hv_R1[32] = 960;
					hv_R1[33] = 1095;
					hv_R1[34] = 1096;
					hv_R1[35] = 1257;
					hv_R1[36] = 1578;
					hv_R1[37] = 1584;
					hv_R1[38] = 1749;
					hv_R1[39] = 1861;
					hv_R1[40] = 1922;
					hv_R1[41] = 1939;
					hv_R1[42] = 1963;
					hv_R1[43] = 2152;
					hv_R1[44] = 2250;
					hv_R1[45] = 2314;
					hv_R1[46] = 2329;
					hv_R1[47] = 2314;
					hv_R1[48] = 2258;
					hv_R1[49] = 2157;
					hv_R1[50] = 2000;
					hv_R1[51] = 2340;
					hv_R1[52] = 2341;
					hv_R1[53] = 2380;
					hv_R1[54] = 2373;
					hv_R1[55] = 2345;
					hv_R1[56] = 2345;
					hv_R1[57] = 2368;
					hv_R1[58] = 2314;
					hv_R1[59] = 2312;
					hv_R1[60] = 2245;
					hv_R1[61] = 2249;
					hv_R1[62] = 2221;
					hv_R1[63] = 2223;
					hv_R1[64] = 2174;
					hv_R1[65] = 2144;
					hv_R1[66] = 2146;
					hv_R1[67] = 2203;
					hv_R1[68] = 2198;
					hv_R1[69] = 2073;
					hv_R1[70] = 2029;
					hv_R1[71] = 1984;
					hv_R1[72] = 1748;
					hv_R1[73] = 1678;
					hv_R1[74] = 595;
					hv_R1[75] = 601;
					hv_R1[76] = 588;
					hv_R1[77] = 541;
					hv_R1[78] = 491;
					hv_R1[79] = 188;
					hv_R1[80] = 132;
					hv_R1[81] = 109;
					hv_R1[82] = 104;
					hv_R1[83] = 82;
					hv_R1[84] = 18;
					hv_R1[85] = 18;
					hv_C1.Clear();
					hv_C1[0] = 1536;
					hv_C1[1] = 1562;
					hv_C1[2] = 1592;
					hv_C1[3] = 1638;
					hv_C1[4] = 1711;
					hv_C1[5] = 1808;
					hv_C1[6] = 1997;
					hv_C1[7] = 2175;
					hv_C1[8] = 2392;
					hv_C1[9] = 2693;
					hv_C1[10] = 2901;
					hv_C1[11] = 3045;
					hv_C1[12] = 3137;
					hv_C1[13] = 3252;
					hv_C1[14] = 3313;
					hv_C1[15] = 3329;
					hv_C1[16] = 3346;
					hv_C1[17] = 3420;
					hv_C1[18] = 3467;
					hv_C1[19] = 4080;
					hv_C1[20] = 4080;
					hv_C1[21] = 3914;
					hv_C1[22] = 3719;
					hv_C1[23] = 3545;
					hv_C1[24] = 3243;
					hv_C1[25] = 3115;
					hv_C1[26] = 2892;
					hv_C1[27] = 2889;
					hv_C1[28] = 2834;
					hv_C1[29] = 2603;
					hv_C1[30] = 2494;
					hv_C1[31] = 2420;
					hv_C1[32] = 2387;
					hv_C1[33] = 2362;
					hv_C1[34] = 2350;
					hv_C1[35] = 2361;
					hv_C1[36] = 2345;
					hv_C1[37] = 2363;
					hv_C1[38] = 2355;
					hv_C1[39] = 2400;
					hv_C1[40] = 2471;
					hv_C1[41] = 2573;
					hv_C1[42] = 2623;
					hv_C1[43] = 2819;
					hv_C1[44] = 2987;
					hv_C1[45] = 3178;
					hv_C1[46] = 3417;
					hv_C1[47] = 3569;
					hv_C1[48] = 3745;
					hv_C1[49] = 3920;
					hv_C1[50] = 4080;
					hv_C1[51] = 4080;
					hv_C1[52] = 3635;
					hv_C1[53] = 3390;
					hv_C1[54] = 3253;
					hv_C1[55] = 3118;
					hv_C1[56] = 3034;
					hv_C1[57] = 3013;
					hv_C1[58] = 2837;
					hv_C1[59] = 2362;
					hv_C1[60] = 2322;
					hv_C1[61] = 2162;
					hv_C1[62] = 2132;
					hv_C1[63] = 2034;
					hv_C1[64] = 2022;
					hv_C1[65] = 1987;
					hv_C1[66] = 1881;
					hv_C1[67] = 1837;
					hv_C1[68] = 1112;
					hv_C1[69] = 922;
					hv_C1[70] = 746;
					hv_C1[71] = 718;
					hv_C1[72] = 725;
					hv_C1[73] = 696;
					hv_C1[74] = 707;
					hv_C1[75] = 1119;
					hv_C1[76] = 1154;
					hv_C1[77] = 1204;
					hv_C1[78] = 1219;
					hv_C1[79] = 1220;
					hv_C1[80] = 1239;
					hv_C1[81] = 1271;
					hv_C1[82] = 1369;
					hv_C1[83] = 1415;
					hv_C1[84] = 1455;
					hv_C1[85] = 1536;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 2382;
					hv_R2[1] = 2385;
					hv_R2[2] = 2541;
					hv_R2[3] = 2546;
					hv_R2[4] = 2488;
					hv_R2[5] = 2397;
					hv_R2[6] = 2386;
					hv_R2[7] = 2415;
					hv_R2[8] = 2421;
					hv_R2[9] = 2385;
					hv_R2[10] = 2382;
					hv_C2.Clear();
					hv_C2[0] = 3823;
					hv_C2[1] = 4076;
					hv_C2[2] = 4080;
					hv_C2[3] = 3163;
					hv_C2[4] = 3116;
					hv_C2[5] = 3095;
					hv_C2[6] = 3073;
					hv_C2[7] = 3204;
					hv_C2[8] = 3423;
					hv_C2[9] = 3664;
					hv_C2[10] = 3823;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
					GenRectangle1(&ho_ROI_0, 364.309, 1168.85, 604.217, 1414.61);
					GenRectangle1(&ho_TMP_Region, 1774.5, 2040.71, 2242.62, 2620);

					GenRectangle1(&ho_ROI_11, 643.318, 627.738, 2181.73, 2271.67);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					Union2(ho_ROI_0, ho_ROI_11, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced69);
					Threshold(ho_ImageReduced69, &ho_Region81, 0, 60);
					Connection(ho_Region81, &ho_ConnectedRegions74);
					SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions96, "area", "and",
						1500, 3992999);
					DilationCircle(ho_SelectedRegions96, &ho_RegionDilation36, 35.5);
					ErosionRectangle1(ho_RegionUnion50, &ho_RegionUnion50, 31, 39);
					MoveRegion(ho_RegionUnion50, &ho_RegionUnion50, hv_R, hv_C);
					GenRectangle1(&ho_Rectangle1, 468, 3200, 580, 3650);
					Union2(ho_RegionDilation36, ho_Rectangle1, &ho_RegionDilation36);
					Difference(ho_RegionUnion50, ho_RegionDilation36, &ho_RegionUnion50);
					GenRectangle1(&ho_ROI_1, 2497.05, 3693.17, 2555.33, 4126.28);
					Difference(ho_RegionUnion50, ho_ROI_1, &ho_RegionUnion50);

					GenRectangle1(&ho_ROI_3, 2430.36, 3084.5, 2577.33, 3616.42);
					Difference(ho_RegionUnion50, ho_ROI_3, &ho_RegionUnion50);
					GenRectangle1(&ho_ROI_4, 608.973, 3143.03, 755.944, 3728.76);
					Difference(ho_RegionUnion50, ho_ROI_4, &ho_RegionUnion50);

					GenRectangle1(&ho_ROI_0, 2122.78, 2430.77, 2283.96, 2612.16);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionUnion50, ho_ROI_0, &ho_RegionUnion50);

					GenRectangle1(&ho_ROI_0, 2100.9, 1633.06, 2183.66, 1815.13);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionUnion50, ho_ROI_0, &ho_RegionUnion50);
					//单独检测裂纹
					Connection(ho_RegionUnion50, &ho_ConnectedRegions96);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions310, "area", "and",
						1500, 99999);
					RegionFeatures(ho_SelectedRegions310, "row", &hv_Value4);
					TupleMax(hv_Value4, &hv_Max5);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions80, "row", "and",
						hv_Max5, hv_Max5);
					ErosionRectangle1(ho_SelectedRegions80, &ho_RegionErosion2, 25, 65);
					ReduceDomain(ho_Image, ho_RegionErosion2, &ho_ImageReduced57);
					MedianRect(ho_ImageReduced57, &ho_ImageMedian2, 3, 3);
					MedianRect(ho_ImageReduced57, &ho_ImageMedian6, 75, 75);
					DynThreshold(ho_ImageMedian2, ho_ImageMedian6, &ho_RegionDynThresh4, 25,
						"dark");
					Connection(ho_RegionDynThresh4, &ho_ConnectedRegions72);
					//select_shape (ConnectedRegions72, SelectedRegions81, ['area','ratio'], 'and', [100,0.1], [99999,5])
					//union1 (SelectedRegions81, RegionUnion38)
					//area_center (RegionUnion38, Area, Row, Column)
					//if (Area>670)
					//concat_obj (RegionUnion38, dt.['62'], dt.['62'])
					//endif

					//union1 (RegionClosing27, RegionUnion10)

					//gen_rectangle1 (ROI_0, 52.7887, 3294.63, 267.943, 3482.97)
					//difference (RegionUnion10, ROI_0, RegionDifference29)

					//gen_rectangle1 (ROI_0, 2228.72, 1633.83, 2316.52, 1996.71)
					//difference (RegionDifference29, ROI_0, RegionDifference30)
					//erosion_rectangle1 (RegionDifference30, RegionErosion11, 31, 61)
					//gen_rectangle1 (ROI_0, 2255.81, 2418.96, 2411.38, 2614.84)

					//gen_rectangle1 (ROI_11, 1904.75, 668.443, 2020.43, 1078.8)
					//difference (RegionErosion11, ROI_0, RegionDifference1)
					//difference (RegionDifference1, ROI_11, RegionDifference36)

					//gen_rectangle1 (ROI_0, 2619.81, 3123.37, 2704.74, 4085.17)
					//difference (RegionDifference36, ROI_0, RegionDifference36)
					ReduceDomain(ho_Image, ho_RegionUnion50, &ho_ImageReduced17);
					ErosionRectangle1(ho_RegionUnion50, &ho_RegionErosion37, 10, 15);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 37);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 120);
					SetDictObject(ho_RegionErosion37, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
					Det_LD_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number59 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				GenRectangle1(&ho_ROI_0, 1161.01, 435.431, 1694.01, 599.271);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced33);
				Threshold(ho_ImageReduced33, &ho_Region36, 190, 255);
				Connection(ho_Region36, &ho_ConnectedRegions49);
				SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions53, "area", "and",
					3000, 30000);
				CountObj(ho_SelectedRegions53, &hv_Number2);
				if (0 != (int(hv_Number2<1)))
				{
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
				}
				//BLC偏位
				if (0 != (int(hv_Number2 == 1)))
				{
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions57, "phi", "and",
						HTuple(87).TupleRad(), HTuple(93).TupleRad());
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions58, "phi", "and",
						HTuple(-93).TupleRad(), HTuple(-87).TupleRad());
					Union2(ho_SelectedRegions57, ho_SelectedRegions58, &ho_RegionUnion20);
					Difference(ho_SelectedRegions53, ho_RegionUnion20, &ho_RegionDifference26
						);
					ConcatObj(ho_RegionDifference26, (*hv_dt).TupleGetDictObject("67"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "67");
				}

				//压伤
				GenRectangle1(&ho_ROI_0, 1204.74, 438.252, 1714.23, 637.734);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced18);
				Threshold(ho_ImageReduced18, &ho_Region24, 170, 255);
				ClosingRectangle1(ho_Region24, &ho_RegionClosing8, 55, 23);
				ErosionRectangle1(ho_RegionClosing8, &ho_RegionErosion13, 6, 3);
				ReduceDomain(ho_ImageReduced18, ho_RegionErosion13, &ho_ImageReduced23);
				GrayClosingRect(ho_ImageReduced23, &ho_ImageClosing3, 11, 11);
				SubImage(ho_ImageReduced23, ho_ImageClosing3, &ho_ImageSub6, 2, 128);
				Threshold(ho_ImageSub6, &ho_Region25, 0, 50);
				Connection(ho_Region25, &ho_ConnectedRegions27);
				SelectShape(ho_ConnectedRegions27, &ho_SelectedRegions27, (HTuple("area").Append("anisometry")),
					"and", (HTuple(60).Append(1)), (HTuple(99999).Append(8)));
				ConcatObj(ho_SelectedRegions27, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

				//jladd test 边缘压伤
				GenRectangle1(&ho_ROI_0, 1659.02, 610.858, 1948.76, 847.899);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced138);
				Threshold(ho_ImageReduced138, &ho_Region136, 60, 170);
				ClosingRectangle1(ho_Region136, &ho_RegionClosing66, 9, 9);
				OpeningRectangle1(ho_RegionClosing66, &ho_RegionOpening80, 18, 18);
				ErosionRectangle1(ho_RegionOpening80, &ho_RegionErosion44, 5, 5);
				ReduceDomain(ho_ImageReduced138, ho_RegionErosion44, &ho_ImageReduced139);
				RankRect(ho_ImageReduced139, &ho_ImageRank9, 3, 3, 2);
				MedianRect(ho_ImageRank9, &ho_ImageMedian12, 3, 3);
				MedianRect(ho_ImageRank9, &ho_ImageMedian13, 55, 55);
				DynThreshold(ho_ImageMedian12, ho_ImageMedian13, &ho_RegionDynThresh6, 18,
					"dark");
				Connection(ho_RegionDynThresh6, &ho_ConnectedRegions213);
				SelectShape(ho_ConnectedRegions213, &ho_SelectedRegions261, (HTuple("area").Append("anisometry")),
					"and", (HTuple(550).Append(1)), (HTuple(99999).Append(5)));
				SelectGray(ho_SelectedRegions261, ho_Image, &ho_SelectedRegions262, "mean",
					"and", 0, 130);
				ConcatObj(ho_SelectedRegions262, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

				//B基准面压伤
				GenRectangle1(&ho_ROI_0, 2478.54, 1658.38, 2746.75, 2284.48);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced39);
				Threshold(ho_ImageReduced39, &ho_Region50, 158, 255);
				ClosingRectangle1(ho_Region50, &ho_RegionClosing36, 10, 10);
				ErosionRectangle1(ho_RegionClosing36, &ho_RegionErosion21, 11, 11);
				ReduceDomain(ho_ImageReduced39, ho_RegionErosion21, &ho_ImageReduced70);
				GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing14, 11, 11);
				SubImage(ho_ImageReduced70, ho_ImageClosing14, &ho_ImageSub19, 1, 128);
				Threshold(ho_ImageSub19, &ho_Region76, 0, 60);
				Connection(ho_Region76, &ho_ConnectedRegions99);
				SelectShape(ho_ConnectedRegions99, &ho_SelectedRegions112, (HTuple("area").Append("anisometry")),
					"and", (HTuple(50).Append(0)), (HTuple(2100).Append(4)));
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions112, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}

				GenRectangle1(&ho_ROI_0, 2551.85, 3105.24, 2861.62, 4080.77);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced85);
				Threshold(ho_ImageReduced85, &ho_Region92, 148, 255);
				Connection(ho_Region92, &ho_ConnectedRegions140);
				SelectShape(ho_ConnectedRegions140, &ho_SelectedRegions164, "area", "and",
					33150, 99999);
				ClosingRectangle1(ho_SelectedRegions164, &ho_RegionClosing42, 70, 5);

				ErosionRectangle1(ho_RegionClosing42, &ho_RegionErosion27, 11, 21);
				MoveRegion(ho_RegionErosion27, &ho_RegionMoved31, -6, 0);
				ReduceDomain(ho_ImageReduced85, ho_RegionMoved31, &ho_ImageReduced86);
				GrayClosingRect(ho_ImageReduced86, &ho_ImageClosing16, 11, 11);
				SubImage(ho_ImageReduced86, ho_ImageClosing16, &ho_ImageSub25, 1, 128);
				Threshold(ho_ImageSub25, &ho_Region93, 0, 80);
				Connection(ho_Region93, &ho_ConnectedRegions132);
				SelectShape(ho_ConnectedRegions132, &ho_SelectedRegions151, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(89).Append(0.2)).Append(0)), ((HTuple(99999).Append(10)).Append(6)));
				SelectGray(ho_SelectedRegions151, ho_Image, &ho_SelectedRegions152, "mean",
					"and", 0, 170);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions152, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}

				//jl add 检测BLC焊缝毛刺
				ClosingRectangle1(ho_SelectedRegions164, &ho_SelectedRegions164, 10, 10);
				MoveRegion(ho_SelectedRegions164, &ho_RegionMoved74, -30, 0);
				Difference(ho_RegionMoved74, ho_SelectedRegions164, &ho_RegionDifference75
					);
				ReduceDomain(ho_Image, ho_RegionDifference75, &ho_ImageReduced123);
				RankRect(ho_ImageReduced123, &ho_ImageRank, 10, 5, 35);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 98);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 1.5, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 70);
				Connection(ho_Region21, &ho_ConnectedRegions112);
				SelectShape(ho_ConnectedRegions112, &ho_SelectedRegions117, (HTuple("area").Append("height")),
					"and", (HTuple(510).Append(20)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions117, ho_Image, &ho_SelectedRegions7, "mean",
					"and", 0, 70.5);
				ConcatObj(ho_SelectedRegions7, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//再检测固定位置压伤
				DilationRectangle1(ho_RegionDifference75, &ho_RegionDilation80, 2, 200);
				ErosionRectangle1(ho_RegionDilation80, &ho_RegionErosion57, 80, 1);
				MoveRegion(ho_RegionErosion57, &ho_RegionMoved96, -150, 0);
				ReduceDomain(ho_Image, ho_RegionMoved96, &ho_ImageReduced167);
				GrayClosingRect(ho_ImageReduced167, &ho_ImageClosing40, 41, 11);
				SubImage(ho_ImageReduced167, ho_ImageClosing40, &ho_ImageSub39, 1, 128);
				Threshold(ho_ImageSub39, &ho_Region161, 0, 55);
				OpeningRectangle1(ho_Region161, &ho_RegionOpening91, 4, 1);
				Connection(ho_RegionOpening91, &ho_ConnectedRegions255);
				SelectShape(ho_ConnectedRegions255, &ho_SelectedRegions311, (HTuple("area").Append("ratio")),
					"and", (HTuple(3000).Append(0)), (HTuple(99999).Append(0.5)));
				Union1(ho_SelectedRegions311, &ho_RegionUnion84);
				ClosingRectangle1(ho_RegionUnion84, &ho_RegionClosing120, 18, 1);
				DilationRectangle1(ho_RegionClosing120, &ho_RegionDilation81, 2, 200);
				MoveRegion(ho_RegionDilation81, &ho_RegionMoved97, -85, 0);
				Difference(ho_RegionMoved96, ho_RegionMoved97, &ho_RegionDifference100);
				ReduceDomain(ho_Image, ho_RegionDifference100, &ho_ImageReduced168);
				MedianRect(ho_ImageReduced168, &ho_ImageMedian2, 3, 3);
				MedianRect(ho_ImageReduced168, &ho_ImageMedian6, 75, 75);
				DynThreshold(ho_ImageMedian2, ho_ImageMedian6, &ho_RegionDynThresh4, 25,
					"dark");
				Connection(ho_RegionDynThresh4, &ho_ConnectedRegions72);
				SelectShape(ho_ConnectedRegions72, &ho_SelectedRegions81, (HTuple("area").Append("ratio")),
					"and", (HTuple(350).Append(0.3)), (HTuple(99999).Append(5)));
				Union1(ho_SelectedRegions81, &ho_RegionUnion38);
				CountObj(ho_RegionUnion38, &hv_Number101);
				if (0 != hv_Number101)
				{
					AreaCenter(ho_RegionUnion38, &hv_Area, &hv_Row, &hv_Column);
					if (0 != (int(hv_Area>620)))
					{
						ConcatObj(ho_RegionUnion38, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					}
				}
				//白色区域检测黑BLC压伤
				GenRectangle1(&ho_ROI_0, 2098.02, 759.969, 2400.11, 1691.36);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced91);
				Threshold(ho_ImageReduced91, &ho_Region98, 175, 255);
				Connection(ho_Region98, &ho_ConnectedRegions137);
				SelectShape(ho_ConnectedRegions137, &ho_SelectedRegions158, "area", "and",
					10000, 99999);
				CountObj(ho_SelectedRegions158, &hv_Number60);
				if (0 != hv_Number60)
				{
					RegionFeatures(ho_SelectedRegions158, "width", &hv_Value18);
					TupleMin(hv_Value18, &hv_Min1);
					SelectShape(ho_SelectedRegions158, &ho_SelectedRegions159, "width", "and",
						hv_Min1, hv_Min1);
					ClosingRectangle1(ho_SelectedRegions159, &ho_RegionClosing45, 30, 30);
					ErosionRectangle1(ho_RegionClosing45, &ho_RegionErosion29, 5, 5);
					ReduceDomain(ho_Image, ho_RegionErosion29, &ho_ImageReduced92);
					GrayClosingRect(ho_ImageReduced92, &ho_ImageClosing17, 31, 31);
					SubImage(ho_ImageReduced92, ho_ImageClosing17, &ho_ImageSub27, 1, 128);
					Threshold(ho_ImageSub27, &ho_Region99, 0, 50);
					Connection(ho_Region99, &ho_ConnectedRegions138);
					SelectShape(ho_ConnectedRegions138, &ho_SelectedRegions160, "area", "and",
						250, 99999);
					ConcatObj(ho_SelectedRegions160, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
				}

				//jl add test 塑胶区域

				//gen_rectangle1 (ROI_10, 289.633, 263.806, 796.789, 481.475)
				GenRectangle1(&ho_ROI_0, 1559.24, 317.677, 2193.11, 780.053);

				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced147);
				Threshold(ho_ImageReduced147, &ho_Region143, 0, 73);
				Connection(ho_Region143, &ho_ConnectedRegions223);
				RegionFeatures(ho_ConnectedRegions223, "area", &hv_Value32);
				TupleMax(hv_Value32, &hv_Max20);
				SelectShape(ho_ConnectedRegions223, &ho_SelectedRegions272, "area", "and",
					hv_Max20 - 10, hv_Max20 + 10);
				ErosionRectangle1(ho_SelectedRegions272, &ho_RegionErosion47, 10, 10);
				ReduceDomain(ho_ImageReduced147, ho_RegionErosion47, &ho_ImageReduced148);
				VarThreshold(ho_ImageReduced148, &ho_Region144, 90, 90, 0.2, 5, "dark");

				Connection(ho_Region144, &ho_ConnectedRegions224);
				SelectShape(ho_ConnectedRegions224, &ho_SelectedRegions273, "area", "and",
					550, 99999);
				Union1(ho_SelectedRegions273, &ho_RegionUnion76);
				ClosingRectangle1(ho_RegionUnion76, &ho_RegionClosing106, 2, 2);
				Connection(ho_RegionClosing106, &ho_ConnectedRegions227);
				SelectShape(ho_ConnectedRegions227, &ho_SelectedRegions276, "area", "and",
					3150, 99999);
				ClosingRectangle1(ho_SelectedRegions276, &ho_RegionClosing104, 500, 500);
				DilationRectangle1(ho_RegionClosing104, &ho_RegionDilation74, 15, 15);
				Difference(ho_ImageReduced148, ho_RegionDilation74, &ho_RegionDifference88
					);
				ErosionRectangle1(ho_RegionDifference88, &ho_RegionErosion48, 30, 30);
				//union2 (RegionErosion48, ROI_10, RegionErosion48)
				ReduceDomain(ho_Image, ho_RegionErosion48, &ho_ImageReduced149);
				VarThreshold(ho_ImageReduced149, &ho_Region145, 55, 55, 0.2, 6, "dark");
				Connection(ho_Region145, &ho_ConnectedRegions225);
				SelectShape(ho_ConnectedRegions225, &ho_SelectedRegions274, "area", "and",
					50, 99999);
				Union1(ho_SelectedRegions274, &ho_RegionUnion75);
				ClosingRectangle1(ho_RegionUnion75, &ho_RegionClosing105, 3, 3);
				Connection(ho_RegionClosing105, &ho_ConnectedRegions226);
				SelectShape(ho_ConnectedRegions226, &ho_SelectedRegions275, (HTuple("area").Append("ratio")),
					"and", (HTuple(330).Append(0)), (HTuple(1800).Append(4)));
				ConcatObj(ho_SelectedRegions275, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//检测漏铁
				GenRectangle1(&ho_ROI_0, -50.27714, 324.254, 1119, 616.3);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced160);

				GrayOpeningRect(ho_ImageReduced160, &ho_ImageOpening6, 13, 13);
				SubImage(ho_ImageReduced160, ho_ImageOpening6, &ho_ImageSub37, 1, 128);
				Threshold(ho_ImageSub37, &ho_Region153, 200, 255);
				ClosingCircle(ho_Region153, &ho_RegionClosing116, 3.5);
				Connection(ho_RegionClosing116, &ho_ConnectedRegions211);
				SelectShape(ho_ConnectedRegions211, &ho_SelectedRegions301, "area", "and",
					150, 99999);
				SelectGray(ho_SelectedRegions301, ho_Image, &ho_SelectedRegions302, "mean",
					"and", 148, 255);
				ConcatObj(ho_SelectedRegions302, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");
			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				//gen_rectangle1 (ROI_0, 248.186, 8.27714, 2331.29, 698.746)
				GenRectangle1(&ho_ROI_0, 1648.186, 0.27714, 2631.29, 898.746);
				//提取定位点
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening60, 9, 25);
				//先检测左下角处缺陷
				Difference(ho_Region58, ho_RegionOpening60, &ho_RegionDifference84);
				ClosingRectangle1(ho_RegionDifference84, &ho_RegionDifference84, 20, 1);
				Connection(ho_RegionDifference84, &ho_ConnectedRegions210);
				OpeningRectangle1(ho_ConnectedRegions210, &ho_ConnectedRegions210, 25, 1);
				Connection(ho_ConnectedRegions210, &ho_ConnectedRegions210);
				SelectShape(ho_ConnectedRegions210, &ho_SelectedRegions257, ((HTuple("area").Append("ratio")).Append("column")),
					"and", ((HTuple(1000).Append(0.01)).Append(0)), ((HTuple(99999).Append(0.37)).Append(200)));
				CountObj(ho_SelectedRegions257, &hv_Number85);
				if (0 != hv_Number85)
				{
					OpeningRectangle1(ho_SelectedRegions257, &ho_RegionOpening79, 2, 1);

					SelectShape(ho_RegionOpening79, &ho_SelectedRegions258, (HTuple("area").Append("ratio")),
						"and", (HTuple(1000).Append(0.01)), (HTuple(99999).Append(0.37)));
					RegionFeatures(ho_SelectedRegions258, "row", &hv_Value35);
					TupleMin(hv_Value35, &hv_Min3);
					SelectShape(ho_SelectedRegions258, &ho_SelectedRegions258, "row", "and",
						hv_Min3 - 5, hv_Min3 + 5);
					DilationRectangle1(ho_SelectedRegions258, &ho_RegionDilation70, 1, 170);

					MoveRegion(ho_RegionDilation70, &ho_RegionMoved82, 113, -10);
					ReduceDomain(ho_Image, ho_RegionMoved82, &ho_ImageReduced137);
					RankRect(ho_ImageReduced137, &ho_ImageRank8, 5, 3, 8);
					GrayClosingRect(ho_ImageRank8, &ho_ImageClosing34, 29, 29);
					SubImage(ho_ImageRank8, ho_ImageClosing34, &ho_ImageSub32, 1.5, 128);
					Threshold(ho_ImageSub32, &ho_Region135, 0, 90);
					Connection(ho_Region135, &ho_ConnectedRegions212);
					SelectShape(ho_ConnectedRegions212, &ho_SelectedRegions309, "area", "and",
						150, 99999);
					Union1(ho_SelectedRegions309, &ho_RegionUnion83);
					ClosingCircle(ho_RegionUnion83, &ho_RegionClosing119, 3.5);
					Connection(ho_RegionClosing119, &ho_ConnectedRegions254);
					SelectShape(ho_ConnectedRegions254, &ho_SelectedRegions259, "area", "and",
						450, 3999);
					SelectGray(ho_SelectedRegions259, ho_Image, &ho_SelectedRegions260, "mean",
						"and", 0, 73);
					ConcatObj(ho_SelectedRegions260, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

					//检测多的浅的
					MedianRect(ho_ImageReduced137, &ho_ImageMedian22, 25, 5);
					DynThreshold(ho_ImageRank8, ho_ImageMedian22, &ho_RegionDynThresh22, 10,
						"dark");

				}

				Connection(ho_RegionOpening60, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					90000, 9995999);
				CountObj(ho_SelectedRegions55, &hv_Number37);
				if (0 != hv_Number37)
				{
					RegionFeatures(ho_SelectedRegions55, "row", &hv_Value27);
					TupleMax(hv_Value27, &hv_Max18);
					SelectShape(ho_SelectedRegions55, &ho_SelectedRegions175, "row", "and",
						hv_Max18, hv_Max18);
					SmallestRectangle1(ho_SelectedRegions175, &hv_Row11, &hv_Column11, &hv_Row21,
						&hv_Column21);
					hv_R = hv_Row21 - 2543;
					hv_C = hv_Column21 - 740;
				}
				if (0 != (int(hv_Number37 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//过切
				GenRectangle1(&ho_ROI_0, 2410.429, 900.64, 2709.377, 4093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 30, 45, 0.2, 11, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 120, 1);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
					2750, 99999);
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>5)))
				{
					ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
				}

				Union1(ho_SelectedRegions77, &ho_RegionUnion42);
				ClosingRectangle1(ho_RegionUnion42, &ho_RegionClosing30, 10, 100);
				ShapeTrans(ho_RegionClosing30, &ho_RegionTrans3, "rectangle1");
				DilationRectangle1(ho_RegionTrans3, &ho_RegionDilation33, 901, 45);
				//提取镭雕检测区域

				//gen_rectangle1 (ROI_0, 31.6829, 19.98, 2648.01, 4075.02)
				//move_region (ROI_0, ROI_0, R, C)
				//reduce_domain (Image, ROI_0, ImageReduced25)

				//threshold (ImageReduced25, Region33, 75, 180)
				//opening_rectangle1 (Region33, RegionOpening48, 6, 3)
				//connection (RegionOpening48, ConnectedRegions36)
				//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 180, 80)
				//select_shape (RegionClosing13, SelectedRegions36, ['area','ratio'], 'and', [5e4,0.15], [5e7,9])
				//erosion_rectangle1 (SelectedRegions36, RegionErosion6, 21, 68)
				//difference (RegionErosion6, RegionDilation33, RegionErosion6)
				//union1 (RegionErosion6, RegionUnion2)
				//connection (RegionUnion2, ConnectedRegions8)
				//count_obj (ConnectedRegions8, Number14)
				//for i := 1 to Number14 by 1
				//select_obj (ConnectedRegions8, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 65;
				hv_R1[1] = 2049;
				hv_R1[2] = 2041;
				hv_R1[3] = 2064;
				hv_R1[4] = 2111;
				hv_R1[5] = 2189;
				hv_R1[6] = 2269;
				hv_R1[7] = 2348;
				hv_R1[8] = 2348;
				hv_R1[9] = 2195;
				hv_R1[10] = 2031;
				hv_R1[11] = 1966;
				hv_R1[12] = 1890;
				hv_R1[13] = 1817;
				hv_R1[14] = 1504;
				hv_R1[15] = 1079;
				hv_R1[16] = 1026;
				hv_R1[17] = 952;
				hv_R1[18] = 908;
				hv_R1[19] = 876;
				hv_R1[20] = 709;
				hv_R1[21] = 142;
				hv_R1[22] = 138;
				hv_R1[23] = 103;
				hv_R1[24] = 65;
				hv_R1[25] = 65;
				hv_C1.Clear();
				hv_C1[0] = 716;
				hv_C1[1] = 706;
				hv_C1[2] = 496;
				hv_C1[3] = 427;
				hv_C1[4] = 349;
				hv_C1[5] = 275;
				hv_C1[6] = 229;
				hv_C1[7] = 209;
				hv_C1[8] = 30;
				hv_C1[9] = 30;
				hv_C1[10] = 200;
				hv_C1[11] = 372;
				hv_C1[12] = 452;
				hv_C1[13] = 473;
				hv_C1[14] = 475;
				hv_C1[15] = 474;
				hv_C1[16] = 457;
				hv_C1[17] = 391;
				hv_C1[18] = 256;
				hv_C1[19] = 205;
				hv_C1[20] = 30;
				hv_C1[21] = 30;
				hv_C1[22] = 513;
				hv_C1[23] = 578;
				hv_C1[24] = 603;
				hv_C1[25] = 716;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 65;
				hv_R2[1] = 267;
				hv_R2[2] = 510;
				hv_R2[3] = 801;
				hv_R2[4] = 903;
				hv_R2[5] = 938;
				hv_R2[6] = 953;
				hv_R2[7] = 953;
				hv_R2[8] = 988;
				hv_R2[9] = 1141;
				hv_R2[10] = 1157;
				hv_R2[11] = 1378;
				hv_R2[12] = 1586;
				hv_R2[13] = 1740;
				hv_R2[14] = 1811;
				hv_R2[15] = 1834;
				hv_R2[16] = 2512;
				hv_R2[17] = 2512;
				hv_R2[18] = 2144;
				hv_R2[19] = 2011;
				hv_R2[20] = 65;
				hv_R2[21] = 65;
				hv_C2.Clear();
				hv_C2[0] = 1493;
				hv_C2[1] = 1574;
				hv_C2[2] = 1699;
				hv_C2[3] = 1895;
				hv_C2[4] = 1989;
				hv_C2[5] = 1989;
				hv_C2[6] = 2001;
				hv_C2[7] = 2033;
				hv_C2[8] = 2052;
				hv_C2[9] = 2223;
				hv_C2[10] = 2224;
				hv_C2[11] = 2513;
				hv_C2[12] = 2877;
				hv_C2[13] = 3299;
				hv_C2[14] = 3651;
				hv_C2[15] = 4065;
				hv_C2[16] = 4065;
				hv_C2[17] = 763;
				hv_C2[18] = 765;
				hv_C2[19] = 735;
				hv_C2[20] = 748;
				hv_C2[21] = 1493;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				ErosionRectangle1(ho_RegionUnion50, &ho_RegionErosion1, 51, 71);
				MoveRegion(ho_RegionErosion1, &ho_RegionMoved36, hv_R, hv_C);
				Difference(ho_RegionMoved36, ho_RegionDilation33, &ho_RegionMoved36);

				GenRectangle1(&ho_ROI_0, 1790.41, 346.2, 2234.56, 852.07);
				GenRectangle1(&ho_TMP_Region, 2112.49, 14.4694, 2420.78, 329.302);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				Difference(ho_RegionMoved36, ho_ROI_0, &ho_RegionMoved36);
				ReduceDomain(ho_Image, ho_RegionMoved36, &ho_ImageReduced17);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 40);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 22);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_ratio_value", 3);
				SetDictObject(ho_RegionMoved36, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 16);
				Det_LD_Region(hv_dd, (*hv_dt));
				//检测BLC刀纹
				ClosingRectangle1(ho_RegionMoved36, &ho_RegionClosing58, 90, 10);
				Difference(ho_RegionClosing58, ho_RegionMoved36, &ho_RegionDifference60);
				Connection(ho_RegionDifference60, &ho_ConnectedRegions90);
				SelectShape(ho_ConnectedRegions90, &ho_SelectedRegions162, (HTuple("area").Append("ratio")),
					"and", (HTuple(15000).Append(10)), (HTuple(199999).Append(140)));
				DilationRectangle1(ho_SelectedRegions162, &ho_RegionDilation47, 100, 1);
				ReduceDomain(ho_Image, ho_RegionDilation47, &ho_ImageReduced100);
				GrayClosingRect(ho_ImageReduced100, &ho_ImageClosing24, 37, 3);
				SubImage(ho_ImageReduced100, ho_ImageClosing24, &ho_ImageSub10, 1, 128);
				Threshold(ho_ImageSub10, &ho_Region94, 0, 60);
				OpeningRectangle1(ho_Region94, &ho_RegionOpening33, 4, 2);
				Connection(ho_RegionOpening33, &ho_ConnectedRegions131);
				SelectShape(ho_ConnectedRegions131, &ho_SelectedRegions163, (HTuple("area").Append("width")),
					"and", (HTuple(45).Append(14)), (HTuple(1999).Append(99)));
				Union1(ho_SelectedRegions163, &ho_RegionUnion53);
				CountObj(ho_RegionUnion53, &hv_Number62);
				if (0 != hv_Number62)
				{
					AreaCenter(ho_RegionUnion53, &hv_Area10, &hv_Row10, &hv_Column10);
					if (0 != (int(hv_Area10>2000)))
					{
						ConcatObj(ho_RegionUnion53, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
					}
				}
				//下侧镭雕缺陷
				GenRectangle1(&ho_ROI_0, 2521.94, -36.973, 2947.92, 4883.48);
				MoveRegion(ho_ROI_0, &ho_RegionMoved37, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				Threshold(ho_ImageReduced1, &ho_Region2, 159, 255);
				Connection(ho_Region2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 111150,
					9999999);
				OpeningCircle(ho_SelectedRegions5, &ho_SelectedRegions5, 9.5);
				ClosingRectangle1(ho_SelectedRegions5, &ho_RegionClosing21, 70, 20);
				OpeningRectangle1(ho_RegionClosing21, &ho_RegionOpening30, 80, 10);
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved16, -48, 0);
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved17, -10, 0);
				Difference(ho_RegionMoved16, ho_RegionMoved17, &ho_RegionDifference4);
				OpeningRectangle1(ho_RegionDifference4, &ho_RegionOpening56, 800, 10);
				Connection(ho_RegionOpening56, &ho_ConnectedRegions128);
				SelectShape(ho_ConnectedRegions128, &ho_SelectedRegions157, "area", "and",
					11150, 299999);
				GenRectangle1(&ho_ROI_1, 2310.25, 0, 2770.72, 895.975);
				Difference(ho_SelectedRegions157, ho_ROI_1, &ho_SelectedRegions157);
				ReduceDomain(ho_Image, ho_SelectedRegions157, &ho_ImageReduced20);

				RankRect(ho_ImageReduced20, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 116);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 37);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 3);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, (HTuple("area").Append("height")),
					"and", (HTuple(150).Append(16)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 96);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>230)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}

				GrayOpeningRect(ho_ImageReduced20, &ho_ImageClosing1, 30, 50);
				Threshold(ho_ImageClosing1, &ho_Region60, 0, 42);
				Connection(ho_Region60, &ho_ConnectedRegions63);
				SelectShape(ho_ConnectedRegions63, &ho_SelectedRegions6, (((HTuple("area").Append("column")).Append("ratio")).Append("height")),
					"and", (((HTuple(150).Append(1000)).Append(0.24)).Append(11)), (((HTuple(99999).Append(4300)).Append(9)).Append(90)));
				ConcatObj(ho_SelectedRegions6, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//B基准压伤
				ErosionRectangle1(ho_RegionOpening30, &ho_RegionErosion7, 11, 52);
				MoveRegion(ho_RegionErosion7, &ho_RegionMoved13, -10, 1);
				Union1(ho_RegionMoved13, &ho_RegionMoved13);
				ReduceDomain(ho_Image, ho_RegionMoved13, &ho_ImageReduced32);
				//hei
				GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 19, 11);
				SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 2, 128);
				Threshold(ho_ImageSub5, &ho_Region23, 0, 50);
				Connection(ho_Region23, &ho_ConnectedRegions34);
				SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(35).Append(0.24)).Append(0)), ((HTuple(2000).Append(9)).Append(6)));
				SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions85, "mean",
					"and", 0, 140);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions85, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}

				GenRectangle1(&ho_ROI_0, 2465.47, 289.327, 2970.44, 486.957);
				Difference(ho_RegionClosing21, ho_RegionMoved13, &ho_RegionDifference15);
				//YJH增
				Difference(ho_RegionDifference15, ho_ROI_0, &ho_RegionDifference15);
				OpeningRectangle1(ho_RegionDifference15, &ho_RegionOpening10, 8, 8);
				Connection(ho_RegionOpening10, &ho_ConnectedRegions23);
				SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions30, "area", "and",
					15000, 799999);
				ReduceDomain(ho_Image, ho_SelectedRegions30, &ho_ImageReduced13);
				Threshold(ho_ImageReduced13, &ho_Region14, 0, 120);
				Connection(ho_Region14, &ho_ConnectedRegions24);
				SelectShape(ho_ConnectedRegions24, &ho_SelectedRegions33, (HTuple("area").Append("ratio")),
					"and", (HTuple(54).Append(0.12)), (HTuple(99999).Append(6)));
				ConcatObj(ho_SelectedRegions33, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				//bai
				//threshold (ImageOpening3, Region28, 245, 255)
				//connection (Region28, ConnectedRegions35)
				//select_shape (ConnectedRegions35, SelectedRegions34, ['area','column'], 'and', [20,440], [80,5000])
				//concat_obj (SelectedRegions34, dt.['63'], dt.['63'])
				//打磨痕
				Intensity(ho_ImageReduced32, ho_Image, &hv_Mean, &hv_Deviation);
				if (0 != (int(hv_Mean<118)))
				{
					if (0 != hv_c)
					{
						ConcatObj(ho_RegionErosion7, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					}
				}
				//RT缺陷
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved35, 34, 0);
				Difference(ho_RegionMoved35, ho_RegionOpening30, &ho_RegionDifference58);
				ErosionRectangle1(ho_RegionDifference58, &ho_RegionErosion33, 11, 13);
				ReduceDomain(ho_Image, ho_RegionErosion33, &ho_ImageReduced99);
				GrayClosingRect(ho_ImageReduced99, &ho_ImageClosing12, 100, 1);
				//bai
				VarThreshold(ho_ImageClosing12, &ho_Region115, 95, 2, 0.2, 22, "light");
				Threshold(ho_ImageClosing12, &ho_Region88, 225, 255);
				Connection(ho_Region88, &ho_ConnectedRegions118);
				SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, (HTuple("area").Append("ratio")),
					"and", (HTuple(80).Append(0.01)), (HTuple(1999).Append(5)));
				//concat_obj (SelectedRegions135, dt.['63'], dt.['63'])

				Threshold(ho_ImageReduced99, &ho_Region45, 75, 255);
				ClosingRectangle1(ho_Region45, &ho_RegionClosing16, 200, 2);
				Connection(ho_RegionClosing16, &ho_ConnectedRegions10);
				RegionFeatures(ho_ConnectedRegions10, "row", &hv_Value);
				TupleMax(hv_Value, &hv_Max);
				SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions10, "row", "and", hv_Max,
					hv_Max);
				ReduceDomain(ho_ImageReduced99, ho_SelectedRegions10, &ho_ImageReduced36);
				Threshold(ho_ImageReduced36, &ho_Region46, 0, 80);
				OpeningRectangle1(ho_Region46, &ho_RegionOpening26, 3, 3);
				Connection(ho_RegionOpening26, &ho_ConnectedRegions29);
				SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, (HTuple("area").Append("ratio")),
					"and", (HTuple(150).Append(0.12)), (HTuple(1999).Append(8)));
				ConcatObj(ho_SelectedRegions47, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
			}
			if (0 != (int(hv_ImageNum == 11)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1324.85, 3162.2, 2559.5, 4086.72);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening70, 7, 7);
				Connection(ho_RegionOpening70, &ho_ConnectedRegions55);

				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					90000, 995999);
				CountObj(ho_SelectedRegions55, &hv_Number14);
				if (0 != hv_Number14)
				{
					SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
						&hv_Column21);
					hv_R = hv_Row11 - 2159;
					hv_C = hv_Column11 - 3468;
				}
				if (0 != (int(hv_Number14 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}

				//过切
				GenRectangle1(&ho_ROI_0, 2410.429, 13.64, 2739.377, 3093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 40, 60, 0.2, 13, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 1);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 30, 1);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
					2450, 99999);
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>3)))
				{
					ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
				}

				//提取镭雕检测区域
				Union1(ho_SelectedRegions77, &ho_RegionUnion3);
				ClosingRectangle1(ho_RegionUnion3, &ho_RegionClosing, 50, 50);
				DilationRectangle1(ho_RegionClosing, &ho_RegionDilation37, 1311, 41);
				GenRectangle1(&ho_ROI_0, 0.6829, 19.98, 2598.01, 4075.02);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 50, 160)
				//connection (Region33, ConnectedRegions36)
				//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 80, 80)
				//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 5e7)
				//erosion_rectangle1 (SelectedRegions36, RegionErosion6, 21, 21)
				//get_region_polygon (RegionErosion6, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)

				hv_R1.Clear();
				hv_R1[0] = 11;
				hv_R1[1] = 2151;
				hv_R1[2] = 2154;
				hv_R1[3] = 2174;
				hv_R1[4] = 2245;
				hv_R1[5] = 2588;
				hv_R1[6] = 2588;
				hv_R1[7] = 1871;
				hv_R1[8] = 1850;
				hv_R1[9] = 1757;
				hv_R1[10] = 1597;
				hv_R1[11] = 1396;
				hv_R1[12] = 1108;
				hv_R1[13] = 770;
				hv_R1[14] = 387;
				hv_R1[15] = 11;
				hv_R1[16] = 11;
				hv_C1.Clear();
				hv_C1[0] = 4065;
				hv_C1[1] = 4065;
				hv_C1[2] = 3565;
				hv_C1[3] = 3512;
				hv_C1[4] = 3466;
				hv_C1[5] = 3456;
				hv_C1[6] = 30;
				hv_C1[7] = 30;
				hv_C1[8] = 490;
				hv_C1[9] = 914;
				hv_C1[10] = 1315;
				hv_C1[11] = 1655;
				hv_C1[12] = 2002;
				hv_C1[13] = 2295;
				hv_C1[14] = 2526;
				hv_C1[15] = 2696;
				hv_C1[16] = 4065;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);

				MoveRegion(ho_Region71, &ho_Region71, hv_R, hv_C);
				Difference(ho_Region71, ho_RegionDilation37, &ho_RegionDifference);
				ErosionRectangle1(ho_RegionDifference, &ho_RegionDifference, 11, 51);
				MoveRegion(ho_RegionDifference, &ho_RegionMoved58, 18, 0);
				ReduceDomain(ho_Image, ho_RegionMoved58, &ho_ImageReduced17);

				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 33);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictObject(ho_RegionMoved58, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 60);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
				Det_LD_Region(hv_dd, (*hv_dt));

				//add
				MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
				MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 1, 95);

				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 16, "dark");

				Connection(ho_RegionDynThresh, &ho_ConnectedRegions173);
				SelectShape(ho_ConnectedRegions173, &ho_SelectedRegions209, "area", "and",
					20, 99999);
				Union1(ho_SelectedRegions209, &ho_RegionUnion64);
				ClosingRectangle1(ho_RegionUnion64, &ho_RegionClosing83, 5, 5);
				Connection(ho_RegionClosing83, &ho_ConnectedRegions174);
				SelectShape(ho_ConnectedRegions174, &ho_SelectedRegions210, "area", "and",
					1500, 99999);
				SelectGray(ho_SelectedRegions210, ho_ImageReduced17, &ho_SelectedRegions211,
					"mean", "and", 0, 100);
				ConcatObj(ho_SelectedRegions211, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");

				//下侧镭雕缺陷
				GenRectangle1(&ho_ROI_0, 2631.94, -36.973, 2947.92, 4883.48);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				Threshold(ho_ImageReduced1, &ho_Region2, 155, 255);
				Connection(ho_Region2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 111150,
					9999999);
				Union1(ho_SelectedRegions5, &ho_RegionUnion23);
				ClosingRectangle1(ho_RegionUnion23, &ho_RegionClosing21, 100, 10);
				MoveRegion(ho_RegionClosing21, &ho_RegionMoved16, -57, 0);
				MoveRegion(ho_RegionClosing21, &ho_RegionMoved17, -15, 0);
				Difference(ho_RegionMoved16, ho_RegionMoved17, &ho_RegionDifference4);
				ReduceDomain(ho_Image, ho_RegionDifference4, &ho_ImageReduced20);
				RankRect(ho_ImageReduced20, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 106);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 28);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, ((HTuple("area").Append("height")).Append("column")),
					"and", ((HTuple(150).Append(15)).Append(0)), ((HTuple(99999).Append(99)).Append(3150)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 118);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>230)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}
				//YJH新增漏镭雕
				MoveRegion(ho_RegionDifference4, &ho_RegionMoved69, -20, 1);
				DilationRectangle1(ho_RegionMoved69, &ho_RegionDilation54, 1, 15);
				ReduceDomain(ho_Image, ho_RegionDilation54, &ho_ImageReduced113);
				Threshold(ho_ImageReduced113, &ho_Region111, 230, 255);
				Connection(ho_Region111, &ho_ConnectedRegions168);
				ClosingRectangle1(ho_ConnectedRegions168, &ho_RegionClosing82, 15, 1);
				OpeningCircle(ho_RegionClosing82, &ho_RegionOpening69, 3.5);
				SelectShape(ho_RegionOpening69, &ho_SelectedRegions204, (HTuple("area").Append("width")),
					"and", (HTuple(15000).Append(2000)), (HTuple(99999).Append(3999)));
				ConcatObj(ho_SelectedRegions204, (*hv_dt).TupleGetDictObject("46"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "46");
				//B基准压伤
				if (0 != hv_c)
				{
					OpeningRectangle1(ho_RegionClosing21, &ho_RegionOpening29, 310, 10);
					ErosionRectangle1(ho_RegionOpening29, &ho_RegionErosion7, 11, 11);
					MoveRegion(ho_RegionErosion7, &ho_RegionMoved11, -24, 0);
					ReduceDomain(ho_Image, ho_RegionErosion7, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 29, 21);
					SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region23, 0, 50);
					Connection(ho_Region23, &ho_ConnectedRegions34);

					GenRectangle1(&ho_ROI_0, 2623.66, 3376.04, 2689.9, 3661.27);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_ConnectedRegions34, ho_ROI_0, &ho_RegionDifference40);
					SelectShape(ho_RegionDifference40, &ho_SelectedRegions32, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((HTuple(75).Append(0.2)).Append(0)), ((HTuple(2000).Append(9)).Append(5)));
					SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions19, "mean",
						"and", 0, 160);
					CountObj(ho_SelectedRegions19, &hv_Number1);
					if (0 != (int(hv_Number1<35)))
					{
						ConcatObj(ho_SelectedRegions19, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}
					//打磨痕
					Intensity(ho_ImageReduced32, ho_Image, &hv_Mean, &hv_Deviation);
					if (0 != (int(hv_Mean<183)))
					{
						ConcatObj(ho_RegionErosion7, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					}
				}

				//过切
				GenRectangle1(&ho_ROI_0, 1968.51, 3056.87, 2610.01, 4092.57);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced105);
				Threshold(ho_ImageReduced105, &ho_Region29, 0, 55);
				OpeningRectangle1(ho_Region29, &ho_RegionOpening54, 1, 12);
				Connection(ho_RegionOpening54, &ho_ConnectedRegions39);
				SelectShape(ho_ConnectedRegions39, &ho_SelectedRegions198, "area", "and",
					15000, 999999);
				ClosingRectangle1(ho_SelectedRegions198, &ho_RegionClosing52, 5, 5);
				OpeningRectangle1(ho_RegionClosing52, &ho_RegionOpening51, 20, 70);
				Difference(ho_ConnectedRegions39, ho_RegionOpening51, &ho_RegionDifference64
					);
				Connection(ho_RegionDifference64, &ho_ConnectedRegions164);
				SelectShape(ho_ConnectedRegions164, &ho_SelectedRegions193, "area", "and",
					1300, 99999);
				ConcatObj(ho_SelectedRegions193, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 681.191, 3203.16, 2499.28, 3685.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 109, 255);
				ClosingCircle(ho_Region58, &ho_RegionClosing72, 6.5);
				Connection(ho_RegionClosing72, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(7000).Append(0.5)), (HTuple(999999).Append(1)));
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				CountObj(ho_SelectedRegions55, &hv_Number19);
				if (0 != hv_Number19)
				{
					hv_R = hv_Row11 - 2100;
					hv_C = hv_Column11 - 3374;
					//过切
					GenRectangle1(&ho_ROI_0, 2260.429, 635.64, 2700.377, 1290.05);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
					VarThreshold(ho_ImageReduced54, &ho_Region65, 2, 45, 0.2, 11, "dark");
					OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
					ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 40, 1);
					Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
					SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
						150, 99999);
					CountObj(ho_SelectedRegions77, &hv_Number);
					Union1(ho_SelectedRegions77, &ho_RegionUnion35);
					RegionFeatures(ho_RegionUnion35, "area", &hv_Value3);
					if (0 != (HTuple(int(hv_Number>0)).TupleAnd(int(hv_Value3>1000))))
					{
						ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					}
					//开裂
					Connection(ho_Region65, &ho_ConnectedRegions85);
					SelectShape(ho_ConnectedRegions85, &ho_SelectedRegions91, ((HTuple("area").Append("width")).Append("ratio")),
						"and", ((HTuple(900).Append(120)).Append(0.15)), ((HTuple(99999).Append(999)).Append(9)));
					VarThreshold(ho_ImageReduced54, &ho_Region96, 2, 45, 0.2, 16, "dark");
					Connection(ho_Region96, &ho_ConnectedRegions136);
					SelectShape(ho_ConnectedRegions136, &ho_SelectedRegions169, (HTuple("area").Append("height")),
						"and", (HTuple(1000).Append(55)), (HTuple(99999).Append(500)));
					SelectGray(ho_SelectedRegions169, ho_Image, &ho_SelectedRegions170, "mean",
						"and", 0, 80);
					ConcatObj(ho_SelectedRegions170, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");
					ConcatObj(ho_SelectedRegions91, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");

					//提取镭雕检测区域
					//gen_rectangle1 (ROI_0, 31.6829, 19.98, 2618.01, 4075.02)

					//reduce_domain (Image, ROI_0, ImageReduced25)
					//threshold (ImageReduced25, Region33, 65, 160)
					//opening_rectangle1 (Region33, RegionOpening14, 2, 2)
					//connection (RegionOpening14, ConnectedRegions36)
					//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 30, 30)
					//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 5e7)
					//erosion_rectangle1 (SelectedRegions36, RegionErosion6, 51, 61)
					//connection (RegionErosion6, ConnectedRegions26)
					//select_shape (ConnectedRegions26, SelectedRegions26, 'area', 'and', 5e5, 5e7)
					//get_region_polygon (SelectedRegions26, 10, Rows, Columns)
					//gen_region_polygon (Region73, Rows, Columns)

					hv_R1.Clear();
					hv_R1[0] = 62;
					hv_R1[1] = 146;
					hv_R1[2] = 1349;
					hv_R1[3] = 1431;
					hv_R1[4] = 1477;
					hv_R1[5] = 1531;
					hv_R1[6] = 1839;
					hv_R1[7] = 1843;
					hv_R1[8] = 1866;
					hv_R1[9] = 1900;
					hv_R1[10] = 2170;
					hv_R1[11] = 2155;
					hv_R1[12] = 2155;
					hv_R1[13] = 2177;
					hv_R1[14] = 2203;
					hv_R1[15] = 2293;
					hv_R1[16] = 2340;
					hv_R1[17] = 2342;
					hv_R1[18] = 2369;
					hv_R1[19] = 2371;
					hv_R1[20] = 2396;
					hv_R1[21] = 2394;
					hv_R1[22] = 2337;
					hv_R1[23] = 2320;
					hv_R1[24] = 2317;
					hv_R1[25] = 2345;
					hv_R1[26] = 2388;
					hv_R1[27] = 2588;
					hv_R1[28] = 2588;
					hv_R1[29] = 2265;
					hv_R1[30] = 2203;
					hv_R1[31] = 2163;
					hv_R1[32] = 2141;
					hv_R1[33] = 2137;
					hv_R1[34] = 62;
					hv_R1[35] = 62;
					hv_C1.Clear();
					hv_C1[0] = 3112;
					hv_C1[1] = 3094;
					hv_C1[2] = 3091;
					hv_C1[3] = 3072;
					hv_C1[4] = 3010;
					hv_C1[5] = 2979;
					hv_C1[6] = 2969;
					hv_C1[7] = 2243;
					hv_C1[8] = 2207;
					hv_C1[9] = 2195;
					hv_C1[10] = 2197;
					hv_C1[11] = 2166;
					hv_C1[12] = 2081;
					hv_C1[13] = 2045;
					hv_C1[14] = 2031;
					hv_C1[15] = 2031;
					hv_C1[16] = 2049;
					hv_C1[17] = 1985;
					hv_C1[18] = 1942;
					hv_C1[19] = 1878;
					hv_C1[20] = 1830;
					hv_C1[21] = 1622;
					hv_C1[22] = 1599;
					hv_C1[23] = 1563;
					hv_C1[24] = 1337;
					hv_C1[25] = 1297;
					hv_C1[26] = 1276;
					hv_C1[27] = 1273;
					hv_C1[28] = 628;
					hv_C1[29] = 628;
					hv_C1[30] = 613;
					hv_C1[31] = 581;
					hv_C1[32] = 513;
					hv_C1[33] = 45;
					hv_C1[34] = 45;
					hv_C1[35] = 3112;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					ErosionRectangle1(ho_Region71, &ho_RegionErosion17, 39, 21);
					MoveRegion(ho_RegionErosion17, &ho_RegionMoved6, hv_R, hv_C - 3);

					ReduceDomain(ho_Image, ho_RegionMoved6, &ho_ImageReduced17);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictObject(ho_RegionMoved6, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 19);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 60);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 14);
					Det_LD_Region(hv_dd, (*hv_dt));
					//add
					MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 1, 95);

					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 15,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions173);
					SelectShape(ho_ConnectedRegions173, &ho_SelectedRegions209, "area", "and",
						20, 99999);
					Union1(ho_SelectedRegions209, &ho_RegionUnion64);
					ClosingRectangle1(ho_RegionUnion64, &ho_RegionClosing83, 8, 5);
					Connection(ho_RegionClosing83, &ho_ConnectedRegions174);
					SelectShape(ho_ConnectedRegions174, &ho_SelectedRegions210, "area", "and",
						1500, 99999);
					SelectGray(ho_SelectedRegions210, ho_ImageReduced17, &ho_SelectedRegions211,
						"mean", "and", 0, 110);
					ConcatObj(ho_SelectedRegions211, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					ErosionRectangle1(ho_ROI_0, &ho_ROI_0, 121, 501);
					MoveRegion(ho_ROI_0, &ho_ROI_0, 270, 0);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}

				//B基准压伤
				GenRectangle1(&ho_ROI_0, 2566.31, 31.6829, 2896.65, 2524.39);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced24);
				Threshold(ho_ImageReduced24, &ho_Region30, 160, 255);
				Connection(ho_Region30, &ho_ConnectedRegions43);
				CountObj(ho_ConnectedRegions43, &hv_Number38);
				if (0 != hv_Number38)
				{
					RegionFeatures(ho_ConnectedRegions43, "area", &hv_Value6);
					TupleMax(hv_Value6, &hv_Max2);
					SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions39, "area", "and",
						hv_Max2, hv_Max2);
					//closing_rectangle1 (SelectedRegions39, RegionClosing10, 10, 30)
					OpeningRectangle1(ho_SelectedRegions39, &ho_RegionOpening22, 30, 30);
					ClosingRectangle1(ho_RegionOpening22, &ho_RegionClosing28, 60, 30);
					ErosionRectangle1(ho_RegionClosing28, &ho_RegionErosion7, 21, 51);
					MoveRegion(ho_RegionErosion7, &ho_RegionMoved4, -22, 0);
					ReduceDomain(ho_Image, ho_RegionMoved4, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 29, 21);
					SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 1.8, 128);
					Threshold(ho_ImageSub5, &ho_Region23, 0, 70);
					Connection(ho_Region23, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, (HTuple("area").Append("anisometry")),
						"and", (HTuple(25).Append(0)), (HTuple(2000).Append(4.5)));
					SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions121, "mean",
						"and", 0, 175);
					if (0 != hv_c)
					{
						ConcatObj(ho_SelectedRegions121, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}

					Difference(ho_RegionClosing28, ho_RegionMoved4, &ho_RegionDifference32);
					OpeningRectangle1(ho_RegionDifference32, &ho_RegionOpening31, 20, 10);
					Connection(ho_RegionOpening31, &ho_ConnectedRegions87);
					SelectShape(ho_ConnectedRegions87, &ho_SelectedRegions1, "area", "and",
						10050, 699999);
					ErosionRectangle1(ho_SelectedRegions1, &ho_RegionErosion19, 11, 3);
					ReduceDomain(ho_Image, ho_RegionErosion19, &ho_ImageReduced66);
					GrayClosingRect(ho_ImageReduced66, &ho_ImageClosing6, 21, 21);
					SubImage(ho_ImageReduced66, ho_ImageClosing6, &ho_ImageSub17, 1, 128);
					Threshold(ho_ImageSub17, &ho_Region68, 0, 30);
					Connection(ho_Region68, &ho_ConnectedRegions88);
					SelectShape(ho_ConnectedRegions88, &ho_SelectedRegions101, "area", "and",
						90, 99999);
					ConcatObj(ho_SelectedRegions101, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//jl add 尝试检测B基准崩胶

				GenRectangle1(&ho_ROI_0, 2294.18, 2306.85, 2760.74, 2886.79);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced143);
				ScaleImage(ho_ImageReduced143, &ho_ImageScaled8, 2.31, -20);
				RankRect(ho_ImageScaled8, &ho_ImageRank10, 3, 3, 5);
				GrayClosingRect(ho_ImageRank10, &ho_ImageClosing37, 100, 100);
				SubImage(ho_ImageRank10, ho_ImageClosing37, &ho_ImageSub34, 1, 128);
				Threshold(ho_ImageSub34, &ho_Region139, 0, 90);
				Connection(ho_Region139, &ho_ConnectedRegions216);
				SelectShape(ho_ConnectedRegions216, &ho_SelectedRegions265, (HTuple("area").Append("anisometry")),
					"and", (HTuple(3000).Append(1)), (HTuple(99999).Append(4.5)));
				ConcatObj(ho_SelectedRegions265, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//B基准塑胶压伤
				GenRectangle1(&ho_ROI_0, 2319.59, 1722.75, 2629.72, 2348.85);

				GenRectangle1(&ho_ROI_0, 1674.48, 2137.84, 2043.12, 2676.17);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced102);
				Threshold(ho_ImageReduced102, &ho_Region108, 220, 255);
				Connection(ho_Region108, &ho_ConnectedRegions234);
				SelectShape(ho_ConnectedRegions234, &ho_SelectedRegions283, "area", "and",
					50, 99999);
				Union1(ho_SelectedRegions283, &ho_RegionUnion78);
				ClosingRectangle1(ho_RegionUnion78, &ho_RegionClosing109, 12, 12);
				Connection(ho_RegionClosing109, &ho_ConnectedRegions153);
				SelectShape(ho_ConnectedRegions153, &ho_SelectedRegions180, "area", "and",
					15000, 99999);
				ClosingCircle(ho_SelectedRegions180, &ho_RegionClosing49, 33.5);
				ErosionRectangle1(ho_RegionClosing49, &ho_RegionErosion34, 8, 27);
				ReduceDomain(ho_ImageReduced102, ho_RegionErosion34, &ho_ImageReduced103);
				GrayClosingRect(ho_ImageReduced103, &ho_ImageClosing20, 11, 11);
				SubImage(ho_ImageReduced103, ho_ImageClosing20, &ho_ImageSub30, 1, 128);
				Threshold(ho_ImageSub30, &ho_Region109, 0, 60);
				Connection(ho_Region109, &ho_ConnectedRegions154);
				SelectShape(ho_ConnectedRegions154, &ho_SelectedRegions181, "area", "and",
					300, 99999);
				ConcatObj(ho_SelectedRegions181, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//BLC漏铁
				//
				//焊缝过切
				GenRectangle1(&ho_ROI_0, 2580.81, 554.635, 2854.85, 1285.97);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced75);
				Threshold(ho_ImageReduced75, &ho_Region40, 177, 255);
				OpeningRectangle1(ho_Region40, &ho_RegionOpening37, 2, 2);
				Connection(ho_RegionOpening37, &ho_ConnectedRegions92);
				SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions104, "area", "and",
					8500, 919999);
				CountObj(ho_SelectedRegions104, &hv_Number28);
				if (0 != hv_Number28)
				{
					RegionFeatures(ho_SelectedRegions104, "row", &hv_Value19);
					TupleMax(hv_Value19, &hv_Max12);
					SelectShape(ho_SelectedRegions104, &ho_SelectedRegions129, "row", "and",
						hv_Max12 - 5, hv_Max12 + 5);
					ClosingRectangle1(ho_SelectedRegions129, &ho_RegionClosing55, 20, 20);
					OpeningRectangle1(ho_RegionClosing55, &ho_RegionOpening39, 100, 6);
					ShapeTrans(ho_RegionOpening39, &ho_RegionTrans10, "rectangle2");
					Difference(ho_RegionTrans10, ho_RegionOpening39, &ho_RegionDifference71
						);
					Connection(ho_RegionDifference71, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions105, (HTuple("area").Append("height")),
						"and", (HTuple(1500).Append(40)), (HTuple(4999).Append(99)));
					ConcatObj(ho_SelectedRegions105, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					CountObj(ho_SelectedRegions105, &hv_Number11);
					if (0 != (int(hv_Number11 == 0)))
					{
						GenEmptyRegion(&ho_EmptyRegion);
						MoveRegion(ho_RegionTrans10, &ho_RegionMoved19, -44, 0);
						MoveRegion(ho_RegionTrans10, &ho_RegionMoved21, -5, 0);
						Difference(ho_RegionMoved19, ho_RegionMoved21, &ho_RegionDifference54
							);
						Difference(ho_RegionDifference54, ho_RegionClosing28, &ho_RegionDifference45
							);
						ErosionRectangle1(ho_RegionDifference45, &ho_RegionErosion10, 101, 5);
						ReduceDomain(ho_ImageReduced75, ho_RegionErosion10, &ho_ImageReduced62
							);
						//test*
						RankRect(ho_ImageReduced62, &ho_ImageRank, 10, 5, 30);
						GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
						SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
						Threshold(ho_ImageSub14, &ho_Region21, 0, 45);
						Connection(ho_Region21, &ho_ConnectedRegions112);
						SelectShape(ho_ConnectedRegions112, &ho_SelectedRegions117, (HTuple("area").Append("height")),
							"and", (HTuple(150).Append(6)), (HTuple(99999).Append(99)));
						SelectGray(ho_SelectedRegions117, ho_Image, &ho_SelectedRegions7, "mean",
							"and", 0, 100);
						ConcatObj(ho_SelectedRegions7, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

						//长横
						//gray_closing_rect (ImageRank, ImageClosing15, 1, 170)
						//sub_image (ImageRank, ImageClosing15, ImageSub3, 2, 128)
						//threshold (ImageSub3, Region21, 0, 45)
						//connection (Region21, ConnectedRegions112)
						//select_shape (ConnectedRegions112, SelectedRegions117, ['area','height','width'], 'and', [390,3,50], [1200,99,999])
						//select_gray (SelectedRegions117, Image, SelectedRegions7, 'mean', 'and', 0, 85)
						//concat_obj (SelectedRegions7, dt.['64'], dt.['64'])
						//end*
						ErosionRectangle1(ho_RegionErosion10, &ho_RegionErosion23, 41, 1);
						MoveRegion(ho_RegionErosion23, &ho_RegionMoved46, 0, -20);
						ReduceDomain(ho_Image, ho_RegionMoved46, &ho_ImageReduced76);
						VarThreshold(ho_ImageReduced76, &ho_Region66, 55, 3, 0.2, 31, "dark");
						Connection(ho_Region66, &ho_ConnectedRegions81);
						SelectShape(ho_ConnectedRegions81, &ho_SelectedRegions89, "area", "and",
							30, 99999);
						MedianRect(ho_ImageReduced76, &ho_ImageMedian7, 3, 3);
						MedianRect(ho_ImageReduced76, &ho_ImageMedian8, 65, 29);
						DynThreshold(ho_ImageMedian7, ho_ImageMedian8, &ho_RegionDynThresh5,
							58, "light");
						Connection(ho_RegionDynThresh5, &ho_ConnectedRegions82);
						SelectShape(ho_ConnectedRegions82, &ho_SelectedRegions90, (HTuple("area").Append("ratio")),
							"and", (HTuple(16).Append(0.6)), (HTuple(99999).Append(3)));
						SelectShape(ho_ConnectedRegions82, &ho_SelectedRegions122, (HTuple("area").Append("circularity")),
							"and", (HTuple(14).Append(0.4)), (HTuple(90).Append(1)));
						CountObj(ho_SelectedRegions122, &hv_Number21);
						if (0 != (int(hv_Number21<5)))
						{
							Union2(ho_SelectedRegions89, ho_SelectedRegions90, &ho_RegionUnion46
								);
							Union1(ho_RegionUnion46, &ho_RegionUnion47);
							ClosingRectangle1(ho_RegionUnion47, &ho_RegionClosing34, 5, 5);
							Connection(ho_RegionClosing34, &ho_ConnectedRegions83);
							SelectShape(ho_ConnectedRegions83, &ho_SelectedRegions93, "area", "and",
								110, 99999);
							Difference(ho_ConnectedRegions83, ho_SelectedRegions89, &ho_RegionDifference49
								);
							Difference(ho_RegionDifference49, ho_SelectedRegions90, &ho_RegionDifference50
								);
							Connection(ho_RegionDifference50, &ho_ConnectedRegions84);
							SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions92, "area", "and",
								10, 99999);
							CountObj(ho_ConnectedRegions83, &hv_Number12);
							CountObj(ho_SelectedRegions92, &hv_Number13);
							if (0 != hv_Number13)
							{
								{
									HTuple end_val2977 = hv_Number12;
									HTuple step_val2977 = 1;
									for (hv_i = 1; hv_i.Continue(end_val2977, step_val2977); hv_i += step_val2977)
									{
										SelectObj(ho_ConnectedRegions83, &ho_ObjectSelected, hv_i);
										Intersection(ho_ObjectSelected, ho_SelectedRegions92, &ho_RegionIntersection
											);
										AreaCenter(ho_RegionIntersection, &hv_Area1, &hv_Row1, &hv_Column1);

										if (0 != hv_Area1)
										{
											Intersection(ho_ObjectSelected, ho_SelectedRegions89, &ho_RegionIntersection8
												);
											AreaCenter(ho_RegionIntersection8, &hv_Area8, &hv_Row8, &hv_Column8);
											if (0 != (int(hv_Area8>0)))
											{
												ConcatObj(ho_EmptyRegion, ho_ObjectSelected, &ho_EmptyRegion
													);
											}
										}
									}
								}
								Union1(ho_EmptyRegion, &ho_RegionUnion48);

								RegionFeatures(ho_RegionUnion48, "area", &hv_Value12);
								if (0 != (int(hv_Value12>200)))
								{
									SelectGray(ho_EmptyRegion, ho_Image, &ho_SelectedRegions118, "mean",
										"and", 0, 135);
									ConcatObj(ho_SelectedRegions118, (*hv_dt).TupleGetDictObject("64"),
										&ho___Tmp_Obj_0);
									SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
								}
								//hei
								GrayClosingRect(ho_ImageReduced62, &ho_ImageClosing5, 2, 2);
								RankRect(ho_ImageClosing5, &ho_ImageRank, 15, 15, 125);
								Threshold(ho_ImageRank, &ho_Region67, 0, 45);
								OpeningRectangle1(ho_Region67, &ho_RegionOpening45, 3, 6);
								Connection(ho_Region67, &ho_ConnectedRegions86);
								SelectShape(ho_ConnectedRegions86, &ho_SelectedRegions94, (HTuple("area").Append("height")),
									"and", (HTuple(150).Append(18)), (HTuple(99999).Append(99)));
								ConcatObj(ho_SelectedRegions94, (*hv_dt).TupleGetDictObject("64"),
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
							}
						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1657.33, 19.98, 2584.48, 2442.47);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 75, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening59, 15, 5);
				Connection(ho_RegionOpening59, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				RegionFeatures(ho_SelectedRegions, "width", &hv_Value36);
				TupleMax(hv_Value36, &hv_Max23);
				SelectShape(ho_SelectedRegions, &ho_SelectedRegions, "width", "and", hv_Max23 - 50,
					hv_Max23 + 50);
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 19, 25);

				GenRectangle1(&ho_ROI_0, 1950.88, 2316.88, 2478.88, 2472.06);

				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				MoveRegion(ho_RegionErosion3, &ho_RegionErosion3, 5, 0);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				GenRectangle1(&ho_ROI_0, 1657.33, 19.98, 2684.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 69, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening11, 15, 2);
				Connection(ho_RegionOpening11, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (((HTuple("area").Append("height")).Append("width")).Append("rectangularity")),
					"and", (((HTuple(100150).Append(140)).Append(3000)).Append(0.6)), (((HTuple(999999).Append(999)).Append(9999)).Append(1)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 118, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 13);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));

				RankRect(ho_ImageReduced5, &ho_ImageRank2, 10, 10, 8);
				GrayClosingRect(ho_ImageRank2, &ho_ImageClosing29, 40, 40);
				SubImage(ho_ImageRank2, ho_ImageClosing29, &ho_ImageSub16, 1.2, 128);
				Threshold(ho_ImageSub16, &ho_Region121, 0, 60);
				Connection(ho_Region121, &ho_ConnectedRegions194);
				SelectShape(ho_ConnectedRegions194, &ho_SelectedRegions241, (HTuple("area").Append("anisometry")),
					"and", (HTuple(650).Append(1)), (HTuple(1200).Append(5.9)));
				SelectGray(ho_SelectedRegions241, ho_Image, &ho_SelectedRegions242, "mean",
					"and", 0, 90);
				ConcatObj(ho_SelectedRegions242, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				GenRectangle1(&ho_ROI_0, 1657.33, 19.98, 2584.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 64, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening1, 14, 5);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(100150).Append(150)).Append(3000)), ((HTuple(999999).Append(999)).Append(9999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 23);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				GenRectangle1(&ho_ROI_0, 1857.33, 1219.98, 2484.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 62, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening21, 10, 3);
				Connection(ho_RegionOpening21, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 180, 30);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 16);

				GenRectangle1(&ho_ROI_0, 2038.72, 1716.89, 2490.86, 1822.22);
				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));

				//jl add 大面黑色弧形划伤
				MeanImage(ho_ImageReduced5, &ho_ImageMean11, 3, 3);
				MeanImage(ho_ImageReduced5, &ho_ImageMean12, 50, 50);
				DynThreshold(ho_ImageMean11, ho_ImageMean12, &ho_RegionDynThresh16, 32, "dark");
				Connection(ho_RegionDynThresh16, &ho_ConnectedRegions185);
				SelectShape(ho_ConnectedRegions185, &ho_SelectedRegions230, ((HTuple("area").Append("height")).Append("anisometry")),
					"and", ((HTuple(1250).Append(60)).Append(4.5)), ((HTuple(99999).Append(999)).Append(5)));
				SelectGray(ho_SelectedRegions230, ho_Image, &ho_SelectedRegions231, "mean",
					"and", 0, 85);
				ConcatObj(ho_SelectedRegions231, (*hv_dt).TupleGetDictObject("58"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "58");
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				GenRectangle1(&ho_ROI_0, 1787.33, 1459.98, 2484.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 66, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening27, 30, 3);
				Connection(ho_RegionOpening27, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(30150).Append(100)), (HTuple(999999).Append(999)));
				CountObj(ho_SelectedRegions, &hv_Number27);
				if (0 != hv_Number27)
				{
					RegionFeatures(ho_SelectedRegions, "row", &hv_Value13);
					TupleMax(hv_Value13, &hv_Max6);
					SelectShape(ho_SelectedRegions, &ho_SelectedRegions126, "row", "and", hv_Max6,
						hv_Max6);
					ClosingRectangle1(ho_SelectedRegions126, &ho_RegionClosing4, 40, 40);
					OpeningRectangle1(ho_RegionClosing4, &ho_RegionClosing4, 1, 28);
					ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 3);
					Union1(ho_RegionErosion3, &ho_RegionUnion9);

					SetDictObject(ho_RegionUnion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
					Det_Bjizhun_region(hv_dd, (*hv_dt));
					ReduceDomain(ho_ImageReduced4, ho_RegionUnion9, &ho_ImageReduced104);
					MeanImage(ho_ImageReduced104, &ho_ImageMean2, 10, 30);
					DynThreshold(ho_ImageReduced104, ho_ImageMean2, &ho_RegionDynThresh2, 55,
						"dark");
					Connection(ho_RegionDynThresh2, &ho_ConnectedRegions146);
					SelectShape(ho_ConnectedRegions146, &ho_SelectedRegions184, "area", "and",
						1000, 2999);
					ConcatObj(ho_SelectedRegions184, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				GenRectangle1(&ho_ROI_0, 1797.33, 10.98, 2424.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 86, 255);
				ClosingRectangle1(ho_Region1, &ho_RegionClosing78, 15, 2);
				OpeningRectangle1(ho_RegionClosing78, &ho_RegionOpening42, 12, 3);
				Connection(ho_RegionOpening42, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(90150).Append(130)).Append(3500)), ((HTuple(999999).Append(999)).Append(9999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 190, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 16);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				GenRectangle1(&ho_ROI_0, 1697.33, 10.98, 2424.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 78, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening44, 7, 3);
				Connection(ho_RegionOpening44, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(100150).Append(130)).Append(3000)), ((HTuple(999999).Append(999)).Append(9999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 12);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
				MeanImage(ho_ImageReduced5, &ho_ImageMean1, 50, 5);
				DynThreshold(ho_ImageReduced5, ho_ImageMean1, &ho_RegionDynThresh1, 50, "dark");
				Connection(ho_RegionDynThresh1, &ho_ConnectedRegions144);
				SelectShape(ho_ConnectedRegions144, &ho_SelectedRegions179, (HTuple("area").Append("anisometry")),
					"and", (HTuple(350).Append(1)), (HTuple(9999).Append(5)));
				ClosingCircle(ho_SelectedRegions179, &ho_RegionClosing67, 7.5);
				Connection(ho_RegionClosing67, &ho_ConnectedRegions145);
				SelectShape(ho_ConnectedRegions145, &ho_SelectedRegions183, "area", "and",
					650, 9999);
				ConcatObj(ho_SelectedRegions183, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				GenRectangle1(&ho_ROI_0, 1837.33, 10.98, 2524.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 78, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening24, 15, 2);
				OpeningCircle(ho_RegionOpening24, &ho_RegionOpening24, 19.5);
				Connection(ho_RegionOpening24, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(120)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 190, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 15);

				GenRectangle1(&ho_ROI_0, 2052.68, 2341.21, 2521.85, 2458.32);
				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				GenRectangle1(&ho_ROI_0, 935.68, 1797.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(1200)), (HTuple(999999).Append(9999)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 36, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				ErosionRectangle1(ho_RegionDifference10, &ho_RegionErosion14, 1, 11);

				GenRectangle1(&ho_ROI_0, 1038.15, 1951.27, 1494.52, 2454.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 65000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionErosion14, ho_RegionDilation10, &ho_RegionDifference5
					);
				ErosionRectangle1(ho_RegionDifference5, &ho_RegionErosion8, 11, 11);
				SetDictObject(ho_RegionErosion8, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));

			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 955.68, 0.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, "area", "and", 60150,
					999999);
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 36, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				ErosionRectangle1(ho_RegionDifference10, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 925.68, 0.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1189.52, 2038.72, 2015.32, 3800);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 20);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					10050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans9, "convex");
				Difference(ho_RegionDifference10, ho_RegionTrans9, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 925.68, 0.2, 1465.28, 2500.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference27);
				GenRectangle1(&ho_ROI_0, 1138.15, 1501.27, 1494.52, 2454.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 15000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionDifference27, ho_RegionDilation10, &ho_RegionDifference5
					);
				Connection(ho_RegionDifference5, &ho_ConnectedRegions51);
				SelectShape(ho_ConnectedRegions51, &ho_SelectedRegions59, "width", "and",
					1500, 99999);
				ErosionRectangle1(ho_SelectedRegions59, &ho_RegionErosion8, 11, 11);
				SetDictObject(ho_RegionErosion8, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				GenRectangle1(&ho_ROI_0, 825.68, 0.2, 1525.28, 1992.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(50150).Append(1700)), (HTuple(99999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 85, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				GenRectangle1(&ho_ROI_0, 1058.15, 1001.27, 1594.52, 1954.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 15000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionDifference10, ho_RegionDilation10, &ho_RegionDifference5
					);
				Connection(ho_RegionDifference5, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
					15000, 999999);
				ErosionRectangle1(ho_RegionDifference5, &ho_SelectedRegions49, 11, 11);
				Connection(ho_SelectedRegions49, &ho_ConnectedRegions78);
				SelectShape(ho_ConnectedRegions78, &ho_SelectedRegions86, "area", "and",
					15000, 996999);
				SetDictObject(ho_SelectedRegions49, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 0.2, 1595.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 140, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1093.36, 3276.66, 1807.96, 4137.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 23);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans4, "rectangle1");
				MoveRegion(ho_RegionTrans4, &ho_RegionMoved26, 0, 380);
				Union2(ho_RegionDilation12, ho_RegionMoved26, &ho_RegionUnion11);
				Difference(ho_RegionDifference10, ho_RegionUnion11, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 27)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 0.2, 1495.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(30150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 130, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1093.36, 0.66, 1807.96, 940.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 18);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans4, "rectangle1");

				Difference(ho_RegionDifference10, ho_RegionTrans4, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 28)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 2000.2, 1495.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(1500)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 130, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 980.36, 1840.66, 1490.96, 2950.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 18);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 5);

				Difference(ho_RegionDifference10, ho_RegionDilation12, &ho_RegionDifference14
					);

				GenRectangle1(&ho_ROI_0, 1097.91, 3249.6, 1721.29, 4118.74);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced3);
				Threshold(ho_ImageReduced3, &ho_Region6, 0, 35);
				OpeningRectangle1(ho_Region6, &ho_RegionOpening, 4, 5);
				Connection(ho_RegionOpening, &ho_ConnectedRegions14);
				SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions16, (HTuple("area").Append("height")),
					"and", (HTuple(15000).Append(60)), (HTuple(999999).Append(999)));
				Union1(ho_SelectedRegions16, &ho_RegionUnion43);
				ClosingRectangle1(ho_RegionUnion43, &ho_RegionClosing2, 130, 150);
				OpeningRectangle1(ho_RegionClosing2, &ho_RegionOpening5, 200, 10);
				DilationRectangle1(ho_RegionOpening5, &ho_RegionDilation2, 360, 11);
				OpeningCircle(ho_RegionDilation2, &ho_RegionOpening7, 63.5);
				MoveRegion(ho_RegionOpening7, &ho_RegionMoved1, -60, -580);
				Difference(ho_RegionDifference14, ho_RegionMoved1, &ho_RegionDifference6);
				ErosionRectangle1(ho_RegionDifference6, &ho_RegionErosion14, 1, 10);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 29)))
			{

			}
			if (0 != (int(hv_ImageNum == 30)))
			{


			}
			if (0 != (int(hv_ImageNum == 31)))
			{

			}
			if (0 != (int(hv_ImageNum == 32)))
			{

			}
			if (0 != (int(hv_ImageNum == 33)))
			{

			}
			if (0 != (int(hv_ImageNum == 34)))
			{

			}

		}
		if (0 != (HTuple(int(hv_StaNum == 4)).TupleAnd(int(hv_CamNum == 1))))
		{
			//********************四工位检测逻辑*************************
			//***一般逻辑
			//1.提取定位点
			//2.提取检测区域
			//3.根据定位点偏移检测区域
			//4.检测缺陷
			//***追加检测
			//1.提取检测区域(多数为直接画框后提取缺陷)
			//2.检测缺陷
			//***********************************************************
			if (0 != (int(hv_ImageNum == 1)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 0.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				//*test
				ScaleImage(ho_ImageReduced25, &ho_ImageScaled, 2.01, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 180, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing51, 3, 3);
				Connection(ho_RegionClosing51, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 160, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 51, 31);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点
				GenRectangle1(&ho_ROI_0, 143.67, 353.083, 855.267, 844.734);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				AutoThreshold(ho_ImageReduced63, &ho_Regions1, 2.5);
				Connection(ho_Regions1, &ho_ConnectedRegions124);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 110);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions95, (HTuple("area").Append("ratio")),
					"and", (HTuple(32600).Append(0.7)), (HTuple(199999).Append(3)));
				SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions148, "mean",
					"and", 0, 120);
				CountObj(ho_SelectedRegions148, &hv_Number68);
				if (0 != (int(hv_Number68 == 1)))
				{
					AreaCenter(ho_SelectedRegions148, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 608;
					hv_C = hv_Column2 - 660;

					GenRectangle1(&ho_ROI_0, 662.364, 3060.78, 1100.61, 3680.95);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationRectangle1(ho_SelectedRegions65, &ho_RegionDilation24, 31, 31);
					//检测圆内溢胶
					ClosingCircle(ho_SelectedRegions65, &ho_RegionClosing1, 53.5);
					Difference(ho_RegionClosing1, ho_SelectedRegions65, &ho_RegionDifference1
						);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions9, (HTuple("area").Append("ratio")),
						"and", (HTuple(450).Append(0.18)), (HTuple(99999).Append(8)));
					ConcatObj(ho_SelectedRegions9, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					GenRectangle1(&ho_ROI_0, 1249.89, -27.1035, 1415.35, 420.859);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
					Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
					Connection(ho_Region42, &ho_ConnectedRegions60);
					SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
						1000, 99999);
					CountObj(ho_SelectedRegions66, &hv_Number3);
					if (0 != (int(hv_Number3 == 2)))
					{
						DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21, 21);
						Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
							);
					}
					Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
						);
					GenRectangle1(&ho_ROI_0, 932.803, 2881.33, 1161.01, 3217.31);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionDifference31, ho_ROI_0, &ho_RegionErosion9);
					GenRectangle1(&ho_ROI_0, -35.3938, 3596.47, 101.165, 3997.86);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1383.36, 2319.59, 1576.46, 2518.54);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 22);
					Det_SJ_Region(hv_dd, (*hv_dt));
					//jl add   左侧断胶
					MedianRect(ho_ImageReduced53, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced53, &ho_ImageMedian31, 75, 75);
					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh15,
						10, "dark");
					ErosionRectangle1(ho_RegionErosion9, &ho_RegionErosion38, 25, 25);
					Intersection(ho_RegionDynThresh15, ho_RegionErosion38, &ho_RegionIntersection14
						);
					Connection(ho_RegionIntersection14, &ho_ConnectedRegions183);
					SelectShape(ho_ConnectedRegions183, &ho_SelectedRegions227, "area", "and",
						100, 99999);
					Union1(ho_SelectedRegions227, &ho_RegionUnion71);
					ClosingRectangle1(ho_RegionUnion71, &ho_RegionClosing92, 5, 5);
					Connection(ho_RegionClosing92, &ho_ConnectedRegions184);
					SelectShape(ho_ConnectedRegions184, &ho_SelectedRegions228, ((HTuple("area").Append("column")).Append("ratio")),
						"and", ((HTuple(280).Append(0)).Append(0.18)), ((HTuple(99999).Append(1000)).Append(99)));
					ConcatObj(ho_SelectedRegions228, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
				if (0 != (int(hv_Number68 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//检测圆周围

				GenRectangle1(&ho_ROI_0, 716.3, 3136.35, 1026.43, 3537.65);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced14);
				Threshold(ho_ImageReduced14, &ho_Region15, 188, 255);
				ClosingRectangle1(ho_Region15, &ho_RegionClosing3, 10, 10);
				Connection(ho_RegionClosing3, &ho_ConnectedRegions28);
				SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions34, (HTuple("area").Append("circularity")),
					"and", (HTuple(1500).Append(0.1)), (HTuple(99999).Append(0.4)));
				ConcatObj(ho_SelectedRegions34, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

				//横RT
				GenRectangle1(&ho_ROI_0, 1500.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 148, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 721.179, 2549.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				GenRectangle1(&ho_ROI_33, 566.54, 3738.5, 738.352, 3957.89);
				Difference(ho_RegionDifference74, ho_ROI_33, &ho_RegionDifference74);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					400, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					1);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 0.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				//提取检测区域
				ScaleImage(ho_ImageReduced25, &ho_ImageScaled, 1.31, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 155, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing44, 6, 1);
				Connection(ho_RegionClosing44, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(8800)), (HTuple(99999).Append(999999999)));
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 160, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 38);
				OpeningRectangle1(ho_Region39, &ho_RegionOpening57, 13, 2);
				ClosingCircle(ho_RegionOpening57, &ho_RegionOpening57, 6.5);
				Connection(ho_RegionOpening57, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					1115000, 999999999);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions223, (HTuple("area").Append("height")),
					"and", (HTuple(333150).Append(100)), (HTuple(9999999).Append(1500)));
				ClosingRectangle1(ho_SelectedRegions223, &ho_RegionClosing90, 50, 50);
				OpeningRectangle1(ho_RegionClosing90, &ho_RegionOpening73, 100, 1);
				Union2(ho_RegionOpening73, ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 31, 10);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点

				GenRectangle1(&ho_ROI_0, 143.67, 353.083, 855.267, 854.734);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				AutoThreshold(ho_ImageReduced63, &ho_Regions1, 2.3);
				Connection(ho_Regions1, &ho_ConnectedRegions124);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 120);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, "area", "and",
					38600, 199999);
				SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions148, "mean",
					"and", 0, 125);
				AreaCenter(ho_SelectedRegions148, &hv_Area2, &hv_Row2, &hv_Column2);
				CountObj(ho_SelectedRegions148, &hv_Number34);
				if (0 != (int(hv_Number34 == 1)))
				{
					//偏移距离
					hv_R = hv_Row2 - 608;
					hv_C = hv_Column2 - 660;
					GenRectangle1(&ho_ROI_0, 662.364, 3060.78, 1100.61, 3680.95);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);

					GenRectangle1(&ho_ROI_0, 1249.89, -27.1035, 1415.35, 420.859);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
					Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
					Connection(ho_Region42, &ho_ConnectedRegions60);
					SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
						1000, 99999);
					CountObj(ho_SelectedRegions66, &hv_Number3);
					if (0 != (int(hv_Number3 == 2)))
					{
						DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 30, 10);
						Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
							);
					}
					if (0 != (int(hv_Number3<2)))
					{
						ConcatObj(ho_SelectedRegions66, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
					}
					Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
						);


					GenRectangle1(&ho_ROI_0, 1401.27, 2316.6, 1557.85, 2493.4);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionDifference31, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 937.936, 2886.92, 1148.59, 3226.31);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					GenRectangle1(&ho_ROI_0, -20.42571, 3676.38, 63.3857, 4069.17);

					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 43.3857, 423.729, 1108.87, 1397.51);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					DilationRectangle1(ho_RegionErosion9, &ho_RegionDilation71, 2, 2);
					ErosionRectangle1(ho_RegionErosion9, &ho_RegionErosion31, 1, 29);
					MoveRegion(ho_RegionErosion31, &ho_RegionErosion9, 1, -5);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 25);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 800);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 50000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 210);
					ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0,
						5, 11);
					SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
					ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
						&ho_ImageReduced17);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
					//大亮白(Bsj漏铁)
					Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
						255);
					Connection(ho_Region73, &ho_ConnectedRegions96);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
						"and", (HTuple(15).Append(0.01)), (HTuple(8999).Append(16)));
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");
					//小面积黑
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");

					MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 75, 75);

					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
						(hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"), "dark");
					//YJH新增
					MeanImage(ho_ImageReduced17, &ho_ImageMean, 289, 7);
					DynThreshold(ho_ImageReduced17, ho_ImageMean, &ho_RegionDynThresh, 33,
						"dark");
					MeanImage(ho_ImageReduced17, &ho_ImageMean1, 500, 20);
					DynThreshold(ho_ImageReduced17, ho_ImageMean1, &ho_RegionDynThresh1, 29,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and",
						135, 999);
					Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, "area", "and",
						84, 99999);
					Union1(ho_SelectedRegions5, &ho_RegionUnion2);
					ClosingCircle(ho_RegionUnion2, &ho_RegionClosing2, 13.5);
					Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
						"and", (HTuple(135).Append(1)), (HTuple(99999).Append(11)));
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "area", "and",
						88, 99999);
					Union1(ho_SelectedRegions3, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_RegionClosing1, 20.5);
					Connection(ho_RegionClosing1, &ho_ConnectedRegions155);
					SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value")),
						HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value")));
					Union1(ho_SelectedRegions182, &ho_RegionUnion);
					ClosingCircle(ho_RegionUnion, &ho_RegionClosing, 13.5);
					Connection(ho_RegionClosing, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, "area", "and", 140,
						99999);

					//YJH新增
					Union2(ho_SelectedRegions2, ho_SelectedRegions4, &ho_SelectedRegions2);
					Union2(ho_SelectedRegions2, ho_SelectedRegions1, &ho_SelectedRegions1);
					ConcatObj(ho_SelectedRegions1, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					//大面积黑
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
					SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
					Threshold(ho_ImageSub9, &ho_Region40, 0, 50);


					Connection(ho_Region40, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0.2),
						(HTuple(999999).Append(7)));
					ConcatObj(ho_SelectedRegions40, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					ReduceDomain(ho_Image, ho_RegionDilation71, &ho_ImageReduced140);
					DerivateGauss(ho_ImageReduced140, &ho_DerivGauss, 2, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageReduced53, "byte");
					ErosionRectangle1(ho_RegionDilation71, &ho_RegionErosion35, 10, 10);
					MedianRect(ho_ImageReduced53, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced53, &ho_ImageMedian31, 75, 75);
					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh10,
						19, "dark");
					Intersection(ho_RegionDynThresh10, ho_RegionErosion35, &ho_RegionIntersection20
						);
					Connection(ho_RegionIntersection20, &ho_ConnectedRegions172);

					SelectShape(ho_ConnectedRegions172, &ho_SelectedRegions208, ((HTuple("area").Append("anisometry")).Append("row")),
						"and", ((HTuple(210).Append(0.3)).Append(136)), ((HTuple(99999).Append(7)).Append(9999)));
					ConcatObj(ho_SelectedRegions208, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
				//检测抓胶槽缺失

				GenRectangle1(&ho_ROI_0, 1266.77, 1011.45, 1734.88, 2755.17);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced40);
				Threshold(ho_ImageReduced40, &ho_Region32, 180, 255);
				Connection(ho_Region32, &ho_ConnectedRegions8);
				SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions75, (HTuple("ratio").Append("area")),
					"and", (HTuple(0).Append(1000)), (HTuple(0.15).Append(30000)));
				Union1(ho_SelectedRegions75, &ho_RegionUnion2);
				ClosingRectangle1(ho_RegionUnion2, &ho_RegionClosing57, 150, 1);
				Difference(ho_RegionClosing57, ho_RegionUnion2, &ho_RegionDifference59);
				Connection(ho_RegionDifference59, &ho_ConnectedRegions77);
				SelectShape(ho_ConnectedRegions77, &ho_SelectedRegions79, (HTuple("ratio").Append("area")),
					"and", (HTuple(0).Append(300)), (HTuple(0.15).Append(1300)));
				CountObj(ho_SelectedRegions79, &hv_Number53);
				if (0 != (int(hv_Number53 == 1)))
				{
					DilationRectangle1(ho_SelectedRegions79, &ho_RegionDilation46, 1, 51);
					MoveRegion(ho_RegionDilation46, &ho_RegionMoved56, -20, 0);
					ReduceDomain(ho_Image, ho_RegionMoved56, &ho_ImageReduced96);
					Intensity(ho_ImageReduced96, ho_ImageReduced96, &hv_Mean2, &hv_Deviation2);
					MoveRegion(ho_RegionMoved56, &ho_RegionMoved57, -100, 200);
					ReduceDomain(ho_Image, ho_RegionMoved57, &ho_ImageReduced97);
					Intensity(ho_RegionMoved57, ho_ImageReduced97, &hv_Mean3, &hv_Deviation3);
					TupleAbs(hv_Mean3 - hv_Mean2, &hv_Abs);
					if (0 != (HTuple(int(hv_Mean2<32)).TupleAnd(int(hv_Abs>60))))
					{
						ConcatObj(ho_RegionMoved56, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				//提取检测区域
				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 200, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 41);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 41, 41);
				OpeningRectangle1(ho_RegionDilation23, &ho_RegionOpening71, 10, 1);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点
				GenRectangle1(&ho_ROI_0, 90.1971, 3220.71, 839.18, 3671.27);
				ReduceDomain(ho_ImageScaled, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 130);
				AutoThreshold(ho_ImageReduced63, &ho_Regions2, 3.5);
				Connection(ho_Regions2, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("ratio")),
					"and", (HTuple(35500).Append(0.9)), (HTuple(199999).Append(2)));
				SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions176, "mean",
					"and", 0, 160);
				CountObj(ho_SelectedRegions176, &hv_Number40);
				if (0 != (int(hv_Number40 == 1)))
				{
					AreaCenter(ho_SelectedRegions176, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 603;
					hv_C = hv_Column2 - 3432;
					GenRectangle1(&ho_ROI_0, 914.484, 737.978, 1212.36, 1140.69);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);

					GenRectangle1(&ho_ROI_0, 1242.92, 3589.58, 1396.76, 4092.8);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
					Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
					Connection(ho_Region42, &ho_ConnectedRegions60);
					SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
						1000, 99999);
					CountObj(ho_SelectedRegions66, &hv_Number3);
					if (0 != (int(hv_Number3 == 2)))
					{
						DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21, 21);
						Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
							);
					}
					Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
						);

					GenRectangle1(&ho_ROI_0, 60.138, 838.826, 396.012, 1258.14);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced47);
					Threshold(ho_ImageReduced47, &ho_Region43, 179, 255);
					Connection(ho_Region43, &ho_ConnectedRegions61);
					SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions70, "area", "and",
						3000, 99999);
					DilationRectangle1(ho_SelectedRegions70, &ho_RegionDilation25, 18, 18);
					GenRectangle1(&ho_ROI_0, 452.986, 1038.13, 1494.54, 3741.49);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced93);
					GrayClosingRect(ho_ImageReduced93, &ho_ImageClosing18, 20, 20);
					AutoThreshold(ho_ImageClosing18, &ho_Regions, 2);
					Connection(ho_Regions, &ho_ConnectedRegions26);
					SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions26, "area", "and",
						150000, 9999999999);
					SelectGray(ho_SelectedRegions26, ho_Image, &ho_SelectedRegions146, "mean",
						"and", 0, 65);
					CountObj(ho_SelectedRegions146, &hv_Number29);
					if (0 != (int(hv_Number29 == 1)))
					{
						DilationRectangle1(ho_SelectedRegions146, &ho_RegionDilation44, 50, 50);
						Difference(ho_RegionDifference31, ho_RegionDilation44, &ho_RegionDifference31
							);
					}

					Difference(ho_RegionDifference31, ho_RegionDilation25, &ho_RegionDifference38
						);

					GenRectangle1(&ho_ROI_0, -40.35143, 124.083, 76.3114, 438.883);
					Difference(ho_RegionDifference38, ho_ROI_0, &ho_RegionDifference38);
					//YJH边缘三伤增加
					GenRectangle1(&ho_ROI_0, 1155.31, 1860.26, 1710.16, 3122.36);
					Intersection(ho_RegionDifference38, ho_ROI_0, &ho_RegionIntersection16);
					ClosingRectangle1(ho_RegionIntersection16, &ho_RegionClosing73, 130, 3);
					DilationRectangle1(ho_RegionClosing73, &ho_RegionDilation51, 1, 25);
					MoveRegion(ho_RegionDilation51, &ho_RegionMoved65, -10, 0);
					Union2(ho_RegionMoved65, ho_RegionDifference38, &ho_RegionDifference38);

					ReduceDomain(ho_Image, ho_RegionDifference38, &ho_ImageReduced53);
					SetDictObject(ho_RegionDifference38, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 29);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 50000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 210);
					Det_SJ_Region(hv_dd, (*hv_dt));
					//追加检测test
					MedianRect(ho_ImageReduced53, &ho_ImageMedian, 5, 5);
					GrayClosingRect(ho_ImageMedian, &ho_ImageClosing26, 16, 16);
					SubImage(ho_ImageMedian, ho_ImageClosing26, &ho_ImageSub11, 1, 128);
					Threshold(ho_ImageSub11, &ho_Region95, 0, 108);
					Connection(ho_Region95, &ho_ConnectedRegions135);
					SelectShape(ho_ConnectedRegions135, &ho_SelectedRegions168, (HTuple("area").Append("ratio")),
						"and", (HTuple(400).Append(0.26)), (HTuple(99999).Append(5)));

					GenRectangle1(&ho_ROI_0, 55.0886, 376.917, 1430.17, 1237.08);

					GenRectangle1(&ho_ROI_1, 1159.84, 1195.47, 1565.38, 3384.11);
					Union2(ho_ROI_0, ho_ROI_1, &ho_RegionUnion54);
					Difference(ho_SelectedRegions168, ho_RegionUnion54, &ho_RegionDifference65
						);
					//concat_obj (RegionDifference65, dt.['61'], dt.['61'])

					//自动阈值检测明显且大的黑色缺陷
					//auto_threshold (ImageReduced53, Regions, 1)
					//connection (Regions, ConnectedRegions1)
					//select_shape (ConnectedRegions1, SelectedRegions2, ['area','ratio'], 'and', [1500,0.3], [15000,5])
					//concat_obj (SelectedRegions2, dt.['61'], dt.['61'])
				}
				if (0 != (int(hv_Number40 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("45"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "45");
				}

				//横RT
				GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number8);
				if (0 != hv_Number8)
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}

				//转角RT
				GenRectangle1(&ho_ROI_0, 651.179, 50.46, 1608.47, 1760.27);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 8799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 210, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1700, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 8);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 16);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);

				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 135, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing41, 3, 3);
				Connection(ho_RegionClosing41, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				CountObj(ho_ConnectedRegions53, &hv_Number57);
				if (0 != hv_Number57)
				{
					RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
					TupleMin(hv_Value1, &hv_Min);
					SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
						hv_Min - 5, hv_Min + 5);
					OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
					DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
					Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);
					Difference(ho_Image, ho_RegionUnion25, &ho_RegionDifference33);
					ReduceDomain(ho_Image, ho_RegionDifference33, &ho_ImageReduced74);
					Threshold(ho_ImageReduced74, &ho_Region39, 0, 28);
					Connection(ho_Region39, &ho_ConnectedRegions54);
					SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
						15000, 999999999);
					Union1(ho_SelectedRegions63, &ho_RegionUnion26);
					Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
					DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 58, 58);
					Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
					Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
					SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
						850000, 99999999);
					//提取定位点
					GenRectangle1(&ho_ROI_0, 90.1971, 3220.71, 839.18, 3671.27);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
					AutoThreshold(ho_ImageReduced63, &ho_Regions1, 2.5);
					Connection(ho_Regions1, &ho_ConnectedRegions124);
					//threshold (ImageReduced63, Region70, 0, 115)
					//connection (Region70, ConnectedRegions91)
					SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions95, (HTuple("area").Append("ratio")),
						"and", (HTuple(38600).Append(0.7)), (HTuple(199999).Append(2)));
					SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions150, "mean",
						"and", 0, 110);
					CountObj(ho_SelectedRegions150, &hv_Number40);
					if (0 != (int(hv_Number40 == 1)))
					{
						AreaCenter(ho_SelectedRegions150, &hv_Area2, &hv_Row2, &hv_Column2);
						//偏移距离
						hv_R = hv_Row2 - 603;
						hv_C = hv_Column2 - 3432;
					}
					if (0 != (int(hv_Number40 == 0)))
					{
						hv_R = 0;
						hv_C = 0;
					}
					GenRectangle1(&ho_ROI_0, 914.484, 737.978, 1252.36, 1160.69);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 31);
					Intersection(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionIntersection7
						);
					CountObj(ho_RegionIntersection7, &hv_Number18);
					if (0 != hv_Number18)
					{
						AreaCenter(ho_RegionIntersection7, &hv_Area7, &hv_Row7, &hv_Column7);
						TupleMax(hv_Area7, &hv_Max4);
						if (0 != (int(hv_Max4>200)))
						{

							GenRectangle1(&ho_ROI_0, 1242.92, 3619.58, 1396.76, 4092.8);
							MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
							ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
							Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
							Connection(ho_Region42, &ho_ConnectedRegions60);
							SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
								1200, 99999);
							CountObj(ho_SelectedRegions66, &hv_Number3);
							if (0 != (int(hv_Number3 == 2)))
							{
								DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21,
									21);
								Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
									);
							}
							Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
								);

							GenRectangle1(&ho_ROI_0, 60.138, 838.826, 396.012, 1178.14);
							MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
							ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced47);
							Threshold(ho_ImageReduced47, &ho_Region43, 179, 255);
							Connection(ho_Region43, &ho_ConnectedRegions61);
							SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions70, "area", "and",
								3400, 99999);
							DilationRectangle1(ho_SelectedRegions70, &ho_RegionDilation25, 18,
								18);

							GenRectangle1(&ho_ROI_0, 452.986, 1038.13, 1494.54, 3741.49);
							MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
							ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced93);
							GrayClosingRect(ho_ImageReduced93, &ho_ImageClosing18, 20, 20);
							AutoThreshold(ho_ImageClosing18, &ho_Regions, 2);
							Connection(ho_Regions, &ho_ConnectedRegions26);
							SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions26, "area", "and",
								150000, 9999999999);
							SelectGray(ho_SelectedRegions26, ho_Image, &ho_SelectedRegions146,
								"mean", "and", 0, 35);
							CountObj(ho_SelectedRegions146, &hv_Number29);
							if (0 != (int(hv_Number29 == 1)))
							{
								DilationRectangle1(ho_SelectedRegions146, &ho_RegionDilation44, 50,
									45);
								Difference(ho_RegionDifference31, ho_RegionDilation44, &ho_RegionDifference31
									);
							}
							Difference(ho_RegionDifference31, ho_RegionDilation25, &ho_RegionDifference38
								);

							GenRectangle1(&ho_ROI_0, -6.35143, 134.083, 46.3114, 388.883);
							Difference(ho_RegionDifference38, ho_ROI_0, &ho_RegionErosion9);
							ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
							SetDictObject(ho_RegionErosion9, hv_dd, "region");
							SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
							SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 70);
							Det_SJ_Region(hv_dd, (*hv_dt));
							//jl add

							GenRectangle1(&ho_ROI_0, 1032.28, 1365.81, 1558.91, 3109.53);
							Intersection(ho_ImageReduced53, ho_ROI_0, &ho_RegionIntersection28);
							ReduceDomain(ho_ImageReduced53, ho_RegionIntersection28, &ho_ImageReduced157
								);
							MedianRect(ho_ImageReduced157, &ho_ImageMedian18, 95, 55);
							DynThreshold(ho_ImageReduced157, ho_ImageMedian18, &ho_RegionDynThresh19,
								13, "dark");
							Connection(ho_RegionDynThresh19, &ho_ConnectedRegions239);
							SelectShape(ho_ConnectedRegions239, &ho_SelectedRegions290, (HTuple("area").Append("ratio")),
								"and", (HTuple(300).Append(0.16)), (HTuple(99999).Append(5)));
							ConcatObj(ho_SelectedRegions290, (*hv_dt).TupleGetDictObject("61"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}
					//横RT
					GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
					Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
					ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
					Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
					SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
						"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
					CountObj(ho_SelectedRegions125, &hv_Number7);
					if (0 != hv_Number7)
					{
						RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
						TupleMax(hv_Value26, &hv_Max8);
						SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
							hv_Max8, hv_Max8);
						ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
						DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
						SetDictTuple(hv_dd, "RTmode", 2);
						SetDictObject(ho_RegionDilation22, hv_dd, "region");
						Det_RT_Region(hv_dd, (*hv_dt));
					}
					//转角RT
					GenRectangle1(&ho_ROI_0, 541.179, 50.46, 1608.47, 1760.27);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
					SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
					Threshold(ho_ImageScaled19, &ho_Region31, 72, 255);
					ClosingCircle(ho_Region31, &ho_RegionClosing112, 1.5);
					Connection(ho_RegionClosing112, &ho_ConnectedRegions66);
					SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
						75000, 8799999);
					ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
					ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
					MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
					Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
					Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
					SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
						1000, 99999);
					ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
					GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
					Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
						1000, 9999999);
					Union1(ho_SelectedRegions29, &ho_RegionUnion34);

					DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
					SetDictTuple(hv_dd, "RTmode", 0);
					SetDictObject(ho_RegionDilation61, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
						3);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 12);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
						330);
					Det_RT_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 218.929, 1898.29, 1582.31, 2471.73);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				CountObj(ho_SelectedRegions95, &hv_Number20);
				if (0 != hv_Number20)
				{
					//偏移距离
					hv_R = hv_Row2 - 1047;
					hv_C = hv_Column2 - 2197;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);

					ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
					Threshold(ho_ImageScaled, &ho_Region37, 200, 255);
					Connection(ho_Region37, &ho_ConnectedRegions52);
					SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(10000)), (HTuple(99999).Append(100000)));
					Union1(ho_SelectedRegions61, &ho_RegionUnion21);
					ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
					DilationRectangle1(ho_RegionClosing20, &ho_RegionDilation32, 41, 41);

					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 65, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 51);

					GenRectangle1(&ho_ROI_0, 687.316, 906.41, 987.302, 1162.97);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle2(&ho_ROI_0, 86.741, 493.454, HTuple(-42.2747).TupleRad(),
						123.034, 92.1363);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionDilation32, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
					ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0,
						5, 11);
					SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
					ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
						&ho_ImageReduced17);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
					//大亮白(Bsj漏铁)
					Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
						255);
					Connection(ho_Region73, &ho_ConnectedRegions96);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
						"and", (HTuple(15).Append(0.01)), (HTuple(99999).Append(16)));
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");

					//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
					//connection (Region29, ConnectedRegions39)
					//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
					//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
					//小面积黑
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");
					MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 105, 105);

					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
						(hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"), "dark");
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions155);
					SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", (((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value"))).TupleConcat(1e-5),
						(HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value"))).TupleConcat(9.1));
					ConcatObj(ho_SelectedRegions182, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					//大面积黑
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
					SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
					Threshold(ho_ImageSub9, &ho_Region40, 0, 50);

					Connection(ho_Region40, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0),
						(HTuple(999999).Append(7)));
					ConcatObj(ho_SelectedRegions40, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					//检测小件脱落
					DilationRectangle1(ho_SelectedRegions95, &ho_RegionDilation79, 1500, 220);
					MoveRegion(ho_RegionDilation79, &ho_RegionMoved95, 350, -400);
					ReduceDomain(ho_Image, ho_RegionMoved95, &ho_ImageReduced166);
					Threshold(ho_ImageReduced166, &ho_Region160, 158, 255);
					CountObj(ho_Region160, &hv_Number100);
					if (0 != hv_Number100)
					{
						AreaCenter(ho_Region160, &hv_Area15, &hv_Row18, &hv_Column18);
						if (0 != (int(hv_Area15<3000)))
						{
							ConcatObj(ho_RegionMoved95, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}


				}
				if (0 != (int(hv_Number20 == 0)))
				{
					SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
						"and", (HTuple(2200).Append(0.25)), (HTuple(99999).Append(1)));
					Union1(ho_SelectedRegions95, &ho_RegionUnion8);
					ClosingRectangle1(ho_RegionUnion8, &ho_RegionClosing38, 40, 80);
					Difference(ho_RegionClosing38, ho_RegionUnion8, &ho_RegionDifference30);
					Connection(ho_RegionDifference30, &ho_ConnectedRegions97);
					SelectShape(ho_ConnectedRegions97, &ho_SelectedRegions73, "area", "and",
						450, 99999);
					ConcatObj(ho_SelectedRegions73, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_Image, &ho_Region37, 200, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, (HTuple("width").Append("area")),
					"and", (HTuple(350).Append(10000)), (HTuple(99999).Append(100000)));
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				DilationRectangle1(ho_RegionClosing20, &ho_RegionDilation32, 41, 41);
				Threshold(ho_ImageReduced25, &ho_Region38, 50, 167);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions38, "area", "and",
					150000, 9999999);
				OpeningRectangle1(ho_SelectedRegions38, &ho_RegionOpening11, 10, 10);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 11.21, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 76, 254);

				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 25, 49);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 60, 60);

				GenRectangle1(&ho_ROI_0, 751.906, 903, 990.178, 1123.58);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				Difference(ho_RegionErosion9, ho_RegionDilation32, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				Intensity(ho_RegionErosion9, ho_ImageReduced53, &hv_Mean9, &hv_Deviation9);
				if (0 != (int(hv_Mean9<119)))
				{
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 27);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 50000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 210);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 150);
					ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0,
						5, 11);
					SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
					ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
						&ho_ImageReduced17);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
					//大亮白(Bsj漏铁)
					//erosion_rectangle1 (dd.region, RegionErosion, 20, 20)
					//reduce_domain (ImageReduced17, RegionErosion, ImageReduced)
					Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
						255);
					Connection(ho_Region73, &ho_ConnectedRegions96);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
						"and", (HTuple(315).Append(0.01)), (HTuple(3999).Append(16)));
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");

					//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
					//connection (Region29, ConnectedRegions39)
					//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
					//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
					//小面积黑
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");

					MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 75, 75);

					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
						(hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"), "dark");
					//YJH新增
					MeanImage(ho_ImageReduced17, &ho_ImageMean, 289, 7);
					DynThreshold(ho_ImageReduced17, ho_ImageMean, &ho_RegionDynThresh, 33,
						"dark");
					MeanImage(ho_ImageReduced17, &ho_ImageMean1, 500, 20);
					DynThreshold(ho_ImageReduced17, ho_ImageMean1, &ho_RegionDynThresh1, 29,
						"dark");
					Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and",
						535, 999);
					Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, "area", "and",
						504, 99999);
					Union1(ho_SelectedRegions5, &ho_RegionUnion2);
					ClosingCircle(ho_RegionUnion2, &ho_RegionClosing2, 13.5);
					Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
						"and", (HTuple(135).Append(1)), (HTuple(99999).Append(11)));
					SelectGray(ho_SelectedRegions4, ho_Image, &ho_SelectedRegions226, "mean",
						"and", 0, 57);
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "area", "and",
						220, 99999);
					Union1(ho_SelectedRegions3, &ho_RegionUnion1);
					ClosingCircle(ho_RegionUnion1, &ho_RegionClosing1, 20.5);
					Connection(ho_RegionClosing1, &ho_ConnectedRegions155);
					SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value")),
						HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value")));
					Union1(ho_SelectedRegions182, &ho_RegionUnion);
					ClosingCircle(ho_RegionUnion, &ho_RegionClosing, 13.5);
					Connection(ho_RegionClosing, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, "area", "and", 140,
						99999);

					//YJH新增
					Union2(ho_SelectedRegions2, ho_SelectedRegions4, &ho_SelectedRegions2);
					Union2(ho_SelectedRegions2, ho_SelectedRegions1, &ho_SelectedRegions1);
					ConcatObj(ho_SelectedRegions1, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					//大面积黑
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
					SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
					Threshold(ho_ImageSub9, &ho_Region40, 0, 50);

					Connection(ho_Region40, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0.2),
						(HTuple(999999).Append(7)));
					ConcatObj(ho_SelectedRegions40, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					//超大面积异色
					ZoomImageFactor(ho_ImageReduced17, &ho_ImageZoomed, 0.125, 0.125, "constant");
					VarThreshold(ho_ImageZoomed, &ho_Region149, 70, 70, 0.2, 8, "dark");
					ErosionRectangle1(ho_ImageZoomed, &ho_RegionErosion51, 5, 5);
					Intersection(ho_Region149, ho_RegionErosion51, &ho_RegionIntersection26
						);
					Connection(ho_RegionIntersection26, &ho_ConnectedRegions231);
					SelectShape(ho_ConnectedRegions231, &ho_SelectedRegions280, (HTuple("area").Append("anisometry")),
						"and", (HTuple(250).Append(0)), (HTuple(99999).Append(9)));
					ZoomRegion(ho_SelectedRegions280, &ho_RegionZoom, 8, 8);
					ConcatObj(ho_RegionZoom, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 19.98, 3068.57, 1500.39, 3606.91);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				CountObj(ho_SelectedRegions95, &hv_Number20);
				if (0 != hv_Number20)
				{
					//偏移距离
					hv_R = hv_Row2 - 764;
					hv_C = hv_Column2 - 3365;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
					Connection(ho_Region20, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
						"and", (HTuple(1000).Append(800)), (HTuple(99999).Append(9999)));
					DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 58, 252);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 30, 36);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, (HTuple("area").Append("column")),
						"and", (HTuple(5e5).Append(2400)), (HTuple(1e7).Append(9999)));
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 51);

					GenRectangle1(&ho_ROI_0, 1186.9, 1249.59, 1468.47, 1694.96);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced56);
					Threshold(ho_ImageReduced56, &ho_Region57, 0, 50);
					Connection(ho_Region57, &ho_ConnectedRegions70);
					SelectShape(ho_ConnectedRegions70, &ho_SelectedRegions78, "area", "and",
						5150, 99999);
					DilationRectangle1(ho_SelectedRegions78, &ho_RegionDilation31, 39, 39);
					Difference(ho_RegionErosion9, ho_RegionDilation31, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1289.87, 2265.65, 1595.47, 2520.5);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionDilation15, &ho_RegionErosion9);
					OpeningRectangle1(ho_RegionErosion9, &ho_RegionErosion9, 20, 1);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 19);
					Det_SJ_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number20 == 0)))
				{
					SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
						"and", (HTuple(2200).Append(0.25)), (HTuple(99999).Append(1)));
					Union1(ho_SelectedRegions95, &ho_RegionUnion8);
					ClosingRectangle1(ho_RegionUnion8, &ho_RegionClosing38, 40, 80);
					Difference(ho_RegionClosing38, ho_RegionUnion8, &ho_RegionDifference30);
					Connection(ho_RegionDifference30, &ho_ConnectedRegions97);
					SelectShape(ho_ConnectedRegions97, &ho_SelectedRegions73, "area", "and",
						450, 99999);
					ConcatObj(ho_SelectedRegions73, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1400.39, 8.27714, 1534.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(299999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number4);
				if (0 != (int(hv_Number4 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value9);
					TupleMax(hv_Value9, &hv_Max9);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions87, "row", "and",
						hv_Max9, hv_Max9);
					ShapeTrans(ho_SelectedRegions87, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
					//jl add 靠近外观的rt缺陷
					DilationRectangle1(ho_RegionDilation22, &ho_RegionDilation56, 1, 30);
					MoveRegion(ho_RegionDilation56, &ho_RegionMoved71, 48, 0);
					Difference(ho_RegionMoved71, ho_RegionDilation56, &ho_RegionDifference82
						);
					ReduceDomain(ho_Image, ho_RegionDifference82, &ho_ImageReduced134);
					GrayOpeningRect(ho_ImageReduced134, &ho_ImageOpening2, 20, 20);
					SubImage(ho_ImageReduced134, ho_ImageOpening2, &ho_ImageSub29, 1, 128);
					Threshold(ho_ImageSub29, &ho_Region131, 200, 255);
					Connection(ho_Region131, &ho_ConnectedRegions207);
					SelectShape(ho_ConnectedRegions207, &ho_SelectedRegions220, (HTuple("area").Append("ratio")),
						"and", (HTuple(80).Append(0.2)), (HTuple(99999).Append(3)));
					ConcatObj(ho_SelectedRegions220, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}
				//焊缝毛刺
				GenRectangle1(&ho_ROI_0, 1219.52, -50.8314, 1675.93, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				Threshold(ho_ImageReduced, &ho_Region, 220, 255);
				Connection(ho_Region, &ho_ConnectedRegions15);
				SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions14, "area", "and",
					65150, 929999);
				ClosingRectangle1(ho_SelectedRegions14, &ho_RegionClosing33, 900, 900);
				Difference(ho_RegionClosing33, ho_SelectedRegions14, &ho_RegionDifference7
					);
				Connection(ho_RegionDifference7, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(150).Append(600)), (HTuple(99999).Append(9999)));
				CountObj(ho_SelectedRegions17, &hv_Number58);
				if (0 != hv_Number58)
				{
					//TEST
					MoveRegion(ho_SelectedRegions17, &ho_RegionMoved47, -60, 0);
					MoveRegion(ho_SelectedRegions17, &ho_RegionMoved49, -25, 0);
					Difference(ho_SelectedRegions17, ho_RegionMoved47, &ho_RegionDifference35
						);
					ShapeTrans(ho_RegionDifference35, &ho_RegionTrans8, "rectangle1");
					MoveRegion(ho_RegionTrans8, &ho_RegionMoved48, 0, 130);
					Difference(ho_RegionTrans8, ho_RegionMoved48, &ho_RegionDifference36);
					Intersection(ho_RegionDifference35, ho_RegionDifference36, &ho_RegionIntersection3
						);
					ReduceDomain(ho_Image, ho_RegionIntersection3, &ho_ImageReduced77);
					VarThreshold(ho_ImageReduced77, &ho_Region3, 55, 50, 0.2, 22, "dark");

					//增加一种检测方法
					Difference(ho_RegionIntersection3, ho_Region3, &ho_RegionDifference46);
					ReduceDomain(ho_Image, ho_RegionDifference46, &ho_ImageReduced79);
					Threshold(ho_ImageReduced79, &ho_Region82, 225, 255);
					Connection(ho_Region82, &ho_ConnectedRegions115);
					SelectShape(ho_ConnectedRegions115, &ho_SelectedRegions130, (HTuple("area").Append("width")),
						"and", (HTuple(800).Append(0)), (HTuple(99999).Append(73)));
					DilationRectangle1(ho_SelectedRegions130, &ho_RegionDilation39, 11, 1);
					MoveRegion(ho_RegionDilation39, &ho_RegionMoved52, 0, 5);
					Intersection(ho_RegionMoved52, ho_Region3, &ho_RegionIntersection12);
					ReduceDomain(ho_Image, ho_RegionIntersection12, &ho_ImageReduced84);
					CountObj(ho_ImageReduced84, &hv_Number25);
					if (0 != hv_Number25)
					{
						hv_Number24 = 0;
						Intensity(ho_RegionIntersection12, ho_Image, &hv_Mean1, &hv_Deviation1);
						if (0 != (int(hv_Mean1<135)))
						{
							hv_Number24 = 1;
						}
						MoveRegion(ho_RegionTrans8, &ho_RegionMoved50, 0, -130);
						Difference(ho_RegionTrans8, ho_RegionMoved50, &ho_RegionDifference51);
						MoveRegion(ho_RegionDifference51, &ho_RegionMoved51, -40, 0);
						DilationRectangle1(ho_RegionMoved51, &ho_RegionDilation38, 45, 21);
						ReduceDomain(ho_Image, ho_RegionDilation38, &ho_ImageReduced80);
						VarThreshold(ho_ImageReduced80, &ho_Region83, 55, 55, 0.2, 32, "dark");
						Connection(ho_Region83, &ho_ConnectedRegions116);
						SelectShape(ho_ConnectedRegions116, &ho_SelectedRegions132, "area", "and",
							1000, 99999);
						Union1(ho_SelectedRegions132, &ho_RegionUnion12);
						ClosingRectangle1(ho_RegionUnion12, &ho_RegionClosing43, 140, 140);
						ReduceDomain(ho_ImageReduced80, ho_RegionClosing43, &ho_ImageReduced83
							);
						Threshold(ho_ImageReduced83, &ho_Region82, 225, 255);
						Connection(ho_Region82, &ho_ConnectedRegions115);
						SelectShape(ho_ConnectedRegions115, &ho_SelectedRegions138, (HTuple("area").Append("width")),
							"and", (HTuple(1000).Append(0)), (HTuple(99999).Append(63)));

						CountObj(ho_SelectedRegions138, &hv_Number23);
						if (0 != (hv_Number23.TupleAnd(hv_Number24)))
						{
							DilationRectangle1(ho_SelectedRegions138, &ho_RegionDilation40, 6,
								6);
							MoveRegion(ho_RegionDilation40, &ho_RegionMoved53, 3, -3);
							Difference(ho_RegionMoved53, ho_RegionDilation40, &ho_RegionDifference52
								);
							Union2(ho_RegionDifference52, ho_Region3, &ho_RegionUnion41);
							//暂时不捡
							//concat_obj (RegionUnion41, dt.['64'], dt.['64'])
						}
					}
					//增加结束
					Intersection(ho_Region3, ho_RegionMoved49, &ho_RegionIntersection9);
					VarThreshold(ho_ImageReduced77, &ho_Region13, 55, 55, 0.2, 32, "dark");
					Intersection(ho_Region13, ho_RegionMoved49, &ho_RegionIntersection11);
					Difference(ho_Region13, ho_RegionIntersection11, &ho_RegionDifference42
						);
					Connection(ho_RegionDifference42, &ho_ConnectedRegions105);
					RegionFeatures(ho_ConnectedRegions105, "area", &hv_Value17);
					TupleMax(hv_Value17, &hv_Max10);
					SelectShape(ho_ConnectedRegions105, &ho_SelectedRegions127, "area", "and",
						hv_Max10 - 5, hv_Max10 + 5);
					ReduceDomain(ho_Image, ho_SelectedRegions127, &ho_ImageReduced78);
					Threshold(ho_ImageReduced78, &ho_Region80, 0, 115);
					Connection(ho_Region80, &ho_ConnectedRegions108);
					SelectShape(ho_ConnectedRegions108, &ho_SelectedRegions128, "area", "and",
						150, 99999);
					Union1(ho_SelectedRegions128, &ho_SelectedRegions127);
					OpeningRectangle1(ho_RegionIntersection9, &ho_RegionOpening36, 1, 6);
					Connection(ho_RegionOpening36, &ho_ConnectedRegions103);
					SelectShape(ho_ConnectedRegions103, &ho_SelectedRegions124, (((HTuple("area").Append("height")).Append("ratio")).Append("circularity")),
						"and", (((HTuple(90).Append(31)).Append(0.4)).Append(0.2)), (((HTuple(99999).Append(99)).Append(6)).Append(1)));
					DilationRectangle1(ho_SelectedRegions124, &ho_RegionDilation7, 3, 15);
					Intersection(ho_RegionDilation7, ho_SelectedRegions127, &ho_RegionIntersection10
						);
					CountObj(ho_RegionIntersection10, &hv_Number22);
					if (0 != hv_Number22)
					{
						AreaCenter(ho_RegionIntersection10, &hv_Area9, &hv_Row9, &hv_Column9);
						TupleMax(hv_Area9, &hv_Max11);
						if (0 != (int(hv_Max11>4)))
						{
							//暂时不捡出
							//concat_obj (SelectedRegions124, dt.['64'], dt.['64'])
						}
					}
					//ENDTEST
					ErosionRectangle1(ho_SelectedRegions17, &ho_RegionErosion18, 21, 21);
					Difference(ho_SelectedRegions17, ho_RegionErosion18, &ho_RegionDifference18
						);
					MoveRegion(ho_SelectedRegions17, &ho_RegionMoved40, 20, 0);
					Intersection(ho_RegionDifference18, ho_RegionMoved40, &ho_RegionIntersection6
						);
					DilationRectangle1(ho_RegionIntersection6, &ho_RegionIntersection6, 6,
						6);

					DilationRectangle1(ho_SelectedRegions17, &ho_RegionDilation, 31, 41);
					MoveRegion(ho_RegionDilation, &ho_RegionMoved2, -15, 0);
					ReduceDomain(ho_Image, ho_RegionMoved2, &ho_ImageReduced12);
					VarThreshold(ho_ImageReduced12, &ho_Region3, 55, 50, 0.2, 22, "dark");
					OpeningRectangle1(ho_Region3, &ho_RegionOpening4, 3, 1);
					Connection(ho_RegionOpening4, &ho_ConnectedRegions100);

					MoveRegion(ho_RegionMoved2, &ho_RegionMoved38, 0, 130);
					Difference(ho_RegionMoved2, ho_RegionMoved38, &ho_RegionDifference11);
					OpeningRectangle1(ho_RegionDifference11, &ho_RegionOpening46, 10, 70);
					Intersection(ho_ConnectedRegions100, ho_RegionOpening46, &ho_RegionIntersection2
						);
					MoveRegion(ho_RegionMoved2, &ho_RegionMoved39, 0, 38);
					Intersection(ho_RegionMoved39, ho_RegionMoved2, &ho_RegionIntersection4
						);
					Intersection(ho_RegionIntersection2, ho_RegionIntersection4, &ho_RegionIntersection5
						);
					Connection(ho_RegionIntersection5, &ho_ConnectedRegions102);
					Difference(ho_ConnectedRegions102, ho_RegionIntersection6, &ho_ConnectedRegions102
						);
					Connection(ho_ConnectedRegions102, &ho_ConnectedRegions104);
					SelectShape(ho_ConnectedRegions104, &ho_SelectedRegions97, "area", "and",
						380, 99999);

					Union1(ho_SelectedRegions97, &ho_RegionUnion17);
					ClosingRectangle1(ho_RegionUnion17, &ho_RegionClosing35, 7, 6);
					OpeningRectangle1(ho_RegionClosing35, &ho_RegionOpening47, 3, 11);
					Connection(ho_RegionOpening47, &ho_ConnectedRegions101);
					SelectShape(ho_ConnectedRegions101, &ho_SelectedRegions83, ((HTuple("area").Append("height")).Append("width")),
						"and", ((HTuple(150).Append(71)).Append(34)), ((HTuple(99999).Append(999)).Append(999)));

					//concat_obj (SelectedRegions83, dt.['64'], dt.['64'])
					ErosionRectangle1(ho_SelectedRegions17, &ho_RegionErosion28, 231, 11);
					ShapeTrans(ho_RegionErosion28, &ho_RegionTrans5, "rectangle1");
					MoveRegion(ho_RegionTrans5, &ho_RegionMoved45, 5, 0);
					ReduceDomain(ho_Image, ho_RegionMoved45, &ho_ImageReduced73);
					RankRect(ho_ImageReduced73, &ho_ImageRank, 10, 5, 30);
					GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
					SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
					Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
					Connection(ho_Region21, &ho_ConnectedRegions111);
					SelectShape(ho_ConnectedRegions111, &ho_SelectedRegions115, (HTuple("area").Append("height")),
						"and", (HTuple(240).Append(10)), (HTuple(99999).Append(99)));
					SelectGray(ho_SelectedRegions115, ho_Image, &ho_SelectedRegions131, "mean",
						"and", 0, 133);
					//暂时不捡出
					//concat_obj (SelectedRegions131, dt.['64'], dt.['64'])
					//检测大的横缺陷
					GrayClosingRect(ho_ImageRank, &ho_ImageClosing15, 1, 180);
					SubImage(ho_ImageRank, ho_ImageClosing15, &ho_ImageSub3, 2, 128);
					Threshold(ho_ImageSub3, &ho_Region84, 0, 25);
					Connection(ho_Region84, &ho_ConnectedRegions117);
					SelectShape(ho_ConnectedRegions117, &ho_SelectedRegions133, (HTuple("area").Append("height")),
						"and", (HTuple(555).Append(9)), (HTuple(99999).Append(99)));
					SelectGray(ho_SelectedRegions133, ho_Image, &ho_SelectedRegions134, "mean",
						"and", 0, 100);
					ConcatObj(ho_SelectedRegions134, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 701.179, 2509.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 15);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					630);
				Det_RT_Region(hv_dd, (*hv_dt));

				//jl add 检测BLC压伤
				GenRectangle1(&ho_ROI_0, 621.269, 98.3804, 1357.86, 772.875);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced128);
				Threshold(ho_ImageReduced128, &ho_Region123, 0, 70);
				OpeningRectangle1(ho_Region123, &ho_RegionOpening75, 200, 12);
				Connection(ho_RegionOpening75, &ho_ConnectedRegions196);
				SelectShape(ho_ConnectedRegions196, &ho_SelectedRegions244, "area", "and",
					81150, 999999);
				DilationRectangle1(ho_SelectedRegions244, &ho_RegionDilation62, 120, 35);
				MoveRegion(ho_RegionDilation62, &ho_RegionMoved77, 50, 600);
				ReduceDomain(ho_Image, ho_RegionMoved77, &ho_ImageReduced129);
				MedianRect(ho_ImageReduced129, &ho_ImageMedian10, 15, 15);
				RankRect(ho_ImageMedian10, &ho_ImageRank4, 8, 8, 5);
				GrayClosingRect(ho_ImageRank4, &ho_ImageClosing31, 50, 50);
				SubImage(ho_ImageRank4, ho_ImageClosing31, &ho_ImageSub21, 1, 128);
				Threshold(ho_ImageSub21, &ho_Region124, 0, 105);
				Connection(ho_Region124, &ho_ConnectedRegions197);
				SelectShape(ho_ConnectedRegions197, &ho_SelectedRegions246, "area", "and",
					1000, 99999);
				CountObj(ho_SelectedRegions246, &hv_Number78);
				if (0 != (int(hv_Number78<10)))
				{
					SelectShape(ho_ConnectedRegions197, &ho_SelectedRegions245, (HTuple("area").Append("anisometry")),
						"and", (HTuple(1500).Append(1)), (HTuple(99999).Append(5)));
					ConcatObj(ho_SelectedRegions245, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				}
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				GenRectangle1(&ho_ROI_0, 1330.39, 8.27714, 1634.97, 4231.82);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(499999).Append(9000)));
				CountObj(ho_SelectedRegions125, &hv_Number9);
				if (0 != (int(hv_Number9 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 4);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//检测焊缝毛刺
				GenRectangle1(&ho_ROI_0, 1049.83, 19.98, 1692.53, 3278.7);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced35);
				Threshold(ho_ImageReduced35, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					300050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);

				MoveRegion(ho_RegionClosing37, &ho_RegionMoved42, -10, 0);
				MoveRegion(ho_RegionClosing37, &ho_RegionMoved43, -55, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);
				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, (((HTuple("area").Append("ratio")).Append("column")).Append("height")),
					"and", (((HTuple(330).Append(0.22)).Append(750)).Append(16)), (((HTuple(2000).Append(3)).Append(9999)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);
				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//黑

			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				GenRectangle1(&ho_ROI_0, 1320.39, 8.27714, 1694.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(999999).Append(9000)));
				CountObj(ho_SelectedRegions125, &hv_Number15);
				if (0 != (int(hv_Number15 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					SelectShape(ho_SelectedRegions140, &ho_SelectedRegions147, "height", "and",
						0, 48);
					ShapeTrans(ho_SelectedRegions147, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//焊缝毛刺
				DilationRectangle1(ho_ROI_0, &ho_ROI_0, 11, 71);
				MoveRegion(ho_ROI_0, &ho_ROI_0, -100, 0);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced72);
				Threshold(ho_ImageReduced72, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					80050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);
				OpeningRectangle1(ho_RegionClosing37, &ho_RegionOpening50, 10, 50);
				ShapeTrans(ho_RegionOpening50, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved44, 0, 80);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved42, -7, 0);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved43, -35, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);
				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				Threshold(ho_ImageRank, &ho_Region85, 0, 40);
				OpeningRectangle1(ho_Region85, &ho_RegionOpening52, 2, 4);
				Connection(ho_RegionOpening52, &ho_ConnectedRegions119);
				SelectShape(ho_ConnectedRegions119, &ho_SelectedRegions139, (HTuple("area").Append("width")),
					"and", (HTuple(1750).Append(200)), (HTuple(99999).Append(999)));
				DilationRectangle1(ho_SelectedRegions139, &ho_RegionDilation41, 101, 11);
				Difference(ho_ImageRank, ho_RegionDilation41, &ho_RegionDifference53);
				Connection(ho_RegionDifference53, &ho_ConnectedRegions120);
				SelectShape(ho_ConnectedRegions120, &ho_SelectedRegions141, "area", "and",
					1050, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions141, &ho_ImageReduced87);
				RankRect(ho_ImageReduced87, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, (((HTuple("area").Append("ratio")).Append("column")).Append("height")),
					"and", (((HTuple(330).Append(0.22)).Append(850)).Append(16)), (((HTuple(2000).Append(3)).Append(9999)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);

				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions113, "mean",
					"and", 0, 60);
				ConcatObj(ho_SelectedRegions113, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//检测边缘
				GenRectangle1(&ho_ROI_0, 1122.97, -32.6829, 1586.72, 294.997);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced150);
				Threshold(ho_ImageReduced150, &ho_Region146, 180, 255);
				Connection(ho_Region146, &ho_ConnectedRegions228);
				SelectShape(ho_ConnectedRegions228, &ho_SelectedRegions277, "area", "and",
					8000, 99999);
				DilationRectangle1(ho_SelectedRegions277, &ho_RegionDilation75, 1, 180);
				MoveRegion(ho_RegionDilation75, &ho_RegionMoved85, -220, 0);
				ReduceDomain(ho_ImageReduced150, ho_RegionMoved85, &ho_ImageReduced151);
				Threshold(ho_ImageReduced151, &ho_Region147, 128, 160);
				ClosingRectangle1(ho_Region147, &ho_RegionClosing107, 3, 3);
				Connection(ho_RegionClosing107, &ho_ConnectedRegions229);
				CountObj(ho_ConnectedRegions229, &hv_Number91);
				if (0 != hv_Number91)
				{
					RegionFeatures(ho_ConnectedRegions229, "area", &hv_Value33);
					TupleMax(hv_Value33, &hv_Max21);
					SelectShape(ho_ConnectedRegions229, &ho_SelectedRegions278, "area", "and",
						hv_Max21 - 10, hv_Max21);
					ClosingRectangle1(ho_SelectedRegions278, &ho_RegionClosing108, 20, 20);
					ErosionRectangle1(ho_RegionClosing108, &ho_RegionErosion49, 15, 15);
					ReduceDomain(ho_Image, ho_RegionErosion49, &ho_ImageReduced152);
					ErosionRectangle1(ho_RegionErosion49, &ho_RegionErosion50, 10, 10);
					MeanImage(ho_ImageReduced152, &ho_ImageMean4, 3, 3);
					VarThreshold(ho_ImageMean4, &ho_Region148, 25, 25, 0.2, 15, "dark");
					Connection(ho_Region148, &ho_ConnectedRegions230);
					Intersection(ho_ConnectedRegions230, ho_RegionErosion50, &ho_RegionIntersection25
						);
					SelectShape(ho_ConnectedRegions230, &ho_SelectedRegions279, "area", "and",
						900, 99999);
					ConcatObj(ho_SelectedRegions279, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				}

			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 289.146, 1032.28, 1605.72, 1423.36);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number41);
				if (0 != (int(hv_Number41 == 1)))
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 1179;
					hv_C = hv_Column2 - 1203;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 70, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions284, "area", "and",
						5e5, 1e7);
					ClosingCircle(ho_SelectedRegions284, &ho_RegionClosing110, 8.5);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 20.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 75, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 21);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 18);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);

					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening25, 10, 200);
					Difference(ho_RegionClosing25, ho_RegionOpening25, &ho_RegionDifference24
						);
					Connection(ho_RegionDifference24, &ho_ConnectedRegions48);
					SelectShape(ho_ConnectedRegions48, &ho_SelectedRegions52, (HTuple("area").Append("column")),
						"and", (HTuple(1900).Append(0)), (HTuple(99999).Append(250)));
					Difference(ho_RegionOpening19, ho_SelectedRegions52, &ho_RegionDifference25
						);
					ErosionRectangle1(ho_RegionDifference25, &ho_RegionErosion9, 38, 66);
					//YJH注释版本
					//erosion_rectangle1 (RegionDifference25, RegionErosion9, 58, 66)
					GenRectangle1(&ho_ROI_0, 281.708, 330.663, 867.775, 640.379);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced21);
					VarThreshold(ho_ImageReduced21, &ho_Region18, 70, 80, 0.2, 6, "dark");
					Connection(ho_Region18, &ho_ConnectedRegions30);
					SelectShape(ho_ConnectedRegions30, &ho_SelectedRegions40, "area", "and",
						1500, 99999);
					Union1(ho_SelectedRegions40, &ho_RegionUnion1);

					ClosingRectangle1(ho_RegionUnion1, &ho_RegionClosing9, 620, 600);
					DilationRectangle1(ho_RegionClosing9, &ho_RegionDilation13, 11, 11);

					GenRectangle1(&ho_ROI_0, 1309.96, 1953.83, 1426.99, 2819.84);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_RegionDilation13, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					GenRectangle1(&ho_ROI_0, 931.453, 1134.08, 1025.53, 1957.78);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, -50.486, -2.76982, 179.165, 226.056);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					MoveRegion(ho_RegionErosion9, &ho_RegionErosion9, -5, 0);

					GenRectangle1(&ho_ROI_0, 19.98, 2173.31, 1108.35, 4092.57);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1446.71, 1612.75, 1652.85, 1828.07);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					//diff
					Difference(ho_RegionClosing110, ho_RegionDifference25, &ho_RegionDifference90
						);
					OpeningRectangle1(ho_RegionDifference90, &ho_RegionOpening85, 11, 11);
					GenRectangle1(&ho_ROI_0, 723.852, 720.158, 1155.28, 1195.32);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Intersection(ho_RegionOpening85, ho_ROI_0, &ho_RegionIntersection27);
					Connection(ho_RegionIntersection27, &ho_ConnectedRegions235);
					SelectShape(ho_ConnectedRegions235, &ho_SelectedRegions285, (HTuple("area").Append("ratio")),
						"and", (HTuple(15000).Append(0.2)), (HTuple(99999).Append(5)));
					ConcatObj(ho_SelectedRegions285, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					//
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 198);
					Det_SJ_Region(hv_dd, (*hv_dt));
					//jladd   左侧断胶
					MedianRect(ho_ImageReduced53, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced53, &ho_ImageMedian31, 75, 75);
					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh15,
						8, "dark");
					ErosionRectangle1(ho_RegionErosion9, &ho_RegionErosion38, 25, 25);
					Intersection(ho_RegionDynThresh15, ho_RegionErosion38, &ho_RegionIntersection14
						);
					Connection(ho_RegionIntersection14, &ho_ConnectedRegions183);
					SelectShape(ho_ConnectedRegions183, &ho_SelectedRegions227, (HTuple("area").Append("ratio")),
						"and", (HTuple(100).Append(0.01)), (HTuple(99999).Append(5)));
					CountObj(ho_SelectedRegions227, &hv_Number92);
					if (0 != (int(hv_Number92<18)))
					{
						Union1(ho_SelectedRegions227, &ho_RegionUnion71);
						ClosingRectangle1(ho_RegionUnion71, &ho_RegionClosing92, 10, 5);
						Connection(ho_RegionClosing92, &ho_ConnectedRegions184);
						SelectShape(ho_ConnectedRegions184, &ho_SelectedRegions228, (HTuple("area").Append("column")),
							"and", (HTuple(400).Append(0)), (HTuple(99999).Append(1000)));
						ConcatObj(ho_SelectedRegions228, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}

				if (0 != (int(hv_Number41 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1350.39, 2008.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(800)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number16);
				if (0 != (int(hv_Number16 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//焊缝毛刺
				DilationRectangle1(ho_ROI_0, &ho_ROI_0, 11, 31);
				MoveRegion(ho_ROI_0, &ho_ROI_0, -100, 0);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced72);
				Threshold(ho_ImageReduced72, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					60050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);
				OpeningRectangle1(ho_RegionClosing37, &ho_RegionOpening50, 10, 50);
				ErosionRectangle1(ho_RegionOpening50, &ho_RegionErosion24, 331, 1);
				MoveRegion(ho_RegionErosion24, &ho_RegionMoved44, 0, 80);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved42, -7, 0);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved43, -35, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);

				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, ((HTuple("area").Append("ratio")).Append("height")),
					"and", ((HTuple(330).Append(0.22)).Append(16)), ((HTuple(2000).Append(3)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);

				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

				//黑
				GrayClosingRect(ho_ImageReduced71, &ho_ImageClosing11, 3, 3);
				VarThreshold(ho_ImageClosing11, &ho_Region12, 55, 30, 0.2, 14, "dark");
				Connection(ho_Region12, &ho_ConnectedRegions107);
				SelectShape(ho_ConnectedRegions107, &ho_SelectedRegions106, (HTuple("area").Append("ratio")),
					"and", (HTuple(130).Append(0.22)), (HTuple(2000).Append(3)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 98);
				Union1(ho_SelectedRegions107, &ho_RegionUnion22);
				RegionFeatures(ho_RegionUnion22, "area", &hv_Value15);
				if (0 != (int(hv_Value15>550)))
				{
					//concat_obj (SelectedRegions107, dt.['64'], dt.['64'])
				}
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions113, "mean",
					"and", 0, 60);
				Union1(ho_SelectedRegions113, &ho_RegionUnion45);
				CountObj(ho_RegionUnion45, &hv_Number30);
				if (0 != hv_Number30)
				{
					RegionFeatures(ho_RegionUnion45, "area", &hv_Value21);
					if (0 != (int(hv_Value21>200)))
					{
						ConcatObj(ho_SelectedRegions113, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					}
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 651.179, 50.46, 1608.47, 1460.27);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 70, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					25000, 999999);
				Union1(ho_SelectedRegions60, &ho_SelectedRegions60);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 158, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 177);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 11)))
			{

			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				GenRectangle1(&ho_ROI_0, 1217.1, 1409.61, 1726.34, 2738.21);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced60);
				Threshold(ho_ImageReduced60, &ho_Region62, 235, 255);
				Connection(ho_Region62, &ho_ConnectedRegions76);
				OpeningRectangle1(ho_ConnectedRegions76, &ho_RegionOpening40, 10, 10);
				Connection(ho_RegionOpening40, &ho_ConnectedRegions79);
				SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions38, (HTuple("area").Append("row")),
					"and", (HTuple(4000).Append(1300)), (HTuple(11000).Append(1560)));
				CountObj(ho_SelectedRegions38, &hv_Number10);
				if (0 != (int(hv_Number10 == 2)))
				{
					//GJW
					OpeningRectangle1(ho_SelectedRegions38, &ho_RegionOpening65, 60, 20);
					ShapeTrans(ho_RegionOpening65, &ho_RegionTrans14, "rectangle1");
					MoveRegion(ho_RegionTrans14, &ho_RegionMoved68, 15, 0);
					ErosionRectangle1(ho_RegionMoved68, &ho_RegionMoved68, 40, 12);
					Intersection(ho_RegionOpening65, ho_RegionMoved68, &ho_RegionIntersection18
						);
					MoveRegion(ho_RegionIntersection18, &ho_RegionMoved67, 55, 0);
					DilationCircle(ho_RegionMoved67, &ho_RegionDilation53, 15);
					Union1(ho_RegionDilation53, &ho_RegionUnion63);
					ReduceDomain(ho_Image, ho_RegionUnion63, &ho_ImageReduced112);
					MedianRect(ho_ImageReduced112, &ho_ImageMedian1, 1, 1);

					TextureLaws(ho_ImageMedian1, &ho_ImageTexture, "el", 2, 5);
					TextureLaws(ho_ImageMedian1, &ho_ImageTexture1, "le", 2, 5);
					AddImage(ho_ImageTexture, ho_ImageTexture1, &ho_ImageResult, 1, -150);
					Threshold(ho_ImageResult, &ho_Region105, 128, 255);
					Intersection(ho_Region105, ho_RegionMoved67, &ho_RegionIntersection17);
					RankRegion(ho_RegionIntersection17, &ho_RegionCount, 10, 10, 20);
					Connection(ho_RegionCount, &ho_ConnectedRegions162);
					SelectShape(ho_ConnectedRegions162, &ho_SelectedRegions197, "area", "and",
						500, 99999);
					ConcatObj(ho_SelectedRegions197, (*hv_dt).TupleGetDictObject("59"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "59");

					MoveRegion(ho_SelectedRegions38, &ho_RegionMoved15, 59, 0);
					Union1(ho_RegionMoved15, &ho_RegionUnion44);
					ErosionRectangle1(ho_RegionUnion44, &ho_RegionErosion4, 14, 12);
					OpeningRectangle1(ho_RegionErosion4, &ho_RegionOpening49, 60, 23);
					ErosionRectangle1(ho_RegionOpening49, &ho_RegionErosion22, 1, 20);
					MoveRegion(ho_RegionErosion22, &ho_RegionMoved41, -10, 0);
					ReduceDomain(ho_ImageReduced60, ho_RegionMoved41, &ho_ImageReduced61);
					GrayClosingRect(ho_ImageReduced61, &ho_ImageClosing, 11, 11);
					SubImage(ho_ImageReduced61, ho_ImageClosing, &ho_ImageSub, 2, 128);
					Threshold(ho_ImageSub, &ho_Region63, 0, 70);
					Connection(ho_Region63, &ho_ConnectedRegions80);
					SelectShape(ho_ConnectedRegions80, &ho_SelectedRegions88, "area", "and",
						8, 99999);
					Union1(ho_SelectedRegions88, &ho_RegionUnion19);
					RegionFeatures(ho_RegionUnion19, "area", &hv_Value14);
					if (0 != (int(hv_Value14>15)))
					{
						ConcatObj(ho_SelectedRegions88, (*hv_dt).TupleGetDictObject("59"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "59");
					}
					//jl add test
					MoveRegion(ho_RegionMoved15, &ho_RegionMoved75, 50, 0);
					DilationRectangle1(ho_RegionMoved75, &ho_RegionDilation57, 50, 1);
					Union1(ho_RegionDilation57, &ho_RegionUnion72);
					ReduceDomain(ho_Image, ho_RegionUnion72, &ho_ImageReduced124);
					Threshold(ho_ImageReduced124, &ho_Region118, 0, 60);
					ClosingRectangle1(ho_Region118, &ho_RegionClosing95, 300, 50);
					ReduceDomain(ho_ImageReduced124, ho_RegionClosing95, &ho_ImageReduced125
						);
					Threshold(ho_ImageReduced125, &ho_Region119, 200, 255);
					Connection(ho_Region119, &ho_ConnectedRegions192);
					SelectShape(ho_ConnectedRegions192, &ho_SelectedRegions239, "area", "and",
						750, 99999);
					ClosingRectangle1(ho_SelectedRegions239, &ho_RegionClosing96, 15, 15);
					DilationRectangle1(ho_RegionClosing96, &ho_RegionDilation58, 1, 10);
					MoveRegion(ho_RegionDilation58, &ho_RegionMoved76, 6, 0);
					CountObj(ho_RegionMoved76, &hv_Number77);
					if (0 != (int(hv_Number77 == 2)))
					{
						Union1(ho_RegionMoved76, &ho_RegionUnion73);
						ReduceDomain(ho_Image, ho_RegionUnion73, &ho_ImageReduced126);
						GrayClosingRect(ho_ImageReduced126, &ho_ImageClosing28, 11, 11);
						SubImage(ho_ImageReduced126, ho_ImageClosing28, &ho_ImageSub15, 1, 128);
						Threshold(ho_ImageSub15, &ho_Region120, 0, 38);
						Connection(ho_Region120, &ho_ConnectedRegions193);
						SelectShape(ho_ConnectedRegions193, &ho_SelectedRegions240, "area", "and",
							60, 99999);
						ConcatObj(ho_SelectedRegions240, (*hv_dt).TupleGetDictObject("59"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "59");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 137.009, 2389.81, 1564.76, 2822.81);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number43);
				if (0 != hv_Number43)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 998;
					hv_C = hv_Column2 - 2578;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 20.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 95, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 20);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 20);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 71, 78);
					GenRectangle2(&ho_ROI_0, 1057.04, 1619.62, HTuple(-42.3523).TupleRad(),
						277.739, 159.65);
					GenRectangle2(&ho_TMP_Region, 621.614, 2607.93, HTuple(49.2841).TupleRad(),
						373.79, 146.671);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 768.658, 944.174, 956.6, 1154.52);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle2(&ho_ROI_0, 48.0945, 3457.97, HTuple(-135).TupleRad(), 497.208,
						295.842);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 735.281, 2859.49, 931.233, 3133.35);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
					Det_SJ_Region(hv_dd, (*hv_dt));

					//jl add test 浅黑

					GenRectangle2(&ho_ROI_10, 584.537, 957.128, HTuple(-45.9734).TupleRad(),
						122.111, 83.0438);
					MoveRegion(ho_ROI_10, &ho_ROI_10, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_10, &ho_ImageReduced159);
					MedianRect(ho_ImageReduced159, &ho_ImageMedian20, 55, 65);
					DynThreshold(ho_ImageReduced159, ho_ImageMedian20, &ho_RegionDynThresh21,
						8, "dark");
					Connection(ho_RegionDynThresh21, &ho_ConnectedRegions244);
					SelectShape(ho_ConnectedRegions244, &ho_SelectedRegions297, "area", "and",
						70, 99999);
					Union1(ho_SelectedRegions297, &ho_RegionUnion80);
					ClosingCircle(ho_RegionUnion80, &ho_RegionClosing114, 8.5);
					Connection(ho_RegionClosing114, &ho_ConnectedRegions245);
					SelectShape(ho_ConnectedRegions245, &ho_SelectedRegions298, "area", "and",
						1050, 99999);
					ConcatObj(ho_SelectedRegions298, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					GenRectangle2(&ho_ROI_0, 766.311, 1255.94, HTuple(134.05).TupleRad(), 178.73,
						122.93);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced153);
					Threshold(ho_ImageReduced153, &ho_Region150, 188, 255);
					Connection(ho_Region150, &ho_ConnectedRegions232);
					SelectShape(ho_ConnectedRegions232, &ho_SelectedRegions281, "area", "and",
						1000, 99999);
					Union1(ho_SelectedRegions281, &ho_RegionUnion77);
					Difference(ho_ROI_0, ho_RegionUnion77, &ho_RegionDifference89);
					ErosionRectangle1(ho_RegionDifference89, &ho_RegionErosion52, 30, 30);
					MoveRegion(ho_RegionErosion52, &ho_RegionMoved86, 8, -8);
					ReduceDomain(ho_ImageReduced153, ho_RegionMoved86, &ho_ImageReduced154);
					GrayClosingRect(ho_ImageReduced154, &ho_ImageClosing38, 50, 42);
					SubImage(ho_ImageReduced154, ho_ImageClosing38, &ho_ImageSub35, 1, 128);
					Threshold(ho_ImageSub35, &ho_Region151, 0, 105);
					OpeningRectangle1(ho_Region151, &ho_RegionOpening84, 10, 10);
					Connection(ho_RegionOpening84, &ho_ConnectedRegions233);
					SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions282, (HTuple("area").Append("anisometry")),
						"and", (HTuple(1050).Append(1)), (HTuple(99999).Append(3)));
					ConcatObj(ho_SelectedRegions282, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					//检测大的缺陷
					DilationRectangle1(ho_SelectedRegions95, &ho_RegionDilation79, 1500, 220);
					MoveRegion(ho_RegionDilation79, &ho_RegionMoved95, 400, -490);
					ReduceDomain(ho_Image, ho_RegionMoved95, &ho_ImageReduced166);
					Threshold(ho_ImageReduced166, &ho_Region160, 158, 255);
					CountObj(ho_Region160, &hv_Number100);
					if (0 != hv_Number100)
					{
						AreaCenter(ho_Region160, &hv_Area15, &hv_Row18, &hv_Column18);
						if (0 != (int(hv_Area15<3500)))
						{
							ConcatObj(ho_RegionMoved95, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 137.009, 2389.81, 1564.76, 2862.81);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number43);

				Threshold(ho_Image, &ho_Region126, 180, 255);
				Connection(ho_Region126, &ho_ConnectedRegions201);
				SelectShape(ho_ConnectedRegions201, &ho_SelectedRegions250, ((HTuple("area").Append("column")).Append("anisometry")),
					"and", ((HTuple(9050).Append(0)).Append(10)), ((HTuple(99999).Append(1000)).Append(999)));
				CountObj(ho_SelectedRegions250, &hv_Number80);

				if (0 != hv_Number43)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 984;
					hv_C = hv_Column2 - 2693;
					hv_R1.Clear();
					hv_R1[0] = 41;
					hv_R1[1] = 53;
					hv_R1[2] = 126;
					hv_R1[3] = 135;
					hv_R1[4] = 431;
					hv_R1[5] = 592;
					hv_R1[6] = 593;
					hv_R1[7] = 612;
					hv_R1[8] = 706;
					hv_R1[9] = 764;
					hv_R1[10] = 765;
					hv_R1[11] = 863;
					hv_R1[12] = 848;
					hv_R1[13] = 715;
					hv_R1[14] = 638;
					hv_R1[15] = 610;
					hv_R1[16] = 41;
					hv_R1[17] = 41;
					hv_C1.Clear();
					hv_C1[0] = 596;
					hv_C1[1] = 636;
					hv_C1[2] = 726;
					hv_C1[3] = 860;
					hv_C1[4] = 1164;
					hv_C1[5] = 1274;
					hv_C1[6] = 1198;
					hv_C1[7] = 1192;
					hv_C1[8] = 1192;
					hv_C1[9] = 1213;
					hv_C1[10] = 1065;
					hv_C1[11] = 1065;
					hv_C1[12] = 1018;
					hv_C1[13] = 898;
					hv_C1[14] = 802;
					hv_C1[15] = 790;
					hv_C1[16] = 225;
					hv_C1[17] = 596;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 405;
					hv_R2[1] = 488;
					hv_R2[2] = 519;
					hv_R2[3] = 576;
					hv_R2[4] = 575;
					hv_R2[5] = 552;
					hv_R2[6] = 551;
					hv_R2[7] = 690;
					hv_R2[8] = 781;
					hv_R2[9] = 797;
					hv_R2[10] = 798;
					hv_R2[11] = 917;
					hv_R2[12] = 919;
					hv_R2[13] = 984;
					hv_R2[14] = 985;
					hv_R2[15] = 1017;
					hv_R2[16] = 1053;
					hv_R2[17] = 1087;
					hv_R2[18] = 1087;
					hv_R2[19] = 1129;
					hv_R2[20] = 1129;
					hv_R2[21] = 1176;
					hv_R2[22] = 1176;
					hv_R2[23] = 1196;
					hv_R2[24] = 1196;
					hv_R2[25] = 1255;
					hv_R2[26] = 1263;
					hv_R2[27] = 1288;
					hv_R2[28] = 1288;
					hv_R2[29] = 1304;
					hv_R2[30] = 1316;
					hv_R2[31] = 1360;
					hv_R2[32] = 1357;
					hv_R2[33] = 1374;
					hv_R2[34] = 1385;
					hv_R2[35] = 1415;
					hv_R2[36] = 1430;
					hv_R2[37] = 1410;
					hv_R2[38] = 1375;
					hv_R2[39] = 1375;
					hv_R2[40] = 1351;
					hv_R2[41] = 1344;
					hv_R2[42] = 1328;
					hv_R2[43] = 1328;
					hv_R2[44] = 1302;
					hv_R2[45] = 1302;
					hv_R2[46] = 1272;
					hv_R2[47] = 1271;
					hv_R2[48] = 1248;
					hv_R2[49] = 1253;
					hv_R2[50] = 1209;
					hv_R2[51] = 1208;
					hv_R2[52] = 1184;
					hv_R2[53] = 1183;
					hv_R2[54] = 1158;
					hv_R2[55] = 1151;
					hv_R2[56] = 1110;
					hv_R2[57] = 1104;
					hv_R2[58] = 1073;
					hv_R2[59] = 1023;
					hv_R2[60] = 1023;
					hv_R2[61] = 944;
					hv_R2[62] = 944;
					hv_R2[63] = 822;
					hv_R2[64] = 910;
					hv_R2[65] = 920;
					hv_R2[66] = 974;
					hv_R2[67] = 1011;
					hv_R2[68] = 1060;
					hv_R2[69] = 1069;
					hv_R2[70] = 1090;
					hv_R2[71] = 1117;
					hv_R2[72] = 1189;
					hv_R2[73] = 1190;
					hv_R2[74] = 1215;
					hv_R2[75] = 1222;
					hv_R2[76] = 1255;
					hv_R2[77] = 1250;
					hv_R2[78] = 1314;
					hv_R2[79] = 1349;
					hv_R2[80] = 1275;
					hv_R2[81] = 1158;
					hv_R2[82] = 1158;
					hv_R2[83] = 1105;
					hv_R2[84] = 1111;
					hv_R2[85] = 1096;
					hv_R2[86] = 973;
					hv_R2[87] = 928;
					hv_R2[88] = 912;
					hv_R2[89] = 985;
					hv_R2[90] = 1037;
					hv_R2[91] = 1077;
					hv_R2[92] = 1093;
					hv_R2[93] = 1089;
					hv_R2[94] = 1048;
					hv_R2[95] = 921;
					hv_R2[96] = 880;
					hv_R2[97] = 875;
					hv_R2[98] = 414;
					hv_R2[99] = 423;
					hv_R2[100] = 405;
					hv_C2.Clear();
					hv_C2[0] = 3241;
					hv_C2[1] = 3324;
					hv_C2[2] = 3301;
					hv_C2[3] = 3204;
					hv_C2[4] = 3172;
					hv_C2[5] = 3139;
					hv_C2[6] = 3054;
					hv_C2[7] = 2907;
					hv_C2[8] = 2908;
					hv_C2[9] = 2925;
					hv_C2[10] = 2974;
					hv_C2[11] = 2974;
					hv_C2[12] = 3056;
					hv_C2[13] = 2989;
					hv_C2[14] = 2956;
					hv_C2[15] = 2956;
					hv_C2[16] = 2924;
					hv_C2[17] = 2877;
					hv_C2[18] = 2845;
					hv_C2[19] = 2835;
					hv_C2[20] = 2797;
					hv_C2[21] = 2779;
					hv_C2[22] = 2742;
					hv_C2[23] = 2741;
					hv_C2[24] = 2684;
					hv_C2[25] = 2683;
					hv_C2[26] = 2621;
					hv_C2[27] = 2620;
					hv_C2[28] = 2582;
					hv_C2[29] = 2581;
					hv_C2[30] = 2488;
					hv_C2[31] = 2487;
					hv_C2[32] = 2394;
					hv_C2[33] = 2389;
					hv_C2[34] = 2310;
					hv_C2[35] = 2297;
					hv_C2[36] = 2230;
					hv_C2[37] = 1904;
					hv_C2[38] = 1801;
					hv_C2[39] = 1742;
					hv_C2[40] = 1741;
					hv_C2[41] = 1643;
					hv_C2[42] = 1642;
					hv_C2[43] = 1610;
					hv_C2[44] = 1592;
					hv_C2[45] = 1546;
					hv_C2[46] = 1545;
					hv_C2[47] = 1506;
					hv_C2[48] = 1505;
					hv_C2[49] = 1450;
					hv_C2[50] = 1450;
					hv_C2[51] = 1418;
					hv_C2[52] = 1417;
					hv_C2[53] = 1387;
					hv_C2[54] = 1385;
					hv_C2[55] = 1338;
					hv_C2[56] = 1329;
					hv_C2[57] = 1287;
					hv_C2[58] = 1250;
					hv_C2[59] = 1233;
					hv_C2[60] = 1195;
					hv_C2[61] = 1123;
					hv_C2[62] = 1271;
					hv_C2[63] = 1272;
					hv_C2[64] = 1358;
					hv_C2[65] = 1471;
					hv_C2[66] = 1422;
					hv_C2[67] = 1462;
					hv_C2[68] = 1480;
					hv_C2[69] = 1506;
					hv_C2[70] = 1509;
					hv_C2[71] = 1552;
					hv_C2[72] = 1613;
					hv_C2[73] = 1637;
					hv_C2[74] = 1654;
					hv_C2[75] = 1698;
					hv_C2[76] = 1708;
					hv_C2[77] = 1741;
					hv_C2[78] = 1795;
					hv_C2[79] = 1833;
					hv_C2[80] = 1928;
					hv_C2[81] = 2007;
					hv_C2[82] = 2057;
					hv_C2[83] = 2116;
					hv_C2[84] = 2257;
					hv_C2[85] = 2320;
					hv_C2[86] = 2459;
					hv_C2[87] = 2467;
					hv_C2[88] = 2499;
					hv_C2[89] = 2588;
					hv_C2[90] = 2589;
					hv_C2[91] = 2613;
					hv_C2[92] = 2646;
					hv_C2[93] = 2754;
					hv_C2[94] = 2795;
					hv_C2[95] = 2795;
					hv_C2[96] = 2753;
					hv_C2[97] = 2688;
					hv_C2[98] = 3073;
					hv_C2[99] = 3208;
					hv_C2[100] = 3241;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion66);
					MoveRegion(ho_RegionUnion66, &ho_RegionMoved70, hv_R - 10, hv_C + 10);
					ErosionRectangle1(ho_RegionMoved70, &ho_RegionErosion36, 39, 39);

					if (0 != hv_Number80)
					{
						DilationRectangle1(ho_SelectedRegions250, &ho_RegionDilation68, 40, 40);
						Difference(ho_RegionErosion36, ho_RegionDilation68, &ho_RegionErosion36
							);
					}
					ReduceDomain(ho_Image, ho_RegionErosion36, &ho_ImageReduced116);
					MedianRect(ho_ImageReduced116, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced116, &ho_ImageMedian31, 75, 75);

					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
						18, "dark");
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions171);
					SelectShape(ho_ConnectedRegions171, &ho_SelectedRegions213, ((HTuple("area").Append("rectangularity")).Append("anisometry")),
						"and", ((HTuple(120).Append(0.01)).Append(1)), ((HTuple(99999).Append(0.78)).Append(10)));
					CountObj(ho_SelectedRegions213, &hv_Number73);
					if (0 != (int(hv_Number73<13)))
					{
						Union1(ho_SelectedRegions213, &ho_RegionUnion65);
						ClosingCircle(ho_RegionUnion65, &ho_RegionClosing121, 10.5);

						Connection(ho_RegionClosing121, &ho_ConnectedRegions176);
						SelectShape(ho_ConnectedRegions176, &ho_SelectedRegions214, "area", "and",
							500, 99999);
						ConcatObj(ho_SelectedRegions214, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}

					//jl add 检测溢胶
					GenRectangle1(&ho_ROI_0, 144.171, 1063.3, 1004.71, 1725.27);
					MoveRegion(ho_ROI_0, &ho_RegionMoved73, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved73, &ho_ImageReduced122);
					Threshold(ho_ImageReduced122, &ho_Region117, 200, 255);
					Connection(ho_Region117, &ho_ConnectedRegions190);
					SelectShape(ho_ConnectedRegions190, &ho_SelectedRegions237, "area", "and",
						10050, 59999);
					ClosingCircle(ho_SelectedRegions237, &ho_RegionClosing94, 8.5);
					Difference(ho_RegionClosing94, ho_SelectedRegions237, &ho_RegionDifference73
						);
					Connection(ho_RegionDifference73, &ho_ConnectedRegions191);
					SelectShape(ho_ConnectedRegions191, &ho_SelectedRegions238, "area", "and",
						150, 99999);
					ConcatObj(ho_SelectedRegions238, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					GenRectangle1(&ho_ROI_0, 862.586, 1951.91, 1225.37, 2614.83);
					MoveRegion(ho_ROI_0, &ho_RegionMoved83, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved83, &ho_ImageReduced141);
					Threshold(ho_ImageReduced141, &ho_Region137, 200, 255);
					ClosingRectangle1(ho_Region137, &ho_RegionClosing102, 5, 5);
					Connection(ho_RegionClosing102, &ho_ConnectedRegions214);
					SelectShape(ho_ConnectedRegions214, &ho_SelectedRegions263, "area", "and",
						10050, 39999);
					CountObj(ho_SelectedRegions263, &hv_Number86);
					if (0 != (int(hv_Number86 == 1)))
					{
						ClosingRectangle1(ho_SelectedRegions263, &ho_RegionClosing101, 20, 20);
						ErosionRectangle1(ho_RegionClosing101, &ho_RegionErosion45, 5, 5);
						ReduceDomain(ho_ImageReduced141, ho_RegionErosion45, &ho_ImageReduced142
							);
						GrayClosingRect(ho_ImageReduced142, &ho_ImageClosing35, 11, 11);
						SubImage(ho_ImageReduced142, ho_ImageClosing35, &ho_ImageSub33, 1, 128);
						Threshold(ho_ImageSub33, &ho_Region138, 0, 60);
						Connection(ho_Region138, &ho_ConnectedRegions215);
						SelectShape(ho_ConnectedRegions215, &ho_SelectedRegions264, "area", "and",
							50, 99999);
						Union1(ho_SelectedRegions264, &ho_RegionUnion62);
						CountObj(ho_RegionUnion62, &hv_Number87);
						if (0 != hv_Number87)
						{
							RegionFeatures(ho_RegionUnion62, "area", &hv_Value30);
							if (0 != (int(hv_Value30>200)))
							{
								ConcatObj(ho_RegionUnion62, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
							}
						}
					}
				}

				//jl add test 检测浅白色边缘RT
				if (0 != (int(hv_Number80 == 1)))
				{
					ClosingRectangle1(ho_SelectedRegions250, &ho_RegionClosing98, 20, 20);
					DilationRectangle1(ho_RegionClosing98, &ho_RegionDilation66, 1, 15);
					MoveRegion(ho_RegionDilation66, &ho_RegionMoved80, 10, -22);
					DilationRectangle1(ho_SelectedRegions250, &ho_RegionDilation67, 3, 3);
					Difference(ho_RegionMoved80, ho_RegionDilation67, &ho_RegionDifference80
						);
					ReduceDomain(ho_Image, ho_RegionDifference80, &ho_ImageReduced131);
					RankRect(ho_ImageReduced131, &ho_ImageRank5, 5, 5, 5);
					GrayOpeningRect(ho_ImageRank5, &ho_ImageOpening1, 25, 25);
					SubImage(ho_ImageRank5, ho_ImageOpening1, &ho_ImageSub26, 2.5, 128);
					Threshold(ho_ImageSub26, &ho_Region127, 180, 255);
					Connection(ho_Region127, &ho_ConnectedRegions202);
					SelectShape(ho_ConnectedRegions202, &ho_SelectedRegions251, (HTuple("area").Append("anisometry")),
						"and", (HTuple(200).Append(1)), (HTuple(99999).Append(4)));
					ConcatObj(ho_SelectedRegions251, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}

			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 125.306, 3314.33, 843.329, 3747.12);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 176, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number44);
				if (0 != (int(hv_Number44 == 1)))
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 440;
					hv_C = hv_Column2 - 3476;

					ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
					Threshold(ho_ImageScaled, &ho_Region37, 217, 255);
					ClosingRectangle1(ho_Region37, &ho_RegionClosing62, 3, 3);
					Connection(ho_RegionClosing62, &ho_ConnectedRegions52);
					SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
						650, 99999);
					Union1(ho_SelectedRegions61, &ho_RegionUnion21);
					ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 120, 60);
					Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
					RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
					TupleMin(hv_Value1, &hv_Min);
					SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
						hv_Min - 5, hv_Min + 5);

					//jl add rt黑色区域
					CountObj(ho_SelectedRegions62, &hv_Number79);
					if (0 != hv_Number79)
					{
						//制作屏蔽区域
						Difference(ho_RegionClosing20, ho_RegionUnion21, &ho_RegionDifference78
							);
						Connection(ho_RegionDifference78, &ho_ConnectedRegions199);
						SelectShape(ho_ConnectedRegions199, &ho_SelectedRegions248, ((HTuple("area").Append("column")).Append("row")),
							"and", ((HTuple(550).Append(2000)).Append(1100)), ((HTuple(99999).Append(3000)).Append(1800)));
						DilationRectangle1(ho_SelectedRegions248, &ho_RegionDilation64, 25, 100);
						//end
						DilationRectangle1(ho_SelectedRegions62, &ho_RegionDilation63, 1, 30);
						DilationRectangle1(ho_SelectedRegions62, &ho_RegionDilation65, 10, 10);
						MoveRegion(ho_RegionDilation63, &ho_RegionMoved78, 25, 0);
						Difference(ho_RegionMoved78, ho_RegionDilation65, &ho_RegionDifference77
							);
						Connection(ho_RegionDifference77, &ho_ConnectedRegions198);
						SelectShape(ho_ConnectedRegions198, &ho_SelectedRegions247, "area", "and",
							15000, 999999);
						Difference(ho_SelectedRegions247, ho_RegionDilation64, &ho_RegionDifference79
							);
						ReduceDomain(ho_Image, ho_RegionDifference79, &ho_ImageReduced130);
						MedianRect(ho_ImageReduced130, &ho_ImageMedian11, 5, 5);
						GrayClosingRect(ho_ImageMedian11, &ho_ImageClosing32, 18, 18);
						SubImage(ho_ImageMedian11, ho_ImageClosing32, &ho_ImageSub22, 3, 128);
						Threshold(ho_ImageSub22, &ho_Region125, 0, 105);
						ClosingCircle(ho_Region125, &ho_RegionClosing97, 3.5);
						Connection(ho_RegionClosing97, &ho_ConnectedRegions200);
						SelectShape(ho_ConnectedRegions200, &ho_SelectedRegions249, ((HTuple("area").Append("anisometry")).Append("column")),
							"and", ((HTuple(300).Append(1)).Append(2000)), ((HTuple(99999).Append(3)).Append(9999)));
						ConcatObj(ho_SelectedRegions249, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}

					OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 160);
					DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
					Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

					Threshold(ho_ImageScaled, &ho_Region39, 0, 35);
					Connection(ho_Region39, &ho_ConnectedRegions54);
					SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
						45500, 999999999);
					Union1(ho_SelectedRegions63, &ho_RegionUnion26);
					ClosingRectangle1(ho_RegionUnion26, &ho_RegionClosing22, 100, 70);
					Union2(ho_RegionUnion25, ho_RegionClosing22, &ho_RegionUnion27);
					DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 45, 45);
					Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
					Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
					SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
						850000, 99999999);
					CountObj(ho_SelectedRegions64, &hv_Number52);
					if (0 != hv_Number52)
					{
						RegionFeatures(ho_SelectedRegions64, "row", &hv_Value23);
						TupleMax(hv_Value23, &hv_Max15);
						SelectShape(ho_SelectedRegions64, &ho_SelectedRegions64, "row", "and",
							hv_Max15, hv_Max15);
					}
					ClosingRectangle1(ho_SelectedRegions64, &ho_RegionClosing23, 70, 70);

					GenRectangle1(&ho_ROI_0, 335.957, 3373.07, 593.42, 3686.38);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 25);

					GenRectangle1(&ho_ROI_0, -39.42571, 3403.07, 195.523, 3858.52);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced48);
					Threshold(ho_ImageReduced48, &ho_Region27, 178, 255);
					Connection(ho_Region27, &ho_ConnectedRegions42);
					SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions46, "area", "and",
						100, 99999);
					DilationRectangle1(ho_SelectedRegions46, &ho_RegionDilation19, 18, 18);
					GenRectangle1(&ho_ROI_0, 1152.71, 2182.56, 1348.25, 2688.23);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced49);
					Threshold(ho_ImageReduced49, &ho_Region44, 178, 255);
					Connection(ho_Region44, &ho_ConnectedRegions44);
					SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions48, "area", "and",
						8500, 99999);
					DilationRectangle1(ho_SelectedRegions48, &ho_RegionDilation26, 37, 37);
					Union2(ho_RegionDilation24, ho_RegionDilation26, &ho_RegionUnion5);
					Union2(ho_RegionUnion5, ho_RegionDilation19, &ho_RegionUnion28);

					GenRectangle1(&ho_ROI_0, -50.42571, 3579.57, 72.6429, 3864.37);
					Union2(ho_RegionUnion28, ho_ROI_0, &ho_RegionUnion29);
					Difference(ho_RegionClosing23, ho_RegionUnion29, &ho_RegionDifference23
						);

					GenRectangle1(&ho_ROI_0, 1014.83, 2561.11, 1362.44, 3207.33);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced50);
					VarThreshold(ho_ImageReduced50, &ho_Region47, 75, 75, 0.2, 10, "dark");
					Connection(ho_Region47, &ho_ConnectedRegions47);
					SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions51, "area", "and",
						4850, 99999);
					Union1(ho_SelectedRegions51, &ho_RegionUnion30);
					ClosingRectangle1(ho_RegionUnion30, &ho_RegionClosing26, 200, 210);
					DilationRectangle1(ho_RegionClosing26, &ho_RegionDilation27, 21, 21);
					Difference(ho_RegionDifference23, ho_RegionDilation27, &ho_RegionDifference39
						);

					GenRectangle1(&ho_ROI_0, 476.391, 3056.87, 1084.94, 3443.07);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced51);
					Threshold(ho_ImageReduced51, &ho_Region48, 178, 255);
					Connection(ho_Region48, &ho_ConnectedRegions62);
					SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions71, "area", "and",
						7500, 199999);
					Union1(ho_SelectedRegions71, &ho_RegionUnion31);
					DilationRectangle1(ho_RegionUnion31, &ho_RegionDilation28, 11, 11);
					Difference(ho_RegionDifference39, ho_RegionDilation28, &ho_RegionDifference41
						);

					GenRectangle1(&ho_ROI_0, 2.42571, 3205.82, 616.826, 3408.17);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced52);
					Threshold(ho_ImageReduced52, &ho_Region52, 178, 255);
					Connection(ho_Region52, &ho_ConnectedRegions64);
					SelectShape(ho_ConnectedRegions64, &ho_SelectedRegions72, "area", "and",
						15000, 999999);
					DilationRectangle1(ho_SelectedRegions72, &ho_RegionDilation29, 17, 17);
					Difference(ho_ImageReduced52, ho_RegionDilation29, &ho_RegionDifference43
						);
					ReduceDomain(ho_ImageReduced52, ho_RegionDifference43, &ho_ImageReduced55
						);
					VarThreshold(ho_ImageReduced55, &ho_Region53, 65, 65, 0.2, 11, "dark");
					Connection(ho_Region53, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions74, "area", "and",
						5500, 99999);
					Union1(ho_SelectedRegions74, &ho_RegionUnion32);
					ClosingRectangle1(ho_RegionUnion32, &ho_RegionClosing29, 20, 20);
					DilationRectangle1(ho_RegionClosing29, &ho_RegionDilation30, 11, 11);
					Difference(ho_RegionDifference41, ho_RegionDilation30, &ho_RegionDifference44
						);
					GenRectangle1(&ho_ROI_0, 997.169, 1681.79, 1190.27, 2547.8);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced58);
					Threshold(ho_ImageReduced58, &ho_Region59, 168, 255);
					DilationRectangle1(ho_Region59, &ho_RegionDilation33, 11, 11);
					Difference(ho_ImageReduced58, ho_RegionDilation33, &ho_RegionDifference25
						);
					Connection(ho_RegionDifference25, &ho_ConnectedRegions51);
					RegionFeatures(ho_ConnectedRegions51, "area", &hv_Value5);
					TupleMax(hv_Value5, &hv_Max7);
					SelectShape(ho_ConnectedRegions51, &ho_SelectedRegions78, "area", "and",
						hv_Max7 - 5, hv_Max7 + 5);
					ReduceDomain(ho_ImageReduced58, ho_SelectedRegions78, &ho_ImageReduced59
						);
					VarThreshold(ho_ImageReduced59, &ho_Region61, 15, 55, 0.2, 12, "dark");
					Connection(ho_Region61, &ho_ConnectedRegions73);
					SelectShape(ho_ConnectedRegions73, &ho_SelectedRegions82, "area", "and",
						10000, 99999);
					ClosingRectangle1(ho_SelectedRegions82, &ho_RegionClosing32, 10, 10);
					DilationRectangle1(ho_RegionClosing32, &ho_RegionDilation34, 11, 11);
					Difference(ho_RegionDifference44, ho_RegionDilation34, &ho_RegionDifference44
						);
					GenRectangle1(&ho_ROI_0, 1339.85, 2185.2, 1566.76, 2409.69);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionDifference44);

					GenRectangle1(&ho_ROI_0, 0, 0, 903.546, 1782.31);
					Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionDifference44);

					GenRectangle1(&ho_ROI_0, 970.059, -344.038, 1317.58, 607.539);
					Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionDifference44);
					SetDictObject(ho_RegionDifference44, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 31);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 220);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 85);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_ratio_value", 0.15);
					Det_SJ_Region(hv_dd, (*hv_dt));

					//add jl
					ErosionRectangle1(ho_RegionDifference44, &ho_RegionErosion32, 30, 30);
					ReduceDomain(ho_Image, ho_RegionDifference44, &ho_ImageReduced115);
					MedianRect(ho_ImageReduced115, &ho_ImageMedian3, 3, 3);
					MedianRect(ho_ImageReduced115, &ho_ImageMedian4, 80, 80);
					DynThreshold(ho_ImageReduced115, ho_ImageMedian4, &ho_RegionDynThresh13,
						20, "dark");
					Intersection(ho_RegionDynThresh13, ho_RegionErosion32, &ho_RegionIntersection19
						);
					Connection(ho_RegionIntersection19, &ho_ConnectedRegions175);
					SelectShape(ho_ConnectedRegions175, &ho_SelectedRegions213, (HTuple("area").Append("column")),
						"and", (HTuple(100).Append(2300)), (HTuple(99999).Append(9999)));
					Union1(ho_SelectedRegions213, &ho_RegionUnion65);
					ClosingRectangle1(ho_RegionUnion65, &ho_RegionClosing84, 7, 7);
					Connection(ho_RegionClosing84, &ho_ConnectedRegions176);
					SelectShape(ho_ConnectedRegions176, &ho_SelectedRegions214, "area", "and",
						490, 99999);
					ConcatObj(ho_SelectedRegions214, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
				if (0 != (int(hv_Number44 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
					GenRectangle1(&ho_ROI_0, 137.009, 3407.96, 593.42, 3794.15);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 179, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));
				//横RTYJH新增
				//mean_image (ImageReduced81, ImageMean4, 60, 1)
				//dyn_threshold (ImageReduced81, ImageMean4, RegionDynThresh6, 45, 'light')
				//connection (RegionDynThresh6, ConnectedRegions158)
				//select_shape (ConnectedRegions158, SelectedRegions191, 'area', 'and', 10, 999)
				//union1 (SelectedRegions191, RegionUnion62)
				//closing_rectangle1 (RegionUnion62, RegionClosing74, 80, 15)
				//connection (RegionClosing74, RegionClosing74)
				//count_obj (RegionDilation22, Number71)
				//if (Number71==1)
				//area_center (RegionDilation22, Area14, Row17, Column17)
				//select_shape (RegionClosing74, SelectedRegions192, ['area','ratio','column'], 'and', [180,0,0], [9999,0.2,Column17])
				//else
				//select_shape (RegionClosing74, SelectedRegions192, ['area','ratio'], 'and', [180,0], [9999,0.2])
				//endif

				//select_gray (SelectedRegions192, Image, SelectedRegions212, 'mean', 'and', 0, 175)
				//concat_obj (SelectedRegions212, dt.['63'], dt.['63'])

				//转角RT
				GenRectangle1(&ho_ROI_0, 771.179, 2589.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 15);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 125.306, 3314.33, 833.329, 3737.12);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number45);
				if (0 != (int(hv_Number45 == 1)))
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 447;
					hv_C = hv_Column2 - 3472;

					ScaleImage(ho_Image, &ho_ImageScaled, 1.71, -30);
					Threshold(ho_ImageScaled, &ho_Region37, 165, 255);
					ClosingRectangle1(ho_Region37, &ho_RegionClosing56, 4, 4);
					Connection(ho_RegionClosing56, &ho_ConnectedRegions52);
					SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
						550, 99999);
					Union1(ho_SelectedRegions61, &ho_RegionUnion21);
					ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 120, 60);
					Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
					RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
					TupleMin(hv_Value1, &hv_Min);
					SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
						hv_Min - 5, hv_Min + 5);
					OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 160);
					DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
					Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

					Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
					Connection(ho_Region39, &ho_ConnectedRegions54);
					SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
						65000, 999999999);
					Union1(ho_SelectedRegions63, &ho_RegionUnion26);
					ClosingRectangle1(ho_RegionUnion26, &ho_RegionClosing22, 100, 70);
					Union2(ho_RegionUnion25, ho_RegionClosing22, &ho_RegionUnion27);
					DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 72, 72);
					Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
					Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
					SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
						740000, 99999999);
					CountObj(ho_SelectedRegions64, &hv_Number56);
					if (0 != hv_Number56)
					{
						RegionFeatures(ho_SelectedRegions64, "row", &hv_Value24);
						TupleMax(hv_Value24, &hv_Max16);
						SelectShape(ho_SelectedRegions64, &ho_SelectedRegions64, "row", "and",
							hv_Max16, hv_Max16);
					}
					ClosingRectangle1(ho_SelectedRegions64, &ho_RegionClosing23, 70, 70);

					GenRectangle1(&ho_ROI_0, 335.957, 3343.07, 593.42, 3666.38);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 28);

					GenRectangle1(&ho_ROI_0, 2.42571, 3383.07, 195.523, 3818.52);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced48);
					Threshold(ho_ImageReduced48, &ho_Region27, 178, 255);
					Connection(ho_Region27, &ho_ConnectedRegions42);
					SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions46, "area", "and",
						400, 99999);
					DilationRectangle1(ho_SelectedRegions46, &ho_RegionDilation19, 18, 18);
					GenRectangle1(&ho_ROI_0, 1172.71, 2152.56, 1348.25, 2688.23);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced49);
					Threshold(ho_ImageReduced49, &ho_Region44, 178, 255);
					Connection(ho_Region44, &ho_ConnectedRegions44);
					SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions48, "area", "and",
						8500, 99999);
					DilationRectangle1(ho_SelectedRegions48, &ho_RegionDilation26, 37, 37);
					Union2(ho_RegionDilation24, ho_RegionDilation26, &ho_RegionUnion5);
					Union2(ho_RegionUnion5, ho_RegionDilation19, &ho_RegionUnion28);

					GenRectangle1(&ho_ROI_0, -7.42571, 3519.57, 72.6429, 3864.37);
					Union2(ho_RegionUnion28, ho_ROI_0, &ho_RegionUnion29);
					Difference(ho_RegionClosing23, ho_RegionUnion29, &ho_RegionDifference23
						);

					GenRectangle1(&ho_ROI_0, 1014.83, 2551.11, 1362.44, 3207.33);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced50);
					VarThreshold(ho_ImageReduced50, &ho_Region47, 75, 75, 0.2, 8, "dark");
					Connection(ho_Region47, &ho_ConnectedRegions47);
					SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions51, "area", "and",
						2850, 99999);
					Union1(ho_SelectedRegions51, &ho_RegionUnion30);
					ClosingRectangle1(ho_RegionUnion30, &ho_RegionClosing26, 200, 210);
					DilationRectangle1(ho_RegionClosing26, &ho_RegionDilation27, 21, 21);
					Difference(ho_RegionDifference23, ho_RegionDilation27, &ho_RegionDifference39
						);

					GenRectangle1(&ho_ROI_0, 476.391, 3056.87, 1084.94, 3443.07);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced51);
					Threshold(ho_ImageReduced51, &ho_Region48, 160, 255);
					ClosingRectangle1(ho_Region48, &ho_RegionClosing59, 3, 3);
					Connection(ho_RegionClosing59, &ho_ConnectedRegions62);
					SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions71, "area", "and",
						7500, 199999);
					Union1(ho_SelectedRegions71, &ho_RegionUnion31);
					DilationRectangle1(ho_RegionUnion31, &ho_RegionDilation28, 19, 19);
					Difference(ho_RegionDifference39, ho_RegionDilation28, &ho_RegionDifference41
						);

					GenRectangle1(&ho_ROI_0, 2.42571, 3155.82, 616.826, 3358.17);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced52);
					Threshold(ho_ImageReduced52, &ho_Region52, 168, 255);
					Connection(ho_Region52, &ho_ConnectedRegions64);
					SelectShape(ho_ConnectedRegions64, &ho_SelectedRegions72, "area", "and",
						15000, 999999);
					DilationRectangle1(ho_SelectedRegions72, &ho_RegionDilation29, 17, 17);
					Difference(ho_ImageReduced52, ho_RegionDilation29, &ho_RegionDifference43
						);
					ReduceDomain(ho_ImageReduced52, ho_RegionDifference43, &ho_ImageReduced55
						);
					VarThreshold(ho_ImageReduced55, &ho_Region53, 95, 95, 0.2, 10, "dark");
					Connection(ho_Region53, &ho_ConnectedRegions65);
					SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions74, "area", "and",
						3500, 99999);
					Union1(ho_SelectedRegions74, &ho_RegionUnion32);
					ClosingRectangle1(ho_RegionUnion32, &ho_RegionClosing29, 20, 20);
					DilationRectangle1(ho_RegionClosing29, &ho_RegionDilation30, 11, 11);
					Difference(ho_RegionDifference41, ho_RegionDilation30, &ho_RegionDifference44
						);
					GenRectangle1(&ho_ROI_0, 1325.59, 2175.68, 1589.63, 2434.8);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionErosion9);


					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 19);
					Det_SJ_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number45 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				ErosionRectangle1(ho_RegionDilation22, &ho_RegionDilation22, 11, 1);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 581.179, 2589.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 70, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					20000, 799999);
				Union1(ho_SelectedRegions60, &ho_SelectedRegions60);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 7);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 31.6829, 540.757, 1424.32, 985.466);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number42);
				if (0 != hv_Number42)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 998;
					hv_C = hv_Column2 - 757;
				}
				if (0 != (int(hv_Number42 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 165, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing53, 3, 3);
				Connection(ho_RegionClosing53, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				ClosingRectangle1(ho_SelectedRegions63, &ho_RegionClosing31, 100, 800);
				Union1(ho_RegionClosing31, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 41, 31);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, (HTuple("area").Append("column")),
					"and", (HTuple(850000).Append(0)), (HTuple(99999999).Append(1900)));

				GenRectangle1(&ho_ROI_0, 884.484, 627.978, 1182.36, 960.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);
				Intersection(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionIntersection7
					);
				CountObj(ho_RegionIntersection7, &hv_Number18);
				if (0 != hv_Number18)
				{
					AreaCenter(ho_RegionIntersection7, &hv_Area7, &hv_Row7, &hv_Column7);
					TupleMax(hv_Area7, &hv_Max4);
					if (0 != hv_Max4)
					{
						GenRectangle1(&ho_ROI_0, 681.923, 747.66, 963.606, 1449.63);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						Union2(ho_RegionDilation24, ho_ROI_0, &ho_RegionUnion36);
						Difference(ho_SelectedRegions64, ho_RegionUnion36, &ho_RegionDifference47
							);

						GenRectangle1(&ho_ROI_0, -56.35143, 110.677, 89.7171, 598.666);
						Difference(ho_RegionDifference47, ho_ROI_0, &ho_RegionDifference48);
						GenRectangle1(&ho_ROI_0, 883.088, 1408.21, 1408.23, 2673.61);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced27);
						VarThreshold(ho_ImageReduced27, &ho_Region19, 65, 65, 0.2, 7, "dark");
						ClosingRectangle1(ho_Region19, &ho_RegionClosing87, 3, 1);
						Connection(ho_RegionClosing87, &ho_ConnectedRegions35);
						SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions43, "area", "and",
							3200, 699999);
						Union1(ho_SelectedRegions43, &ho_RegionUnion18);
						ClosingRectangle1(ho_RegionUnion18, &ho_RegionClosing10, 700, 700);
						DilationRectangle1(ho_RegionClosing10, &ho_RegionDilation14, 6, 6);
						Difference(ho_RegionDifference48, ho_RegionDilation14, &ho_RegionErosion9
							);
						ErosionRectangle1(ho_RegionErosion9, &ho_RegionErosion9, 3, 19);
						ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
						SetDictObject(ho_RegionErosion9, hv_dd, "region");
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 16);
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 20000);
						Det_SJ_Region(hv_dd, (*hv_dt));
					}
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1460.39, 1600.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1320)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 660.035, 40.39, 1649.82, 1605.68);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				ClosingRectangle1(ho_Region31, &ho_RegionClosing64, 5, 5);
				Connection(ho_RegionClosing64, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 7999999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 158, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1030, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 31.6829, 540.757, 1424.32, 1125.466);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number46);
				if (0 != hv_Number46)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 995;
					hv_C = hv_Column2 - 755;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 11.51, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 65, 254);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 40, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 60);
					OpeningRectangle1(ho_RegionOpening19, &ho_RegionOpening13, 10, 600);
					Difference(ho_RegionOpening19, ho_RegionOpening13, &ho_RegionDifference16
						);
					Connection(ho_RegionDifference16, &ho_ConnectedRegions31);
					SelectShape(ho_ConnectedRegions31, &ho_SelectedRegions41, ((HTuple("area").Append("row")).Append("column")),
						"and", ((HTuple(3000).Append(0)).Append(40)), ((HTuple(99999).Append(800)).Append(330)));
					Difference(ho_RegionClosing25, ho_SelectedRegions41, &ho_RegionDifference17
						);
					Connection(ho_RegionDifference17, &ho_ConnectedRegions33);
					SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions42, "area", "and",
						150000, 9999999);
					ErosionRectangle1(ho_SelectedRegions42, &ho_RegionErosion9, 60, 51);

					GenRectangle1(&ho_ROI_0, 698.746, 758.22, 932.803, 1441.88);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 883.088, 1408.21, 1468.23, 2673.61);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced27);
					//YJH新增
					Threshold(ho_ImageReduced27, &ho_Region103, 0, 72);
					Connection(ho_Region103, &ho_ConnectedRegions152);
					ClosingCircle(ho_ConnectedRegions152, &ho_RegionClosing77, 6.5);
					SelectShape(ho_ConnectedRegions152, &ho_SelectedRegions189, (HTuple("area").Append("circularity")),
						"and", (HTuple(2500).Append(0.55)), (HTuple(9999).Append(1)));
					Connection(ho_SelectedRegions189, &ho_ConnectedRegions156);
					CountObj(ho_ConnectedRegions156, &hv_Number70);
					if (0 != (int(hv_Number70 == 1)))
					{
						SmallestCircle(ho_SelectedRegions189, &hv_Row16, &hv_Column16, &hv_Radius);
						GenRectangle1(&ho_Rectangle3, hv_Row16 + 425, hv_Column16 - 100, hv_Row16 + 520,
							hv_Column16 + 430);
						ReduceDomain(ho_ImageReduced27, ho_Rectangle3, &ho_ImageReduced109);
						MeanImage(ho_ImageReduced27, &ho_ImageMean3, 155, 125);
						DynThreshold(ho_ImageReduced27, ho_ImageMean3, &ho_RegionDynThresh3,
							25, "dark");
						Intersection(ho_ImageReduced109, ho_RegionDynThresh3, &ho_RegionIntersection15
							);
						Connection(ho_RegionIntersection15, &ho_ConnectedRegions157);
						SelectShape(ho_ConnectedRegions157, &ho_SelectedRegions190, "area", "and",
							1000, 3999);
						ConcatObj(ho_SelectedRegions190, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

						VarThreshold(ho_ImageReduced27, &ho_Region19, 65, 65, 0.2, 8, "dark");
						Connection(ho_Region19, &ho_ConnectedRegions35);
						SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions43, "area", "and",
							1400, 699999);

						Union1(ho_SelectedRegions43, &ho_RegionUnion6);
						ClosingRectangle1(ho_RegionUnion6, &ho_RegionClosing85, 7, 1);
						Connection(ho_RegionClosing85, &ho_ConnectedRegions177);
						SelectShape(ho_ConnectedRegions177, &ho_SelectedRegions215, "area", "and",
							4100, 199999);
						ClosingRectangle1(ho_SelectedRegions215, &ho_RegionClosing10, 700, 700);

						//jl add 检测边缘压伤缺陷
						DilationRectangle1(ho_RegionClosing10, &ho_RegionDilation69, 10, 10);

						ReduceDomain(ho_Image, ho_RegionDilation69, &ho_ImageReduced136);
						FastThreshold(ho_ImageReduced136, &ho_Region133, 0, 48, 20);
						OpeningCircle(ho_Region133, &ho_RegionOpening78, 1.5);
						Connection(ho_RegionOpening78, &ho_ConnectedRegions142);
						SelectShape(ho_ConnectedRegions142, &ho_SelectedRegions177, (HTuple("area").Append("width")),
							"and", (HTuple(10050).Append(850)), (HTuple(39999).Append(1800)));
						CountObj(ho_SelectedRegions177, &hv_Number83);
						if (0 != hv_Number83)
						{
							ClosingRectangle1(ho_SelectedRegions177, &ho_RegionClosing65, 15, 15);
							OpeningRectangle1(ho_RegionClosing65, &ho_RegionOpening61, 10, 28);
							Connection(ho_RegionOpening61, &ho_ConnectedRegions143);
							SelectShape(ho_ConnectedRegions143, &ho_SelectedRegions178, ((HTuple("area").Append("ratio")).Append("height")),
								"and", ((HTuple(8150).Append(0.1)).Append(40)), ((HTuple(99999).Append(2.5)).Append(500)));
							ConcatObj(ho_SelectedRegions178, (*hv_dt).TupleGetDictObject("61"),
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}

						DilationRectangle1(ho_RegionClosing10, &ho_RegionDilation14, 11, 11);
						Difference(ho_RegionErosion9, ho_RegionDilation14, &ho_RegionErosion9
							);
						Union2(ho_Rectangle3, ho_RegionErosion9, &ho_RegionErosion9);
						ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
						SetDictObject(ho_RegionErosion9, hv_dd, "region");

						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area",
							202);

						ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0,
							15, 11);
						SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
						ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
							&ho_ImageReduced17);
						MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);

						//大亮白(Bsj漏铁)
						Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
							255);
						Union1(ho_Region73, &ho_RegionUnion81);
						CountObj(ho_RegionUnion81, &hv_Number98);
						if (0 != hv_Number98)
						{
							AreaCenter(ho_RegionUnion81, &hv_Area13, &hv_Row14, &hv_Column14);
							if (0 != (int(hv_Area13<30000)))
							{
								Connection(ho_Region73, &ho_ConnectedRegions96);
								SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
									"and", (HTuple(15).Append(0.01)), (HTuple(3999).Append(16)));
								ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("41"),
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");
							}
						}
						//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
						//connection (Region29, ConnectedRegions39)
						//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
						//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
						//小面积黑
						DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
						ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");

						MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
						MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 120, 120);

						DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
							16, "dark");
						ErosionRectangle1(ho_ImageReduced17, &ho_RegionErosion39, 28, 28);
						Intersection(ho_RegionDynThresh12, ho_RegionErosion39, &ho_RegionIntersection21
							);
						Connection(ho_RegionIntersection21, &ho_ConnectedRegions186);
						SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions233, (HTuple("area").Append("anisometry")),
							"and", (HTuple(610).Append(1)), (HTuple(99999).Append(6)));
						ConcatObj(ho_SelectedRegions233, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						//YJH新增
						MeanImage(ho_ImageReduced17, &ho_ImageMean, 289, 7);
						DynThreshold(ho_ImageReduced17, ho_ImageMean, &ho_RegionDynThresh, 33,
							"dark");
						MeanImage(ho_ImageReduced17, &ho_ImageMean1, 500, 20);
						DynThreshold(ho_ImageReduced17, ho_ImageMean1, &ho_RegionDynThresh1,
							31, "dark");
						Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
						SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and",
							135, 999);
						Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
						SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, "area", "and",
							24, 99999);
						SelectGray(ho_SelectedRegions5, ho_Image, &ho_SelectedRegions217, "mean",
							"and", 0, 80);
						Union1(ho_SelectedRegions217, &ho_RegionUnion2);
						ClosingCircle(ho_RegionUnion2, &ho_RegionClosing2, 13.5);
						Connection(ho_RegionClosing2, &ho_ConnectedRegions3);
						SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
							"and", (HTuple(135).Append(1)), (HTuple(99999).Append(11)));
						SelectGray(ho_SelectedRegions4, ho_Image, &ho_SelectedRegions216, "mean",
							"and", 0, 70);
						Connection(ho_SelectedRegions216, &ho_ConnectedRegions2);
						SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "area", "and",
							10, 99999);
						Union1(ho_SelectedRegions3, &ho_RegionUnion1);
						ClosingCircle(ho_RegionUnion1, &ho_RegionClosing1, 20.5);
						Connection(ho_RegionClosing1, &ho_ConnectedRegions155);
						SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, (HTuple("area").Append("ratio")),
							"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value")),
							HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value")));
						Union1(ho_SelectedRegions182, &ho_RegionUnion);
						ClosingCircle(ho_RegionUnion, &ho_RegionClosing, 13.5);
						Connection(ho_RegionClosing, &ho_ConnectedRegions);
						SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, "area", "and",
							140, 99999);

						//YJH新增
						Union2(ho_SelectedRegions2, ho_SelectedRegions4, &ho_SelectedRegions2
							);
						Union2(ho_SelectedRegions2, ho_SelectedRegions1, &ho_SelectedRegions1
							);
						ConcatObj(ho_SelectedRegions1, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

						//大面积黑
						GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
						SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
						Threshold(ho_ImageSub9, &ho_Region40, 0, 50);

						Connection(ho_Region40, &ho_ConnectedRegions41);
						SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
							"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0.2),
							(HTuple(999999).Append(7)));
						ConcatObj(ho_SelectedRegions40, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

						//add jl
						ErosionRectangle1(ho_RegionErosion9, &ho_RegionErosion32, 30, 38);
						ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced115);
						MedianRect(ho_ImageReduced115, &ho_ImageMedian3, 3, 3);
						MedianRect(ho_ImageReduced115, &ho_ImageMedian4, 90, 90);
						DynThreshold(ho_ImageReduced115, ho_ImageMedian4, &ho_RegionDynThresh13,
							17, "dark");
						Intersection(ho_RegionDynThresh13, ho_RegionErosion32, &ho_RegionIntersection19
							);
						Connection(ho_RegionIntersection19, &ho_ConnectedRegions175);
						SelectShape(ho_ConnectedRegions175, &ho_SelectedRegions213, (((HTuple("area").Append("column")).Append("ratio")).Append("row")),
							"and", (((HTuple(100).Append(1780)).Append(0.17)).Append(1250)),
							(((HTuple(99999).Append(9999)).Append(9)).Append(9999)));
						Union1(ho_SelectedRegions213, &ho_RegionUnion65);
						ClosingRectangle1(ho_RegionUnion65, &ho_RegionClosing84, 5, 5);
						Connection(ho_RegionClosing84, &ho_ConnectedRegions176);
						SelectShape(ho_ConnectedRegions176, &ho_SelectedRegions214, (HTuple("area").Append("ratio")),
							"and", (HTuple(880).Append(0.17)), (HTuple(99999).Append(10)));
						ConcatObj(ho_SelectedRegions214, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}
				if (0 != (int(hv_Number46 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 1600.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 148, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number61);
				if (0 != (int(hv_Number61 == 1)))
				{
					ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 640.035, 40.39, 1649.82, 1605.68);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 7999999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 175, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					2900, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 8);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 15);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 335.957, 1921.69, 1523.8, 2419.07);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 168, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(39999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number47);
				if (0 != (int(hv_Number47 == 1)))
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 1175;
					hv_C = hv_Column2 - 2168;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
					Connection(ho_Region20, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
						"and", (HTuple(2000).Append(800)), (HTuple(99999).Append(9999)));
					DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
					Union1(ho_RegionDilation15, &ho_RegionUnion4);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 11.51, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 55, 254);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 20, 20);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 60, 66);

					GenRectangle2(&ho_ROI_0, 816.236, 2239.51, HTuple(40.1792).TupleRad(),
						344.639, 180.444);

					GenRectangle2(&ho_TMP_Region, 390.982, 3144.93, HTuple(41.9591).TupleRad(),
						606.548, 303.163);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 200.35, 812.721, HTuple(40.9144).TupleRad(),
						232.295, 198.28);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 758.008, 962, 1022.87, 1250.75);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionUnion4, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 27);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 222);
					Det_SJ_Region(hv_dd, (*hv_dt));
					//add
					MeanImage(ho_ImageReduced53, &ho_ImageMean8, 4, 4);
					GrayClosingRect(ho_ImageMean8, &ho_ImageClosing27, 22, 22);
					SubImage(ho_ImageMean8, ho_ImageClosing27, &ho_ImageSub12, 1.3, 128);
					Threshold(ho_ImageSub12, &ho_Region112, 0, 111);
					Connection(ho_Region112, &ho_ConnectedRegions170);
					SelectShape(ho_ConnectedRegions170, &ho_SelectedRegions206, (((HTuple("area").Append("anisometry")).Append("column")).Append("row")),
						"and", (((HTuple(780).Append(5.8)).Append(0)).Append(0)), (((HTuple(99999).Append(20)).Append(2900)).Append(690)));
					SelectGray(ho_SelectedRegions206, ho_Image, &ho_SelectedRegions207, "mean",
						"and", 0, 98);
					ConcatObj(ho_SelectedRegions207, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					DilationRectangle1(ho_SelectedRegions95, &ho_RegionDilation79, 1500, 220);
					MoveRegion(ho_RegionDilation79, &ho_RegionMoved95, 400, -300);
					ReduceDomain(ho_Image, ho_RegionMoved95, &ho_ImageReduced166);
					Threshold(ho_ImageReduced166, &ho_Region160, 158, 255);
					CountObj(ho_Region160, &hv_Number100);
					if (0 != hv_Number100)
					{
						AreaCenter(ho_Region160, &hv_Area15, &hv_Row18, &hv_Column18);
						if (0 != (int(hv_Area15<3000)))
						{
							ConcatObj(ho_RegionMoved95, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 335.957, 1921.69, 1523.8, 2419.07);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number48);
				if (0 != (int(hv_Number48 == 1)))
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 1185;
					hv_C = hv_Column2 - 2162;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
					Connection(ho_Region20, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
						"and", (HTuple(1500).Append(500)), (HTuple(99999).Append(9999)));
					DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
					Union1(ho_RegionDilation15, &ho_RegionUnion4);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.51, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 55, 254);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 70, 71);

					GenRectangle2(&ho_ROI_0, 816.236, 2239.51, HTuple(40.1792).TupleRad(),
						344.639, 170.444);

					GenRectangle2(&ho_TMP_Region, 360.982, 3194.93, HTuple(41.9591).TupleRad(),
						656.548, 283.163);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 260.35, 852.721, HTuple(40.9144).TupleRad(),
						232.295, 148.28);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 818.008, 1002, 1022.87, 1210.75);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionUnion4, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 16);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 190);
					Det_SJ_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 229.454, 3103.68, 1418.47, 3583.5);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number49);
				if (0 != hv_Number49)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 910;
					hv_C = hv_Column2 - 3340;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 18.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 75, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 71);
					GenRectangle1(&ho_ROI_0, 322.099, 3009.45, 909.715, 3361.87);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1114.2, 1558.91, 1418.47, 1898.29);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, -82.0603, 3146.17, 269.025, 3778.12);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced28);
					VarThreshold(ho_ImageReduced28, &ho_Region22, 80, 70, 0.2, 9, "dark");
					Connection(ho_Region22, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions45, "area", "and",
						800, 99999);
					Union1(ho_SelectedRegions45, &ho_RegionUnion15);
					ClosingRectangle1(ho_RegionUnion15, &ho_RegionClosing11, 700, 700);
					DilationRectangle1(ho_RegionClosing11, &ho_RegionDilation18, 15, 15);
					Difference(ho_RegionErosion9, ho_RegionDilation18, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1360.62, 2287.68, 1582.11, 2538.12);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					GenRectangle1(&ho_ROI_0, -4.54827, 3208.21, 185.762, 3732.93);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 14);
					Det_SJ_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number49 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1500.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(399999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number17);
				if (0 != (int(hv_Number17 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 741.179, 2509.46, 1608.47, 3963.27);
				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 18);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 1430.39, 8.27714, 1794.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(499999).Append(9000)));
				RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
				CountObj(ho_SelectedRegions125, &hv_Number5);
				if (0 != (int(hv_Number5 == 2)))
				{
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 1430.39, 8.27714, 1694.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(992999).Append(9000)));
				RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
				CountObj(ho_SelectedRegions125, &hv_Number6);
				if (0 != (int(hv_Number6 == 2)))
				{
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 170, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
				ClosingRectangle1(ho_Region39, &ho_RegionClosing86, 2, 5);
				Connection(ho_RegionClosing86, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					5e6, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);

				GenRectangle1(&ho_ROI_0, 780.666, 1869.03, 1424.32, 2776);
				ReduceDomain(ho_ImageScaled, ho_ROI_0, &ho_ImageReduced164);
				Threshold(ho_ImageReduced164, &ho_Region157, 0, 30);
				Connection(ho_Region157, &ho_ConnectedRegions251);
				SelectShape(ho_ConnectedRegions251, &ho_SelectedRegions306, "area", "and",
					34000, 9999999);
				Union2(ho_RegionUnion27, ho_SelectedRegions306, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 51, 17);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, (HTuple("area").Append("column")),
					"and", (HTuple(850000).Append(0)), (HTuple(99999999).Append(2200)));
				//提取定位点
				GenRectangle1(&ho_ROI_0, 406.174, 646.083, 1553.05, 1014.72);
				ReduceDomain(ho_ImageScaled, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 175, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number50);
				if (0 != hv_Number50)
				{
					AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 1082;
					hv_C = hv_Column2 - 834;

					GenRectangle1(&ho_ROI_0, 914.484, 707.978, 1212.36, 990.69);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
					Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
					Connection(ho_Region41, &ho_ConnectedRegions58);
					SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
						"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
					DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 31);
					Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_SelectedRegions64
						);

					GenRectangle1(&ho_ROI_0, 546.609, 540.757, 915.249, 815.774);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_SelectedRegions64, ho_ROI_0, &ho_SelectedRegions64);
					//YJH增
					GenRectangle1(&ho_ROI_1, 1470.4, 1616.24, 1637.33, 1786.06);
					Difference(ho_SelectedRegions64, ho_ROI_1, &ho_SelectedRegions64);

					GenRectangle1(&ho_ROI_0, 1446.31, 1367.77, 1647.11, 1727.9);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_SelectedRegions64, ho_ROI_0, &ho_SelectedRegions64);

					SetDictObject(ho_SelectedRegions64, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 13);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 70);
					Det_SJ_Region(hv_dd, (*hv_dt));

					//jl add 大面
					ReduceDomain(ho_Image, ho_SelectedRegions64, &ho_ImageReduced156);
					Intensity(ho_SelectedRegions64, ho_ImageReduced156, &hv_Mean11, &hv_Deviation11);
					if (0 != (int(hv_Mean11>70)))
					{
						AutoThreshold(ho_ImageReduced156, &ho_Regions4, 2);
						Connection(ho_Regions4, &ho_ConnectedRegions237);
						SelectGray(ho_ConnectedRegions237, ho_ImageReduced156, &ho_SelectedRegions288,
							"mean", "and", 0, 60);
						OpeningRectangle1(ho_SelectedRegions288, &ho_RegionOpening87, 10, 10);
						Connection(ho_RegionOpening87, &ho_ConnectedRegions238);
						SelectShape(ho_ConnectedRegions238, &ho_SelectedRegions289, (HTuple("area").Append("column")),
							"and", (HTuple(70150).Append(0)), (HTuple(299999).Append(1600)));
						ConcatObj(ho_SelectedRegions289, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					}
				}
				if (0 != (int(hv_Number50 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(969999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number7);
				if (0 != (int(hv_Number7 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));

					MoveRegion(ho_RegionDilation22, &ho_RegionMoved81, 15, -40);
					Difference(ho_RegionMoved81, ho_RegionDilation22, &ho_RegionDifference83
						);
					ReduceDomain(ho_Image, ho_RegionDifference83, &ho_ImageReduced135);
					GrayOpeningRect(ho_ImageReduced135, &ho_ImageOpening4, 15, 15);
					SubImage(ho_ImageReduced135, ho_ImageOpening4, &ho_ImageSub31, 1, 128);
					Threshold(ho_ImageSub31, &ho_Region132, 210, 255);
					Connection(ho_Region132, &ho_ConnectedRegions208);
					SelectShape(ho_ConnectedRegions208, &ho_SelectedRegions255, (HTuple("area").Append("anisometry")),
						"and", (HTuple(50).Append(1)), (HTuple(99999).Append(4)));
					SelectGray(ho_SelectedRegions255, ho_Image, &ho_SelectedRegions256, "mean",
						"and", 158, 255);
					ConcatObj(ho_SelectedRegions256, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 661.179, 50.46, 1608.47, 1560.27);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 70, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					25000, 8799999);
				Union1(ho_SelectedRegions60, &ho_SelectedRegions60);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					100, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);
				ClosingRectangle1(ho_RegionUnion34, &ho_RegionClosing63, 50, 12);
				DilationCircle(ho_RegionClosing63, &ho_RegionDilation61, 9);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					2.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 15);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 593.42, 2062.13, 1541.35, 2465.88);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 175, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number51);
				if (0 != hv_Number51)
				{
					RegionFeatures(ho_SelectedRegions95, "row", &hv_Value20);
					TupleMax(hv_Value20, &hv_Max13);
					SelectShape(ho_SelectedRegions95, &ho_SelectedRegions137, "row", "and",
						hv_Max13, hv_Max13);
					AreaCenter(ho_SelectedRegions137, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 1172;
					hv_C = hv_Column2 - 2267;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 43, 130);
					OpeningRectangle1(ho_Region38, &ho_RegionOpening53, 5, 5);
					Connection(ho_RegionOpening53, &ho_ConnectedRegions40);

					SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions36, "area", "and",
						5e5, 1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 40, 20);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 71);

					GenRectangle2(&ho_ROI_0, 1049.74, 1924.82, HTuple(-43.4542).TupleRad(),
						193.19, 116.243);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);

					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					GenRectangle1(&ho_ROI_0, 757.426, 3143.95, 899.462, 3293.27);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 866.781, 987.322, 1032.31, 1161.12);
					GenRectangle1(&ho_TMP_Region, 800.571, 3048.05, 999.202, 3221.84);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_1);
					Difference(ho_RegionErosion9, ho_ROI_1, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 18);
					Det_SJ_Region(hv_dd, (*hv_dt));

					//检测小件脱落
					DilationRectangle1(ho_SelectedRegions95, &ho_RegionDilation79, 1500, 220);
					MoveRegion(ho_RegionDilation79, &ho_RegionMoved95, 350, -400);
					ReduceDomain(ho_Image, ho_RegionMoved95, &ho_ImageReduced166);
					Threshold(ho_ImageReduced166, &ho_Region160, 158, 255);
					CountObj(ho_Region160, &hv_Number100);
					if (0 != hv_Number100)
					{
						AreaCenter(ho_Region160, &hv_Area15, &hv_Row18, &hv_Column18);
						if (0 != (int(hv_Area15<3500)))
						{
							ConcatObj(ho_RegionMoved95, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
						}
					}
				}
				if (0 != (int(hv_Number51 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
					GenRectangle1(&ho_ROI_0, 837.717, 2062.13, 1273.65, 2424.92);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				//gen_rectangle1 (ROI_0, 2.6829, 19.98, 3518.01, 4075.02)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region38, 73, 170)
				//opening_rectangle1 (Region38, RegionOpening53, 5, 5)
				//connection (RegionOpening53, ConnectedRegions40)

				//select_shape (ConnectedRegions40, SelectedRegions36, 'area', 'and', 5e5, 1e7)
				//closing_rectangle1 (SelectedRegions36, RegionClosing25, 40, 40)
				//opening_rectangle1 (RegionClosing25, RegionOpening19, 20, 50)
				//erosion_rectangle1 (RegionOpening19, RegionErosion9, 61, 71)
				//gen_rectangle2 (ROI_0, 1059.74, 1884.82, rad(-43.4542), 153.19, 116.243)
				//difference (RegionErosion9, ROI_0, RegionErosion9)
				//reduce_domain (Image, RegionErosion9, ImageReduced53)
				//dd.region := RegionErosion9
				//dd.SJ.dyn_black := 28
				//dd.SJ.min_black_big_area := 102000
				//dd.SJ.min_loutie_white_area := 210
				//Det_SJ_Region (dd, dt)
			}
			if (0 != (int(hv_ImageNum == 27)))
			{

			}
			if (0 != (int(hv_ImageNum == 28)))
			{

			}
			//if (ImageNum=29)

			//gen_rectangle1 (ROI_1, 1430.29, 244.239, 1816.29, 1457.24)
			//gen_rectangle1 (TMP_Region, 1426.48, 3195.58, 1780.43, 3929.49)
			//union2 (ROI_1, TMP_Region, ROI_0)

			//reduce_domain (Image, ROI_0, ImageReduced60)
			//threshold (ImageReduced60, Region62, 235, 255)
			//connection (Region62, ConnectedRegions76)
			//opening_rectangle1 (ConnectedRegions76, RegionOpening40, 15, 10)
			//connection (RegionOpening40, ConnectedRegions79)
			//select_shape (ConnectedRegions79, SelectedRegions38, ['area','row'], 'and', [5000,1300], [11000,1600])
			//count_obj (SelectedRegions38, Number10)
			//if (Number10)
			//closing_circle (SelectedRegions38, RegionClosing65, 7.5)
			//opening_rectangle1 (RegionClosing65, RegionOpening61, 49, 39)
			//move_region (RegionOpening61, RegionMoved15, 59, -5)
			//union1 (RegionMoved15, RegionUnion44)
			//erosion_rectangle1 (RegionUnion44, RegionErosion4, 19, 11)
			//reduce_domain (ImageReduced60, RegionErosion4, ImageReduced61)
			//mean_image (ImageReduced61, ImageMean, 9, 9)
			//dyn_threshold (ImageReduced61, ImageMean, RegionDynThresh, 17, 'light')
			//connection (RegionDynThresh, ConnectedRegions142)
			//select_shape (ConnectedRegions142, SelectedRegions177, 'area', 'and', 10, 99)
			//union1 (SelectedRegions177, RegionUnion56)
			//closing_circle (RegionUnion56, RegionClosing66, 6.5)
			//connection (RegionClosing66, ConnectedRegions143)
			//select_shape (ConnectedRegions143, SelectedRegions178, 'area', 'and', 69, 999)
			//select_gray (SelectedRegions178, Image, SelectedRegions232, 'mean', 'and', 0, 173)
			//concat_obj (SelectedRegions232, dt.['59'], dt.['59'])

			//dyn_threshold (ImageReduced61, ImageMean, RegionDynThresh17, 6, 'dark')
			//connection (RegionDynThresh17, ConnectedRegions186)
			//endif
			//endif
			if (0 != (int(hv_ImageNum == 30)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 8.27714, 967.911, 827.477, 1962.65);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 40);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.38)), (HTuple(49999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number26);
				if (0 != hv_Number26)
				{
					RegionFeatures(ho_SelectedRegions95, "row", &hv_Value20);
					TupleMax(hv_Value20, &hv_Max13);
					SelectShape(ho_SelectedRegions95, &ho_SelectedRegions137, "row", "and",
						hv_Max13, hv_Max13);
					AreaCenter(ho_SelectedRegions137, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 582;
					hv_C = hv_Column2 - 1595;
				}
				if (0 != (int(hv_Number26 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				GenRectangle1(&ho_ROI_0, 1003.02, 1207.82, 1898.29, 3039.32);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced88);
				ScaleImage(ho_ImageReduced88, &ho_ImageScaled1, 2.01, -10);
				Threshold(ho_ImageScaled1, &ho_Region86, 245, 255);
				Connection(ho_Region86, &ho_ConnectedRegions121);
				SelectShape(ho_ConnectedRegions121, &ho_SelectedRegions142, (HTuple("area").Append("ratio")),
					"and", (HTuple(1850).Append(0)), (HTuple(39999).Append(0.1)));
				DilationRectangle1(ho_SelectedRegions142, &ho_RegionDilation42, 11, 174);
				MoveRegion(ho_RegionDilation42, &ho_RegionMoved54, -88, 0);
				ReduceDomain(ho_Image, ho_RegionMoved54, &ho_ImageReduced89);
				ErosionRectangle1(ho_RegionMoved54, &ho_RegionErosion30, 1, 16);
				ScaleImage(ho_ImageReduced89, &ho_ImageScaled2, 2.21, -20);
				//检测方法一
				//texture_laws (ImageScaled2, ImageTexture, 'el', 2, 5)
				//threshold (ImageTexture, Region89, 178, 255)
				//closing_rectangle1 (Region89, RegionClosing44, 13, 1)
				//intersection (RegionClosing44, RegionErosion30, RegionIntersection13)
				//connection (RegionIntersection13, ConnectedRegions124)
				//select_shape (ConnectedRegions124, SelectedRegions146, 'width', 'and', 500, 99999)
				//opening_rectangle1 (SelectedRegions146, RegionOpening55, 16, 1)
				//count_obj (RegionOpening55, Number27)
				//if (Number27==2)
				//union1 (SelectedRegions146, RegionUnion45)
				//closing_rectangle1 (RegionUnion45, RegionClosing46, 10, 170)
				//dilation_rectangle1 (RegionClosing46, RegionDilation44, 111, 1)
				//difference (RegionMoved54, RegionDilation44, RegionDifference57)
				//connection (RegionDifference57, ConnectedRegions125)
				//select_shape (ConnectedRegions125, SelectedRegions145, 'height', 'and', 20, 99999)
				//reduce_domain (Image, SelectedRegions145, ImageReduced90)
				//gray_opening_rect (ImageReduced90, ImageOpening, 31, 21)
				//sub_image (ImageReduced90, ImageOpening, ImageSub4, 1.5, 128)
				//threshold (ImageSub4, Region87, 155, 255)
				//connection (Region87, ConnectedRegions122)
				//select_shape (ConnectedRegions122, SelectedRegions143, ['area','ratio'], 'and', [45,0.15], [99999,4])
				//concat_obj (SelectedRegions143, dt.['50'], dt.['50'])
				//endif
				//检测方法二
				DilationRectangle1(ho_SelectedRegions142, &ho_RegionDilation43, 11, 126);
				MoveRegion(ho_RegionDilation43, &ho_RegionMoved55, -65, 0);
				Difference(ho_RegionMoved54, ho_RegionMoved55, &ho_RegionDifference56);
				Connection(ho_RegionDifference56, &ho_ConnectedRegions123);
				SelectShape(ho_ConnectedRegions123, &ho_SelectedRegions145, "height", "and",
					20, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions145, &ho_ImageReduced90);
				GrayOpeningRect(ho_ImageReduced90, &ho_ImageOpening, 31, 21);
				SubImage(ho_ImageReduced90, ho_ImageOpening, &ho_ImageSub4, 1.5, 128);
				Threshold(ho_ImageSub4, &ho_Region87, 155, 255);
				Connection(ho_Region87, &ho_ConnectedRegions122);
				SelectShape(ho_ConnectedRegions122, &ho_SelectedRegions143, (HTuple("area").Append("ratio")),
					"and", (HTuple(51).Append(0.15)), (HTuple(99999).Append(4)));
				//concat_obj (SelectedRegions143, dt.['50'], dt.['50'])
			}
		}
		//dev_display (Image)
		//dev_set_line_width (2)
		//dev_display (Reg)
		//stop ()
		//**************
		//面积限度
		hv_s = HTuple(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), 7);
		//灰度限度
		hv_g = HTuple(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), 255);


		GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
		{
			HTuple end_val6799 = (hv_GenParamValue.TupleLength()) - 1;
			HTuple step_val6799 = 1;
			for (hv_Index10 = 0; hv_Index10.Continue(end_val6799, step_val6799); hv_Index10 += step_val6799)
			{
				Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
					&ho_ConnectedRegions167);
				SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
					HTuple(hv_s[hv_Index10]), 9999999);
				//select_gray (SelectedRegions114, Image, SelectedRegions174, 'mean', 'and', 0, g[Index10])
				if (0 != (int(hv_Index10 == 12)))
				{
					SelectShape(ho_SelectedRegions114, &ho_SelectedRegions114, "width", "and",
						10, 99999);
				}
				Union1(ho_SelectedRegions114, &ho_RegionUnion67);
				CountObj(ho_RegionUnion67, &hv_Number39);
				if (0 != (int(hv_Number39 == 0)))
				{
					RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
				else if (0 != hv_Number39)
				{
					Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
			}
		}

		return 1;
	}
	
		catch (HException& ExceptionHandler)
		{
			HTuple err;
			ExceptionHandler.ToHTuple(&err);
			string strErr = err.ToString();
			string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84GrayLumenDefects1Station error:" + strErr;
			VeErrMessage.push_back(QString::fromStdString(strerr));
		}
		reg = -1;
		return -1;

}
















































