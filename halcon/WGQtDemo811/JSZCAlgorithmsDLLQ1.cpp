#include <ostream>		
#include "Halconcpp.h"
//#include <opencv2/opencv.hpp>
#include <string.h>
#include "JSZCAlgorithmsDLLQ1.h" 
//#include <QObject>
using namespace std;
using namespace HalconCpp;
//using namespace cv;


// 定义导出函数
JSZCAlgorithmsDLLQ1::JSZCAlgorithmsDLLQ1()
{
	//ErrMessage = (char*)malloc(sizeof(char)*1000);
	//strcpy(ErrMessage, "");

}

JSZCAlgorithmsDLLQ1::~JSZCAlgorithmsDLLQ1()
{
	//free(ErrMessage);	
}

#pragma region universalFunction  

void  JSZCAlgorithmsDLLQ1::clearVec()
{
	// 异常信息
	//memset(ErrMessage, 0, sizeof(char) * 1000);
	// 异常标志位
	reg = 0;
	VeErrMessage.clear();
}
#pragma endregion  
	 
#pragma region ChengduJabilQ1

int JSZCAlgorithmsDLLQ1::HotRole(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_Image, ho_Ellipse, ho_reg, ho_ImageAffineTrans;
	HObject  ho_RegionAffineTrans, ho_ImageZoomed, ho_RegionZoom;
	HObject  ho_PolarTransImage, ho_ImageClosing7, ho_ImageScaled4;
	HObject  ho_Region11, ho_RegionClosing2, ho_RegionDilation7;
	HObject  ho_RegionMoved6, ho_RegionDifference10, ho_ConnectedRegions10;
	HObject  ho_SortedRegions, ho_RegionTrans7, ho_RegionErosion8;
	HObject  ho_RegionMoved2, ho_RegionDifference2, ho_ImageSub4;
	HObject  ho_Region12, ho_RegionIntersection10, ho_ConnectedRegions;
	HObject  ho_SelectedRegions, ho_e, ho_ObjectSelected, ho_RegionIntersection2;
	HObject  ho_RegionErosion3, ho_ImageReduced, ho_ImageOpening;
	HObject  ho_ImageClosing, ho_ImageClosing3, ho_ImageSub1;
	HObject  ho_Region, ho_ConnectedRegions3, ho_RegionOpening;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions3, ho_SelectedRegions4;
	HObject  ho_SelectedRegions7, ho_RegionUnion, ho_ConnectedRegions5;
	HObject  ho_RegionZoom2, ho_RegionAffineTrans2, ho_XYTransRegion;
	HObject  ho_RegionZoom1, ho_RegionAffineTrans1, ho_ConnectedRegions9;
	HObject  ho_SelectedRegions5, ho_RegionMoved4, ho_RegionDifference6;
	HObject  ho_RegionErosion5, ho_RegionDifference7, ho_RegionTrans6;
	HObject  ho_RegionUnion3, ho_RegionErosion6, ho_RegionDifference8;
	HObject  ho_RegionIntersection8, ho_RegionUnion2, ho_RegionErosion7;
	HObject  ho_RegionDilation6, ho_ImageReduced6, ho_ImageMedian2;
	HObject  ho_ImageScaled3, ho_Region9, ho_RegionDifference9;
	HObject  ho_Region10, ho_RegionIntersection9, ho_RegionUnion4;
	HObject  ho_RegionIntersection4, ho_ConnectedRegions8, ho_SelectedRegions13;
	HObject  ho_SelectedRegions12, ho_RegionUnion5, ho_ImageClosing5;
	HObject  ho_ImageClosing6, ho_ImageSub3, ho_Region8, ho_RegionIntersection3;
	HObject  ho_ConnectedRegions7, ho_SelectedRegions11, ho_SelectedRegions8;
	HObject  ho_RegionDifference, ho_SelectedRegions9, ho_RegionErosion;
	HObject  ho_RegionMoved1, ho_RegionDifference1, ho_RegionErosion1;
	HObject  ho_RegionDilation, ho_ImageReduced1, ho_ImageClosing2;
	HObject  ho_ImageScaled1, ho_Region3, ho_RegionIntersection1;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions2, ho_SelectedRegions6;
	HObject  ho_ImageClosing1, ho_ImageSub, ho_Region2, ho_RegionErosion2;
	HObject  ho_RegionIntersection, ho_ConnectedRegions1, ho_SelectedRegions1;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_ra, hv_rb, hv_phi, hv_Area2, hv_Row2;
	HTuple  hv_Column2, hv_HomMat2DIdentity, hv_HomMat2DIdentity1;
	HTuple  hv_HomMat2DRotate, hv_HomMat2DRotate1, hv_GenParamValue;
	HTuple  hv_os, hv_scal, hv_scal1, hv_move, hv_Area3, hv_Row3;
	HTuple  hv_Column3, hv_Width1, hv_Height1, hv_Number, hv_Index1;
	HTuple  hv_Area1, hv_Row1, hv_Column1, hv_Number1, hv_Mean;
	HTuple  hv_Deviation1, hv_Sin, hv_Cos, hv_Deviation, hv_Exception;

	try
	{
		ho_Image = hv_dd.TupleGetDictObject("image");
		ho_Ellipse = hv_dd.TupleGetDictObject("region");
		GenEmptyObj(&ho_reg);
		EllipticAxis(ho_Ellipse, &hv_ra, &hv_rb, &hv_phi);
		AreaCenter(ho_Ellipse, &hv_Area2, &hv_Row2, &hv_Column2);

		HomMat2dIdentity(&hv_HomMat2DIdentity);
		HomMat2dIdentity(&hv_HomMat2DIdentity1);
		HomMat2dRotate(hv_HomMat2DIdentity, -hv_phi, hv_Row2, hv_Column2, &hv_HomMat2DRotate);
		HomMat2dRotate(hv_HomMat2DIdentity1, hv_phi, hv_Row2, hv_Column2, &hv_HomMat2DRotate1);
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		hv_os.Clear();
		hv_os[0] = 170;
		hv_os[1] = 170;
		hv_scal.Clear();
		hv_scal[0] = 2;
		hv_scal[1] = -100;
		hv_scal1.Clear();
		hv_scal1[0] = 2;
		hv_scal1[1] = -50;
		hv_move.Clear();
		hv_move[0] = -150;
		hv_move[1] = -10;
		if (0 != (int((hv_GenParamValue.TupleFind("os")) >= 0)))
		{
			hv_os = hv_dd.TupleGetDictTuple("os");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal")) >= 0)))
		{
			hv_scal = hv_dd.TupleGetDictTuple("scal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal1")) >= 0)))
		{
			hv_scal1 = hv_dd.TupleGetDictTuple("scal1");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
		{
			hv_move = hv_dd.TupleGetDictTuple("move");
		}
		if (0 != (HTuple(int((HTuple(10).TupleRad())>hv_phi)).TupleAnd(int(hv_phi>(HTuple(-10).TupleRad())))))
		{

			AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
				"false");
			AffineTransRegion(ho_Ellipse, &ho_RegionAffineTrans, hv_HomMat2DRotate, "nearest_neighbor");

			ZoomImageFactor(ho_ImageAffineTrans, &ho_ImageZoomed, hv_rb / hv_ra, 1, "constant");
			ZoomRegion(ho_RegionAffineTrans, &ho_RegionZoom, hv_rb / hv_ra, 1);
			AreaCenter(ho_RegionZoom, &hv_Area3, &hv_Row3, &hv_Column3);
			GetImageSize(ho_ImageZoomed, &hv_Width1, &hv_Height1);
			PolarTransImageExt(ho_ImageZoomed, &ho_PolarTransImage, hv_Row3, hv_Column3,
				HTuple(120).TupleRad(), HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1,
				"nearest_neighbor");

			GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing7, 3, 500);
			ScaleImage(ho_ImageClosing7, &ho_ImageScaled4, HTuple(hv_scal[0]), HTuple(hv_scal[1]));
			Threshold(ho_ImageScaled4, &ho_Region11, 0, 30);
			FillUp(ho_Region11, &ho_Region11);
			ClosingRectangle1(ho_Region11, &ho_RegionClosing2, 500, 50);
			OpeningRectangle1(ho_RegionClosing2, &ho_RegionClosing2, 400, 1);
			DilationCircle(ho_RegionClosing2, &ho_RegionDilation7, 8);
			MoveRegion(ho_RegionDilation7, &ho_RegionMoved6, -70, 0);
			Difference(ho_RegionMoved6, ho_RegionDilation7, &ho_RegionDifference10);
			Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
			SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
				3200, 99999);
			SortRegion(ho_RegionDifference10, &ho_SortedRegions, "first_point", "true",
				"row");
			SelectObj(ho_SortedRegions, &ho_RegionDifference10, 1);
			ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
			ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 1900, 1);
			Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
				);
			MoveRegion(ho_RegionDifference10, &ho_RegionMoved2, -10, 0);
			Difference(ho_RegionDifference10, ho_RegionMoved2, &ho_RegionDifference2);

			SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub4, 1.5, 128);
			Threshold(ho_ImageSub4, &ho_Region12, 0, 30);
			Intersection(ho_Region12, ho_RegionDifference10, &ho_RegionIntersection10);
			Connection(ho_RegionIntersection10, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20, 9999999);
			CountObj(ho_SelectedRegions, &hv_Number);
			GenEmptyObj(&ho_e);
			{
				HTuple end_val65 = hv_Number;
				HTuple step_val65 = 1;
				for (hv_Index1 = 1; hv_Index1.Continue(end_val65, step_val65); hv_Index1 += step_val65)
				{
					SelectObj(ho_SelectedRegions, &ho_ObjectSelected, hv_Index1);
					Intersection(ho_ObjectSelected, ho_RegionDifference2, &ho_RegionIntersection2
						);
					AreaCenter(ho_RegionIntersection2, &hv_Area1, &hv_Row1, &hv_Column1);
					if (0 != hv_Area1)
					{
						ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
					}
				}
			}
			//检测刀纹
			ErosionCircle(ho_RegionZoom, &ho_RegionErosion3, 15);
			ReduceDomain(ho_ImageZoomed, ho_RegionErosion3, &ho_ImageReduced);
			GrayOpeningRect(ho_ImageReduced, &ho_ImageOpening, 4, 1);
			GrayClosingRect(ho_ImageOpening, &ho_ImageClosing, 8, 1);
			GrayClosingRect(ho_ImageClosing, &ho_ImageClosing3, 10, 30);
			SubImage(ho_ImageClosing, ho_ImageClosing3, &ho_ImageSub1, 13, 128);
			Threshold(ho_ImageSub1, &ho_Region, 0, 30);
			Connection(ho_Region, &ho_ConnectedRegions3);
			OpeningRectangle1(ho_ConnectedRegions3, &ho_RegionOpening, 1, 5);
			Connection(ho_RegionOpening, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions3, ((HTuple("height").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(40).Append(2)).Append(0)), ((HTuple(99999).Append(10.5)).Append(0.2)));
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions4, "phi", "and", HTuple(45).TupleRad(),
				HTuple(90).TupleRad());
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions7, "phi", "and", HTuple(-90).TupleRad(),
				HTuple(-45).TupleRad());
			Union2(ho_SelectedRegions7, ho_SelectedRegions4, &ho_RegionUnion);
			Connection(ho_RegionUnion, &ho_ConnectedRegions5);
			CountObj(ho_ConnectedRegions5, &hv_Number1);
			if (0 != (int(hv_Number1>2)))
			{
				ZoomRegion(ho_ConnectedRegions5, &ho_RegionZoom2, hv_ra / hv_rb, 1);
				AffineTransRegion(ho_RegionZoom2, &ho_RegionAffineTrans2, hv_HomMat2DRotate1,
					"nearest_neighbor");
				ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionAffineTrans2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
				ConcatObj(ho_reg, ho_RegionAffineTrans2, &ho_reg);
			}

			PolarTransRegionInv(ho_e, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
				HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
				"nearest_neighbor");

			ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
			AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
				"nearest_neighbor");
			Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
			SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 10,
				999999);
			ConcatObj(hv_dt.TupleGetDictObject("102"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
			ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);

			MoveRegion(ho_Ellipse, &ho_RegionMoved4, HTuple(hv_move[0]), HTuple(hv_move[1]));
			Difference(ho_Ellipse, ho_RegionMoved4, &ho_RegionDifference6);
			ErosionCircle(ho_RegionDifference6, &ho_RegionDifference6, 10);

			//********************
			ErosionCircle(ho_RegionDifference6, &ho_RegionErosion5, 5);
			Difference(ho_RegionDifference6, ho_RegionErosion5, &ho_RegionDifference7);
			ShapeTrans(ho_RegionDifference7, &ho_RegionTrans6, "rectangle1");
			Union1(ho_RegionTrans6, &ho_RegionUnion3);
			ErosionRectangle1(ho_RegionUnion3, &ho_RegionErosion6, 150, 1);
			Difference(ho_RegionUnion3, ho_RegionErosion6, &ho_RegionDifference8);
			Intersection(ho_RegionDifference8, ho_RegionDifference7, &ho_RegionIntersection8
				);

			//
			Union1(ho_RegionDifference6, &ho_RegionUnion2);
			Intensity(ho_RegionUnion2, ho_Image, &hv_Mean, &hv_Deviation1);
			if (0 != (int(hv_Mean<90)))
			{
				ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionUnion2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
				ConcatObj(ho_reg, ho_RegionUnion2, &ho_reg);
			}


			ErosionCircle(ho_RegionUnion2, &ho_RegionErosion7, 15);
			DilationCircle(ho_RegionUnion2, &ho_RegionDilation6, 15);
			ReduceDomain(ho_Image, ho_RegionDilation6, &ho_ImageReduced6);
			MedianRect(ho_ImageReduced6, &ho_ImageMedian2, 10, 10);
			ScaleImage(ho_ImageMedian2, &ho_ImageScaled3, 1.5, -50);
			Threshold(ho_ImageScaled3, &ho_Region9, 0, 60);

			Difference(ho_Region9, ho_RegionIntersection8, &ho_RegionDifference9);
			Threshold(ho_ImageScaled3, &ho_Region10, 0, 10);
			Intersection(ho_Region10, ho_RegionIntersection8, &ho_RegionIntersection9);
			Union2(ho_RegionDifference9, ho_RegionIntersection9, &ho_RegionUnion4);

			Intersection(ho_RegionUnion4, ho_RegionDifference6, &ho_RegionIntersection4
				);
			Connection(ho_RegionIntersection4, &ho_ConnectedRegions8);
			SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions13, ((HTuple("area").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(100).Append(5)).Append(0.0000005)), ((HTuple(99999).Append(999)).Append(1)));
			SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions12, ((HTuple("area").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(100).Append(2)).Append(0.035)), ((HTuple(99999).Append(999)).Append(1)));

			Union2(ho_SelectedRegions13, ho_SelectedRegions12, &ho_RegionUnion5);
			ConcatObj(hv_dt.TupleGetDictObject("102"), ho_RegionUnion5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
			ConcatObj(ho_reg, ho_RegionUnion5, &ho_reg);
			//横纹
			GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing5, 1, 1);
			GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing6, 20, 5);
			SubImage(ho_ImageClosing5, ho_ImageClosing6, &ho_ImageSub3, 3, 128);
			Threshold(ho_ImageSub3, &ho_Region8, 0, 50);
			Intersection(ho_Region8, ho_RegionErosion7, &ho_RegionIntersection3);

			Connection(ho_RegionIntersection3, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions11, ((HTuple("area").Append("circularity")).Append("phi")),
				"and", (HTuple(100).Append(0.00000000001)).TupleConcat(HTuple(-50).TupleRad()),
				(HTuple(99999).Append(0.3)).TupleConcat(HTuple(50).TupleRad()));
			ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions11, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
			ConcatObj(ho_reg, ho_SelectedRegions11, &ho_reg);
		}
		else
		{

			AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
				"false");
			AffineTransRegion(ho_Ellipse, &ho_RegionAffineTrans, hv_HomMat2DRotate, "nearest_neighbor");

			ZoomImageFactor(ho_ImageAffineTrans, &ho_ImageZoomed, hv_rb / hv_ra, 1, "constant");
			ZoomRegion(ho_RegionAffineTrans, &ho_RegionZoom, hv_rb / hv_ra, 1);
			//检测刀纹
			ErosionCircle(ho_RegionZoom, &ho_RegionErosion3, 15);
			ReduceDomain(ho_ImageZoomed, ho_RegionErosion3, &ho_ImageReduced);
			GrayOpeningRect(ho_ImageReduced, &ho_ImageOpening, 4, 1);
			GrayClosingRect(ho_ImageOpening, &ho_ImageClosing, 8, 1);
			GrayClosingRect(ho_ImageClosing, &ho_ImageClosing3, 10, 30);
			SubImage(ho_ImageClosing, ho_ImageClosing3, &ho_ImageSub1, 13, 128);
			Threshold(ho_ImageSub1, &ho_Region, 0, 30);
			Connection(ho_Region, &ho_ConnectedRegions3);
			OpeningRectangle1(ho_ConnectedRegions3, &ho_RegionOpening, 1, 5);
			Connection(ho_RegionOpening, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions3, ((HTuple("height").Append("inner_radius")).Append("circularity")),
				"and", ((HTuple(40).Append(2)).Append(0)), ((HTuple(99999).Append(10.5)).Append(0.2)));
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions4, "phi", "and", HTuple(45).TupleRad(),
				HTuple(90).TupleRad());
			SelectShape(ho_SelectedRegions3, &ho_SelectedRegions7, "phi", "and", HTuple(-90).TupleRad(),
				HTuple(-45).TupleRad());
			Union2(ho_SelectedRegions7, ho_SelectedRegions4, &ho_RegionUnion);
			Connection(ho_RegionUnion, &ho_ConnectedRegions5);
			CountObj(ho_ConnectedRegions5, &hv_Number1);
			if (0 != (int(hv_Number1>2)))
			{
				ZoomRegion(ho_ConnectedRegions5, &ho_RegionZoom2, hv_ra / hv_rb, 1);
				AffineTransRegion(ho_RegionZoom2, &ho_RegionAffineTrans2, hv_HomMat2DRotate1,
					"nearest_neighbor");
				ConcatObj(hv_dt.TupleGetDictObject("104"), ho_RegionAffineTrans2, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "104");
				ConcatObj(ho_reg, ho_RegionAffineTrans2, &ho_reg);
			}
			//*
			AreaCenter(ho_RegionZoom, &hv_Area3, &hv_Row3, &hv_Column3);
			GetImageSize(ho_ImageZoomed, &hv_Width1, &hv_Height1);
			PolarTransImageExt(ho_ImageZoomed, &ho_PolarTransImage, hv_Row3, hv_Column3,
				HTuple(120).TupleRad(), HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1,
				"nearest_neighbor");

			GrayClosingRect(ho_PolarTransImage, &ho_ImageClosing7, 1, 400);
			ScaleImage(ho_ImageClosing7, &ho_ImageScaled4, HTuple(hv_scal1[0]), HTuple(hv_scal1[1]));
			Threshold(ho_ImageScaled4, &ho_Region11, 0, 30);
			FillUp(ho_Region11, &ho_Region11);
			ClosingRectangle1(ho_Region11, &ho_RegionClosing2, 500, 20);
			OpeningRectangle1(ho_RegionClosing2, &ho_RegionClosing2, 400, 1);
			ShapeTrans(ho_RegionClosing2, &ho_RegionClosing2, "convex");
			DilationCircle(ho_RegionClosing2, &ho_RegionDilation7, 5);
			MoveRegion(ho_RegionDilation7, &ho_RegionMoved6, -70, 0);
			Difference(ho_RegionMoved6, ho_RegionDilation7, &ho_RegionDifference10);
			Connection(ho_RegionDifference10, &ho_ConnectedRegions10);
			SelectShape(ho_ConnectedRegions10, &ho_RegionDifference10, "width", "and",
				3200, 99999);
			ShapeTrans(ho_RegionDifference10, &ho_RegionTrans7, "rectangle1");
			ErosionRectangle1(ho_RegionTrans7, &ho_RegionErosion8, 1800, 1);
			Intersection(ho_RegionDifference10, ho_RegionErosion8, &ho_RegionDifference10
				);
			MoveRegion(ho_RegionDifference10, &ho_RegionMoved2, -10, 0);
			Difference(ho_RegionDifference10, ho_RegionMoved2, &ho_RegionDifference2);

			SubImage(ho_PolarTransImage, ho_ImageClosing7, &ho_ImageSub4, 1.5, 128);
			Threshold(ho_ImageSub4, &ho_Region12, 0, 40);
			Intersection(ho_Region12, ho_RegionDifference10, &ho_RegionIntersection10);
			Connection(ho_RegionIntersection10, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20, 9999999);
			CountObj(ho_SelectedRegions, &hv_Number);
			GenEmptyObj(&ho_e);
			{
				HTuple end_val225 = hv_Number;
				HTuple step_val225 = 1;
				for (hv_Index1 = 1; hv_Index1.Continue(end_val225, step_val225); hv_Index1 += step_val225)
				{
					SelectObj(ho_SelectedRegions, &ho_ObjectSelected, hv_Index1);
					Intersection(ho_ObjectSelected, ho_RegionDifference2, &ho_RegionIntersection2
						);
					AreaCenter(ho_RegionIntersection2, &hv_Area1, &hv_Row1, &hv_Column1);
					if (0 != hv_Area1)
					{
						ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
					}
				}
			}
			SelectShape(ho_e, &ho_SelectedRegions8, "width", "and", 10, 500);
			Difference(ho_e, ho_SelectedRegions8, &ho_RegionDifference);
			SelectShape(ho_RegionDifference, &ho_SelectedRegions9, "inner_radius", "and",
				15, 99999);
			Union2(ho_SelectedRegions8, ho_SelectedRegions9, &ho_e);

			PolarTransRegionInv(ho_e, &ho_XYTransRegion, hv_Row3, hv_Column3, HTuple(120).TupleRad(),
				HTuple(420).TupleRad(), 0, 1000, hv_Width1, hv_Height1, hv_Width1, hv_Height1,
				"nearest_neighbor");

			ZoomRegion(ho_XYTransRegion, &ho_RegionZoom1, 1 / (hv_rb / hv_ra), 1);
			AffineTransRegion(ho_RegionZoom1, &ho_RegionAffineTrans1, hv_HomMat2DRotate1,
				"nearest_neighbor");
			Connection(ho_RegionAffineTrans1, &ho_ConnectedRegions9);
			SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions5, "area", "and", 10,
				999999);
			ConcatObj(hv_dt.TupleGetDictObject("102"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "102");
			ConcatObj(ho_reg, ho_SelectedRegions5, &ho_reg);
			//*****
			//*****


			ErosionCircle(ho_Ellipse, &ho_RegionErosion, 10);
			TupleSin(hv_phi, &hv_Sin);
			TupleCos(hv_phi, &hv_Cos);

			MoveRegion(ho_Ellipse, &ho_RegionMoved1, (-HTuple(hv_os[0]))*hv_Cos, (-HTuple(hv_os[1]))*hv_Sin);

			Difference(ho_RegionErosion, ho_RegionMoved1, &ho_RegionDifference1);
			ErosionCircle(ho_RegionDifference1, &ho_RegionErosion1, 15);
			Intensity(ho_RegionErosion1, ho_Image, &hv_Mean, &hv_Deviation);
			if (0 != (int(hv_Mean<95)))
			{
				ConcatObj(hv_dt.TupleGetDictObject("103"), ho_RegionErosion1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
				ConcatObj(ho_reg, ho_RegionErosion1, &ho_reg);
			}

			DilationCircle(ho_RegionDifference1, &ho_RegionDilation, 15);
			ReduceDomain(ho_Image, ho_RegionDilation, &ho_ImageReduced1);
			//检测大缺陷
			GrayClosingRect(ho_ImageReduced1, &ho_ImageClosing2, 5, 5);
			ScaleImage(ho_ImageClosing2, &ho_ImageScaled1, 1.5, -50);
			Threshold(ho_ImageScaled1, &ho_Region3, 0, 30);
			Intersection(ho_Region3, ho_RegionErosion1, &ho_RegionIntersection1);
			Connection(ho_RegionIntersection1, &ho_ConnectedRegions2);
			SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions2, "area", "and", 300,
				99999);
			SelectGray(ho_SelectedRegions2, ho_Image, &ho_SelectedRegions6, "mean", "and",
				0, 80);
			ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions6, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
			ConcatObj(ho_reg, ho_SelectedRegions6, &ho_reg);

			//检测内部
			GrayClosingRect(ho_ImageReduced1, &ho_ImageClosing1, 30, 30);
			SubImage(ho_ImageReduced1, ho_ImageClosing1, &ho_ImageSub, 3, 128);

			Threshold(ho_ImageSub, &ho_Region2, 0, 30);
			ErosionRectangle1(ho_RegionDifference1, &ho_RegionErosion2, 25, 5);
			Intersection(ho_Region2, ho_RegionErosion2, &ho_RegionIntersection);
			Connection(ho_RegionIntersection, &ho_ConnectedRegions1);
			SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, "area", "and", 100,
				99999);
			ConcatObj(hv_dt.TupleGetDictObject("103"), ho_SelectedRegions1, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "103");
			ConcatObj(ho_reg, ho_SelectedRegions1, &ho_reg);
		}
		SetDictObject(ho_reg, hv_dd, "resreg");
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "HotRole error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}
int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84LumenRoleDefects2Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple hv_AlgorithmConfig,
	HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Ellipse, ho_Ellipse1, ho_Reg, ho_EmptyRegion;
	HObject  ho_ROI_0, ho_ImageReduced, ho_ImageMedian, ho_ImageClosing;
	HObject  ho_ImageScaled, ho_Region1, ho_RegionFillUp, ho_RegionClosing;
	HObject  ho_RegionOpening, ho_ConnectedRegions1, ho_SelectedRegions;
	HObject  ho_RegionTrans2, ho_RegionMoved, ho_RegionDifference;
	HObject  ho_RegionTrans3, ho_RegionTrans1, ho_ImageReduced5;
	HObject  ho_ImageOpening1, ho_ImageOpening2, ho_ImageSub2;
	HObject  ho_Region7, ho_RegionClosing1, ho_RegionOpening1;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions10, ho_RegionUnion;
	HObject  ho_RegionTrans5, ho_RegionMoved1, ho_e, ho_ObjectSelected;
	HObject  ho_RegionDifference1, ho_RegionTrans, ho_RegionMoved2;
	HObject  ho_RegionDifference5, ho_RegionTrans4, ho_RegionDilation5;
	HObject  ho_RegionMoved3, ho_ConnectedRegions, ho_ConnectedRegions167;
	HObject  ho_SelectedRegions114, ho_RegionUnion67, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_ac, hv_S, hv_C, hv_I, hv_GenParamValue;
	HTuple  hv_GenParamValue1, hv_GenParamValue2, hv_GenParamValue3;
	HTuple  hv_GenParamValue4, hv_Index, hv_f, hv_Area, hv_Row;
	HTuple  hv_Column, hv_Ra, hv_Rb, hv_Phi, hv_el, hv_dd, hv_Number;
	HTuple  hv_Index2, hv_Area2, hv_Row4, hv_Column4, hv_Number1;
	HTuple  hv_Height, hv_Width, hv_Ratio, hv_Area1, hv_Row1;
	HTuple  hv_Column1, hv_Number4, hv_Index1, hv_Index10, hv_Number39;
	HTuple  hv_Exception, hv___Tmp_Ctrl_Dict_Init_0, hv___Tmp_Ctrl_Dict_Init_1;
	HTuple  hv___Tmp_Ctrl_Dict_Init_2, hv___Tmp_Ctrl_Dict_Init_3;
	HTuple  hv___Tmp_Ctrl_Dict_Init_4, hv___Tmp_Ctrl_Dict_Init_5;
	HTuple  hv___Tmp_Ctrl_Dict_Init_6, hv___Tmp_Ctrl_Dict_Init_7;
	HTuple  hv___Tmp_Ctrl_0;

	try
	{
		//[101] := 间隙
		//[102] := 脱落
		//[103] := 未见光
		//[104] := 刀纹
		//字典参数操作
		//读：1
		//写：-1
		//无操作：0
		hv_ac = 1;

		hv_S = hv_StaNum + "";
		hv_C = hv_CamNum + "";
		hv_I = hv_ImageNum + "";
		if (0 != (int(hv_ac == -1)))
		{
			GetDictParam(hv_AlgorithmConfig, "keys", HTuple(), &hv_GenParamValue);
			if (0 != (int((hv_GenParamValue.TupleFind("Station"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
				SetDictTuple(hv_AlgorithmConfig, "Station", hv___Tmp_Ctrl_Dict_Init_0);
				hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			}
			GetDictParam(hv_AlgorithmConfig.TupleGetDictTuple("Station"), "keys", HTuple(),
				&hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind(hv_S))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
				SetDictTuple(hv_AlgorithmConfig.TupleGetDictTuple("Station"), hv_S, hv___Tmp_Ctrl_Dict_Init_1);
				hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
				SetDictTuple((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S),
					"Camera", hv___Tmp_Ctrl_Dict_Init_2);
				hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
			}
			GetDictParam(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
				"keys", HTuple(), &hv_GenParamValue2);
			if (0 != (int((hv_GenParamValue2.TupleFind(hv_C))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
				SetDictTuple(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
					hv_C, hv___Tmp_Ctrl_Dict_Init_3);
				hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
				SetDictTuple((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C),
					"Image", hv___Tmp_Ctrl_Dict_Init_4);
				hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
			}
			GetDictParam(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
				"keys", HTuple(), &hv_GenParamValue3);
			if (0 != (int((hv_GenParamValue3.TupleFind(hv_I))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
				SetDictTuple(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
					hv_I, hv___Tmp_Ctrl_Dict_Init_5);
				hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);
			}
			GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
				"keys", HTuple(), &hv_GenParamValue4);
			if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
				SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"Ellipse", hv___Tmp_Ctrl_Dict_Init_6);
				hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
			}
			if (0 != (int((hv_GenParamValue4.TupleFind("HotRole"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_7);
				SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"HotRole", hv___Tmp_Ctrl_Dict_Init_7);
				hv___Tmp_Ctrl_Dict_Init_7 = HTuple(HNULL);
			}

		}

		GenEmptyObj(&ho_Ellipse);
		GenEmptyObj(&ho_Ellipse1);
		GenEmptyObj(&ho_Reg);
		CreateDict(&(*hv_dt));

		GenEmptyRegion(&ho_EmptyRegion);
		for (hv_Index = 101; hv_Index <= 104; hv_Index += 1)
		{
			hv_f = hv_Index + "";
			SetDictObject(ho_EmptyRegion, (*hv_dt), hv_f);
		}
		if (0 != (HTuple(int(hv_StaNum == 2)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 == (int(hv_ImageNum == 4)))
			{
				return 1;
			}
			if (0 != (int(hv_ImageNum == 1)))
			{
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				GenRectangle1(&ho_ROI_0, 1110.85, 1616.64, 1984, 2514.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.06523);
				SetDictTuple(hv_el, "ra", 280);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -14.5);
				SetDictTuple(hv_el, "c", 177.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}

				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);
				SetDictTuple(hv_dd, "os", (HTuple(230).Append(200)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				GenRectangle1(&ho_ROI_0, 1110.85, 1616.64, 1984, 2514.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.05523);
				SetDictTuple(hv_el, "ra", 280);
				SetDictTuple(hv_el, "rb", 236.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", 177.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(230).Append(200)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				GenRectangle1(&ho_ROI_0, 1110.85, 1616.64, 1984, 2514.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.060523);
				SetDictTuple(hv_el, "ra", 280);
				SetDictTuple(hv_el, "rb", 230.5);
				SetDictTuple(hv_el, "r", -17.5);
				SetDictTuple(hv_el, "c", 174.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));


				//字典
				CreateDict(&hv_dd);
				SetDictTuple(hv_dd, "os", (HTuple(190).Append(200)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-90)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				GenRectangle1(&ho_ROI_0, 1031.4, 1691.25, 2049.38, 2700.93);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.03523);
				SetDictTuple(hv_el, "ra", 280);
				SetDictTuple(hv_el, "rb", 230.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", 178.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-90)));
				SetDictTuple(hv_dd, "os", (HTuple(190).Append(180)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				GenRectangle1(&ho_ROI_0, 1010.85, 1616.64, 1984, 2514.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.03523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 230.5);
				SetDictTuple(hv_el, "r", -16.5);
				SetDictTuple(hv_el, "c", 178.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(190).Append(200)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				GenRectangle1(&ho_ROI_0, 1010.85, 1616.64, 1984, 2514.59);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.029523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 230.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", 175.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(180).Append(200)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				GenRectangle1(&ho_ROI_0, 977.019, 1754.7, 2141.45, 2909.66);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -0.9709523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 237.5);
				SetDictTuple(hv_el, "r", -17.5);
				SetDictTuple(hv_el, "c", -175.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(190).Append(190)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 11)))
			{
				GenRectangle1(&ho_ROI_0, 967.911, 1646.68, 1997.76, 2688.23);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -0.9805523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -16.5);
				SetDictTuple(hv_el, "c", -181.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(200).Append(160)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				GenRectangle1(&ho_ROI_0, 938.654, 1675.93, 1945.1, 2664.83);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -0.995523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -17.5);
				SetDictTuple(hv_el, "c", -180.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);
				SetDictTuple(hv_dd, "os", (HTuple(200).Append(170)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				GenRectangle1(&ho_ROI_0, 897.694, 1623.27, 1974.36, 2623.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -1.035523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 238.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", -178.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(200).Append(170)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				GenRectangle1(&ho_ROI_0, 958.035, 1727.07, 1988.43, 2600.19);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -1.02523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 238.5);
				SetDictTuple(hv_el, "r", -17.5);
				SetDictTuple(hv_el, "c", -178.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(250).Append(170)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				GenRectangle1(&ho_ROI_0, 889.155, 1616.98, 1945.68, 2635.37);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -1.015523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 238.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", -178.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(270).Append(190)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				GenRectangle1(&ho_ROI_0, 1079.09, 1090.79, 1997.76, 3056.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val852 = hv_Number;
					HTuple step_val852 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val852, step_val852); hv_Index2 += step_val852)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(434)));
					SetDictTuple(hv_el, "move", (HTuple(217).Append(0)));
					SetDictTuple(hv_el, "r", 5);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));

					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);

					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val895 = hv_Number4;
						HTuple step_val895 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val895, step_val895); hv_Index1 += step_val895)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-130)));
							SetDictTuple(hv_dd, "move", (HTuple(-180).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				GenRectangle1(&ho_ROI_0, 1014.72, 605.123, 1986.06, 3665.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val935 = hv_Number;
					HTuple step_val935 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val935, step_val935); hv_Index2 += step_val935)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(428)));
					SetDictTuple(hv_el, "move", (HTuple(214).Append(3)));
					SetDictTuple(hv_el, "r", 5);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));

					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);

					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val978 = hv_Number4;
						HTuple step_val978 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val978, step_val978); hv_Index1 += step_val978)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-120)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				GenRectangle1(&ho_ROI_0, 1014.72, 605.123, 1986.06, 3665.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val1018 = hv_Number;
					HTuple step_val1018 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val1018, step_val1018); hv_Index2 += step_val1018)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(423)));
					SetDictTuple(hv_el, "move", (HTuple(212).Append(3)));
					SetDictTuple(hv_el, "r", 5);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));

					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);

					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val1061 = hv_Number4;
						HTuple step_val1061 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val1061, step_val1061); hv_Index1 += step_val1061)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//字典
							CreateDict(&hv_dd);
							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-120)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				GenRectangle1(&ho_ROI_0, 798.257, 270.974, 1741.54, 3862.14);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced5);
				GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 11, 11);
				GrayOpeningRect(ho_ImageOpening1, &ho_ImageOpening2, 11, 500);

				SubImage(ho_ImageOpening2, ho_ImageOpening1, &ho_ImageSub2, 1.5, 128);
				Threshold(ho_ImageSub2, &ho_Region7, 0, 30);
				ClosingCircle(ho_Region7, &ho_RegionClosing1, 3.5);
				OpeningCircle(ho_RegionClosing1, &ho_RegionOpening1, 10);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, ((HTuple("area").Append("width")).Append("height")),
					"and", ((HTuple(30000).Append(350)).Append(50)), ((HTuple(99999999).Append(600)).Append(250)));
				Union1(ho_SelectedRegions10, &ho_RegionUnion);
				ShapeTrans(ho_RegionUnion, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved1, 50, 0);
				CountObj(ho_SelectedRegions10, &hv_Number);
				GenEmptyObj(&ho_e);
				{
					HTuple end_val1103 = hv_Number;
					HTuple step_val1103 = 1;
					for (hv_Index2 = 1; hv_Index2.Continue(end_val1103, step_val1103); hv_Index2 += step_val1103)
					{
						SelectObj(ho_SelectedRegions10, &ho_ObjectSelected, hv_Index2);
						Difference(ho_ObjectSelected, ho_RegionMoved1, &ho_RegionDifference1);
						AreaCenter(ho_RegionDifference1, &hv_Area2, &hv_Row4, &hv_Column4);
						if (0 != hv_Area2)
						{
							ConcatObj(ho_e, ho_ObjectSelected, &ho_e);
						}
					}
				}
				Connection(ho_e, &ho_SelectedRegions10);

				CountObj(ho_SelectedRegions10, &hv_Number1);
				if (0 != (int(hv_Number1 == 2)))
				{

					ShapeTrans(ho_SelectedRegions10, &ho_RegionTrans, "rectangle1");
					MoveRegion(ho_RegionTrans, &ho_RegionMoved2, 70, 0);
					Difference(ho_SelectedRegions10, ho_RegionMoved2, &ho_RegionDifference5
						);
					ShapeTrans(ho_RegionDifference5, &ho_RegionTrans4, "rectangle1");
					//**
					CreateDict(&hv_el);
					SetDictTuple(hv_el, "Phi", (HTuple(-0.0).Append(-0.0)));
					SetDictTuple(hv_el, "dr", (HTuple(170).Append(430)));
					SetDictTuple(hv_el, "move", (HTuple(215).Append(0)));
					SetDictTuple(hv_el, "r", 5);
					SetDictTuple(hv_el, "c", 0);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"Ellipse", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
								HTuple(), HTuple(), &hv_el);
						}
					}
					DilationRectangle1(ho_RegionTrans4, &ho_RegionDilation5, HTuple((hv_el.TupleGetDictTuple("dr"))[0]),
						HTuple((hv_el.TupleGetDictTuple("dr"))[1]));
					MoveRegion(ho_RegionDilation5, &ho_RegionMoved3, HTuple((hv_el.TupleGetDictTuple("move"))[0]),
						HTuple((hv_el.TupleGetDictTuple("move"))[1]));
					HeightWidthRatio(ho_RegionMoved3, &hv_Height, &hv_Width, &hv_Ratio);
					AreaCenter(ho_RegionMoved3, &hv_Area1, &hv_Row1, &hv_Column1);
					GenEllipse(&ho_Ellipse1, hv_Row1 + (hv_el.TupleGetDictTuple("r")), hv_Column1 + (hv_el.TupleGetDictTuple("c")),
						hv_el.TupleGetDictTuple("Phi"), hv_Width / 2, hv_Height / 2);

					CountObj(ho_Ellipse1, &hv_Number4);
					{
						HTuple end_val1144 = hv_Number4;
						HTuple step_val1144 = 1;
						for (hv_Index1 = 1; hv_Index1.Continue(end_val1144, step_val1144); hv_Index1 += step_val1144)
						{
							SelectObj(ho_Ellipse1, &ho_Ellipse, hv_Index1);
							//字典
							CreateDict(&hv_dd);

							SetDictTuple(hv_dd, "scal", (HTuple(2).Append(-190)));
							SetDictTuple(hv_dd, "move", (HTuple(-170).Append(-10)));
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}
							SetDictObject(ho_Image, hv_dd, "image");
							SetDictObject(ho_Ellipse, hv_dd, "region");
							HotRole(hv_dd, (*hv_dt));

						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				GenRectangle1(&ho_ROI_0, 631.065, 1665.23, 1641.75, 2554.87);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_RegionOpening, (HTuple("area").Append("circularity")),
					"and", (HTuple(50000).Append(0.4)), (HTuple(9999999999).Append(1)));
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.0295523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 230.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", 180.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(160).Append(160)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 634.245, 1589.74, 1727.4, 2578.73);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 30, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 15);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, 150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				//gen_ellipse (Ellipse, Row-10.5, Column+184.5, 1.05523, 280, 240.5)
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", 1.04523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -15.5);
				SetDictTuple(hv_el, "c", 182.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(190).Append(180)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-80)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 750.905, 1638.37, 1793.72, 2590.11);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 60, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(150000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -1.06523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -14.5);
				SetDictTuple(hv_el, "c", -175.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(170).Append(170)));
				SetDictTuple(hv_dd, "scal1", (HTuple(2).Append(-170)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 710.449, 1599.87, 1880.73, 2647.27);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				MedianRect(ho_ImageReduced, &ho_ImageMedian, 5, 5);
				GrayClosingRect(ho_ImageMedian, &ho_ImageClosing, 11, 11);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled, 1.5, -80);

				Threshold(ho_ImageScaled, &ho_Region1, 40, 255);
				FillUp(ho_Region1, &ho_RegionFillUp);
				ClosingCircle(ho_RegionFillUp, &ho_RegionClosing, 3.5);
				OpeningCircle(ho_RegionClosing, &ho_RegionOpening, 50);
				Connection(ho_RegionOpening, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("circularity")),
					"and", (HTuple(130000).Append(0.3)), (HTuple(99999999).Append(1)));
				Union1(ho_SelectedRegions, &ho_RegionOpening);
				ShapeTrans(ho_RegionOpening, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved, 0, -150);
				Difference(ho_RegionOpening, ho_RegionMoved, &ho_RegionDifference);
				ShapeTrans(ho_RegionDifference, &ho_RegionTrans3, "rectangle1");
				AreaCenter(ho_RegionTrans3, &hv_Area, &hv_Row, &hv_Column);

				ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "ellipse");
				EllipticAxis(ho_RegionTrans1, &hv_Ra, &hv_Rb, &hv_Phi);
				//
				CreateDict(&hv_el);
				SetDictTuple(hv_el, "Phi", -1.044523);
				SetDictTuple(hv_el, "ra", 285);
				SetDictTuple(hv_el, "rb", 235.5);
				SetDictTuple(hv_el, "r", -13.5);
				SetDictTuple(hv_el, "c", -174.5);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_el, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"Ellipse", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("Ellipse")) >= 0)))
					{
						CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("Ellipse"),
							HTuple(), HTuple(), &hv_el);
					}
				}
				GenEllipse(&ho_Ellipse, hv_Row + (hv_el.TupleGetDictTuple("r")), hv_Column + (hv_el.TupleGetDictTuple("c")),
					hv_el.TupleGetDictTuple("Phi"), hv_el.TupleGetDictTuple("ra"), hv_el.TupleGetDictTuple("rb"));

				//字典
				CreateDict(&hv_dd);

				SetDictTuple(hv_dd, "os", (HTuple(170).Append(170)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("HotRole")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_Image, hv_dd, "image");
				SetDictObject(ho_Ellipse, hv_dd, "region");
				HotRole(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
			}
			if (0 != (int(hv_ImageNum == 27)))
			{
			}
			if (0 != (int(hv_ImageNum == 28)))
			{
			}
			if (0 != (int(hv_ImageNum == 29)))
			{
			}
			if (0 != (int(hv_ImageNum == 30)))
			{
			}
			if (0 != (int(hv_ImageNum == 31)))
			{
			}
			if (0 != (int(hv_ImageNum == 32)))
			{
			}
			if (0 != (int(hv_ImageNum == 33)))
			{
			}
			if (0 != (int(hv_ImageNum == 34)))
			{
			}
			if (0 != (int(hv_ImageNum == 35)))
			{
			}
			if (0 != (int(hv_ImageNum == 36)))
			{
			}
			if (0 != (int(hv_ImageNum == 37)))
			{
			}
			if (0 != (int(hv_ImageNum == 38)))
			{
			}
			if (0 != (int(hv_ImageNum == 39)))
			{
			}
			if (0 != (int(hv_ImageNum == 40)))
			{
			}
			if (0 != (int(hv_ImageNum == 41)))
			{
			}
			if (0 != (int(hv_ImageNum == 42)))
			{
			}
			if (0 != (int(hv_ImageNum == 43)))
			{
			}
			if (0 != (int(hv_ImageNum == 44)))
			{
			}
			if (0 != (int(hv_ImageNum == 45)))
			{
			}
			if (0 != (int(hv_ImageNum == 46)))
			{
			}
			if (0 != (int(hv_ImageNum == 47)))
			{
			}

		}
		//dev_display (Image)
		//dev_display (Ellipse)
		//stop ()

		GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
		{
			HTuple end_val1473 = (hv_GenParamValue.TupleLength()) - 1;
			HTuple step_val1473 = 1;
			for (hv_Index10 = 0; hv_Index10.Continue(end_val1473, step_val1473); hv_Index10 += step_val1473)
			{
				Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
					&ho_ConnectedRegions167);
				SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
					1, 9999999999);

				Union1(ho_SelectedRegions114, &ho_RegionUnion67);
				CountObj(ho_RegionUnion67, &hv_Number39);
				if (0 != (int(hv_Number39 == 0)))
				{
					RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
				else if (0 != hv_Number39)
				{
					Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
			}
		}

		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84LumenRoleDefects2Station error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}
int JSZCAlgorithmsDLLQ1::AffineTransformation(HTuple hv_at)
{

	// Local iconic variables
	HObject  ho_Image, ho_rotreg, ho_trareg, ho_ImageReduced9;
	HObject  ho_ImageClosing24, ho_ImageOpening4, ho_ImageOpening10;
	HObject  ho_ImageSub6, ho_Region12, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions4, ho_SortedRegions, ho_RegionTrans4;
	HObject  ho_ImageClosing, ho_ImageOpening, ho_ImageOpening1;
	HObject  ho_ImageSub, ho_Region, ho_ConnectedRegions1, ho_SelectedRegions1;
	HObject  ho_SortedRegions1, ho_RegionMoved1, ho_ImageAffineTrans;
	HObject  ho_ImageReduced4, ho_ImageClosing7, ho_ImageMedian5;
	HObject  ho_ImageScaled13, ho_Region10, ho_RegionClosing;
	HObject  ho_RegionOpening1, ho_ConnectedRegions28, ho_SelectedRegions9;
	HObject  ho_RegionTrans19, ho_RegionMoved, ho_RegionDifference;
	HObject  ho_ConnectedRegions, ho_SelectedRegions;

	// Local control variables
	HTuple  hv_Width, hv_Height, hv_HomMat2DIdentity;
	HTuple  hv_HomMat2DIdentity1, hv_GenParamValue, hv_rmove;
	HTuple  hv_opening, hv_scal, hv_rg_c, hv_rscal, hv_area;
	HTuple  hv_zoom, hv_move, hv_Height1, hv_Width1, hv_Ratio;
	HTuple  hv_phi, hv_Ra1, hv_Rb1, hv_Phi1, hv_p, hv_Number25;
	HTuple  hv_Ra, hv_Rb, hv_Phi, hv_Number, hv_LL, hv_HomMat2DRotate;
	HTuple  hv_HomMat2DRotate1, hv_Number26, hv_Row1, hv_Column1;
	HTuple  hv_Row2, hv_Column2, hv_n, hv_rc, hv_r, hv_c, hv_HomMat2DIdentity2;
	HTuple  hv_HomMat2DTranslate, hv_HomMat2DTranslate1, hv_Exception;

	try
	{
		ho_Image = hv_at.TupleGetDictObject("image");
		GetImageSize(ho_Image, &hv_Width, &hv_Height);
		HomMat2dIdentity(&hv_HomMat2DIdentity);
		HomMat2dIdentity(&hv_HomMat2DIdentity1);
		GenEmptyObj(&ho_rotreg);
		GenEmptyObj(&ho_trareg);
		GetDictParam(hv_at, "keys", HTuple(), &hv_GenParamValue);
		hv_rmove.Clear();
		hv_rmove[0] = -25;
		hv_rmove[1] = 0;
		hv_opening.Clear();
		hv_opening[0] = 100;
		hv_opening[1] = 100;
		hv_scal.Clear();
		hv_scal[0] = 2;
		hv_scal[1] = -100;
		hv_rg_c.Clear();
		hv_rg_c[0] = 30;
		hv_rg_c[1] = 30;
		hv_rscal.Clear();
		hv_rscal[0] = 2;
		hv_rscal[1] = -200;
		hv_area.Clear();
		hv_area[0] = 30000;
		hv_area[1] = 999999999;
		hv_zoom = 1;
		if (0 != (int((hv_GenParamValue.TupleFind("zoom")) >= 0)))
		{
			hv_zoom = hv_at.TupleGetDictTuple("zoom");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("rg_c")) >= 0)))
		{
			hv_rg_c = hv_at.TupleGetDictTuple("rg_c");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
		{
			hv_move = hv_at.TupleGetDictTuple("move");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("opening")) >= 0)))
		{
			hv_opening = hv_at.TupleGetDictTuple("opening");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("scal")) >= 0)))
		{
			hv_scal = hv_at.TupleGetDictTuple("scal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("rscal")) >= 0)))
		{
			hv_rscal = hv_at.TupleGetDictTuple("rscal");
		}
		if (0 != (int((hv_GenParamValue.TupleFind("area")) >= 0)))
		{
			hv_area = hv_at.TupleGetDictTuple("area");
		}

		//角度偏移
		if (0 != (int((hv_GenParamValue.TupleFind("rotreg")) >= 0)))
		{
			ho_rotreg = hv_at.TupleGetDictObject("rotreg");
			HeightWidthRatio(ho_rotreg, &hv_Height1, &hv_Width1, &hv_Ratio);
			hv_phi = HTuple(0).TupleRad();
			EllipticAxis(ho_rotreg, &hv_Ra1, &hv_Rb1, &hv_Phi1);
			if (0 != (HTuple(int(hv_Phi1>(HTuple(70).TupleRad()))).TupleOr(int(hv_Phi1<(HTuple(-70).TupleRad())))))
			{
				//竖
				hv_p = HTuple(180).TupleRad();
				hv_phi = HTuple(90).TupleRad();
				ReduceDomain(ho_Image, ho_rotreg, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 30, 1);
				GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 30, 1);
				GrayOpeningRect(ho_ImageOpening4, &ho_ImageOpening10, 3, 40);
				SubImage(ho_ImageOpening10, ho_ImageOpening4, &ho_ImageSub6, 1.5, 128);
				Threshold(ho_ImageSub6, &ho_Region12, 0, 60);
				Connection(ho_Region12, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, (HTuple("height").Append("inner_radius")),
					"and", (hv_Height1 - 250).TupleConcat(4), (HTuple(99999).Append(20)));
				SortRegion(ho_SelectedRegions4, &ho_SortedRegions, "first_point", "false",
					"column");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions4, 1);
				CountObj(ho_SelectedRegions4, &hv_Number25);
				if (0 != hv_Number25)
				{
					ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
					EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
				}
				else
				{
					hv_Phi = hv_phi;
				}
			}
			else if (0 != (HTuple(int(hv_Phi1<(HTuple(70).TupleRad()))).TupleOr(int(hv_Phi1>(HTuple(-70).TupleRad())))))
			{
				//横
				hv_p = HTuple(0).TupleRad();
				hv_phi = HTuple(0).TupleRad();
				ReduceDomain(ho_Image, ho_rotreg, &ho_ImageReduced9);
				if (0 != (int((hv_GenParamValue.TupleFind("rmove")) >= 0)))
				{
					hv_rmove = hv_at.TupleGetDictTuple("rmove");
					//有亮边
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing, 1, 30);
					GrayOpeningRect(ho_ImageClosing, &ho_ImageOpening, 1, 50);
					GrayOpeningRect(ho_ImageOpening, &ho_ImageOpening1, 35, 20);
					SubImage(ho_ImageOpening1, ho_ImageOpening, &ho_ImageSub, 2, 128);
					Threshold(ho_ImageSub, &ho_Region, 0, 40);
					ClosingCircle(ho_Region, &ho_Region, 2.5);
					OpeningRectangle1(ho_Region, &ho_Region, 30, 2);
					Connection(ho_Region, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, ((HTuple("width").Append("inner_radius")).Append("height")),
						"and", (hv_Width1 - 100).TupleConcat((HTuple(2.5).Append(3))), ((HTuple(99999).Append(99)).Append(50)));
					CountObj(ho_SelectedRegions1, &hv_Number);
					if (0 != hv_Number)
					{
						hv_LL = ((const HTuple&)hv_rmove)[0];
						if (0 != (int(hv_LL>0)))
						{
							SortRegion(ho_SelectedRegions1, &ho_SortedRegions1, "first_point",
								"true", "row");
							SelectObj(ho_SortedRegions1, &ho_SelectedRegions1, 1);
						}
						else
						{
							SortRegion(ho_SelectedRegions1, &ho_SortedRegions1, "lower_left", "false",
								"row");
							SelectObj(ho_SortedRegions1, &ho_SelectedRegions1, 1);
						}
						ShapeTrans(ho_SelectedRegions1, &ho_RegionTrans4, "rectangle2");
						EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
					}
					else
					{
						//
						GrayOpeningRect(ho_ImageReduced9, &ho_ImageReduced9, 10, 1);
						GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 60, 60);
						GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 30, 30);
						ScaleImage(ho_ImageOpening4, &ho_ImageSub6, HTuple(hv_rscal[0]), HTuple(hv_rscal[1]));
						Threshold(ho_ImageSub6, &ho_Region12, 60, 255);
						Connection(ho_Region12, &ho_ConnectedRegions13);
						SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, "width", "and",
							hv_Width1 - 300, 4100);

						ShapeTrans(ho_SelectedRegions4, &ho_SelectedRegions4, "convex");

						MoveRegion(ho_SelectedRegions4, &ho_RegionMoved1, HTuple(hv_rmove[0]),
							HTuple(hv_rmove[1]));
						Difference(ho_SelectedRegions4, ho_RegionMoved1, &ho_SelectedRegions4
							);
						CountObj(ho_SelectedRegions4, &hv_Number25);
						if (0 != hv_Number25)
						{
							ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
							EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
						}
						else
						{
							hv_Phi = hv_phi;
						}
					}


				}
				else
				{
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing24, 1, 30);
					GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening4, 1, 30);
					GrayOpeningRect(ho_ImageOpening4, &ho_ImageOpening10, 40, 3);
					SubImage(ho_ImageOpening10, ho_ImageOpening4, &ho_ImageSub6, 1.5, 128);
					Threshold(ho_ImageSub6, &ho_Region12, 0, 60);
					Connection(ho_Region12, &ho_ConnectedRegions13);
					SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions4, (HTuple("width").Append("inner_radius")),
						"and", (hv_Width1 - 250).TupleConcat(4), (HTuple(99999).Append(20)));
					SortRegion(ho_SelectedRegions4, &ho_SortedRegions, "first_point", "false",
						"column");
					SelectObj(ho_SortedRegions, &ho_SelectedRegions4, 1);
					CountObj(ho_SelectedRegions4, &hv_Number25);
					if (0 != hv_Number25)
					{
						ShapeTrans(ho_SelectedRegions4, &ho_RegionTrans4, "rectangle2");
						EllipticAxis(ho_RegionTrans4, &hv_Ra, &hv_Rb, &hv_Phi);
					}
					else
					{
						hv_Phi = hv_phi;
					}
				}
			}
		}
		else
		{
			hv_phi = HTuple(0).TupleRad();
			hv_Phi = HTuple(0).TupleRad();
		}
		if (0 != (HTuple(int(hv_Phi<0)).TupleAnd(int(hv_Phi>(HTuple(-45).TupleRad())))))
		{
			hv_Phi += hv_p;
		}
		else if (0 != (HTuple(int(hv_Phi<0)).TupleAnd(int(hv_Phi <= (HTuple(-45).TupleRad())))))
		{
			hv_Phi += hv_p;
		}
		//旋转
		HomMat2dRotate(hv_HomMat2DIdentity, (-hv_Phi) + hv_phi, hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate);
		//缩放
		HomMat2dScale(hv_HomMat2DRotate, hv_zoom, hv_zoom, hv_Height / 2, hv_Width / 2, &hv_HomMat2DRotate);

		HomMat2dRotate(hv_HomMat2DIdentity1, -((-hv_Phi) + hv_phi), hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate1);
		HomMat2dScale(hv_HomMat2DRotate1, 1 / hv_zoom, 1 / hv_zoom, hv_Height / 2, hv_Width / 2,
			&hv_HomMat2DRotate1);
		//用于区域还原
		SetDictTuple(hv_at, "hom_mat_rot", hv_HomMat2DRotate1);
		//转正后图像
		AffineTransImage(ho_Image, &ho_ImageAffineTrans, hv_HomMat2DRotate, "constant",
			"false");
		SetDictObject(ho_ImageAffineTrans, hv_at, "afimage");

		//位置偏移
		if (0 != (int((hv_GenParamValue.TupleFind("trareg")) >= 0)))
		{
			ho_trareg = hv_at.TupleGetDictObject("trareg");

			ReduceDomain(ho_ImageAffineTrans, ho_trareg, &ho_ImageReduced4);
			GrayClosingRect(ho_ImageReduced4, &ho_ImageClosing7, 60, 30);
			MedianRect(ho_ImageClosing7, &ho_ImageMedian5, 10, 10);
			ScaleImage(ho_ImageMedian5, &ho_ImageScaled13, HTuple(hv_scal[0]), HTuple(hv_scal[1]));
			Threshold(ho_ImageScaled13, &ho_Region10, 0, 60);

			ClosingRectangle1(ho_Region10, &ho_RegionClosing, 50, 10);
			FillUp(ho_RegionClosing, &ho_RegionClosing);
			OpeningRectangle1(ho_RegionClosing, &ho_RegionOpening1, HTuple(hv_opening[0]),
				HTuple(hv_opening[1]));
			Connection(ho_RegionOpening1, &ho_ConnectedRegions28);
			SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions9, "area", "and", HTuple(hv_area[0]),
				HTuple(hv_area[1]));
			CountObj(ho_SelectedRegions9, &hv_Number26);
			if (0 != hv_Number26)
			{
				ShapeTrans(ho_SelectedRegions9, &ho_RegionTrans19, "rectangle1");
				if (0 != (int((hv_GenParamValue.TupleFind("move")) >= 0)))
				{
					MoveRegion(ho_RegionTrans19, &ho_RegionMoved, HTuple(hv_move[0]), HTuple(hv_move[1]));
					Difference(ho_SelectedRegions9, ho_RegionMoved, &ho_RegionDifference);
					Connection(ho_RegionDifference, &ho_ConnectedRegions);
					SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
						999999);
					ShapeTrans(ho_SelectedRegions, &ho_RegionTrans19, "rectangle1");
				}
				SmallestRectangle1(ho_RegionTrans19, &hv_Row1, &hv_Column1, &hv_Row2, &hv_Column2);
				if (0 != (int((hv_GenParamValue.TupleFind("point")) >= 0)))
				{
					hv_n = hv_at.TupleGetDictTuple("point");
				}
				if (0 != (int((hv_GenParamValue.TupleFind("point"))<0)))
				{
					hv_n = 1;
				}
				if (0 != (int(hv_n == 1)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row1);
					hv_rc.Append(hv_Column1);
				}
				else if (0 != (int(hv_n == 2)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row1);
					hv_rc.Append(hv_Column2);
				}
				else if (0 != (int(hv_n == 3)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row2);
					hv_rc.Append(hv_Column1);
				}
				else if (0 != (int(hv_n == 4)))
				{
					hv_rc.Clear();
					hv_rc.Append(hv_Row2);
					hv_rc.Append(hv_Column2);
				}
				hv_r = HTuple(hv_rc[0]) - HTuple((hv_at.TupleGetDictTuple("rc"))[0]);
				hv_c = HTuple(hv_rc[1]) - HTuple((hv_at.TupleGetDictTuple("rc"))[1]);
			}
			else
			{
				hv_r = 0;
				hv_c = 0;
			}
		}
		else
		{
			hv_r = 0;
			hv_c = 0;
		}
		HomMat2dIdentity(&hv_HomMat2DIdentity2);
		//平移矩阵，用作提取区域变换
		HomMat2dTranslate(hv_HomMat2DIdentity2, hv_r, hv_c, &hv_HomMat2DTranslate);
		SetDictTuple(hv_at, "hom_mat_tra", hv_HomMat2DTranslate);
		//旋转平移矩阵，用作观察提取区域和原图之间是否对应
		HomMat2dTranslate(hv_HomMat2DRotate1, -hv_r, -hv_c, &hv_HomMat2DTranslate1);
		SetDictTuple(hv_at, "hom_mat_rt", hv_HomMat2DTranslate1);
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "AffineTransformation error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::DefectDetectionAlgorithms(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_EmptyRegion, ho_Image, ho_RegionDifference4;
	HObject  ho_RegionDilation2, ho_ImageReduced2, ho_ImageOpening34;
	HObject  ho_ImageMedian8, ho_ImageMedian9, ho_RegionDynThresh8;
	HObject  ho_RegionIntersection32, ho_ConnectedRegions81;
	HObject  ho_SelectedRegions93, ho_ImageClosing2, ho_ImageMedian;
	HObject  ho_ImageMedian3, ho_Region2, ho_RegionIntersection1;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions10, ho_ImageOpening1;
	HObject  ho_ImageSub1, ho_Region27, ho_RegionIntersection25;
	HObject  ho_ConnectedRegions76, ho_SelectedRegions82, ho_SelectedRegions7;
	HObject  ho_SelectedRegions9, ho_RegionUnion2, ho_RegionDifference3;
	HObject  ho_ImageOpening, ho_ImageMedian1, ho_RegionDynThresh;
	HObject  ho_ConnectedRegions1, ho_SelectedRegions1, ho_ObjectSelected;
	HObject  ho_RegionOpening2, ho_RegionClosing1, ho_ConnectedRegions9;
	HObject  ho_SelectedRegions14, ho_RegionDilation, ho_ImageReduced135;
	HObject  ho_ImageClosing1, ho_ImageOpening32, ho_ImageSub18;
	HObject  ho_Region69, ho_RegionDilation1, ho_RegionIntersection28;
	HObject  ho_ConnectedRegions79, ho_SelectedRegions89, ho_ImageClosing86;
	HObject  ho_ImageSub136, ho_Region176, ho_RegionIntersection129;
	HObject  ho_ConnectedRegions243, ho_SelectedRegions246, ho_RegionDilation61;
	HObject  ho_RegionTrans, ho_RegionDifference, ho_RegionOpening;
	HObject  ho_ConnectedRegions, ho_RegionTrans1, ho_RegionDifference1;
	HObject  ho_RegionOpening1, ho_ConnectedRegions2, ho_SelectedRegions;
	HObject  ho_ImageReduced44, ho_RegionTrans28, ho_RegionMoved69;
	HObject  ho_RegionMoved70, ho_RegionDifference35, ho_RegionDifference36;
	HObject  ho_RegionTrans30, ho_PolarTransImage, ho_ROI_0;
	HObject  ho_ImageReduced45, ho_ImageClosing37, ho_ImageClosing49;
	HObject  ho_ImageScaled30, ho_Region67, ho_RegionOpening19;
	HObject  ho_ConnectedRegions3, ho_SelectedRegions6, ho_RegionUnion1;
	HObject  ho_RegionTrans3, ho_RegionDilation3, ho_RegionMoved;
	HObject  ho_RegionTrans35, ho_RegionTrans2, ho_RegionErosion;
	HObject  ho_RegionMoved76, ho_RegionIntersection20, ho_XYTransRegion;
	HObject  ho_ConnectedRegions75, ho_SelectedRegions70, ho_ImageOpening19;
	HObject  ho_ImageSub21, ho_Region50, ho_ConnectedRegions60;
	HObject  ho_SelectedRegions57, ho_SortedRegions, ho_RegionClosing;
	HObject  ho_ImageReduced4, ho_ImageClosing5, ho_ImageClosing7;
	HObject  ho_ImageSub5, ho_Region5, ho_ConnectedRegions8;
	HObject  ho_SelectedRegions4, ho_RegionUnion4, ho_RegionDilation5;
	HObject  ho_RegionMoved7, ho_RegionMoved8, ho_RegionErosion9;
	HObject  ho_RegionTrans23, ho_RegionErosion14, ho_RegionDilation62;
	HObject  ho_ImageReduced46, ho_ImageClosing38, ho_ImageSub22;
	HObject  ho_Region51, ho_RegionIntersection21, ho_RegionIntersection11;
	HObject  ho_ConnectedRegions61, ho_SelectedRegions58, ho_RegionDilation151;
	HObject  ho_ImageReduced1, ho_ImageMedian2, ho_ImageScaled;
	HObject  ho_Region1, ho_RegionIntersection, ho_ConnectedRegions5;
	HObject  ho_SelectedRegions5, ho_ImageReduced3, ho_ImageMedian4;
	HObject  ho_Region3, ho_ConnectedRegions7, ho_SelectedRegions11;
	HObject  ho_ImageReduced123, ho_ImageMedian14, ho_ImageClosing29;
	HObject  ho_ImageSub16, ho_RegionDynThresh26, ho_RegionIntersection125;
	HObject  ho_ConnectedRegions233, ho_SelectedRegions236, ho_DerivGauss;
	HObject  ho_ImageConverted, ho_ImageSub135, ho_ImageMedian103;
	HObject  ho_RegionErosion19, ho_ImageReduced56, ho_ImageMedian30;
	HObject  ho_ImageScaled29, ho_Region66, ho_ImageClosing14;
	HObject  ho_ImageSub27, ho_Region61, ho_ConnectedRegions16;
	HObject  ho_SelectedRegions15, ho_RegionIntersection18, ho_ConnectedRegions74;
	HObject  ho_SelectedRegions69, ho_RegionDilation64, ho_RegionErosion11;
	HObject  ho_ImageReduced57, ho_ImageMedian28, ho_ImageClosing45;
	HObject  ho_ImageClosing46, ho_ImageSub28, ho_Region62, ho_RegionOpening20;
	HObject  ho_ConnectedRegions71, ho_SelectedRegions16, ho_ImageReduced47;
	HObject  ho_ImageMedian5, ho_ImageMedian26, ho_RegionDynThresh5;
	HObject  ho_ConnectedRegions62, ho_SelectedRegions56, ho_SelectedRegions37;
	HObject  ho_RegionDifference19, ho_Skeleton, ho_SelectedRegions38;
	HObject  ho_RegionDilation70, ho_ImageReduced62, ho_ImageClosing53;
	HObject  ho_ImageSub32, ho_Region71, ho_RegionIntersection2;
	HObject  ho_RegionClosing5, ho_ConnectedRegions10, ho_SelectedRegions8;
	HObject  ho_SelectedRegions3, ho_RegionUnion, ho_RegionDifference2;
	HObject  ho_SelectedRegions135, ho_ImageReduced36, ho_ImageMedian35;
	HObject  ho_ImageOpening14, ho_ImageOpening10, ho_ImageScaled24;
	HObject  ho_Region32, ho_ImageSub12, ho_Region31, ho_RegionFillUp11;
	HObject  ho_ConnectedRegions28, ho_RegionClosing15, ho_SelectedRegions44;
	HObject  ho_RegionOpening21, ho_RegionTrans43, ho_RegionDilation68;
	HObject  ho_RegionDilation69, ho_RegionDifference48, ho_SelectedRegions71;
	HObject  ho_RegionDilation12, ho_ImageReduced11, ho_ImageHighpass;
	HObject  ho_ImageFFT, ho_ImageConvol, ho_ImageFFT1, ho_ImageScaled25;
	HObject  ho_Region59, ho_RegionCount10, ho_RegionErosion4;
	HObject  ho_RegionIntersection15, ho_RegionFillUp5, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions12, ho_RegionMoved74, ho_RegionDifference41;
	HObject  ho_RegionDilation65, ho_ImageReduced59, ho_ImageClosing24;
	HObject  ho_ImageOpening17, ho_ImageSub29, ho_Region64, ho_ConnectedRegions72;
	HObject  ho_SelectedRegions17, ho_SelectedRegions80, ho_RegionMoved75;
	HObject  ho_RegionDifference42, ho_ImageReduced60, ho_ImageMedian29;
	HObject  ho_ImageClosing48, ho_ImageOpening23, ho_ImageSub30;
	HObject  ho_Region65, ho_ConnectedRegions73, ho_SelectedRegions68;
	HObject  ho_SelectedRegions28, ho_RegionMoved72, ho_RegionMoved99;
	HObject  ho_RegionDifference40, ho_RegionDilation14, ho_ImageReduced54;
	HObject  ho_ImageMedian27, ho_ImageClosing12, ho_ImageSub7;
	HObject  ho_Region15, ho_ConnectedRegions14, ho_SelectedRegions13;
	HObject  ho_SelectedRegions77, ho_ImageReduced, ho_ImageClosing;
	HObject  ho_ImageSub, ho_Region, ho_ConnectedRegions4, ho_SelectedRegions2;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_GenParamValue1, hv_dyn;
	HTuple  hv_ss, hv_ssmin, hv_ssmax, hv_GenParamValue2, hv_Index;
	HTuple  hv_thr, hv_med, hv_g_c, hv_g_o, hv_s_g, hv_Mean;
	HTuple  hv_Deviation, hv_n, hv_Number, hv_t, hv_dw, hv_dh;
	HTuple  hv_Height1, hv_Width1, hv_Ratio, hv_Anisometry;
	HTuple  hv_Bulkiness, hv_StructureFactor, hv_Ra, hv_Rb;
	HTuple  hv_Phi, hv_sub, hv_gw, hv_gh, hv_Index1, hv_gray;
	HTuple  hv_Number1, hv_Number2, hv_move, hv_os, hv_gc_gray;
	HTuple  hv_gc_ss, hv_gc_ssmin, hv_gc_ssmax, hv_rt_gray;
	HTuple  hv_rt_ss, hv_rt_ssmin, hv_rt_ssmax, hv_low, hv_Area;
	HTuple  hv_Row, hv_Column, hv_Area1, hv_Row1, hv_Column1;
	HTuple  hv_m, hv_r, hv_Row13, hv_Column13, hv_Row22, hv_Column22;
	HTuple  hv_Os, hv_Width, hv_Height, hv_Number15, hv_cha;
	HTuple  hv_pig, hv_Mean1, hv_Deviation1, hv_Number19, hv_scale;
	HTuple  hv_dilation, hv_Width2, hv_Height2, hv_sm, hv_ssub;
	HTuple  hv_sss, hv_sssmin, hv_sssmax, hv_ss_g, hv_xm, hv_xsub;
	HTuple  hv_xss, hv_xssmin, hv_xssmax, hv_xs_g, hv_m0, hv_m1;
	HTuple  hv_Exception;

	try
	{
		GenEmptyRegion(&ho_EmptyRegion);
		ho_Image = hv_dd.TupleGetDictObject("image");
		SetDictObject(ho_EmptyRegion, hv_dd, "resreg");
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		if (0 != (int((hv_GenParamValue.TupleFind("LD")) >= 0)))
		{
			ErosionCircle((hv_dd.TupleGetDictTuple("LD")).TupleGetDictObject("region"),
				&ho_RegionDifference4, 3.5);

			DilationCircle((hv_dd.TupleGetDictTuple("LD")).TupleGetDictObject("region"),
				&ho_RegionDilation2, 35);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionDilation2, &ho_ImageReduced2
				);
			GetDictParam(hv_dd.TupleGetDictTuple("LD"), "keys", HTuple(), &hv_GenParamValue1);
			//检测压伤
			if (0 != (int((hv_GenParamValue1.TupleFind("YS")) >= 0)))
			{
				hv_dyn = 45;
				hv_ss = "area";
				hv_ssmin = 300;
				hv_ssmax = 99999;

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val24 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val24 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val24, step_val24); hv_Index += step_val24)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("YS")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening34, 5, 5);
				MedianRect(ho_ImageOpening34, &ho_ImageMedian8, 5, 5);
				MedianRect(ho_ImageMedian8, &ho_ImageMedian9, 55, 55);
				DynThreshold(ho_ImageMedian8, ho_ImageMedian9, &ho_RegionDynThresh8, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh8, ho_RegionDifference4, &ho_RegionIntersection32
					);
				Connection(ho_RegionIntersection32, &ho_ConnectedRegions81);
				SelectShape(ho_ConnectedRegions81, &ho_SelectedRegions93, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions93, &ho_SelectedRegions93, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("84"), ho_SelectedRegions93, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "84");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions93, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//检测亮斑
			if (0 != (int((hv_GenParamValue1.TupleFind("LB")) >= 0)))
			{
				hv_thr.Clear();
				hv_thr[0] = 0;
				hv_thr[1] = 45;
				hv_med.Clear();
				hv_med[0] = 5;
				hv_med[1] = 5;
				hv_g_c.Clear();
				hv_g_c[0] = 5;
				hv_g_c[1] = 5;
				hv_g_o.Clear();
				hv_g_o[0] = 50;
				hv_g_o[1] = 50;
				hv_ss = "area";
				hv_ssmin = 200;
				hv_ssmax = 99999;

				hv_s_g.Clear();
				hv_s_g[0] = 190;
				hv_s_g[1] = 255;
				Intensity(ho_RegionDifference4, ho_Image, &hv_Mean, &hv_Deviation);
				if (0 != (int(hv_Mean<160)))
				{
					hv_s_g[0] = hv_Mean + 94;
				}
				else
				{
					hv_s_g[0] = hv_Mean + (94 - (hv_Mean - 160));
				}

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("thr")) >= 0)))
				{
					hv_thr = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("thr");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("med")) >= 0)))
				{
					hv_med = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("med");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("s_g")) >= 0)))
				{
					hv_s_g = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("s_g");

				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_o")) >= 0)))
				{
					hv_g_o = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("g_o");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_c")) >= 0)))
				{
					hv_g_c = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("g_c");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val86 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val86 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val86, step_val86); hv_Index += step_val86)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing2, HTuple(hv_g_c[0]), HTuple(hv_g_c[1]));
				MedianRect(ho_ImageClosing2, &ho_ImageMedian, HTuple(hv_med[0]), HTuple(hv_med[1]));
				//
				MedianRect(ho_ImageMedian, &ho_ImageMedian3, 10, 10);
				Threshold(ho_ImageMedian3, &ho_Region2, HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				Intersection(ho_Region2, ho_RegionDifference4, &ho_RegionIntersection1);
				Connection(ho_RegionIntersection1, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions10, "area", "and", 150,
					9999999);
				SelectGray(ho_SelectedRegions10, ho_Image, &ho_SelectedRegions10, "mean",
					"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions10, &ho_SelectedRegions10, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions10, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions10, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");

				//
				GrayOpeningRect(ho_ImageMedian, &ho_ImageOpening1, HTuple(hv_g_o[0]), HTuple(hv_g_o[1]));

				SubImage(ho_ImageOpening1, ho_ImageMedian, &ho_ImageSub1, 1.5, 128);
				//scale_image (ImageMedian, ImageScaled33, 1.5, -60)
				Threshold(ho_ImageSub1, &ho_Region27, HTuple(hv_thr[0]), HTuple(hv_thr[1]));
				Intersection(ho_Region27, ho_RegionDifference4, &ho_RegionIntersection25);
				Connection(ho_RegionIntersection25, &ho_ConnectedRegions76);
				SelectShape(ho_ConnectedRegions76, &ho_SelectedRegions82, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				SelectShape(ho_SelectedRegions82, &ho_SelectedRegions7, "phi", "and", HTuple(85).TupleRad(),
					HTuple(90).TupleRad());
				SelectShape(ho_SelectedRegions82, &ho_SelectedRegions9, "phi", "and", HTuple(-90).TupleRad(),
					HTuple(-85).TupleRad());
				Union2(ho_SelectedRegions9, ho_SelectedRegions7, &ho_RegionUnion2);
				Difference(ho_SelectedRegions82, ho_RegionUnion2, &ho_RegionDifference3);
				Connection(ho_RegionDifference3, &ho_SelectedRegions82);

				SelectGray(ho_SelectedRegions82, ho_Image, &ho_SelectedRegions82, "mean",
					"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions82, &ho_SelectedRegions82, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions82, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions82, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//检测过铣（台阶）
			if (0 != (int((hv_GenParamValue1.TupleFind("TJ")) >= 0)))
			{
				hv_dyn = 20;
				hv_g_o.Clear();
				hv_g_o[0] = 5;
				hv_g_o[1] = 5;
				hv_med.Clear();
				hv_med[0] = 7;
				hv_med[1] = 7;
				hv_ss.Clear();
				hv_ss[0] = "area";
				hv_ss[1] = "circularity";
				hv_ssmin.Clear();
				hv_ssmin[0] = 150;
				hv_ssmin[1] = 1e-9;
				hv_ssmax.Clear();
				hv_ssmax[0] = 999999;
				hv_ssmax[1] = 0.12;
				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("med")) >= 0)))
				{
					hv_med = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("med");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("g_o")) >= 0)))
				{
					hv_g_o = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("g_o");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val157 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val157 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val157, step_val157); hv_Index += step_val157)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple(((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("SS")).TupleGetDictTuple("name"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening, HTuple(hv_g_o[0]), HTuple(hv_g_o[1]));
				//gray_closing_rect (ImageReduced2, ImageClosing2, 3, 3)
				MedianRect(ho_ImageOpening, &ho_ImageMedian, HTuple(hv_med[0]), HTuple(hv_med[1]));
				MedianRect(ho_ImageMedian, &ho_ImageMedian1, 50, 50);

				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh, ho_RegionDifference4, &ho_RegionDynThresh
					);
				Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions1, &ho_SelectedRegions1, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("81"), ho_SelectedRegions1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "81");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions1, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//检测脏污
			if (0 != (int((hv_GenParamValue1.TupleFind("ZW")) >= 0)))
			{
				hv_dyn = 25;
				hv_ss.Clear();
				hv_ss[0] = "area";
				hv_ss[1] = "inner_radius";
				hv_ssmin.Clear();
				hv_ssmin[0] = 600;
				hv_ssmin[1] = 7;
				hv_ssmax.Clear();
				hv_ssmax[0] = 999999;
				hv_ssmax[1] = 999;

				GetDictParam((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW"), "keys",
					HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val197 = ((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val197 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val197, step_val197); hv_Index += step_val197)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("ZW")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				DilationCircle(ho_RegionDifference4, &ho_RegionDilation2, 35);

				ReduceDomain(ho_ImageReduced2, ho_RegionDilation2, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing2, 7, 7);
				MedianRect(ho_ImageClosing2, &ho_ImageMedian, 15, 25);
				MedianRect(ho_ImageMedian, &ho_ImageMedian1, 150, 150);

				DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, hv_dyn,
					"dark");
				Intersection(ho_RegionDynThresh, ho_RegionDifference4, &ho_RegionDynThresh
					);
				Connection(ho_RegionDynThresh, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, hv_ss, "and", hv_ssmin,
					hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions1, &ho_SelectedRegions1, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
			}
		}
		//检测RT
		if (0 != (int((hv_GenParamValue.TupleFind("RT")) >= 0)))
		{
			hv_n = 1;
			CountObj((hv_dd.TupleGetDictTuple("RT")).TupleGetDictObject("region"), &hv_Number);
			{
				HTuple end_val228 = hv_Number;
				HTuple step_val228 = 1;
				for (hv_Index = 1; hv_Index.Continue(end_val228, step_val228); hv_Index += step_val228)
				{
					hv_t = 0;
					SelectObj((hv_dd.TupleGetDictTuple("RT")).TupleGetDictObject("region"), &ho_ObjectSelected,
						hv_Index);
					hv_dw = 1;
					hv_dh = 50;
					HeightWidthRatio(ho_ObjectSelected, &hv_Height1, &hv_Width1, &hv_Ratio);

					Eccentricity(ho_ObjectSelected, &hv_Anisometry, &hv_Bulkiness, &hv_StructureFactor);
					EllipticAxis(ho_ObjectSelected, &hv_Ra, &hv_Rb, &hv_Phi);
					if (0 != (HTuple(HTuple(int(hv_Phi>(HTuple(70).TupleRad()))).TupleOr(int(hv_Phi<(HTuple(-70).TupleRad())))).TupleAnd(int(hv_Anisometry>5))))
					{
						hv_dw = 50;
						hv_dh = 1;
						hv_t = 1;
					}
					else if (0 != (HTuple(HTuple(int(hv_Phi<(HTuple(30).TupleRad()))).TupleOr(int(hv_Phi>(HTuple(-30).TupleRad())))).TupleAnd(int(hv_Anisometry>5))))
					{
						hv_dw = 1;
						hv_dh = 50;
						//横
						OpeningRectangle1(ho_ObjectSelected, &ho_RegionOpening2, 1, 5);
						ClosingRectangle1(ho_RegionOpening2, &ho_RegionClosing1, 100, 1);
						Connection(ho_RegionClosing1, &ho_ConnectedRegions9);
						SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions14, "width", "and",
							hv_Width1 - 50, hv_Width1 + 10);
						CountObj(ho_SelectedRegions14, &hv_n);
						hv_t = 1;
					}
					else if (0 != (HTuple(HTuple(int(hv_Anisometry<5)).TupleAnd(int(hv_Height1>800))).TupleAnd(int(hv_Width1>800))))
					{
						hv_t = 2;
					}

					if (0 != (HTuple(int(hv_t == 1)).TupleAnd(hv_n)))
					{
						//检测直线RT
						DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, hv_dw, hv_dh);
						ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionDilation, &ho_ImageReduced135
							);

						GetDictParam(hv_dd.TupleGetDictTuple("RT"), "keys", HTuple(), &hv_GenParamValue1);
						if (0 != (int((hv_GenParamValue1.TupleFind("L")) >= 0)))
						{
							GetDictParam((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L"),
								"keys", HTuple(), &hv_GenParamValue2);
							hv_sub = 1;
							hv_ss.Clear();
							hv_ss[0] = "area";
							hv_ss[1] = "inner_radius";
							hv_ssmin.Clear();
							hv_ssmin[0] = 30;
							hv_ssmin[1] = 1.5;
							hv_ssmax.Clear();
							hv_ssmax[0] = 999999;
							hv_ssmax[1] = 999;
							if (0 != (int(hv_dw>hv_dh)))
							{
								hv_gw = 1;
								hv_gh = 100;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gh = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("size");
								}
							}
							else
							{
								hv_gw = 100;
								hv_gh = 1;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gw = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("size");
								}
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
							{
								hv_sub = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("sub");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
							{
								{
									HTuple end_val284 = ((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
									HTuple step_val284 = 1;
									for (hv_Index1 = 0; hv_Index1.Continue(end_val284, step_val284); hv_Index1 += step_val284)
									{
										if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname"))[hv_Index1]))) >= 0)))
										{
											hv_ssmin[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmin"))[hv_Index1]);
											hv_ssmax[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmax"))[hv_Index1]);
										}
										else
										{
											hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssname"))[hv_Index1]));
											hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmin"))[hv_Index1]));
											hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("L")).TupleGetDictTuple("ssmax"))[hv_Index1]));
										}
									}
								}
							}

							//亮斑
							GrayClosingRect(ho_ImageReduced135, &ho_ImageClosing1, hv_gh, hv_gw);
							GrayOpeningRect(ho_ImageClosing1, &ho_ImageOpening32, hv_gh, hv_gw);
							SubImage(ho_ImageOpening32, ho_ImageClosing1, &ho_ImageSub18, hv_sub,
								128);
							Threshold(ho_ImageSub18, &ho_Region69, 0, 30);
							DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation1, 1, 10);
							Intersection(ho_Region69, ho_RegionDilation1, &ho_RegionIntersection28
								);
							Connection(ho_RegionIntersection28, &ho_ConnectedRegions79);
							SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions89, hv_ss, "and",
								hv_ssmin, hv_ssmax);
							if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
							{
								AffineTransRegion(ho_SelectedRegions89, &ho_SelectedRegions89, hv_dd.TupleGetDictTuple("hom_mat"),
									"nearest_neighbor");
							}
							ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions89, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
							ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions89, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
						}
						if (0 != (int((hv_GenParamValue1.TupleFind("B")) >= 0)))
						{
							GetDictParam((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
								"keys", HTuple(), &hv_GenParamValue2);
							hv_sub = 1;
							hv_gray.Clear();
							hv_gray[0] = 0;
							hv_gray[1] = 100;
							hv_ss.Clear();
							hv_ss[0] = "area";
							hv_ss[1] = "inner_radius";
							hv_ssmin.Clear();
							hv_ssmin[0] = 10;
							hv_ssmin[1] = 1.5;
							hv_ssmax.Clear();
							hv_ssmax[0] = 9999;
							hv_ssmax[1] = 999;
							if (0 != (int(hv_dw>hv_dh)))
							{
								hv_gw = 1;
								hv_gh = 200;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gh = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("size");
								}
							}
							else
							{
								hv_gw = 230;
								hv_gh = 1;
								if (0 != (int((hv_GenParamValue2.TupleFind("size")) >= 0)))
								{
									hv_gw = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("size");
								}
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("gray")) >= 0)))
							{
								hv_gray = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("gray");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
							{
								hv_sub = ((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("sub");
							}
							if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
							{
								{
									HTuple end_val340 = ((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
									HTuple step_val340 = 1;
									for (hv_Index1 = 0; hv_Index1.Continue(end_val340, step_val340); hv_Index1 += step_val340)
									{
										if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname"))[hv_Index1]))) >= 0)))
										{
											hv_ssmin[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmin"))[hv_Index1]);
											hv_ssmax[hv_Index1] = HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmax"))[hv_Index1]);
										}
										else
										{
											hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssname"))[hv_Index1]));
											hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmin"))[hv_Index1]));
											hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B")).TupleGetDictTuple("ssmax"))[hv_Index1]));
										}
									}
								}
							}
							//暗斑
							GrayClosingRect(ho_ImageReduced135, &ho_ImageClosing86, hv_gh, hv_gw);
							SubImage(ho_ImageReduced135, ho_ImageClosing86, &ho_ImageSub136, 1.2,
								128);

							Threshold(ho_ImageSub136, &ho_Region176, 0, 15);
							Intersection(ho_Region176, ho_ObjectSelected, &ho_RegionIntersection129
								);
							Connection(ho_RegionIntersection129, &ho_ConnectedRegions243);
							SelectShape(ho_ConnectedRegions243, &ho_SelectedRegions246, hv_ss, "and",
								hv_ssmin, hv_ssmax);
							SelectGray(ho_SelectedRegions246, hv_dd.TupleGetDictObject("image"),
								&ho_SelectedRegions246, "mean", "and", HTuple(hv_gray[0]), HTuple(hv_gray[1]));
							if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
							{
								AffineTransRegion(ho_SelectedRegions246, &ho_SelectedRegions246, hv_dd.TupleGetDictTuple("hom_mat"),
									"nearest_neighbor");
							}
							ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions246, &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
							ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions246,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
						}
					}

					if (0 != (int(hv_t == 2)))
					{
						//检测圆弧RT
						//检测转角

						DilationCircle(ho_ObjectSelected, &ho_RegionDilation61, 15);
						ShapeTrans(ho_RegionDilation61, &ho_RegionTrans, "convex");
						Difference(ho_RegionTrans, ho_RegionDilation61, &ho_RegionDifference);
						OpeningCircle(ho_RegionDifference, &ho_RegionOpening, 15);
						Connection(ho_RegionOpening, &ho_ConnectedRegions);
						SelectShape(ho_ConnectedRegions, &ho_ConnectedRegions, "area", "and", 200000,
							9999999);
						CountObj(ho_ConnectedRegions, &hv_Number1);
						if (0 != hv_Number1)
						{
							ShapeTrans(ho_RegionOpening, &ho_RegionTrans1, "rectangle1");
							Difference(ho_RegionTrans1, ho_RegionOpening, &ho_RegionDifference1);
							OpeningCircle(ho_RegionDifference1, &ho_RegionOpening1, 15);
							Connection(ho_RegionOpening1, &ho_ConnectedRegions2);
							SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions, "area", "and",
								100000, 400000);
							CountObj(ho_SelectedRegions, &hv_Number2);
							if (0 != hv_Number2)
							{
								hv_move = 800;
								hv_os = 225;
								hv_gc_gray.Clear();
								hv_gc_gray[0] = 90;
								hv_gc_gray[1] = 255;
								hv_gc_ss = "area";
								hv_gc_ssmin = 250;
								hv_gc_ssmax = 99999999;

								hv_rt_gray.Clear();
								hv_rt_gray[0] = 0;
								hv_rt_gray[1] = 130;
								hv_rt_ss.Clear();
								hv_rt_ss[0] = "area";
								hv_rt_ss[1] = "inner_radius";
								hv_rt_ssmin.Clear();
								hv_rt_ssmin[0] = 10;
								hv_rt_ssmin[1] = 1.5;
								hv_rt_ssmax.Clear();
								hv_rt_ssmax[0] = 99999999;
								hv_rt_ssmax[1] = 99;
								hv_low = 0;

								GetDictParam(hv_dd.TupleGetDictTuple("RT"), "keys", HTuple(), &hv_GenParamValue1);
								if (0 != (int((hv_GenParamValue1.TupleFind("move")) >= 0)))
								{
									hv_move = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("move");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("gc_gray")) >= 0)))
								{
									hv_gc_gray = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gc_gray");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("rt_gray")) >= 0)))
								{
									hv_rt_gray = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rt_gray");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("os")) >= 0)))
								{
									hv_os = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("os");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("low")) >= 0)))
								{
									hv_low = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("low");
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("gcssname")) >= 0)))
								{
									{
										HTuple end_val419 = (((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname")).TupleLength()) - 1;
										HTuple step_val419 = 1;
										for (hv_Index1 = 0; hv_Index1.Continue(end_val419, step_val419); hv_Index1 += step_val419)
										{
											if (0 != (int((hv_gc_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname"))[hv_Index1]))) >= 0)))
											{
												hv_gc_ssmin[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmin"))[hv_Index1]);
												hv_gc_ssmax[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmax"))[hv_Index1]);
											}
											else
											{
												hv_gc_ss = hv_gc_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssname"))[hv_Index1]));
												hv_gc_ssmin.Clear();
												hv_gc_ssmin.Append(hv_ssmin);
												hv_gc_ssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmin"))[hv_Index1]));
												hv_gc_ssmax.Clear();
												hv_gc_ssmax.Append(hv_ssmax);
												hv_gc_ssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("gcssmax"))[hv_Index1]));
											}
										}
									}
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("rtssname")) >= 0)))
								{
									{
										HTuple end_val431 = (((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname")).TupleLength()) - 1;
										HTuple step_val431 = 1;
										for (hv_Index1 = 0; hv_Index1.Continue(end_val431, step_val431); hv_Index1 += step_val431)
										{
											if (0 != (int((hv_rt_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname"))[hv_Index1]))) >= 0)))
											{
												hv_rt_ssmin[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmin"))[hv_Index1]);
												hv_rt_ssmax[hv_Index1] = HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmax"))[hv_Index1]);
											}
											else
											{
												hv_rt_ss = hv_rt_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssname"))[hv_Index1]));
												hv_rt_ssmin.Clear();
												hv_rt_ssmin.Append(hv_ssmin);
												hv_rt_ssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmin"))[hv_Index1]));
												hv_rt_ssmax.Clear();
												hv_rt_ssmax.Append(hv_ssmax);
												hv_rt_ssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("rtssmax"))[hv_Index1]));
											}
										}
									}
								}
								AreaCenter(ho_ConnectedRegions, &hv_Area, &hv_Row, &hv_Column);
								AreaCenter(ho_SelectedRegions, &hv_Area1, &hv_Row1, &hv_Column1);

								if (0 != (HTuple(int(hv_Row >= hv_Row1)).TupleAnd(int(hv_Column >= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(hv_move);
									hv_r.Clear();
									hv_r[0] = 90;
									hv_r[1] = 180;
									hv_n = 0;
								}
								else if (0 != (HTuple(int(hv_Row <= hv_Row1)).TupleAnd(int(hv_Column >= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(-hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(hv_move);
									hv_r.Clear();
									hv_r[0] = 180;
									hv_r[1] = 270;
									hv_n = 1;
								}
								else if (0 != (HTuple(int(hv_Row <= hv_Row1)).TupleAnd(int(hv_Column <= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(-hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(-hv_move);
									hv_r.Clear();
									hv_r[0] = 270;
									hv_r[1] = 360;
									hv_n = 2;
								}
								else if (0 != (HTuple(int(hv_Row >= hv_Row1)).TupleAnd(int(hv_Column <= hv_Column1))))
								{
									hv_m.Clear();
									hv_m.Append(hv_move);
									hv_m.Append(0);
									hv_m.Append(0);
									hv_m.Append(-hv_move);
									hv_r.Clear();
									hv_r[0] = 0;
									hv_r[1] = 90;
									hv_n = 3;
								}
								if (0 != (int((hv_GenParamValue1.TupleFind("r")) >= 0)))
								{
									hv_r = (hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("r");
								}

								ReduceDomain(ho_Image, ho_RegionDilation61, &ho_ImageReduced44);
								ShapeTrans(ho_ObjectSelected, &ho_RegionTrans28, "rectangle1");
								MoveRegion(ho_RegionTrans28, &ho_RegionMoved69, HTuple(hv_m[0]), HTuple(hv_m[1]));
								MoveRegion(ho_RegionTrans28, &ho_RegionMoved70, HTuple(hv_m[2]), HTuple(hv_m[3]));
								Difference(ho_ObjectSelected, ho_RegionMoved70, &ho_RegionDifference35
									);
								Difference(ho_RegionDifference35, ho_RegionMoved69, &ho_RegionDifference36
									);
								ShapeTrans(ho_RegionDifference36, &ho_RegionTrans30, "rectangle1");
								SmallestRectangle1(ho_RegionTrans30, &hv_Row13, &hv_Column13, &hv_Row22,
									&hv_Column22);

								hv_Os.Clear();
								hv_Os.Append(hv_Row22 + hv_os);
								hv_Os.Append(hv_Column22 + hv_os);
								hv_Os.Append(hv_Row13 - hv_os);
								hv_Os.Append(hv_Column22 + hv_os);
								hv_Os.Append(hv_Row13 - hv_os);
								hv_Os.Append(hv_Column13 - hv_os);
								hv_Os.Append(hv_Row22 + hv_os);
								hv_Os.Append(hv_Column13 - hv_os);
								GetImageSize(ho_ImageReduced44, &hv_Width, &hv_Height);
								PolarTransImageExt(ho_ImageReduced44, &ho_PolarTransImage, HTuple(hv_Os[2 * hv_n]),
									HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
									0, 2000, hv_Width, hv_Height, "nearest_neighbor");

								GenRectangle1(&ho_ROI_0, 1129.64, 0.318, 1626.11, 4098.74);
								ReduceDomain(ho_PolarTransImage, ho_ROI_0, &ho_ImageReduced45);
								GrayClosingRect(ho_ImageReduced45, &ho_ImageClosing37, 1, 50);
								//检测过铣
								GrayClosingRect(ho_ImageClosing37, &ho_ImageClosing49, 20, 50);
								ScaleImage(ho_ImageClosing49, &ho_ImageScaled30, 1.5, -50);
								MedianRect(ho_ImageScaled30, &ho_ImageScaled30, 15, 5);
								Threshold(ho_ImageScaled30, &ho_Region67, HTuple(hv_gc_gray[0]), HTuple(hv_gc_gray[1]));

								OpeningRectangle1(ho_Region67, &ho_RegionOpening19, 30, 1);
								Connection(ho_RegionOpening19, &ho_ConnectedRegions3);
								SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions6, "width", "and",
									2500, 99999);
								Union1(ho_SelectedRegions6, &ho_RegionUnion1);
								ShapeTrans(ho_RegionUnion1, &ho_RegionTrans3, "rectangle1");
								DilationRectangle1(ho_RegionTrans3, &ho_RegionDilation3, 1, 100);
								MoveRegion(ho_RegionDilation3, &ho_RegionMoved, 50, 1);
								Intersection(ho_ConnectedRegions3, ho_RegionMoved, &ho_ConnectedRegions3
									);
								SelectShape(ho_ConnectedRegions3, &ho_RegionOpening19, "area", "and",
									50000, 99999999);
								Union1(ho_RegionOpening19, &ho_RegionOpening19);
								ShapeTrans(ho_RegionOpening19, &ho_RegionTrans35, "convex");
								ShapeTrans(ho_RegionTrans35, &ho_RegionTrans2, "rectangle1");
								ErosionRectangle1(ho_RegionTrans2, &ho_RegionErosion, 800, 1);
								Intersection(ho_RegionTrans35, ho_RegionErosion, &ho_RegionTrans35);
								MoveRegion(ho_RegionTrans35, &ho_RegionMoved76, 135, 0);
								Intersection(ho_RegionMoved76, ho_RegionOpening19, &ho_RegionIntersection20
									);

								PolarTransRegionInv(ho_RegionIntersection20, &ho_XYTransRegion, HTuple(hv_Os[2 * hv_n]),
									HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
									0, 2000, hv_Width, hv_Height, hv_Width, hv_Height, "nearest_neighbor");
								Connection(ho_XYTransRegion, &ho_ConnectedRegions75);
								SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions70, hv_gc_ss,
									"and", hv_gc_ssmin, hv_gc_ssmax);
								if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
								{
									AffineTransRegion(ho_SelectedRegions70, &ho_SelectedRegions70, hv_dd.TupleGetDictTuple("hom_mat"),
										"nearest_neighbor");
								}
								ConcatObj(hv_dt.TupleGetDictObject("71"), ho_SelectedRegions70, &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, hv_dt, "71");
								ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions70,
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
								//检测RT
								GrayOpeningRect(ho_ImageClosing37, &ho_ImageOpening19, 50, 20);
								SubImage(ho_ImageOpening19, ho_ImageClosing37, &ho_ImageSub21, 1, 128);
								Threshold(ho_ImageSub21, &ho_Region50, 0, 30);
								Connection(ho_Region50, &ho_ConnectedRegions60);
								SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions57, (HTuple("width").Append("inner_radius")),
									"and", (HTuple(3000).Append(2)), (HTuple(99999).Append(20)));
								SortRegion(ho_SelectedRegions57, &ho_SortedRegions, "lower_left", "false",
									"row");
								SelectObj(ho_SortedRegions, &ho_SelectedRegions57, 1);
								CountObj(ho_SelectedRegions57, &hv_Number15);
								if (0 != (int(hv_Number15 == 1)))
								{
									if (0 != hv_low)
									{
										ClosingRectangle1(ho_SelectedRegions57, &ho_RegionClosing, 10,
											10);
										ReduceDomain(ho_PolarTransImage, ho_RegionClosing, &ho_ImageReduced4
											);
										GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
										GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
										GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
										SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2,
											128);
										Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
										Connection(ho_Region5, &ho_ConnectedRegions8);
										SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width",
											"and", 600, 99999);
										CountObj(ho_SelectedRegions4, &hv_Number2);
										if (0 != hv_Number2)
										{
											Union1(ho_SelectedRegions4, &ho_RegionUnion4);
											DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 1, 100);
											MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, -50, 0);
											Difference(ho_RegionClosing, ho_RegionMoved7, &ho_SelectedRegions57
												);
										}
										else
										{
											GenEmptyObj(&ho_RegionDilation5);
											MoveRegion(ho_RegionClosing, &ho_RegionMoved8, -8, 0);
											Difference(ho_RegionClosing, ho_RegionMoved8, &ho_SelectedRegions57
												);
										}
										Intersection(ho_SelectedRegions57, ho_RegionDilation5, &ho_SelectedRegions57
											);
									}
									ErosionRectangle1(ho_SelectedRegions57, &ho_RegionErosion9, 1, 2);
									ShapeTrans(ho_RegionErosion9, &ho_RegionTrans23, "rectangle1");
									ErosionRectangle1(ho_RegionTrans23, &ho_RegionErosion14, 180, 1);
									DilationRectangle1(ho_RegionErosion9, &ho_RegionDilation62, 1, 10);
									ReduceDomain(ho_PolarTransImage, ho_RegionDilation62, &ho_ImageReduced46
										);

									GrayClosingRect(ho_ImageReduced46, &ho_ImageClosing38, 3, 80);
									SubImage(ho_ImageReduced46, ho_ImageClosing38, &ho_ImageSub22, 1.2,
										128);
									Threshold(ho_ImageSub22, &ho_Region51, 0, 30);
									Intersection(ho_Region51, ho_RegionErosion14, &ho_RegionIntersection21
										);
									Intersection(ho_RegionIntersection21, ho_RegionErosion9, &ho_RegionIntersection11
										);

									PolarTransRegionInv(ho_RegionIntersection11, &ho_XYTransRegion, HTuple(hv_Os[2 * hv_n]),
										HTuple(hv_Os[(2 * hv_n) + 1]), HTuple(hv_r[0]).TupleRad(), HTuple(hv_r[1]).TupleRad(),
										0, 2000, hv_Width, hv_Height, hv_Width, hv_Height, "nearest_neighbor");
									Connection(ho_XYTransRegion, &ho_ConnectedRegions61);
									SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions58, hv_rt_ss,
										"and", hv_rt_ssmin, hv_rt_ssmax);
									SelectGray(ho_SelectedRegions58, ho_Image, &ho_SelectedRegions58,
										"mean", "and", HTuple(hv_rt_gray[0]), HTuple(hv_rt_gray[1]));
									if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
									{
										AffineTransRegion(ho_SelectedRegions58, &ho_SelectedRegions58,
											hv_dd.TupleGetDictTuple("hom_mat"), "nearest_neighbor");
									}
									ConcatObj(hv_dt.TupleGetDictObject("72"), ho_SelectedRegions58, &ho___Tmp_Obj_0
										);
									SetDictObject(ho___Tmp_Obj_0, hv_dt, "72");
									ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions58,
										&ho___Tmp_Obj_0);
									SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
								}
							}
						}
					}
				}
			}
		}
		//**检测塑胶
		if (0 != (int((hv_GenParamValue.TupleFind("SJ")) >= 0)))
		{
			hv_cha = 20;
			hv_pig = 0;
			GetDictParam(hv_dd.TupleGetDictTuple("SJ"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("cha")) >= 0)))
			{
				hv_cha = (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("cha");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("pig")) >= 0)))
			{
				hv_pig = (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("pig");
			}

			//塑胶漏铁
			DilationCircle((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_RegionDilation151, 50);
			ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced1);
			MedianRect(ho_ImageReduced1, &ho_ImageMedian2, 3, 3);
			ScaleImage(ho_ImageMedian2, &ho_ImageScaled, 1.5, -30);
			Threshold(ho_ImageScaled, &ho_Region1, 200, 255);
			Intersection(ho_Region1, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_RegionIntersection);
			Connection(ho_RegionIntersection, &ho_ConnectedRegions5);
			SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 20,
				999999);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions5, &ho_SelectedRegions5, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("87"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "87");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions5, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//塑胶暗斑
			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
				&ho_ImageReduced3);
			Intensity((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"), ho_ImageReduced3,
				&hv_Mean1, &hv_Deviation1);
			MedianRect(ho_ImageReduced3, &ho_ImageMedian4, 5, 5);
			Threshold(ho_ImageMedian4, &ho_Region3, 0, hv_Mean1 - hv_cha);
			Connection(ho_Region3, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions11, (HTuple("area").Append("inner_radius")),
				"and", (HTuple(150).Append(5)), (HTuple(99999).Append(9999)));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions11, &ho_SelectedRegions11, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			if (0 != hv_pig)
			{
				ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions11, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
			}
			else
			{
				ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions11, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			}

			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions11, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//
			GetDictParam(hv_dd.TupleGetDictTuple("SJ"), "keys", HTuple(), &hv_GenParamValue1);
			//检测塑胶
			//帽运算
			if (0 != (int((hv_GenParamValue1.TupleFind("CAP")) >= 0)))
			{
				hv_g_c.Clear();
				hv_g_c[0] = 200;
				hv_g_c[1] = 30;
				hv_sub = 3;
				hv_ss = "area";
				hv_ssmin = 350;
				hv_ssmax = 999999;
				GetDictParam((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP"), "keys",
					HTuple(), &hv_GenParamValue2);

				if (0 != (int((hv_GenParamValue2.TupleFind("g_c")) >= 0)))
				{
					hv_g_c = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("g_c");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
				{
					hv_sub = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("sub");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val644 = ((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val644 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val644, step_val644); hv_Index += step_val644)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("CAP")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}

				ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced123);
				MedianRect(ho_ImageReduced123, &ho_ImageMedian14, 5, 5);
				GrayOpeningRect(ho_ImageMedian14, &ho_ImageMedian14, 5, 5);
				GrayClosingRect(ho_ImageMedian14, &ho_ImageClosing29, HTuple(hv_g_c[0]),
					HTuple(hv_g_c[1]));
				SubImage(ho_ImageMedian14, ho_ImageClosing29, &ho_ImageSub16, hv_sub, 128);
				Threshold(ho_ImageSub16, &ho_RegionDynThresh26, 0, 30);
				Intersection(ho_RegionDynThresh26, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
					&ho_RegionIntersection125);
				Connection(ho_RegionIntersection125, &ho_ConnectedRegions233);
				SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions236, hv_ss, "and",
					hv_ssmin, hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions236, &ho_SelectedRegions236, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				if (0 != hv_pig)
				{
					ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
				}
				else
				{
					ConcatObj(hv_dt.TupleGetDictObject("79"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "79");
				}

				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions236, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
			//*********
			//导数高斯
			if (0 != (int((hv_GenParamValue1.TupleFind("GAUSS")) >= 0)))
			{
				hv_dyn = 45;
				hv_sub = 3;
				hv_ss = "area";
				hv_ssmin = 350;
				hv_ssmax = 999999;

				GetDictParam((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
					"keys", HTuple(), &hv_GenParamValue2);
				if (0 != (int((hv_GenParamValue2.TupleFind("dyn")) >= 0)))
				{
					hv_dyn = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("dyn");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("sub")) >= 0)))
				{
					hv_sub = ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("sub");
				}
				if (0 != (int((hv_GenParamValue2.TupleFind("ssname")) >= 0)))
				{
					{
						HTuple end_val696 = ((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
						HTuple step_val696 = 1;
						for (hv_Index = 0; hv_Index.Continue(end_val696, step_val696); hv_Index += step_val696)
						{
							if (0 != (int((hv_ss.TupleFind(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
							{
								hv_ssmin[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmin"))[hv_Index]);
								hv_ssmax[hv_Index] = HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmax"))[hv_Index]);
							}
							else
							{
								hv_ss = hv_ss.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssname"))[hv_Index]));
								hv_ssmin = hv_ssmin.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmin"))[hv_Index]));
								hv_ssmax = hv_ssmax.TupleConcat(HTuple((((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS")).TupleGetDictTuple("ssmax"))[hv_Index]));
							}
						}
					}
				}
				ReduceDomain(ho_Image, ho_RegionDilation151, &ho_ImageReduced123);
				MedianRect(ho_ImageReduced123, &ho_ImageMedian14, 7, 7);
				DerivateGauss(ho_ImageMedian14, &ho_DerivGauss, 7, "none");
				ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
				SubImage(ho_ImageMedian14, ho_ImageConverted, &ho_ImageSub135, hv_sub, 128);

				MedianRect(ho_ImageSub135, &ho_ImageMedian103, 50, 50);

				DynThreshold(ho_ImageSub135, ho_ImageMedian103, &ho_RegionDynThresh26, hv_dyn,
					"dark");
				ErosionCircle((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictObject("region"),
					&ho_RegionErosion19, 5);
				Intersection(ho_RegionDynThresh26, ho_RegionErosion19, &ho_RegionIntersection125
					);
				Connection(ho_RegionIntersection125, &ho_ConnectedRegions233);
				SelectShape(ho_ConnectedRegions233, &ho_SelectedRegions236, hv_ss, "and",
					hv_ssmin, hv_ssmax);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions236, &ho_SelectedRegions236, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				if (0 != hv_pig)
				{
					ConcatObj(hv_dt.TupleGetDictObject("90"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "90");
				}
				else
				{
					ConcatObj(hv_dt.TupleGetDictObject("76"), ho_SelectedRegions236, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "76");
				}

				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions236, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}
		}
		//**检测小塑胶
		if (0 != (int((hv_GenParamValue.TupleFind("XSJ")) >= 0)))
		{
			hv_sub = 3;
			GetDictParam(hv_dd.TupleGetDictTuple("XSJ"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("dyn")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("XSJ")).TupleGetDictTuple("dyn");
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("XSJ")).TupleGetDictObject("region"),
				&ho_ImageReduced56);
			MedianRect(ho_ImageReduced56, &ho_ImageMedian30, 7, 7);
			ScaleImage(ho_ImageMedian30, &ho_ImageScaled29, 2, -30);
			Threshold(ho_ImageScaled29, &ho_Region66, 0, 20);

			GrayClosingRect(ho_ImageReduced56, &ho_ImageClosing14, 100, 1);
			SubImage(ho_ImageReduced56, ho_ImageClosing14, &ho_ImageSub27, 1, 128);
			Threshold(ho_ImageSub27, &ho_Region61, 0, 30);
			Connection(ho_Region61, &ho_ConnectedRegions16);
			SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions15, (HTuple("area").Append("height")),
				"and", (HTuple(350).Append(80)), (HTuple(99999).Append(300)));
			CountObj(ho_SelectedRegions15, &hv_Number19);
			if (0 != hv_Number19)
			{
				Intersection(ho_SelectedRegions15, ho_Region66, &ho_RegionIntersection18);
				Connection(ho_RegionIntersection18, &ho_ConnectedRegions74);
				SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions69, "area", "and",
					250, 99999);
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions69, &ho_SelectedRegions69, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("77"), ho_SelectedRegions69, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "77");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions69, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");

				DilationRectangle1(ho_SelectedRegions15, &ho_RegionDilation64, 200, 1);
				ErosionRectangle1(ho_RegionDilation64, &ho_RegionErosion11, 1, 30);
				ReduceDomain(ho_Image, ho_RegionErosion11, &ho_ImageReduced57);
				MedianRect(ho_ImageReduced57, &ho_ImageMedian28, 1, 5);
				GrayClosingRect(ho_ImageMedian28, &ho_ImageClosing45, 3, 7);
				GrayClosingRect(ho_ImageClosing45, &ho_ImageClosing46, 15, 100);
				SubImage(ho_ImageClosing45, ho_ImageClosing46, &ho_ImageSub28, hv_sub, 128);

				Threshold(ho_ImageSub28, &ho_Region62, 0, 30);
				OpeningRectangle1(ho_Region62, &ho_RegionOpening20, 1, 10);
				Connection(ho_RegionOpening20, &ho_ConnectedRegions71);
				SelectShape(ho_ConnectedRegions71, &ho_SelectedRegions16, (HTuple("area").Append("width")),
					"and", (HTuple(250).Append(15)), (HTuple(99999).Append(9999)));
				if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
				{
					AffineTransRegion(ho_SelectedRegions16, &ho_SelectedRegions16, hv_dd.TupleGetDictTuple("hom_mat"),
						"nearest_neighbor");
				}
				ConcatObj(hv_dt.TupleGetDictObject("77"), ho_SelectedRegions16, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "77");
				ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions16, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			}

		}
		//**检测LC暗划伤
		if (0 != (int((hv_GenParamValue.TupleFind("LC")) >= 0)))
		{
			hv_dyn = 65;
			GetDictParam(hv_dd.TupleGetDictTuple("LC"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("dyn")) >= 0)))
			{
				hv_dyn = (hv_dd.TupleGetDictTuple("LC")).TupleGetDictTuple("dyn");
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("LC")).TupleGetDictObject("region"),
				&ho_ImageReduced47);
			MedianRect(ho_ImageReduced47, &ho_ImageMedian5, 5, 5);
			MedianRect(ho_ImageMedian5, &ho_ImageMedian26, 50, 50);
			DynThreshold(ho_ImageMedian5, ho_ImageMedian26, &ho_RegionDynThresh5, hv_dyn,
				"light");

			Connection(ho_RegionDynThresh5, &ho_ConnectedRegions62);
			SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions56, ((HTuple("area").Append("circularity")).Append("anisometry")),
				"and", ((HTuple(200).Append(1e-9)).Append(3)), ((HTuple(99999).Append(0.3)).Append(60)));
			SelectShape(ho_SelectedRegions56, &ho_SelectedRegions37, "phi", "and", HTuple(-15).TupleRad(),
				HTuple(15).TupleRad());

			Difference(ho_SelectedRegions56, ho_SelectedRegions37, &ho_RegionDifference19
				);
			Skeleton(ho_RegionDifference19, &ho_Skeleton);
			SelectShape(ho_Skeleton, &ho_SelectedRegions38, (HTuple("anisometry").Append("contlength")),
				"and", (HTuple(30).Append(200)), (HTuple(99999).Append(9999999)));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions38, &ho_SelectedRegions38, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("82"), ho_SelectedRegions38, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "82");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions38, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//****检测A基准
		if (0 != (int((hv_GenParamValue.TupleFind("AG")) >= 0)))
		{
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 160;
			GetDictParam(hv_dd.TupleGetDictTuple("AG"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("AG")).TupleGetDictTuple("s_g");
			}
			//检测大缺陷
			DilationCircle((hv_dd.TupleGetDictTuple("AG")).TupleGetDictObject("region"),
				&ho_RegionDilation70, 5);
			ReduceDomain(ho_Image, ho_RegionDilation70, &ho_ImageReduced62);
			GrayClosingRect(ho_ImageReduced62, &ho_ImageClosing53, 30, 100);
			SubImage(ho_ImageReduced62, ho_ImageClosing53, &ho_ImageSub32, 1, 128);
			Threshold(ho_ImageSub32, &ho_Region71, 0, 30);

			Intersection((hv_dd.TupleGetDictTuple("AG")).TupleGetDictObject("region"),
				ho_Region71, &ho_RegionIntersection2);
			ClosingCircle(ho_RegionIntersection2, &ho_RegionClosing5, 3);
			Connection(ho_RegionClosing5, &ho_ConnectedRegions10);
			SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions8, (HTuple("area").Append("width")),
				"and", (HTuple(100).Append(1)), (HTuple(99999).Append(1500)));

			SelectShape(ho_SelectedRegions8, &ho_SelectedRegions3, (HTuple("phi").Append("circularity")),
				"and", HTuple(HTuple(-90).TupleRad()).TupleConcat(0.0000000000001), HTuple(HTuple(-40).TupleRad()).TupleConcat(0.15));
			SelectShape(ho_SelectedRegions8, &ho_SelectedRegions4, (HTuple("phi").Append("circularity")),
				"and", HTuple(HTuple(40).TupleRad()).TupleConcat(0.0000000000001), HTuple(HTuple(90).TupleRad()).TupleConcat(0.15));
			Union2(ho_SelectedRegions3, ho_SelectedRegions4, &ho_RegionUnion);
			Difference(ho_SelectedRegions8, ho_RegionUnion, &ho_RegionDifference2);
			SelectGray(ho_RegionDifference2, ho_Image, &ho_SelectedRegions135, "mean",
				"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions135, &ho_SelectedRegions135, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions135, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions135, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//**检测圆环过铣
		if (0 != (int((hv_GenParamValue.TupleFind("YH")) >= 0)))
		{
			hv_scale.Clear();
			hv_scale[0] = 1.5;
			hv_scale[1] = -30;
			hv_sub = 5;
			hv_dilation = 18;
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 35;
			hv_ss.Clear();
			hv_ss[0] = "area";
			hv_ss[1] = "circularity";
			hv_ssmin.Clear();
			hv_ssmin[0] = 300;
			hv_ssmin[1] = 0.75;
			hv_ssmax.Clear();
			hv_ssmax[0] = 1800;
			hv_ssmax[1] = 1;

			GetDictParam(hv_dd.TupleGetDictTuple("YH"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("scale")) >= 0)))
			{
				hv_scale = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("scale");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sub")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("sub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("dilation")) >= 0)))
			{
				hv_dilation = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("dilation");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("s_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val872 = (((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val872 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val872, step_val872); hv_Index += step_val872)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("YH")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			//检测过铣
			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("YH")).TupleGetDictObject("region"),
				&ho_ImageReduced36);
			MedianRect(ho_ImageReduced36, &ho_ImageMedian35, 3, 3);
			GrayOpeningRect(ho_ImageMedian35, &ho_ImageOpening14, 5, 5);

			GrayOpeningRect(ho_ImageOpening14, &ho_ImageOpening10, 45, 45);

			ScaleImage(ho_ImageOpening10, &ho_ImageScaled24, HTuple(hv_scale[0]), HTuple(hv_scale[1]));
			Threshold(ho_ImageScaled24, &ho_Region32, 0, 20);

			SubImage(ho_ImageOpening10, ho_ImageOpening14, &ho_ImageSub12, hv_sub, 128);
			Threshold(ho_ImageSub12, &ho_Region31, 0, 35);
			Intersection(ho_Region31, ho_Region32, &ho_Region31);
			FillUpShape(ho_Region31, &ho_RegionFillUp11, "area", 1, 100);
			Connection(ho_RegionFillUp11, &ho_ConnectedRegions28);
			ClosingCircle(ho_ConnectedRegions28, &ho_RegionClosing15, 65);

			SelectShape(ho_RegionClosing15, &ho_SelectedRegions44, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			OpeningCircle(ho_SelectedRegions44, &ho_RegionOpening21, 10);
			ShapeTrans(ho_RegionOpening21, &ho_RegionTrans43, "outer_circle");
			DilationCircle(ho_RegionTrans43, &ho_RegionDilation68, hv_dilation);
			DilationCircle(ho_RegionDilation68, &ho_RegionDilation69, 2);
			Difference(ho_RegionDilation69, ho_RegionDilation68, &ho_RegionDifference48
				);
			SelectGray(ho_RegionDifference48, ho_Image, &ho_SelectedRegions71, "mean",
				"and", HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions71, &ho_SelectedRegions71, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("78"), ho_SelectedRegions71, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "78");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions71, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//**检测塑胶漏铣
		if (0 != (int((hv_GenParamValue.TupleFind("SJLC")) >= 0)))
		{
			DilationCircle((hv_dd.TupleGetDictTuple("SJLC")).TupleGetDictObject("region"),
				&ho_RegionDilation12, 15);
			ReduceDomain(ho_Image, ho_RegionDilation12, &ho_ImageReduced11);

			GetImageSize(ho_ImageReduced11, &hv_Width2, &hv_Height2);
			GenHighpass(&ho_ImageHighpass, 0.05, "none", "rft", hv_Width2, hv_Height2);
			RftGeneric(ho_ImageReduced11, &ho_ImageFFT, "to_freq", "none", "complex", hv_Width2);

			ConvolFft(ho_ImageFFT, ho_ImageHighpass, &ho_ImageConvol);
			RftGeneric(ho_ImageConvol, &ho_ImageFFT1, "from_freq", "n", "byte", hv_Width2);
			ScaleImage(ho_ImageFFT1, &ho_ImageScaled25, 6, -50);
			Threshold(ho_ImageScaled25, &ho_Region59, 100, 255);
			RankRegion(ho_Region59, &ho_RegionCount10, 40, 40, 50);
			ErosionCircle((hv_dd.TupleGetDictTuple("SJLC")).TupleGetDictObject("region"),
				&ho_RegionErosion4, 35);
			Intersection(ho_RegionCount10, ho_RegionErosion4, &ho_RegionIntersection15);

			FillUpShape(ho_RegionIntersection15, &ho_RegionFillUp5, "area", 1, 1000);
			Connection(ho_RegionFillUp5, &ho_ConnectedRegions13);
			SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions12, "area", "and", 3000,
				9999999);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions12, &ho_SelectedRegions12, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("75"), ho_SelectedRegions12, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "75");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions12, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测侧拍基准面(暗)
		if (0 != (int((hv_GenParamValue.TupleFind("CGZB")) >= 0)))
		{
			//检测上部区域移动距离
			hv_sm = 30;
			hv_ssub = 1;
			hv_sss.Clear();
			hv_sss[0] = "area";
			hv_sss[1] = "inner_radius";
			hv_sssmin.Clear();
			hv_sssmin[0] = 10;
			hv_sssmin[1] = 1.5;
			hv_sssmax.Clear();
			hv_sssmax[0] = 99999;
			hv_sssmax[1] = 99;
			hv_ss_g.Clear();
			hv_ss_g[0] = 200;
			hv_ss_g[1] = 255;
			//下部
			hv_xm = 120;
			hv_xsub = 1.5;
			hv_xss.Clear();
			hv_xss[0] = "area";
			hv_xss[1] = "inner_radius";
			hv_xssmin.Clear();
			hv_xssmin[0] = 150;
			hv_xssmin[1] = 4;
			hv_xssmax.Clear();
			hv_xssmax[0] = 99999;
			hv_xssmax[1] = 999;
			hv_xs_g.Clear();
			hv_xs_g[0] = 240;
			hv_xs_g[1] = 235;

			GetDictParam(hv_dd.TupleGetDictTuple("CGZB"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("sm")) >= 0)))
			{
				hv_sm = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sm");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssub")) >= 0)))
			{
				hv_ssub = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("ssub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sssname")) >= 0)))
			{
				{
					HTuple end_val969 = (((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname")).TupleLength()) - 1;
					HTuple step_val969 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val969, step_val969); hv_Index += step_val969)
					{
						if (0 != (int((hv_sss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname"))[hv_Index]))) >= 0)))
						{
							hv_sssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmin"))[hv_Index]);
							hv_sssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmax"))[hv_Index]);
						}
						else
						{
							hv_sss = hv_sss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssname"))[hv_Index]));
							hv_sssmin = hv_sssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmin"))[hv_Index]));
							hv_sssmax = hv_sssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("sssmax"))[hv_Index]));
						}
					}
				}
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ss_g")) >= 0)))
			{
				hv_ss_g = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("ss_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xm")) >= 0)))
			{
				hv_xm = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xm");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xsub")) >= 0)))
			{
				hv_xsub = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xsub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xssname")) >= 0)))
			{
				{
					HTuple end_val990 = (((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname")).TupleLength()) - 1;
					HTuple step_val990 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val990, step_val990); hv_Index += step_val990)
					{
						if (0 != (int((hv_xss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname"))[hv_Index]))) >= 0)))
						{
							hv_xssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmin"))[hv_Index]);
							hv_xssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmax"))[hv_Index]);
						}
						else
						{
							hv_xss = hv_xss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssname"))[hv_Index]));
							hv_xssmin.Clear();
							hv_xssmin.Append(hv_ssmin);
							hv_xssmin.Append(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmin"))[hv_Index]));
							hv_xssmax.Clear();
							hv_xssmax.Append(hv_ssmax);
							hv_xssmax.Append(HTuple(((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xssmax"))[hv_Index]));
						}
					}
				}
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("xs_g")) >= 0)))
			{
				hv_xs_g = (hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictTuple("xs_g");
			}

			MoveRegion((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictObject("region"),
				&ho_RegionMoved74, hv_sm, 0);
			//检测上部
			Difference((hv_dd.TupleGetDictTuple("CGZB")).TupleGetDictObject("region"),
				ho_RegionMoved74, &ho_RegionDifference41);
			DilationCircle(ho_RegionDifference41, &ho_RegionDilation65, 3);
			ReduceDomain(ho_Image, ho_RegionDilation65, &ho_ImageReduced59);

			GrayClosingRect(ho_ImageReduced59, &ho_ImageClosing24, 1, 15);
			GrayOpeningRect(ho_ImageClosing24, &ho_ImageOpening17, 1, 30);
			SubImage(ho_ImageOpening17, ho_ImageClosing24, &ho_ImageSub29, hv_ssub, 128);
			Threshold(ho_ImageSub29, &ho_Region64, 0, 30);
			Connection(ho_Region64, &ho_ConnectedRegions72);
			SelectShape(ho_ConnectedRegions72, &ho_SelectedRegions17, hv_sss, "and", hv_sssmin,
				hv_sssmax);
			SelectGray(ho_SelectedRegions17, ho_Image, &ho_SelectedRegions80, "mean", "and",
				HTuple(hv_ss_g[0]), HTuple(hv_ss_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions80, &ho_SelectedRegions80, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions80, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions80, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
			//检测下部
			MoveRegion(ho_RegionMoved74, &ho_RegionMoved75, hv_xm, 0);
			Difference(ho_RegionMoved74, ho_RegionMoved75, &ho_RegionDifference42);
			ReduceDomain(ho_Image, ho_RegionDifference42, &ho_ImageReduced60);
			MedianRect(ho_ImageReduced60, &ho_ImageMedian29, 5, 5);
			GrayClosingRect(ho_ImageMedian29, &ho_ImageClosing48, 1, 10);
			GrayOpeningRect(ho_ImageClosing48, &ho_ImageOpening23, 3, 80);
			SubImage(ho_ImageOpening23, ho_ImageClosing48, &ho_ImageSub30, hv_xsub, 128);
			Threshold(ho_ImageSub30, &ho_Region65, 0, 30);
			Connection(ho_Region65, &ho_ConnectedRegions73);
			SelectShape(ho_ConnectedRegions73, &ho_SelectedRegions68, hv_xss, "and", hv_xssmin,
				hv_xssmax);
			SelectGray(ho_SelectedRegions68, ho_Image, &ho_SelectedRegions28, "mean", "and",
				HTuple(hv_xs_g[0]), HTuple(hv_xs_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions28, &ho_SelectedRegions28, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions28, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions28, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测侧拍基准面(亮)
		if (0 != (int((hv_GenParamValue.TupleFind("CGZL")) >= 0)))
		{
			hv_m0 = 160;
			hv_m1 = -50;
			hv_sub = 1.5;
			hv_ss = "area";
			hv_ssmin = 150;
			hv_ssmax = 999999;
			hv_s_g.Clear();
			hv_s_g[0] = 0;
			hv_s_g[1] = 150;
			GetDictParam(hv_dd.TupleGetDictTuple("CGZL"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("m0")) >= 0)))
			{
				hv_m0 = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("m0");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("m1")) >= 0)))
			{
				hv_m1 = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("m1");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("sub")) >= 0)))
			{
				hv_sub = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("sub");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("s_g")) >= 0)))
			{
				hv_s_g = (hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("s_g");
			}
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val1068 = (((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val1068 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1068, step_val1068); hv_Index += step_val1068)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			MoveRegion((hv_dd.TupleGetDictTuple("CGZL")).TupleGetDictObject("region"),
				&ho_RegionMoved72, hv_m0, 0);
			MoveRegion(ho_RegionMoved72, &ho_RegionMoved99, hv_m1, 0);

			Difference(ho_RegionMoved99, ho_RegionMoved72, &ho_RegionDifference40);
			DilationCircle(ho_RegionDifference40, &ho_RegionDilation14, 5);
			ReduceDomain(ho_Image, ho_RegionDilation14, &ho_ImageReduced54);
			MedianRect(ho_ImageReduced54, &ho_ImageMedian27, 5, 5);
			GrayClosingRect(ho_ImageMedian27, &ho_ImageClosing12, 1, 40);
			SubImage(ho_ImageMedian27, ho_ImageClosing12, &ho_ImageSub7, hv_sub, 128);
			Threshold(ho_ImageSub7, &ho_Region15, 0, 60);
			Intersection(ho_Region15, ho_RegionDifference40, &ho_Region15);
			Connection(ho_Region15, &ho_ConnectedRegions14);
			SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions13, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			SelectGray(ho_SelectedRegions13, ho_Image, &ho_SelectedRegions77, "mean", "and",
				HTuple(hv_s_g[0]), HTuple(hv_s_g[1]));
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions77, &ho_SelectedRegions77, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("74"), ho_SelectedRegions77, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "74");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions77, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		//检测亮LC
		if (0 != (int((hv_GenParamValue.TupleFind("LLC")) >= 0)))
		{
			hv_sub = 1;
			hv_ss = "area";
			hv_ssmin = 150;
			hv_ssmax = 999999;

			GetDictParam(hv_dd.TupleGetDictTuple("LLC"), "keys", HTuple(), &hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind("ssname")) >= 0)))
			{
				{
					HTuple end_val1111 = (((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname")).TupleLength()) - 1;
					HTuple step_val1111 = 1;
					for (hv_Index = 0; hv_Index.Continue(end_val1111, step_val1111); hv_Index += step_val1111)
					{
						if (0 != (int((hv_ss.TupleFind(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname"))[hv_Index]))) >= 0)))
						{
							hv_ssmin[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmin"))[hv_Index]);
							hv_ssmax[hv_Index] = HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmax"))[hv_Index]);
						}
						else
						{
							hv_ss = hv_ss.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssname"))[hv_Index]));
							hv_ssmin = hv_ssmin.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmin"))[hv_Index]));
							hv_ssmax = hv_ssmax.TupleConcat(HTuple(((hv_dd.TupleGetDictTuple("LLC")).TupleGetDictTuple("ssmax"))[hv_Index]));
						}
					}
				}
			}

			ReduceDomain(ho_Image, (hv_dd.TupleGetDictTuple("LLC")).TupleGetDictObject("region"),
				&ho_ImageReduced);
			GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 100, 100);
			SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, hv_sub, 128);
			Threshold(ho_ImageSub, &ho_Region, 0, 30);
			Connection(ho_Region, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, hv_ss, "and", hv_ssmin,
				hv_ssmax);
			if (0 != (int((hv_GenParamValue.TupleFind("hom_mat")) >= 0)))
			{
				AffineTransRegion(ho_SelectedRegions2, &ho_SelectedRegions2, hv_dd.TupleGetDictTuple("hom_mat"),
					"nearest_neighbor");
			}
			ConcatObj(hv_dt.TupleGetDictObject("80"), ho_SelectedRegions2, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "80");
			ConcatObj(hv_dd.TupleGetDictObject("resreg"), ho_SelectedRegions2, &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "resreg");
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "DefectDetectionAlgorithms error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84GrayLumenDefects1Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple hv_AlgorithmConfig,
	HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Reg, ho_e, ho_ROI_0, ho_ROI_1, ho_ImageAffineTrans;
	HObject  ho_ImageReduced43, ho_ImageClosing36, ho_Region49;
	HObject  ho_ConnectedRegions59, ho_SortedRegions2, ho_ObjectSelected1;
	HObject  ho_ImageReduced50, ho_ImageClosing40, ho_ImageOpening21;
	HObject  ho_ImageSub23, ho_Region55, ho_ConnectedRegions65;
	HObject  ho_SelectedRegions61, ho_SortedRegions, ho_RegionTrans;
	HObject  ho_ImageReduced4, ho_ImageOpening, ho_ImageClosing5;
	HObject  ho_ImageClosing7, ho_ImageSub5, ho_Region5, ho_ConnectedRegions8;
	HObject  ho_SelectedRegions4, ho_RegionUnion4, ho_RegionDilation5;
	HObject  ho_RegionMoved7, ho_RegionDifference6, ho_RegionMoved8;
	HObject  ho_RegionOpening1, ho_TMP_Region, ho_RegionDilation6;
	HObject  ho_ImageReduced6, ho_ImageClosing9, ho_ImageMedian1;
	HObject  ho_ImageOpening4, ho_ImageSub7, ho_Region9, ho_RegionIntersection5;
	HObject  ho_ConnectedRegions12, ho_SelectedRegions10, ho_RegionDilation31;
	HObject  ho_ImageReduced36, ho_ImageMedian15, ho_ImageTexture8;
	HObject  ho_ImageTexture9, ho_ImageResult4, ho_Region47;
	HObject  ho_RegionCount13, ho_RegionFillUp8, ho_ConnectedRegions48;
	HObject  ho_SelectedRegions15, ho_RegionClosing13, ho_RegionOpening14;
	HObject  ho_RegionDifference33, ho_ConnectedRegions49, ho_SelectedRegions51;
	HObject  ho_RegionDilation13, ho_ImageReduced16, ho_ImageTexture2;
	HObject  ho_ImageTexture3, ho_ImageResult1, ho_Region15;
	HObject  ho_RegionCount11, ho_RegionTrans13, ho_RegionMoved20;
	HObject  ho_RegionDifference22, ho_RegionClosing6, ho_RegionOpening2;
	HObject  ho_RegionDifference21, ho_ConnectedRegions28, ho_SelectedRegions37;
	HObject  ho_RegionCount10, ho_RegionTrans4, ho_RegionMoved12;
	HObject  ho_RegionDifference9, ho_RegionTrans8, ho_RegionErosion6;
	HObject  ho_RegionErosion8, ho_RegionDilation14, ho_RegionMoved13;
	HObject  ho_RegionDifference13, ho_ConnectedRegions15, ho_SelectedRegions23;
	HObject  ho_ImageReduced10, ho_ImageOpening5, ho_ImageMedian2;
	HObject  ho_ImageClosing12, ho_ImageSub8, ho_Region13, ho_ConnectedRegions13;
	HObject  ho_SelectedRegions11, ho_SelectedRegions13, ho_RegionTrans2;
	HObject  ho_SelectedRegions14, ho_RegionDifference4, ho_RegionTrans16;
	HObject  ho_RegionMoved21, ho_RegionDilation22, ho_ImageReduced24;
	HObject  ho_ImageMedian9, ho_RegionErosion9, ho_ImageReduced25;
	HObject  ho_ImageTexture4, ho_ImageTexture5, ho_ImageResult2;
	HObject  ho_Region28, ho_RegionCount12, ho_ConnectedRegions29;
	HObject  ho_SelectedRegions38, ho_RegionUnion10, ho_RegionErosion14;
	HObject  ho_RegionTrans17, ho_RegionDifference23, ho_ConnectedRegions32;
	HObject  ho_SelectedRegions40, ho_ImageOpening32, ho_RegionClosing11;
	HObject  ho_ConnectedRegions55, ho_SelectedRegions56, ho_RegionErosion16;
	HObject  ho_RegionIntersection14, ho_ImageReduced34, ho_ImageClosing27;
	HObject  ho_ImageSub24, ho_Region44, ho_RegionClosing12;
	HObject  ho_RegionOpening8, ho_ConnectedRegions46, ho_RegionMoved37;
	HObject  ho_RegionDilation32, ho_RegionDilation33, ho_ImageReduced38;
	HObject  ho_ImageClosing30, ho_ImageClosing32, ho_ImageOpening34;
	HObject  ho_ImageSub26, ho_Region48, ho_ConnectedRegions51;
	HObject  ho_SelectedRegions53, ho_RegionMoved36, ho_RegionDilation29;
	HObject  ho_RegionDilation30, ho_ImageReduced35, ho_ImageOpening33;
	HObject  ho_ImageSub25, ho_Region45, ho_RegionIntersection15;
	HObject  ho_ConnectedRegions47, ho_ImageReduced39, ho_ImageOpening35;
	HObject  ho_ImageClosing34, ho_ImageOpening36, ho_ImageSub27;
	HObject  ho_Region50, ho_RegionFillUp11, ho_ConnectedRegions52;
	HObject  ho_SelectedRegions54, ho_RegionMoved38, ho_ImageReduced42;
	HObject  ho_ImageClosing35, ho_ImageOpening38, ho_ImageOpening39;
	HObject  ho_ImageSub30, ho_Region52, ho_ConnectedRegions56;
	HObject  ho_SelectedRegions57, ho_RegionDilation34, ho_ImageSub29;
	HObject  ho_Region53, ho_RegionDifference36, ho_ConnectedRegions57;
	HObject  ho_SelectedRegions58, ho_ImageReduced41, ho_ImageMedian16;
	HObject  ho_ImageOpening37, ho_ImageSub28, ho_Region51, ho_ConnectedRegions53;
	HObject  ho_SelectedRegions55, ho_ImageReduced29, ho_ImageMedian11;
	HObject  ho_ImageTexture6, ho_ImageTexture7, ho_ImageResult3;
	HObject  ho_Region38, ho_RegionErosion12, ho_RegionIntersection10;
	HObject  ho_RegionFillUp4, ho_RegionClosing9, ho_RegionFillUp5;
	HObject  ho_RegionClosing10, ho_RegionOpening3, ho_RegionDifference26;
	HObject  ho_RegionMoved32, ho_RegionMoved34, ho_RegionIntersection11;
	HObject  ho_ConnectedRegions38, ho_SelectedRegions45, ho_ROI_01;
	HObject  ho_ROI_02, ho_ImageReduced30, ho_ImageClosing25;
	HObject  ho_ImageOpening24, ho_ImageScaled8, ho_Region39;
	HObject  ho_RegionFillUp6, ho_RegionOpening5, ho_ConnectedRegions39;
	HObject  ho_SelectedRegions46, ho_RegionTrans20, ho_RegionErosion13;
	HObject  ho_RegionUnion11, ho_ImageReduced31, ho_ImageMedian14;
	HObject  ho_ImageOpening29, ho_ImageScaled12, ho_ImageOpening31;
	HObject  ho_ImageSub22, ho_Region43, ho_ConnectedRegions42;
	HObject  ho_SelectedRegions48, ho_SelectedRegions49, ho_RegionMoved33;
	HObject  ho_RegionDifference28, ho_RegionDilation23, ho_RegionOpening11;
	HObject  ho_RegionUnion16, ho_RegionUnion17, ho_RegionDilation26;
	HObject  ho_RegionDilation28, ho_RegionOpening13, ho_RegionUnion18;
	HObject  ho_RegionDifference31, ho_ImageOpening26, ho_ImageSub20;
	HObject  ho_Region42, ho_RegionIntersection12, ho_ImageOpening27;
	HObject  ho_ImageSub21, ho_Region40, ho_RegionIntersection13;
	HObject  ho_RegionUnion14, ho_RegionUnion15, ho_RegionOpening10;
	HObject  ho_ConnectedRegions41, ho_SelectedRegions47, ho_ImageReduced26;
	HObject  ho_ImageOpening20, ho_ImageClosing24, ho_ImageMedian10;
	HObject  ho_ImageScaled7, ho_Region29, ho_RegionClosing7;
	HObject  ho_ConnectedRegions36, ho_SelectedRegions41, ho_RegionTrans18;
	HObject  ho_RegionMoved27, ho_RegionMoved28, ho_RegionDifference25;
	HObject  ho_RegionIntersection8, ho_RegionErosion10, ho_RegionTrans19;
	HObject  ho_ImageReduced28, ho_ImageOpening22, ho_ImageOpening23;
	HObject  ho_ImageSub19, ho_Region35, ho_RegionErosion11;
	HObject  ho_RegionMoved29, ho_RegionMoved35, ho_RegionDifference27;
	HObject  ho_RegionErosion15, ho_RegionMoved40, ho_RegionUnion13;
	HObject  ho_RegionIntersection9, ho_ConnectedRegions37, ho_SelectedRegions44;
	HObject  ho_RegionMoved9, ho_RegionAffineTrans1, ho_RegionClosing4;
	HObject  ho_RegionDilation9, ho_ROI_00, ho_ImageReduced;
	HObject  ho_ImageClosing, ho_ImageSub, ho_Region1, ho_RegionCount2;
	HObject  ho_RegionCount3, ho_RegionFillUp, ho_ConnectedRegions;
	HObject  ho_SelectedRegions, ho_RegionUnion, ho_RegionDilation;
	HObject  ho_Region, ho_RegionCount, ho_RegionCount1, ho_ConnectedRegions7;
	HObject  ho_RegionDifference, ho_RegionDifference32, ho_ImageReduced3;
	HObject  ho_ImageOpening2, ho_ImageOpening3, ho_ImageMedian3;
	HObject  ho_ImageClosing3, ho_ImageSub2, ho_Region4, ho_ConnectedRegions2;
	HObject  ho_SelectedRegions3, ho_RegionDilation15, ho_ImageReduced17;
	HObject  ho_ImageOpening10, ho_ImageClosing18, ho_ImageMedian4;
	HObject  ho_ImageScaled6, ho_Region20, ho_RegionClosing5;
	HObject  ho_ConnectedRegions16, ho_SelectedRegions24, ho_RegionTrans10;
	HObject  ho_RegionMoved14, ho_RegionMoved15, ho_RegionDifference8;
	HObject  ho_RegionDilation19, ho_ImageReduced18, ho_ImageRank;
	HObject  ho_ImageClosing19, ho_ImageSub14, ho_Region21, ho_RegionIntersection6;
	HObject  ho_ConnectedRegions23, ho_SelectedRegions25, ho_SelectedRegions26;
	HObject  ho_SelectedRegions31, ho_SelectedRegions32, ho_RegionUnion9;
	HObject  ho_ConnectedRegions24, ho_ImageReduced32, ho_ImageOpening12;
	HObject  ho_ImageMedian24, ho_ImageScaled15, ho_Region36;
	HObject  ho_RegionFillUp10, ho_RegionOpening9, ho_ConnectedRegions43;
	HObject  ho_SelectedRegions42, ho_Rectangle, ho_RegionMoved77;
	HObject  ho_RegionMoved78, ho_RegionDifference45, ho_RegionDilation10;
	HObject  ho_ImageReduced8, ho_ImageOpening25, ho_ImageClosing33;
	HObject  ho_ImageScaled11, ho_Region11, ho_ConnectedRegions9;
	HObject  ho_SelectedRegions79, ho_RegionTrans21, ho_RegionDilation51;
	HObject  ho_RegionMoved61, ho_RegionTrans22, ho_RegionDilation52;
	HObject  ho_ImageReduced33, ho_ImageOpening13, ho_ImageScaled16;
	HObject  ho_Region37, ho_RegionDifference29, ho_RegionDifference30;
	HObject  ho_ConnectedRegions44, ho_SelectedRegions43, ho_RegionFillUp3;
	HObject  ho_RegionDifference10, ho_RegionMoved17, ho_RegionMoved19;
	HObject  ho_RegionDifference20, ho_RegionDilation20, ho_ImageReduced19;
	HObject  ho_ImageClosing20, ho_ImageOpening11, ho_ImageMedian5;
	HObject  ho_ImageOpening16, ho_ImageSub17, ho_Region22, ho_ConnectedRegions25;
	HObject  ho_SelectedRegions33, ho_SelectedRegions35, ho_ROI_0lc;
	HObject  ho_ImageReduced40, ho_ImageMedian42, ho_ImageScaled32;
	HObject  ho_Region59, ho_RegionFillUp9, ho_RegionOpening39;
	HObject  ho_RegionTrans32, ho_RegionMoved31, ho_RegionDifference44;
	HObject  ho_RegionTrans9, ho_RegionMoved103, ho_ImageReduced111;
	HObject  ho_ImageReduced14, ho_ImageClosing16, ho_ImageScaled5;
	HObject  ho_Region18, ho_ConnectedRegions20, ho_SelectedRegions20;
	HObject  ho_RegionTrans24, ho_RegionDilation53, ho_RegionTrans25;
	HObject  ho_Rectangle1, ho_RegionDifference19, ho_RegionTrans7;
	HObject  ho_RegionDilation17, ho_RegionDilation18, ho_RegionDifference12;
	HObject  ho_ImageReduced15, ho_ImageOpening8, ho_ImageClosing17;
	HObject  ho_ImageSub9, ho_Region19, ho_ConnectedRegions21;
	HObject  ho_SelectedRegions21, ho_ConnectedRegions22, ho_SelectedRegions22;
	HObject  ho_ImageReduced13, ho_ImageOpening7, ho_ImageClosing15;
	HObject  ho_ImageMedian12, ho_ImageScaled3, ho_Region17;
	HObject  ho_ConnectedRegions17, ho_SelectedRegions18, ho_RegionFillUp7;
	HObject  ho_RegionTrans5, ho_RegionMoved18, ho_RegionIntersection4;
	HObject  ho_RegionTrans6, ho_RegionDifference11, ho_RegionOpening4;
	HObject  ho_ConnectedRegions18, ho_SelectedRegions19, ho_ImageReduced7;
	HObject  ho_ImageClosing10, ho_ImageScaled, ho_Region10;
	HObject  ho_ROI_00L, ho_ImageReduced27, ho_ImageClosing26;
	HObject  ho_ImageSub13, ho_Region30, ho_RegionCount6, ho_RegionCount7;
	HObject  ho_ConnectedRegions35, ho_SelectedRegions34, ho_RegionDifference3;
	HObject  ho_SelectedRegions2, ho_RegionDilation3, ho_Rectangle2;
	HObject  ho_ImageClosing28, ho_ImageSub15, ho_Region33, ho_RegionCount8;
	HObject  ho_RegionCount9, ho_ConnectedRegions40, ho_SelectedRegions39;
	HObject  ho_RegionUnion12, ho_RegionErosion7, ho_ROI_0L;
	HObject  ho_RegionDifference24, ho_RegionDifference7, ho_ImageTexture;
	HObject  ho_ImageTexture1, ho_ImageResult, ho_Region2, ho_RegionCount4;
	HObject  ho_RegionCount5, ho_RegionFillUp2, ho_ConnectedRegions5;
	HObject  ho_SelectedRegions5, ho_RegionDilation1, ho_RegionDilation7;
	HObject  ho_RegionDifference5, ho_RegionDilation8, ho_ImageReduced1;
	HObject  ho_ImageZoomed, ho_ImageMedian6, ho_ImageClosing1;
	HObject  ho_ImageMedian7, ho_ImageClosing6, ho_ImageSub4;
	HObject  ho_Region8, ho_RegionZoom, ho_RegionIntersection1;
	HObject  ho_ConnectedRegions6, ho_SelectedRegions6, ho_RegionDilation21;
	HObject  ho_ImageReduced22, ho_ImageOpening19, ho_ImageMedian8;
	HObject  ho_ImageClosing21, ho_ImageSub18, ho_Region23, ho_RegionIntersection7;
	HObject  ho_ConnectedRegions26, ho_SelectedRegions36, ho_RegionDifference14;
	HObject  ho_RegionDilation11, ho_ImageReduced12, ho_ImageClosing13;
	HObject  ho_ImageOpening6, ho_ImageClosing14, ho_ImageSub10;
	HObject  ho_Region14, ho_ConnectedRegions14, ho_SelectedRegions16;
	HObject  ho_ImageScaled4, ho_Region16, ho_ConnectedRegions19;
	HObject  ho_RegionDilation16, ho_RegionUnion3, ho_RegionDifference15;
	HObject  ho_RegionFillUp1, ho_ConnectedRegions45, ho_SelectedRegions50;
	HObject  ho_ImageReduced20, ho_ImageClosing22, ho_ImageScaled9;
	HObject  ho_Region24, ho_RegionOpening6, ho_RegionTrans11;
	HObject  ho_RegionMoved22, ho_RegionMoved23, ho_RegionDifference16;
	HObject  ho_RegionMoved24, ho_RegionDifference17, ho_RegionMoved25;
	HObject  ho_RegionDilation24, ho_RegionMoved65, ho_ImageReduced21;
	HObject  ho_ImageOpening9, ho_ImageClosing23, ho_ImageScaled10;
	HObject  ho_Region25, ho_RegionOpening7, ho_RegionTrans14;
	HObject  ho_ConnectedRegions30, ho_SelectedRegions30, ho_EmptyObject;
	HObject  ho_RegionUnion7, ho_RegionTrans15, ho_RegionDilation27;
	HObject  ho_RegionMoved30, ho_RegionOpening12, ho_ConnectedRegions31;
	HObject  ho_RegionTrans12, ho_RegionDilation25, ho_RegionMoved26;
	HObject  ho_ImageSub11, ho_Region26, ho_RegionDifference18;
	HObject  ho_ConnectedRegions27, ho_SelectedRegions27, ho_RegionUnion8;
	HObject  ho_ConnectedRegions10, ho_SelectedRegions7, ho_RegionOpening;
	HObject  ho_SelectedRegions85, ho_RegionDifference34, ho_ImageReduced2;
	HObject  ho_ImageOpening14, ho_ImageClosing29, ho_Region34;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions17, ho_ImageSub12;
	HObject  ho_Region27, ho_RegionUnion1, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions12, ho_Region31, ho_RegionDifference1;
	HObject  ho_ConnectedRegions34, ho_SelectedRegions28, ho_SortedRegions4;
	HObject  ho_ObjectSelected5, ho_RegionDilation4, ho_ImageReduced11;
	HObject  ho_ImageOpening15, ho_ImageClosing4, ho_ImageOpening17;
	HObject  ho_ImageSub16, ho_Region6, ho_ConnectedRegions3;
	HObject  ho_SelectedRegions8, ho_ImageClosing2, ho_ImageSub1;
	HObject  ho_Region3, ho_ConnectedRegions1, ho_SelectedRegions1;
	HObject  ho_RegionDilation2, ho_RegionMoved5, ho_RegionUnion2;
	HObject  ho_RegionDilation12, ho_RegionDifference2, ho_RegionErosion;
	HObject  ho_ImageScaled2, ho_Region32, ho_RegionIntersection2;
	HObject  ho_RegionClosing1, ho_ImageReduced9, ho_ImageClosing11;
	HObject  ho_ImageScaled1, ho_Region12, ho_RegionTrans1, ho_ImageReduced37;
	HObject  ho_ImageClosing31, ho_ImageScaled18, ho_Region46;
	HObject  ho_RegionClosing8, ho_ConnectedRegions54, ho_SelectedRegions52;
	HObject  ho_RegionErosion4, ho_ImageOpening18, ho_ImageSub3;
	HObject  ho_Region41, ho_ConnectedRegions50, ho_ImageReduced121;
	HObject  ho_ImageOpening41, ho_ImageSub82, ho_Region153;
	HObject  ho_RegionClosing76, ho_ConnectedRegions213, ho_SelectedRegions220;
	HObject  ho_RegionTrans74, ho_RegionDilation145, ho_RegionDilation146;
	HObject  ho_RegionDifference151, ho_ConnectedRegions214;
	HObject  ho_SortedRegions15, ho_ObjectSelected13, ho_ImageReduced23;
	HObject  ho_ImageMedian13, ho_ImageOpening28, ho_ImageClosing55;
	HObject  ho_ImageSub114, ho_Region128, ho_ConnectedRegions189;
	HObject  ho_SelectedRegions199, ho_RegionUnion62, ho_RegionClosing69;
	HObject  ho_ConnectedRegions190, ho_SortedRegions11, ho_ObjectSelected7;
	HObject  ho_RegionTrans55, ho_ImageReduced132, ho_ImageOpening42;
	HObject  ho_ImageSub115, ho_Region159, ho_ConnectedRegions235;
	HObject  ho_SelectedRegions238, ho_RegionDilation118, ho_RegionTrans71;
	HObject  ho_RegionMoved39, ho_RegionDifference35, ho_RegionMoved117;
	HObject  ho_RegionDifference150, ho_RegionMoved118, ho_ImageReduced120;
	HObject  ho_ImageClosing74, ho_ImageSub81, ho_Region152;
	HObject  ho_RegionOpening96, ho_RegionTrans72, ho_RegionTrans73;
	HObject  ho_RegionDilation142, ho_RegionMoved119, ho_RegionOpening97;
	HObject  ho_RegionMoved120, ho_RegionDilation143, ho_RegionDilation144;
	HObject  ho_RegionUnion71, ho_RegionDilation119, ho_RegionUnion72;
	HObject  ho_RegionTrans56, ho_RegionMoved93, ho_RegionDifference152;
	HObject  ho_RegionDifference130, ho_RegionDifference131;
	HObject  ho_RegionDifference153, ho_RegionDilation147, ho_RegionDifference154;
	HObject  ho_RegionErosion3, ho_RegionClosing2, ho_RegionErosion1;
	HObject  ho_RegionMoved16, ho_ROI_0s, ho_RegionClosing3;
	HObject  ho_RegionMoved6, ho_RegionErosion2, ho_ImageReduced100;
	HObject  ho_ImageMedian89, ho_ImageOpening30, ho_ImageSub117;
	HObject  ho_Region135, ho_ConnectedRegions186, ho_SelectedRegions196;
	HObject  ho_SelectedRegions29, ho_RegionMoved10, ho_ImageReduced5;
	HObject  ho_ImageOpening1, ho_ImageMedian, ho_ImageClosing8;
	HObject  ho_ImageSub6, ho_Region7, ho_ConnectedRegions11;
	HObject  ho_SelectedRegions9, ho_ImageReduced58, ho_ImageClosing47;
	HObject  ho_ImageScaled28, ho_Region63, ho_RegionClosing16;
	HObject  ho_RegionOpening18, ho_RegionTrans34, ho_RegionMoved;
	HObject  ho_RegionIntersection, ho_RegionMoved1, ho_RegionIntersection3;
	HObject  ho_RegionErosion5, ho_RegionMoved2, ho_RegionMoved11;
	HObject  ho_RegionMoved3, ho_RegionMoved4, ho_RegionClosing;
	HObject  ho_ConnectedRegions167, ho_SelectedRegions114, ho_RegionUnion67;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_zoom, hv_ac, hv_af, hv_S, hv_C, hv_I;
	HTuple  hv_GenParamValue, hv_GenParamValue1, hv_GenParamValue2;
	HTuple  hv_GenParamValue3, hv_GenParamValue4, hv_Index;
	HTuple  hv_f, hv_at, hv_dd, hv_Number17, hv_Number2, hv_Number8;
	HTuple  hv_Number15, hv_Number7, hv_Number10, hv_Number12;
	HTuple  hv_Row11, hv_Column11, hv_Row21, hv_Column21, hv_r;
	HTuple  hv_c, hv_Number16, hv_Number6, hv_Number1, hv_Height2;
	HTuple  hv_Width2, hv_Ratio1, hv_Mean1, hv_Deviation1, hv_m;
	HTuple  hv_m1, hv_Number11, hv_Row1, hv_Column1, hv_Row2;
	HTuple  hv_Column2, hv_Width1, hv_Height1, hv_Number4, hv_Area;
	HTuple  hv_Row, hv_Column, hv_Number5, hv_Area1, hv_Row3;
	HTuple  hv_Column3, hv_Number, hv_Number9, hv_Number27;
	HTuple  hv_Number28, hv_Number3, hv_w, hv_Area2, hv_Row4;
	HTuple  hv_Column4, hv_Area3, hv_Row5, hv_Column5, hv_Number14;
	HTuple  hv_Number13, hv_Number24, hv_Number52, hv_Height12;
	HTuple  hv_Width12, hv_Ratio13, hv_Number51, hv_Index10;
	HTuple  hv_Number39, hv_Exception, hv___Tmp_Ctrl_Dict_Init_0;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1, hv___Tmp_Ctrl_Dict_Init_2;
	HTuple  hv___Tmp_Ctrl_Dict_Init_3, hv___Tmp_Ctrl_Dict_Init_4;
	HTuple  hv___Tmp_Ctrl_Dict_Init_5, hv___Tmp_Ctrl_Dict_Init_6;
	HTuple  hv___Tmp_Ctrl_Dict_Init_10, hv___Tmp_Ctrl_Dict_Init_12;
	HTuple  hv___Tmp_Ctrl_Dict_Init_13, hv___Tmp_Ctrl_Dict_Init_14;
	HTuple  hv___Tmp_Ctrl_Dict_Init_17, hv___Tmp_Ctrl_Dict_Init_18;
	HTuple  hv___Tmp_Ctrl_Dict_Init_19, hv___Tmp_Ctrl_Dict_Init_22;
	HTuple  hv___Tmp_Ctrl_Dict_Init_23, hv___Tmp_Ctrl_Dict_Init_24;
	HTuple  hv___Tmp_Ctrl_Dict_Init_27, hv___Tmp_Ctrl_Dict_Init_29;
	HTuple  hv___Tmp_Ctrl_Dict_Init_30, hv___Tmp_Ctrl_Dict_Init_31;
	HTuple  hv___Tmp_Ctrl_Dict_Init_35, hv___Tmp_Ctrl_Dict_Init_37;
	HTuple  hv___Tmp_Ctrl_Dict_Init_38, hv___Tmp_Ctrl_Dict_Init_39;
	HTuple  hv___Tmp_Ctrl_Dict_Init_42, hv___Tmp_Ctrl_Dict_Init_43;
	HTuple  hv___Tmp_Ctrl_Dict_Init_44, hv___Tmp_Ctrl_Dict_Init_47;
	HTuple  hv___Tmp_Ctrl_Dict_Init_48, hv___Tmp_Ctrl_Dict_Init_49;
	HTuple  hv___Tmp_Ctrl_Dict_Init_52, hv___Tmp_Ctrl_Dict_Init_54;
	HTuple  hv___Tmp_Ctrl_Dict_Init_55, hv___Tmp_Ctrl_Dict_Init_56;
	HTuple  hv___Tmp_Ctrl_Dict_Init_59, hv___Tmp_Ctrl_Dict_Init_62;
	HTuple  hv___Tmp_Ctrl_Dict_Init_64, hv___Tmp_Ctrl_Dict_Init_66;
	HTuple  hv___Tmp_Ctrl_Dict_Init_76, hv___Tmp_Ctrl_Dict_Init_77;
	HTuple  hv___Tmp_Ctrl_Dict_Init_78, hv___Tmp_Ctrl_Dict_Init_79;
	HTuple  hv___Tmp_Ctrl_Dict_Init_82, hv___Tmp_Ctrl_Dict_Init_83;
	HTuple  hv___Tmp_Ctrl_Dict_Init_84, hv___Tmp_Ctrl_Dict_Init_85;
	HTuple  hv___Tmp_Ctrl_Dict_Init_88, hv___Tmp_Ctrl_Dict_Init_89;
	HTuple  hv___Tmp_Ctrl_Dict_Init_90, hv___Tmp_Ctrl_Dict_Init_92;
	HTuple  hv___Tmp_Ctrl_Dict_Init_95, hv___Tmp_Ctrl_Dict_Init_96;
	HTuple  hv___Tmp_Ctrl_Dict_Init_97, hv___Tmp_Ctrl_Dict_Init_98;
	HTuple  hv___Tmp_Ctrl_Dict_Init_101, hv___Tmp_Ctrl_Dict_Init_102;
	HTuple  hv___Tmp_Ctrl_Dict_Init_103, hv___Tmp_Ctrl_Dict_Init_106;
	HTuple  hv___Tmp_Ctrl_Dict_Init_107, hv___Tmp_Ctrl_Dict_Init_110;
	HTuple  hv___Tmp_Ctrl_Dict_Init_111, hv___Tmp_Ctrl_Dict_Init_113;
	HTuple  hv___Tmp_Ctrl_Dict_Init_114, hv___Tmp_Ctrl_Dict_Init_115;
	HTuple  hv___Tmp_Ctrl_Dict_Init_118, hv___Tmp_Ctrl_Dict_Init_119;
	HTuple  hv___Tmp_Ctrl_Dict_Init_120, hv___Tmp_Ctrl_Dict_Init_123;
	HTuple  hv___Tmp_Ctrl_Dict_Init_124, hv___Tmp_Ctrl_Dict_Init_125;
	HTuple  hv___Tmp_Ctrl_Dict_Init_128, hv___Tmp_Ctrl_Dict_Init_129;
	HTuple  hv___Tmp_Ctrl_Dict_Init_130, hv___Tmp_Ctrl_Dict_Init_133;
	HTuple  hv___Tmp_Ctrl_Dict_Init_134, hv___Tmp_Ctrl_Dict_Init_137;
	HTuple  hv___Tmp_Ctrl_Dict_Init_138, hv___Tmp_Ctrl_Dict_Init_139;
	HTuple  hv___Tmp_Ctrl_Dict_Init_142, hv___Tmp_Ctrl_Dict_Init_143;
	HTuple  hv___Tmp_Ctrl_Dict_Init_144, hv___Tmp_Ctrl_Dict_Init_147;
	HTuple  hv___Tmp_Ctrl_Dict_Init_148, hv___Tmp_Ctrl_Dict_Init_149;
	HTuple  hv___Tmp_Ctrl_Dict_Init_151, hv___Tmp_Ctrl_Dict_Init_154;
	HTuple  hv___Tmp_Ctrl_Dict_Init_155, hv___Tmp_Ctrl_Dict_Init_156;
	HTuple  hv___Tmp_Ctrl_Dict_Init_158, hv___Tmp_Ctrl_Dict_Init_161;
	HTuple  hv___Tmp_Ctrl_Dict_Init_163, hv___Tmp_Ctrl_Dict_Init_165;
	HTuple  hv___Tmp_Ctrl_Dict_Init_166, hv___Tmp_Ctrl_Dict_Init_167;
	HTuple  hv___Tmp_Ctrl_Dict_Init_170, hv___Tmp_Ctrl_Dict_Init_171;
	HTuple  hv___Tmp_Ctrl_Dict_Init_172, hv___Tmp_Ctrl_Dict_Init_173;
	HTuple  hv___Tmp_Ctrl_Dict_Init_174, hv___Tmp_Ctrl_Dict_Init_177;
	HTuple  hv___Tmp_Ctrl_Dict_Init_178, hv___Tmp_Ctrl_Dict_Init_179;
	HTuple  hv___Tmp_Ctrl_Dict_Init_181, hv___Tmp_Ctrl_Dict_Init_182;
	HTuple  hv___Tmp_Ctrl_Dict_Init_183, hv___Tmp_Ctrl_Dict_Init_184;
	HTuple  hv___Tmp_Ctrl_Dict_Init_187, hv___Tmp_Ctrl_Dict_Init_188;
	HTuple  hv___Tmp_Ctrl_Dict_Init_189, hv___Tmp_Ctrl_Dict_Init_191;
	HTuple  hv___Tmp_Ctrl_Dict_Init_194, hv___Tmp_Ctrl_Dict_Init_195;
	HTuple  hv___Tmp_Ctrl_Dict_Init_196, hv___Tmp_Ctrl_Dict_Init_198;
	HTuple  hv___Tmp_Ctrl_Dict_Init_201, hv___Tmp_Ctrl_Dict_Init_202;
	HTuple  hv___Tmp_Ctrl_Dict_Init_203, hv___Tmp_Ctrl_Dict_Init_205;
	HTuple  hv___Tmp_Ctrl_Dict_Init_206, hv___Tmp_Ctrl_Dict_Init_207;
	HTuple  hv___Tmp_Ctrl_Dict_Init_210, hv___Tmp_Ctrl_Dict_Init_211;
	HTuple  hv___Tmp_Ctrl_Dict_Init_212, hv___Tmp_Ctrl_Dict_Init_213;
	HTuple  hv___Tmp_Ctrl_Dict_Init_214, hv___Tmp_Ctrl_Dict_Init_215;
	HTuple  hv___Tmp_Ctrl_Dict_Init_218, hv___Tmp_Ctrl_Dict_Init_221;
	HTuple  hv___Tmp_Ctrl_Dict_Init_224, hv___Tmp_Ctrl_Dict_Init_227;
	HTuple  hv___Tmp_Ctrl_Dict_Init_230, hv___Tmp_Ctrl_Dict_Init_233;
	HTuple  hv___Tmp_Ctrl_Dict_Init_236, hv___Tmp_Ctrl_Dict_Init_238;
	HTuple  hv___Tmp_Ctrl_Dict_Init_241, hv___Tmp_Ctrl_Dict_Init_244;
	HTuple  hv___Tmp_Ctrl_Dict_Init_247, hv___Tmp_Ctrl_Dict_Init_249;
	HTuple  hv___Tmp_Ctrl_Dict_Init_250, hv___Tmp_Ctrl_Dict_Init_251;
	HTuple  hv___Tmp_Ctrl_Dict_Init_253, hv___Tmp_Ctrl_Dict_Init_256;
	HTuple  hv___Tmp_Ctrl_Dict_Init_259, hv___Tmp_Ctrl_Dict_Init_262;
	HTuple  hv___Tmp_Ctrl_Dict_Init_265, hv___Tmp_Ctrl_0, hv___Tmp_Ctrl_Type;

	try
	{
		//[71] := CRT过切
		//[72] := CRT碰伤
		//[73] := A基准塑胶缺口
		//[74] := A基准压伤
		//[75] := A基准塑胶露铣
		//[76] := A基准塑胶刀纹
		//[77] := RT塑胶压伤
		//[78] := CLC塑胶过切
		//[79] := CG塑胶压伤
		//[80] := CLC打磨痕
		//[81] := CLC过切
		//[82] := CLC划伤
		//[83] := 焊缝槽
		//[84] := CLC压伤
		//[85] := CLC缺口
		//[86] := 螺纹孔
		//[87] := 塑胶漏铁
		//[88] := 平面溢胶
		//[89] := 焊接变形
		//[90] := 猪鼻子
		//[91] := 内腔毛刺
		//[92] := SIM毛刺
		//[93] := 听筒孔毛刺
		//[94] := NQ毛刺
		//[95] := SF毛刺
		//[96] := 堵胶
		//[97] := 抓胶槽
		//[98] := ***
		//[99] := ***
		//[100] := ***
		hv_zoom = 1;
		//字典参数操作
		//读：1
		//写：-1
		//无操作：0
		hv_ac = 1;
		//
		hv_af = 1;

		hv_S = hv_StaNum + "";
		hv_C = hv_CamNum + "";
		hv_I = hv_ImageNum + "";
		if (0 != (int(hv_ac == -1)))
		{
			GetDictParam(hv_AlgorithmConfig, "keys", HTuple(), &hv_GenParamValue);
			if (0 != (int((hv_GenParamValue.TupleFind("Station"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
				SetDictTuple(hv_AlgorithmConfig, "Station", hv___Tmp_Ctrl_Dict_Init_0);
				hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			}
			GetDictParam(hv_AlgorithmConfig.TupleGetDictTuple("Station"), "keys", HTuple(),
				&hv_GenParamValue1);
			if (0 != (int((hv_GenParamValue1.TupleFind(hv_S))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
				SetDictTuple(hv_AlgorithmConfig.TupleGetDictTuple("Station"), hv_S, hv___Tmp_Ctrl_Dict_Init_1);
				hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
				SetDictTuple((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S),
					"Camera", hv___Tmp_Ctrl_Dict_Init_2);
				hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
			}
			GetDictParam(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
				"keys", HTuple(), &hv_GenParamValue2);
			if (0 != (int((hv_GenParamValue2.TupleFind(hv_C))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
				SetDictTuple(((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera"),
					hv_C, hv___Tmp_Ctrl_Dict_Init_3);
				hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
				SetDictTuple((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C),
					"Image", hv___Tmp_Ctrl_Dict_Init_4);
				hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
			}
			GetDictParam(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
				"keys", HTuple(), &hv_GenParamValue3);
			if (0 != (int((hv_GenParamValue3.TupleFind(hv_I))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
				SetDictTuple(((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image"),
					hv_I, hv___Tmp_Ctrl_Dict_Init_5);
				hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);
			}
			GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
				"keys", HTuple(), &hv_GenParamValue4);
			if (0 != (int((hv_GenParamValue4.TupleFind("DefectDetectionAlgorithms"))<0)))
			{
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
				SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
					"DefectDetectionAlgorithms", hv___Tmp_Ctrl_Dict_Init_6);
				hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
			}

		}


		GenEmptyObj(&ho_Reg);

		CreateDict(&(*hv_dt));
		GenEmptyRegion(&ho_e);
		for (hv_Index = 71; hv_Index <= 100; hv_Index += 1)
		{
			hv_f = hv_Index + "";
			SetDictObject(ho_e, (*hv_dt), hv_f);
		}
		if (0 != (HTuple(int(hv_StaNum == 5)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 1)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 2232.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1916.33, 2002.34, 2431.77, 2536.33);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2024).Append(2440)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测转角
				GenRectangle1(&ho_ROI_0, 1288.52, -70.0035, 2906.14, 1609.74);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_10);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_10);
				hv___Tmp_Ctrl_Dict_Init_10 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 1861.68, 1633.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_12);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_12);
					hv___Tmp_Ctrl_Dict_Init_12 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_13);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_13);
					hv___Tmp_Ctrl_Dict_Init_13 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_14);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_14);
					hv___Tmp_Ctrl_Dict_Init_14 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1540.92, 61.0251, 2409.93, 930.006);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(1661).Append(766)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}
					//opening_circle (RegionDifference6, RegionOpening1, 1.5)

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_17);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_17);
					hv___Tmp_Ctrl_Dict_Init_17 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_18);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_18);
					hv___Tmp_Ctrl_Dict_Init_18 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_19);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_19);
					hv___Tmp_Ctrl_Dict_Init_19 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1528.27, 3132.63, 2412.12, 4136.4);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2220).Append(3426)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_22);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_22);
					hv___Tmp_Ctrl_Dict_Init_22 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_23);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_23);
					hv___Tmp_Ctrl_Dict_Init_23 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_24);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_24);
					hv___Tmp_Ctrl_Dict_Init_24 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}

			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1559.17, -19.6011, 2399.21, 853.518);
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2222).Append(626)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测转角
				GenRectangle1(&ho_ROI_0, 1315.58, 2462.37, 3111.96, 4135.88);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_27);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_27);
				hv___Tmp_Ctrl_Dict_Init_27 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 2100.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_29);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_29);
					hv___Tmp_Ctrl_Dict_Init_29 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_30);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_30);
					hv___Tmp_Ctrl_Dict_Init_30 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_31);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_31);
					hv___Tmp_Ctrl_Dict_Init_31 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(90)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 10)))
			{

				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2236.35, 401.831, 2763.15, 952);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2655).Append(564)));
				SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//塑胶检测区域
				GenRectangle1(&ho_ROI_0, 1567.07, -19.4465, 1703.73, 1029.79);
				GenRectangle1(&ho_TMP_Region, 1566.13, 1027.72, 1678.02, 2315.81);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1571.03, 2314.78, 1806.44, 2367.59);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1611.19, 2363.23, 1805.46, 2758.46);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1629.92, 2754.35, 1812.96, 2959.3);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1686.85, 2960.09, 1813.24, 3182.73);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1647.38, 2960.43, 1685.78, 3037.69);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1739.69, 3184.82, 1852.63, 3286.24);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1778.14, 3290.35, 1913.86, 3361.81);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1822.69, 3360.77, 1976.01, 3423.94);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1865.17, 3426.74, 2039.47, 3476.45);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1918.25, 3456.76, 2094.36, 3532.36);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1992.19, 3520.76, 2164.98, 3593.96);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2087.84, 3579.42, 2285.71, 3651.91);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2163.74, 3647.21, 2286.74, 3694.05);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2295.23, 3608, 2440.26, 3749.87);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2444.52, 3643.23, 2950.85, 3784.68);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2946.45, 3605.63, 3066.52, 3795.94);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1676.7, 2268.21, 1739.67, 2329.7);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1707.41, 3183.21, 1740.4, 3236.7);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1815.17, 3139.83, 1840.83, 3185.26);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1725, 3238.75, 1746.26, 3270.25);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1758.72, 3286.37, 1780.71, 3325.93);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1858.03, 3237.27, 1882.22, 3301.02);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1797.81, 3359.58, 1828.89, 3392.72);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1843.39, 3421.71, 1867.22, 3452.78);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1894.48, 3472.77, 1923.81, 3502.81);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1957.17, 3530.75, 1991.62, 3564.45);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2041.2, 3591.89, 2089.58, 3629.99);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2125.88, 3649.35, 2164, 3678.65);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2235.02, 3685.22, 2298.07, 3728.44);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1907.46, 3325.95, 1952.91, 3364.05);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1970.51, 3398.31, 2010.83, 3438.6);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1661.83, 3036.53, 1687.26, 3100.3);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1887.16, 2736.28, 176.8);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2244.76, 3411.61, 203.153);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				ClosingCircle(ho_ROI_0, &ho_ROI_0, 105);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//检测塑胶
				//dd := dict{}
				//dd.image := ImageAffineTrans
				//dd.SJLC := dict {}
				//dd.SJLC.region := ROI_0
				//DefectDetectionAlgorithms (dd, dt)
				//dev_display (Image)
				//dev_display (dd.resreg)
				DilationCircle(ho_ROI_0, &ho_RegionDilation6, 35);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation6, &ho_ImageReduced6);
				GrayClosingRect(ho_ImageReduced6, &ho_ImageClosing9, 3, 3);
				MedianRect(ho_ImageClosing9, &ho_ImageMedian1, 3, 3);
				GrayOpeningRect(ho_ImageMedian1, &ho_ImageOpening4, 20, 20);
				SubImage(ho_ImageOpening4, ho_ImageMedian1, &ho_ImageSub7, 4, 128);

				Threshold(ho_ImageSub7, &ho_Region9, 0, 35);
				Intersection(ho_Region9, ho_ROI_0, &ho_RegionIntersection5);
				Connection(ho_RegionIntersection5, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions10, "area", "and",
					30, 99999);
				//concat_obj (dt.['74'], SelectedRegions10, dt.['74'])

			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 2232.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1661.69, 2207.55, 2197.27, 2772.36);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(1765).Append(2603)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(-180)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测转角
				GenRectangle1(&ho_ROI_0, 1288.52, -70.0035, 2906.14, 1609.74);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_35);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_35);
				hv___Tmp_Ctrl_Dict_Init_35 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 1861.68, 1633.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_37);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_37);
					hv___Tmp_Ctrl_Dict_Init_37 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_38);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_38);
					hv___Tmp_Ctrl_Dict_Init_38 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_39);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_39);
					hv___Tmp_Ctrl_Dict_Init_39 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1539.28, 343.961, 2441.19, 1907.86);
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2221).Append(1698)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 3, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}
					OpeningCircle(ho_RegionDifference6, &ho_RegionDifference6, 1.5);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_42);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_42);
					hv___Tmp_Ctrl_Dict_Init_42 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_43);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_43);
					hv___Tmp_Ctrl_Dict_Init_43 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_44);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_44);
					hv___Tmp_Ctrl_Dict_Init_44 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(170)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 4104.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1864.52, 2746.74, 2356.96, 3528.82);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(1963).Append(3295)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "area", (HTuple(100000).Append(99999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1733.94, 4184.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 100);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_47);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_47);
					hv___Tmp_Ctrl_Dict_Init_47 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_48);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_48);
					hv___Tmp_Ctrl_Dict_Init_48 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_49);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_49);
					hv___Tmp_Ctrl_Dict_Init_49 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1119.87, 0.46, 1745.98, 2232.92);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1759.17, -19.6011, 2399.21, 853.518);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2031).Append(443)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测转角
				GenRectangle1(&ho_ROI_0, 1315.58, 2462.37, 3111.96, 4135.88);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_52);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_52);
				hv___Tmp_Ctrl_Dict_Init_52 = HTuple(HNULL);

				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "os", 235);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "gc_gray", (HTuple(190).Append(255)));
				SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "low", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//检测RT区域
				GenRectangle1(&ho_ROI_0, 1358.92, 0.68, 1633.94, 2200.17);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 30);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 10);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				SortRegion(ho_SelectedRegions61, &ho_SortedRegions, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions, &ho_SelectedRegions61, 1);
				ClosingRectangle1(ho_SelectedRegions61, &ho_SelectedRegions61, 10, 10);
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					ShapeTrans(ho_SelectedRegions61, &ho_RegionTrans, "convex");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans, &ho_ImageReduced4);
					GrayOpeningRect(ho_ImageReduced4, &ho_ImageOpening, 1, 30);
					GrayClosingRect(ho_ImageOpening, &ho_ImageClosing5, 1, 100);
					GrayClosingRect(ho_ImageClosing5, &ho_ImageClosing7, 11, 11);
					SubImage(ho_ImageClosing5, ho_ImageClosing7, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region5, 0, 30);
					Connection(ho_Region5, &ho_ConnectedRegions8);
					SelectShape(ho_ConnectedRegions8, &ho_SelectedRegions4, "width", "and",
						600, 99999);
					CountObj(ho_SelectedRegions4, &hv_Number2);
					if (0 != hv_Number2)
					{
						Union1(ho_SelectedRegions4, &ho_RegionUnion4);
						DilationRectangle1(ho_RegionUnion4, &ho_RegionDilation5, 5000, 100);
						MoveRegion(ho_RegionDilation5, &ho_RegionMoved7, 50, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved7, &ho_RegionDifference6
							);
					}
					else
					{
						MoveRegion(ho_SelectedRegions61, &ho_RegionMoved8, 8, 0);
						Difference(ho_SelectedRegions61, ho_RegionMoved8, &ho_RegionDifference6
							);
					}

					//检测RT
					CreateDict(&hv_dd);


					CreateDict(&hv___Tmp_Ctrl_Dict_Init_54);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_54);
					hv___Tmp_Ctrl_Dict_Init_54 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_55);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_55);
					hv___Tmp_Ctrl_Dict_Init_55 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_56);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_56);
					hv___Tmp_Ctrl_Dict_Init_56 = HTuple(HNULL);
					SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"), "gray",
						(HTuple(0).Append(100)));
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDifference6, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1403.79, 1751.63, 1718.29, 3926.83);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2437.56, 3521.72, 3008.26, 4107.01);
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2850).Append(3743)));
				SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测方孔
				GenRectangle1(&ho_ROI_0, 1846.56, 1230.2, 1919.44, 1404.46);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				DilationCircle(ho_ROI_0, &ho_RegionDilation31, 15);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation31, &ho_ImageReduced36
					);
				MedianRect(ho_ImageReduced36, &ho_ImageMedian15, 3, 3);
				TextureLaws(ho_ImageMedian15, &ho_ImageTexture8, "el", 5, 7);
				TextureLaws(ho_ImageMedian15, &ho_ImageTexture9, "le", 5, 7);
				AddImage(ho_ImageTexture8, ho_ImageTexture9, &ho_ImageResult4, 1, -80);
				Threshold(ho_ImageResult4, &ho_Region47, 0, 30);
				RankRegion(ho_Region47, &ho_RegionCount13, 5, 5, 10);
				FillUp(ho_RegionCount13, &ho_RegionFillUp8);
				Connection(ho_RegionFillUp8, &ho_ConnectedRegions48);
				SelectShape(ho_ConnectedRegions48, &ho_SelectedRegions15, "area", "and",
					4000, 99999);
				CountObj(ho_SelectedRegions15, &hv_Number8);
				if (0 != hv_Number8)
				{
					ClosingRectangle1(ho_SelectedRegions15, &ho_RegionClosing13, 15, 15);
					OpeningRectangle1(ho_RegionClosing13, &ho_RegionOpening14, 10, 10);
					Difference(ho_RegionClosing13, ho_RegionOpening14, &ho_RegionDifference33
						);
					Connection(ho_RegionDifference33, &ho_ConnectedRegions49);
					SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions51, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(5).Append(1)), (HTuple(99999).Append(333)));
					AffineTransRegion(ho_SelectedRegions51, &ho_SelectedRegions51, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					//concat_obj (dt.['94'], SelectedRegions51, dt.['94'])
				}

				//检测猪鼻子
				GenRectangle1(&ho_ROI_0, 1768.43, 1990.91, 1885.15, 2205.07);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				DilationCircle(ho_ROI_0, &ho_RegionDilation13, 15);

				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation13, &ho_ImageReduced16
					);

				TextureLaws(ho_ImageReduced16, &ho_ImageTexture2, "el", 5, 7);
				TextureLaws(ho_ImageReduced16, &ho_ImageTexture3, "le", 5, 7);
				AddImage(ho_ImageTexture2, ho_ImageTexture3, &ho_ImageResult1, 2.5, -130);
				Threshold(ho_ImageResult1, &ho_Region15, 90, 255);
				//毛刺
				RankRegion(ho_Region15, &ho_RegionCount11, 10, 10, 55);
				ShapeTrans(ho_RegionCount11, &ho_RegionTrans13, "rectangle1");
				MoveRegion(ho_RegionTrans13, &ho_RegionMoved20, -60, 0);
				Difference(ho_RegionCount11, ho_RegionMoved20, &ho_RegionDifference22);

				ClosingRectangle1(ho_RegionDifference22, &ho_RegionClosing6, 20, 5);
				OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening2, 40, 30);
				Difference(ho_RegionClosing6, ho_RegionOpening2, &ho_RegionDifference21);
				Connection(ho_RegionDifference21, &ho_ConnectedRegions28);
				SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions37, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(30).Append(2)), (HTuple(99999).Append(999)));
				AffineTransRegion(ho_SelectedRegions37, &ho_SelectedRegions37, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions37, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");


				RankRegion(ho_Region15, &ho_RegionCount10, 15, 15, 70);
				ShapeTrans(ho_RegionCount10, &ho_RegionTrans4, "rectangle1");
				MoveRegion(ho_RegionTrans4, &ho_RegionMoved12, -60, 0);
				Difference(ho_RegionCount10, ho_RegionMoved12, &ho_RegionDifference9);
				ShapeTrans(ho_RegionDifference9, &ho_RegionTrans8, "rectangle1");
				ErosionRectangle1(ho_RegionTrans8, &ho_RegionErosion6, 15, 15);
				//鼻子上
				ErosionRectangle1(ho_RegionErosion6, &ho_RegionErosion8, 15, 1);
				DilationRectangle1(ho_RegionErosion8, &ho_RegionDilation14, 1, 20);
				MoveRegion(ho_RegionDilation14, &ho_RegionMoved13, -25, 0);
				//检测塑胶
				CreateDict(&hv_dd);


				CreateDict(&hv___Tmp_Ctrl_Dict_Init_59);
				SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_59);
				hv___Tmp_Ctrl_Dict_Init_59 = HTuple(HNULL);

				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "cha", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "pig", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionMoved13, hv_dd.TupleGetDictTuple("SJ"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				//dd.SJ.GAUSS := dict {}
				//dd.SJ.GAUSS.sub := 8
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				//dev_display (dd.image)
				//dev_display (dd.resreg)

				//dev_display (ImageAffineTrans)
				//dev_display (RegionMoved13)
				//stop ()

				Difference(ho_RegionErosion6, ho_RegionDifference9, &ho_RegionDifference13
					);

				Connection(ho_RegionDifference13, &ho_ConnectedRegions15);
				SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions23, "area", "and",
					200, 999999);
				AffineTransRegion(ho_SelectedRegions23, &ho_SelectedRegions23, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions23, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

				//
				//gen_rectangle1 (ROI_0, 2365.92, 663.423, 2989.3, 1348.21)
				//affine_trans_region (ROI_0, ROI_0, at.hom_mat_tra, 'nearest_neighbor')
				//reduce_domain (ImageAffineTrans, ROI_0, ImageReduced10)
				//intensity (ROI_0, ImageReduced10, Mean, Deviation)
				//gray_opening_rect (ImageReduced10, ImageOpening5, 7, 7)
				//median_rect (ImageOpening5, ImageMedian2, 3, 3)
				//gray_closing_rect (ImageMedian2, ImageClosing12, 50, 50)
				//sub_image (ImageMedian2, ImageClosing12, ImageSub8, 5, 128)
				//threshold (ImageSub8, Region13, 0, 40)
				//connection (Region13, ConnectedRegions13)
				//select_shape (ConnectedRegions13, SelectedRegions11, 'area', 'and', 400, 99999999)
				//select_gray (SelectedRegions11, ImageReduced10, SelectedRegions13, 'mean', 'and', 0, Mean-15)
				//shape_trans (SelectedRegions13, RegionTrans2, 'convex')
				//select_shape (RegionTrans2, SelectedRegions14, ['area','circularity'], 'and', [1000,0.6], [2900,1])
				//select_shape (SelectedRegions13, SelectedRegions15, 'area', 'and', 4000, 99999999)
				//union2 (SelectedRegions14, SelectedRegions15, RegionUnion6)
				//union1 (RegionUnion6, RegionUnion5)
				//shape_trans (RegionUnion5, RegionTrans3, 'rectangle1')
				//height_width_ratio (RegionTrans3, Height, Width, Ratio)
				//if (Height<200)
				//difference (ROI_0, RegionTrans3, RegionDifference4)
				//affine_trans_region (RegionDifference4, RegionTrans3, at.hom_mat_rot, 'nearest_neighbor')
				//concat_obj (dt.['79'], RegionTrans3, dt.['79'])

				//endif
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1271.37, 41.4923, 1825.88, 1485.66);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2169.85, 1219.28, 2802.99, 1881.37);
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2623).Append(1669)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(-200)));
				SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测猪鼻子
				GenRectangle1(&ho_ROI_0, 1940.35, 2837.78, 2065.71, 3056.12);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				DilationCircle(ho_ROI_0, &ho_RegionDilation13, 15);

				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation13, &ho_ImageReduced16
					);
				TextureLaws(ho_ImageReduced16, &ho_ImageTexture2, "el", 5, 7);
				TextureLaws(ho_ImageReduced16, &ho_ImageTexture3, "le", 5, 7);
				AddImage(ho_ImageTexture2, ho_ImageTexture3, &ho_ImageResult1, 2.5, -100);
				Threshold(ho_ImageResult1, &ho_Region15, 90, 255);
				RankRegion(ho_Region15, &ho_RegionCount10, 15, 15, 80);
				ShapeTrans(ho_RegionCount10, &ho_RegionTrans4, "rectangle1");
				MoveRegion(ho_RegionTrans4, &ho_RegionMoved12, -60, 0);
				Difference(ho_RegionCount10, ho_RegionMoved12, &ho_RegionDifference9);
				//检测内腔毛刺
				ShapeTrans(ho_RegionDifference9, &ho_RegionTrans16, "rectangle1");
				MoveRegion(ho_RegionTrans16, &ho_RegionMoved21, -20, -140);
				DilationCircle(ho_RegionMoved21, &ho_RegionDilation22, 15);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation22, &ho_ImageReduced24
					);
				MedianRect(ho_ImageReduced24, &ho_ImageMedian9, 3, 3);
				ErosionCircle(ho_RegionDilation22, &ho_RegionErosion9, 5);
				ReduceDomain(ho_ImageMedian9, ho_RegionErosion9, &ho_ImageReduced25);
				TextureLaws(ho_ImageReduced25, &ho_ImageTexture4, "el", 5, 7);
				TextureLaws(ho_ImageReduced25, &ho_ImageTexture5, "le", 5, 7);
				AddImage(ho_ImageTexture5, ho_ImageTexture4, &ho_ImageResult2, 2.5, -130);
				Threshold(ho_ImageResult2, &ho_Region28, 0, 30);
				Intersection(ho_Region28, ho_RegionMoved21, &ho_Region28);
				RankRegion(ho_Region28, &ho_RegionCount12, 5, 5, 10);
				Connection(ho_RegionCount12, &ho_ConnectedRegions29);
				SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions38, "area", "and",
					700, 99999);
				Union1(ho_SelectedRegions38, &ho_RegionUnion10);
				ErosionCircle(ho_RegionUnion10, &ho_RegionErosion14, 4.5);
				ShapeTrans(ho_RegionErosion14, &ho_RegionTrans17, "convex");
				Difference(ho_RegionTrans17, ho_RegionUnion10, &ho_RegionDifference23);
				Connection(ho_RegionDifference23, &ho_ConnectedRegions32);
				SelectShape(ho_ConnectedRegions32, &ho_SelectedRegions40, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(70).Append(3)), (HTuple(99999).Append(999)));
				AffineTransRegion(ho_SelectedRegions40, &ho_SelectedRegions40, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("91"), ho_SelectedRegions40, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "91");

				//检测毛刺
				ClosingRectangle1(ho_RegionDifference9, &ho_RegionClosing6, 20, 10);
				OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening2, 40, 30);
				Difference(ho_RegionClosing6, ho_RegionOpening2, &ho_RegionDifference21);
				Connection(ho_RegionDifference21, &ho_ConnectedRegions28);
				SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions37, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(60).Append(2.5)), (HTuple(99999).Append(999)));
				AffineTransRegion(ho_SelectedRegions37, &ho_SelectedRegions37, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions37, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

				ShapeTrans(ho_RegionDifference9, &ho_RegionTrans8, "rectangle1");
				ErosionRectangle1(ho_RegionTrans8, &ho_RegionErosion6, 15, 15);
				//鼻子上
				ErosionRectangle1(ho_RegionErosion6, &ho_RegionErosion8, 15, 1);
				DilationRectangle1(ho_RegionErosion8, &ho_RegionDilation14, 1, 20);
				MoveRegion(ho_RegionDilation14, &ho_RegionMoved13, -25, 0);
				//检测塑胶
				CreateDict(&hv_dd);


				CreateDict(&hv___Tmp_Ctrl_Dict_Init_62);
				SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_62);
				hv___Tmp_Ctrl_Dict_Init_62 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "pig", 1);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionMoved13, hv_dd.TupleGetDictTuple("SJ"), "region");
				//dd.SJ.GAUSS := dict {}
				//dd.SJ.GAUSS.sub := 8
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
						);
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

				//dev_display (ImageAffineTrans)
				//dev_display (RegionMoved13)
				//stop ()

				Difference(ho_RegionErosion6, ho_RegionDifference9, &ho_RegionDifference13
					);

				Connection(ho_RegionDifference13, &ho_ConnectedRegions15);
				SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions23, "area", "and",
					200, 999999);
				AffineTransRegion(ho_SelectedRegions23, &ho_SelectedRegions23, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("90"), ho_SelectedRegions23, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "90");

			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				GenRectangle1(&ho_ROI_0, 405.415, 934.635, 703.293, 3168.77);
				GenRectangle1(&ho_TMP_Region, 678.47, 934.635, 968.073, 2490.26);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 951.147, 928.955, 1337.34, 2052.43);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1267.12, 928.955, 2601.25, 1168.86);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 851.673, 2467.88, HTuple(-151.557).TupleRad(),
					638.852, 153.282);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1325.64, 1133.75, 1858.12, 1525.8);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1559.7, 1467.29, HTuple(55.8855).TupleRad(),
					657.29, 201.932);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				//检测LC
				CreateDict(&hv_dd);
				SetDictObject(ho_Image, hv_dd, "image");

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_64);
				SetDictTuple(hv_dd, "LC", hv___Tmp_Ctrl_Dict_Init_64);
				hv___Tmp_Ctrl_Dict_Init_64 = HTuple(HNULL);
				SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("LC"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				GenRectangle1(&ho_ROI_0, 527.748, 398.169, 1206.25, 3542.51);
				GenRectangle1(&ho_TMP_Region, 1156.6, 1349.75, 2679.09, 3978.55);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1437.93, 1217.35, HTuple(-44.6096).TupleRad(),
					860.108, 322.073);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1034.65, 3685.34, HTuple(-48.9302).TupleRad(),
					543.301, 222.029);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				//检测LC
				CreateDict(&hv_dd);
				SetDictObject(ho_Image, hv_dd, "image");

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_66);
				SetDictTuple(hv_dd, "LC", hv___Tmp_Ctrl_Dict_Init_66);
				hv___Tmp_Ctrl_Dict_Init_66 = HTuple(HNULL);
				SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("LC"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

			}
			if (0 != (int(hv_ImageNum == 28)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1817.98, 437.33, 2120.06, 1687.01);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2700.81, 323.342, 3073.93, 789.901);
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
				SetDictTuple(hv_at, "rc", (HTuple(2959).Append(461)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "area", (HTuple(10000).Append(9999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测螺丝孔堵胶
				GenRectangle1(&ho_ROI_0, 2427.96, 855.998, 2541.91, 999.943);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced10);

				GrayOpeningRect(ho_ImageReduced10, &ho_ImageOpening5, 7, 1);
				GrayClosingRect(ho_ImageOpening5, &ho_ImageClosing12, 9, 1);
				GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening32, 30, 40);
				SubImage(ho_ImageOpening32, ho_ImageClosing12, &ho_ImageSub8, 1, 128);
				Threshold(ho_ImageSub8, &ho_Region13, 0, 30);
				ClosingRectangle1(ho_Region13, &ho_RegionClosing11, 10, 10);
				Connection(ho_RegionClosing11, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions56, "height", "and",
					50, 999);
				CountObj(ho_SelectedRegions56, &hv_Number15);
				if (0 != hv_Number15)
				{
					Difference(ho_RegionClosing11, ho_Region13, &ho_RegionDifference4);
					ErosionCircle(ho_RegionClosing11, &ho_RegionErosion16, 3.5);
					Intersection(ho_RegionErosion16, ho_RegionDifference4, &ho_RegionIntersection14
						);
					Connection(ho_RegionIntersection14, &ho_ConnectedRegions13);
					SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions13, "area", "and",
						50, 99999);

					AffineTransRegion(ho_SelectedRegions13, &ho_SelectedRegions13, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_SelectedRegions13, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");
				}
				else
				{
					AffineTransRegion(ho_ConnectedRegions55, &ho_ConnectedRegions55, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("96"), ho_ConnectedRegions55, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "96");
				}


			}
			if (0 != (int(hv_ImageNum == 36)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1695.07, 23.8279, 2005.2, 948.354);
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));

				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测抓胶槽漏胶
				GenRectangle1(&ho_ROI_0, 1732.43, 2289.22, 1899.87, 2568.83);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced34);
				GrayClosingRect(ho_ImageReduced34, &ho_ImageClosing27, 1, 150);
				SubImage(ho_ImageReduced34, ho_ImageClosing27, &ho_ImageSub24, 1, 128);
				Threshold(ho_ImageSub24, &ho_Region44, 0, 20);
				ClosingRectangle1(ho_Region44, &ho_RegionClosing12, 10, 1);
				OpeningRectangle1(ho_RegionClosing12, &ho_RegionOpening8, 10, 3);
				Connection(ho_RegionOpening8, &ho_ConnectedRegions46);
				SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions11, "width", "and",
					60, 99999);
				CountObj(ho_SelectedRegions11, &hv_Number7);
				if (0 != (int(hv_Number7 == 1)))
				{
					//检测毛刺
					MoveRegion(ho_SelectedRegions11, &ho_RegionMoved37, 570, -240);
					DilationRectangle1(ho_RegionMoved37, &ho_RegionDilation32, 180, 40);
					DilationRectangle1(ho_RegionDilation32, &ho_RegionDilation33, 11, 11);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation33, &ho_ImageReduced38
						);
					GrayClosingRect(ho_ImageReduced38, &ho_ImageClosing30, 1, 11);
					GrayOpeningRect(ho_ImageClosing30, &ho_ImageClosing32, 1, 7);
					GrayOpeningRect(ho_ImageClosing32, &ho_ImageOpening34, 10, 5);
					SubImage(ho_ImageOpening34, ho_ImageClosing32, &ho_ImageSub26, 5, 128);
					Threshold(ho_ImageSub26, &ho_Region48, 0, 30);

					Connection(ho_Region48, &ho_ConnectedRegions51);
					SelectShape(ho_ConnectedRegions51, &ho_SelectedRegions53, "width", "and",
						40, 99999);
					CountObj(ho_SelectedRegions53, &hv_Number10);
					if (0 != (int(hv_Number10 != 2)))
					{
						AffineTransRegion(ho_RegionDilation32, &ho_RegionDilation32, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						//concat_obj (dt.['97'], RegionDilation32, dt.['97'])
					}
					//检测抓胶槽
					MoveRegion(ho_SelectedRegions11, &ho_RegionMoved36, 70, 0);
					DilationRectangle1(ho_RegionMoved36, &ho_RegionDilation29, 70, 17);
					DilationCircle(ho_RegionDilation29, &ho_RegionDilation30, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation30, &ho_ImageReduced35
						);
					MedianRect(ho_ImageReduced35, &ho_ImageMedian2, 5, 5);
					GrayOpeningRect(ho_ImageMedian2, &ho_ImageOpening33, 10, 40);
					SubImage(ho_ImageOpening33, ho_ImageMedian2, &ho_ImageSub25, 5, 128);
					Threshold(ho_ImageSub25, &ho_Region45, 0, 30);
					Intersection(ho_RegionDilation29, ho_Region45, &ho_RegionIntersection15
						);
					Connection(ho_RegionIntersection15, &ho_ConnectedRegions47);
					SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions14, "area", "and",
						60, 99999);
					AffineTransRegion(ho_SelectedRegions14, &ho_SelectedRegions14, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_SelectedRegions14, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
				}
			}
			if (0 != (int(hv_ImageNum == 37)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1263.61, 2263.04, 1951.45, 4050.35);
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
				SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));

				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				GenRectangle1(&ho_ROI_0, 1813.95, 1285.48, 2488.46, 2187.56);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced39);
				GrayOpeningRect(ho_ImageReduced39, &ho_ImageOpening35, 20, 20);
				GrayClosingRect(ho_ImageOpening35, &ho_ImageClosing34, 11, 11);
				GrayOpeningRect(ho_ImageClosing34, &ho_ImageOpening36, 180, 180);
				SubImage(ho_ImageOpening36, ho_ImageClosing34, &ho_ImageSub27, 2, 128);
				Threshold(ho_ImageSub27, &ho_Region50, 0, 30);
				FillUp(ho_Region50, &ho_RegionFillUp11);
				Connection(ho_RegionFillUp11, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions54, (HTuple("area").Append("width")),
					"and", (HTuple(60000).Append(280)), (HTuple(150000).Append(500)));
				CountObj(ho_SelectedRegions54, &hv_Number12);
				if (0 != (int(hv_Number12 == 1)))
				{
					ShapeTrans(ho_SelectedRegions54, &ho_RegionTrans2, "rectangle1");
					SmallestRectangle1(ho_RegionTrans2, &hv_Row11, &hv_Column11, &hv_Row21,
						&hv_Column21);
					hv_r = hv_Row11 - 2112;
					hv_c = hv_Column21 - 1952;
					//检测听筒孔杂质
					GenRectangle1(&ho_ROI_0, 2200.25, 2597.36, 2301.39, 3590.27);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved38, &ho_ImageReduced42);
					GrayClosingRect(ho_ImageReduced42, &ho_ImageClosing35, 1, 30);
					GrayOpeningRect(ho_ImageClosing35, &ho_ImageOpening38, 3, 150);
					GrayOpeningRect(ho_ImageOpening38, &ho_ImageOpening39, 30, 11);
					SubImage(ho_ImageOpening39, ho_ImageOpening38, &ho_ImageSub30, 3, 128);
					Threshold(ho_ImageSub30, &ho_Region52, 0, 30);
					Connection(ho_Region52, &ho_ConnectedRegions56);
					SelectShape(ho_ConnectedRegions56, &ho_SelectedRegions57, "width", "and",
						850, 99999);
					CountObj(ho_SelectedRegions57, &hv_Number16);
					if (0 != hv_Number16)
					{
						DilationRectangle1(ho_SelectedRegions57, &ho_RegionDilation34, 5, 20);
						SubImage(ho_ImageOpening38, ho_ImageClosing35, &ho_ImageSub29, 10, 128);
						Threshold(ho_ImageSub29, &ho_Region53, 0, 30);
						Difference(ho_Region53, ho_RegionDilation34, &ho_RegionDifference36);
						Connection(ho_RegionDifference36, &ho_ConnectedRegions57);
						SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions58, (HTuple("area").Append("inner_radius")),
							"and", (HTuple(350).Append(3)), (HTuple(99999).Append(999)));
						AffineTransRegion(ho_SelectedRegions58, &ho_SelectedRegions58, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions58, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");
					}

					//检测边缘毛刺
					GenRectangle1(&ho_ROI_0, 2301.69, 1297.38, 2362.81, 1524.17);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved38, &ho_ImageReduced41);
					MedianRect(ho_ImageReduced41, &ho_ImageMedian16, 5, 3);
					GrayOpeningRect(ho_ImageMedian16, &ho_ImageOpening37, 15, 10);
					SubImage(ho_ImageOpening37, ho_ImageMedian16, &ho_ImageSub28, 5, 128);
					Threshold(ho_ImageSub28, &ho_Region51, 0, 30);
					Connection(ho_Region51, &ho_ConnectedRegions53);
					SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions55, "area", "and",
						200, 99999);
					AffineTransRegion(ho_SelectedRegions55, &ho_SelectedRegions55, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions55, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");
					//检测NQ毛刺
					GenRectangle1(&ho_ROI_0, 2306.87, 2549.98, 2400.53, 3594.71);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					MoveRegion(ho_ROI_0, &ho_RegionMoved38, hv_r, hv_c);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced29);
					MedianRect(ho_ImageReduced29, &ho_ImageMedian11, 5, 10);
					TextureLaws(ho_ImageMedian11, &ho_ImageTexture6, "el", 5, 7);
					TextureLaws(ho_ImageMedian11, &ho_ImageTexture7, "le", 5, 7);
					AddImage(ho_ImageTexture6, ho_ImageTexture7, &ho_ImageResult3, 1.5, -120);
					Threshold(ho_ImageResult3, &ho_Region38, 128, 255);
					ErosionRectangle1(ho_ROI_0, &ho_RegionErosion12, 10, 10);
					Intersection(ho_Region38, ho_RegionErosion12, &ho_RegionIntersection10);
					FillUp(ho_RegionIntersection10, &ho_RegionFillUp4);
					ClosingRectangle1(ho_RegionFillUp4, &ho_RegionClosing9, 5, 5);
					FillUp(ho_RegionClosing9, &ho_RegionFillUp5);
					ClosingRectangle1(ho_RegionFillUp5, &ho_RegionClosing10, 10, 3);
					OpeningRectangle1(ho_RegionClosing10, &ho_RegionOpening3, 150, 1);
					Difference(ho_RegionClosing10, ho_RegionOpening3, &ho_RegionDifference26
						);

					MoveRegion(ho_RegionErosion12, &ho_RegionMoved32, -65, 0);
					MoveRegion(ho_RegionMoved32, &ho_RegionMoved34, -10, 0);

					Intersection(ho_RegionMoved32, ho_RegionDifference26, &ho_RegionIntersection11
						);
					Difference(ho_RegionIntersection11, ho_RegionMoved34, &ho_RegionIntersection11
						);
					OpeningCircle(ho_RegionIntersection11, &ho_RegionIntersection11, 1.5);
					Connection(ho_RegionIntersection11, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions45, (HTuple("area").Append("inner_radius")),
						"and", (HTuple(60).Append(2.5)), (HTuple(99999).Append(999)));
					AffineTransRegion(ho_SelectedRegions45, &ho_SelectedRegions45, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("94"), ho_SelectedRegions45, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "94");

				}
			}
			if (0 != (int(hv_ImageNum == 38)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1127.56, 1256.91, 1590.92, 2589.11);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2202.68, 1630.88, 2914.44, 2458.48);
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
				SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "rc", (HTuple(2729).Append(1899)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "move", (HTuple(-200).Append(-0)));
				SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测听筒孔
				GenRectangle1(&ho_ROI_0, 1589.34, 1168.11, 1665.93, 2155.36);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//屏蔽区域
				GenRectangle1(&ho_ROI_01, 1588.33, 1869.79, 1666.03, 2095.65);

				GenRectangle1(&ho_ROI_02, 1578.57, 1589.82, 1667.59, 1699.52);
				Union2(ho_ROI_01, ho_ROI_02, &ho_ROI_01);
				AffineTransRegion(ho_ROI_01, &ho_ROI_01, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced29);
				MedianRect(ho_ImageReduced29, &ho_ImageMedian11, 5, 5);
				TextureLaws(ho_ImageMedian11, &ho_ImageTexture6, "el", 5, 7);
				TextureLaws(ho_ImageMedian11, &ho_ImageTexture7, "le", 5, 7);
				AddImage(ho_ImageTexture6, ho_ImageTexture7, &ho_ImageResult3, 1, -130);
				Threshold(ho_ImageResult3, &ho_Region38, 128, 255);
				ErosionRectangle1(ho_ROI_0, &ho_RegionErosion12, 10, 10);
				Intersection(ho_Region38, ho_RegionErosion12, &ho_RegionIntersection10);
				FillUp(ho_RegionIntersection10, &ho_RegionFillUp4);
				ClosingRectangle1(ho_RegionFillUp4, &ho_RegionClosing9, 10, 5);
				FillUp(ho_RegionClosing9, &ho_RegionFillUp5);
				ClosingRectangle1(ho_RegionFillUp5, &ho_RegionClosing10, 10, 3);
				FillUp(ho_RegionClosing10, &ho_RegionClosing10);
				OpeningRectangle1(ho_RegionClosing10, &ho_RegionOpening3, 150, 1);
				Difference(ho_RegionClosing10, ho_RegionOpening3, &ho_RegionDifference26);

				MoveRegion(ho_RegionErosion12, &ho_RegionMoved32, -50, 0);
				Intersection(ho_RegionMoved32, ho_RegionDifference26, &ho_RegionIntersection11
					);
				Difference(ho_RegionIntersection11, ho_ROI_01, &ho_RegionIntersection11);
				OpeningCircle(ho_RegionIntersection11, &ho_RegionIntersection11, 1.5);
				Connection(ho_RegionIntersection11, &ho_ConnectedRegions38);
				SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions45, ((HTuple("area").Append("inner_radius")).Append("height")),
					"and", ((HTuple(150).Append(2)).Append(7)), ((HTuple(99999).Append(999)).Append(999)));
				AffineTransRegion(ho_SelectedRegions45, &ho_SelectedRegions45, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("93"), ho_SelectedRegions45, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "93");
			}
			if (0 != (int(hv_ImageNum == 39)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1329.68, 1815.28, 1939.28, 3871.76);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1851.68, 3231.54, 2606.52, 4074.14);
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
				SetDictTuple(hv_at, "scal", (HTuple(1.5).Append(-150)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "opening", (HTuple(250).Append(80)));
				SetDictTuple(hv_at, "rc", (HTuple(2467).Append(3356)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "move", (HTuple(-0).Append(200)));
				SetDictTuple(hv_at, "area", (HTuple(60000).Append(9999999)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//zoom_image_factor (ImageAffineTrans, ImageZoomed1, 0.5, 0.5, 'constant')
				//检测SF毛刺
				GenRectangle1(&ho_ROI_0, 1769.84, 869.78, 2147.13, 3124.51);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced30);
				GrayClosingRect(ho_ImageReduced30, &ho_ImageClosing25, 9, 9);
				GrayOpeningRect(ho_ImageClosing25, &ho_ImageOpening24, 9, 9);
				ScaleImage(ho_ImageOpening24, &ho_ImageScaled8, 1.5, -220);
				Threshold(ho_ImageScaled8, &ho_Region39, 0, 20);
				FillUp(ho_Region39, &ho_RegionFillUp6);
				OpeningCircle(ho_RegionFillUp6, &ho_RegionOpening5, 28);
				OpeningRectangle1(ho_RegionOpening5, &ho_RegionOpening5, 20, 20);
				Connection(ho_RegionOpening5, &ho_ConnectedRegions39);
				SelectShape(ho_ConnectedRegions39, &ho_SelectedRegions46, "area", "and",
					50000, 100000);
				ShapeTrans(ho_SelectedRegions46, &ho_RegionTrans20, "rectangle1");

				ErosionCircle(ho_SelectedRegions46, &ho_RegionErosion13, 8);
				Union1(ho_RegionErosion13, &ho_RegionUnion11);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionUnion11, &ho_ImageReduced31);

				MedianRect(ho_ImageReduced31, &ho_ImageMedian14, 5, 5);

				GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening29, 50, 70);
				ScaleImage(ho_ImageOpening29, &ho_ImageScaled12, 2, -30);
				GrayOpeningRect(ho_ImageScaled12, &ho_ImageOpening31, 150, 250);
				SubImage(ho_ImageOpening31, ho_ImageScaled12, &ho_ImageSub22, 4, 128);
				Threshold(ho_ImageSub22, &ho_Region43, 0, 20);
				Connection(ho_Region43, &ho_ConnectedRegions42);
				SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions48, (HTuple("width").Append("height")),
					"and", (HTuple(100).Append(60)), (HTuple(99999).Append(99999)));
				ShapeTrans(ho_SelectedRegions48, &ho_SelectedRegions49, "rectangle1");
				MoveRegion(ho_SelectedRegions49, &ho_RegionMoved33, -50, 0);
				Difference(ho_SelectedRegions49, ho_RegionMoved33, &ho_RegionDifference28
					);
				DilationRectangle1(ho_RegionDifference28, &ho_RegionDilation23, 25, 1);
				OpeningCircle(ho_RegionDilation23, &ho_RegionOpening11, 23);
				Union2(ho_RegionOpening11, ho_SelectedRegions48, &ho_RegionUnion16);
				Union1(ho_RegionUnion16, &ho_RegionUnion17);

				DilationCircle(ho_SelectedRegions48, &ho_RegionDilation26, 3.5);
				DilationRectangle1(ho_RegionDilation26, &ho_RegionDilation28, 40, 30);
				OpeningCircle(ho_RegionDilation28, &ho_RegionOpening13, 40);
				Union1(ho_RegionOpening13, &ho_RegionUnion18);
				Difference(ho_RegionUnion18, ho_RegionUnion17, &ho_RegionDifference31);



				GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening26, 3, 100);
				SubImage(ho_ImageOpening26, ho_ImageMedian14, &ho_ImageSub20, 3, 128);

				Threshold(ho_ImageSub20, &ho_Region42, 0, 60);
				Intersection(ho_Region42, ho_RegionDifference31, &ho_RegionIntersection12
					);


				GrayOpeningRect(ho_ImageMedian14, &ho_ImageOpening27, 100, 3);
				SubImage(ho_ImageOpening27, ho_ImageMedian14, &ho_ImageSub21, 3, 128);
				Threshold(ho_ImageSub21, &ho_Region40, 0, 60);
				Intersection(ho_Region40, ho_RegionDifference31, &ho_RegionIntersection13
					);
				Union2(ho_RegionIntersection12, ho_RegionIntersection13, &ho_RegionUnion14
					);
				Union1(ho_RegionUnion14, &ho_RegionUnion15);
				OpeningCircle(ho_RegionUnion15, &ho_RegionOpening10, 2);
				Connection(ho_RegionOpening10, &ho_ConnectedRegions41);
				SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions47, "area", "and",
					25, 99999);
				AffineTransRegion(ho_SelectedRegions47, &ho_SelectedRegions47, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("95"), ho_SelectedRegions47, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "95");
			}
			if (0 != (int(hv_ImageNum == 40)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1221.17, 1968.94, 1742.46, 3561.8);
				//位置偏移检测区域
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "opening", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测SIM毛刺
				GenRectangle1(&ho_ROI_0, 1645.21, 992.421, 2268.4, 2864.15);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced26);
				GrayOpeningRect(ho_ImageReduced26, &ho_ImageOpening20, 5, 5);
				GrayClosingRect(ho_ImageOpening20, &ho_ImageClosing24, 25, 100);
				MedianRect(ho_ImageClosing24, &ho_ImageMedian10, 15, 15);
				ScaleImage(ho_ImageMedian10, &ho_ImageScaled7, 1.5, -100);
				Threshold(ho_ImageScaled7, &ho_Region29, 0, 100);
				ClosingCircle(ho_Region29, &ho_RegionClosing7, 5);
				Connection(ho_RegionClosing7, &ho_ConnectedRegions36);
				SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions41, "area", "and",
					200000, 9999999);
				CountObj(ho_SelectedRegions41, &hv_Number6);
				if (0 != hv_Number6)
				{
					ShapeTrans(ho_SelectedRegions41, &ho_RegionTrans18, "rectangle1");
					MoveRegion(ho_RegionTrans18, &ho_RegionMoved27, 0, -80);
					MoveRegion(ho_RegionMoved27, &ho_RegionMoved28, 0, -1200);
					Difference(ho_RegionMoved27, ho_RegionMoved28, &ho_RegionDifference25);
					Intersection(ho_SelectedRegions41, ho_RegionDifference25, &ho_RegionIntersection8
						);
					ErosionRectangle1(ho_RegionIntersection8, &ho_RegionErosion10, 3, 10);
					ShapeTrans(ho_RegionErosion10, &ho_RegionTrans19, "rectangle1");
					ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans19, &ho_ImageReduced28);
					GrayOpeningRect(ho_ImageReduced28, &ho_ImageOpening22, 5, 5);
					GrayOpeningRect(ho_ImageOpening22, &ho_ImageOpening23, 35, 25);
					SubImage(ho_ImageOpening23, ho_ImageOpening22, &ho_ImageSub19, 4, 128);
					Threshold(ho_ImageSub19, &ho_Region35, 0, 30);

					ErosionRectangle1(ho_RegionTrans19, &ho_RegionErosion11, 100, 120);
					MoveRegion(ho_RegionErosion11, &ho_RegionMoved29, -10, 0);

					MoveRegion(ho_RegionMoved29, &ho_RegionMoved35, 60, 0);
					Difference(ho_RegionMoved29, ho_RegionMoved35, &ho_RegionDifference27);
					ErosionRectangle1(ho_RegionMoved29, &ho_RegionErosion15, 130, 60);
					MoveRegion(ho_RegionErosion15, &ho_RegionMoved40, -20, 0);
					Union2(ho_RegionMoved40, ho_RegionDifference27, &ho_RegionUnion13);


					Intersection(ho_RegionUnion13, ho_Region35, &ho_RegionIntersection9);
					Connection(ho_RegionIntersection9, &ho_ConnectedRegions37);
					SelectShape(ho_ConnectedRegions37, &ho_SelectedRegions44, "area", "and",
						200, 99999);
					AffineTransRegion(ho_SelectedRegions44, &ho_SelectedRegions44, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("92"), ho_SelectedRegions44, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "92");

				}

			}
			if (0 != (int(hv_ImageNum == 44)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1279.9, 3499.07, 1683.55, 4086.87);
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));

				SetDictTuple(hv_at, "zoom", 1);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测抓胶槽漏胶
				GenRectangle1(&ho_ROI_0, 1358.39, 1459.93, 1565.39, 1809.71);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced34);
				GrayClosingRect(ho_ImageReduced34, &ho_ImageClosing27, 1, 150);
				SubImage(ho_ImageReduced34, ho_ImageClosing27, &ho_ImageSub24, 1, 128);
				Threshold(ho_ImageSub24, &ho_Region44, 0, 20);
				ClosingRectangle1(ho_Region44, &ho_RegionClosing12, 10, 1);
				OpeningRectangle1(ho_RegionClosing12, &ho_RegionOpening8, 10, 3);
				Connection(ho_RegionOpening8, &ho_ConnectedRegions46);
				SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions11, (HTuple("width").Append("height")),
					"and", (HTuple(60).Append(5)), (HTuple(99999).Append(15)));
				CountObj(ho_SelectedRegions11, &hv_Number7);
				if (0 != (int(hv_Number7 == 1)))
				{
					//检测毛刺
					//move_region (SelectedRegions11, RegionMoved37, 570, -240)
					//dilation_rectangle1 (RegionMoved37, RegionDilation32, 180, 40)
					//dilation_rectangle1 (RegionDilation32, RegionDilation33, 11, 11)
					//reduce_domain (ImageAffineTrans, RegionDilation33, ImageReduced38)
					//gray_closing_rect (ImageReduced38, ImageClosing30, 1, 11)
					//gray_opening_rect (ImageClosing30, ImageClosing32, 1, 7)
					//gray_opening_rect (ImageClosing32, ImageOpening34, 10, 5)
					//sub_image (ImageOpening34, ImageClosing32, ImageSub26, 5, 128)
					//threshold (ImageSub26, Region48, 0, 30)

					//connection (Region48, ConnectedRegions51)
					//select_shape (ConnectedRegions51, SelectedRegions53, 'width', 'and', 40, 99999)
					//count_obj (SelectedRegions53, Number10)
					//if (Number10 != 2)
					//affine_trans_region (RegionDilation32, RegionDilation32, at.hom_mat_rot, 'nearest_neighbor')
					//concat_obj (dt.['97'], RegionDilation32, dt.['97'])
					//endif
					//检测抓胶槽
					MoveRegion(ho_SelectedRegions11, &ho_RegionMoved36, 100, 0);
					DilationRectangle1(ho_RegionMoved36, &ho_RegionDilation29, 70, 17);
					DilationCircle(ho_RegionDilation29, &ho_RegionDilation30, 15);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation30, &ho_ImageReduced35
						);
					MedianRect(ho_ImageReduced35, &ho_ImageMedian2, 5, 5);
					GrayOpeningRect(ho_ImageMedian2, &ho_ImageOpening33, 10, 40);
					SubImage(ho_ImageOpening33, ho_ImageMedian2, &ho_ImageSub25, 5, 128);
					Threshold(ho_ImageSub25, &ho_Region45, 0, 30);
					Intersection(ho_RegionDilation29, ho_Region45, &ho_RegionIntersection15
						);
					Connection(ho_RegionIntersection15, &ho_ConnectedRegions47);
					SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions14, "area", "and",
						60, 99999);
					AffineTransRegion(ho_SelectedRegions14, &ho_SelectedRegions14, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("97"), ho_SelectedRegions14, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "97");
				}
			}
		}

		if (0 != (HTuple(int(hv_StaNum == 1)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 1)))
			{
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2623.01, 2599.71, 2974.09, 3846.07);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 796.062, 2210.89, 1942.33, 3191.59);

				//仿射变换
				CreateDict(&hv_at);
				SetDictTuple(hv_at, "point", 1);
				SetDictTuple(hv_at, "rc", (HTuple(989).Append(2548)));
				SetDictTuple(hv_at, "scal", (HTuple(2).Append(-200)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测圆环
				//gen_rectangle1 (ROI_0, 1651.42, 921.933, 2356.74, 1627.2)
				//move_region (ROI_0, RegionMoved9, -90, -30)
				//affine_trans_region (RegionMoved9, RegionAffineTrans1, at.hom_mat_tra, 'nearest_neighbor')
				//检测漏铣
				//dd := dict{}
				//dd.image := ImageAffineTrans
				//dd.hom_mat := at.hom_mat_rot

				//dd.YH := dict {}
				//dd.YH.region := RegionAffineTrans1

				//DefectDetectionAlgorithms (dd, dt)
				//dev_display (Image)
				//dev_display (dd.resreg)
				//检测漏铣
				GenRectangle1(&ho_ROI_0, 1147.81, 422.008, 1507.79, 585.888);
				GenRectangle1(&ho_TMP_Region, 1279.51, 565.403, 1537.05, 1218);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1417.06, 1212.14, 136.642);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1756.55, 1566.24, 305.214);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1912.41, 1786.65, 100.211);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1408.34, 1260.38, 1659.97, 1413.56);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1531.16, 591.346, 1926.26, 1478.05);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1782.86, 927.885, 2353.56, 1712.17);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1588.02, 577.802, 1892.39, 785.578);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1693.38, 981.649, 2322.61, 1613.76);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				ClosingCircle(ho_ROI_0, &ho_RegionClosing4, 105);
				MoveRegion(ho_RegionClosing4, &ho_RegionMoved9, -90, -30);
				AffineTransRegion(ho_RegionMoved9, &ho_RegionAffineTrans1, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				DilationCircle(ho_RegionAffineTrans1, &ho_RegionDilation9, 20);


				//屏蔽区域
				GenCircle(&ho_ROI_0, 352.713, 3418.48, 209.018);
				GenCircle(&ho_TMP_Region, 257.031, 2962.83, 198.159);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 265.083, 1578, 244.504);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 946.716, 705.26, 168.032);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2086.82, 1909.15, 195.775);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2095.95, 2479.82, 142.161);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 84.5155, 1730.74, 166.757, 2918.87);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 172.324, 3113.72, 230.285, 3306.2);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 94.1042, 3046.97, 146.751, 3413.31);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 90.464, 3442.24, HTuple(38.4605).TupleRad(),
					63.5648, 23.4257);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -56.17886, 3449.56, 69.964, 3503.72);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 455.359, 3532.69, 996.889, 3591.51);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 475.208, 3616.51, HTuple(39.8162).TupleRad(),
					56.6253, 22.6782);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 401.065, 1713.02, 477.158, 2986.01);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 422.879, 1365.06, HTuple(-128.008).TupleRad(),
					72.3145, 31.8081);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 467.194, 1296.46, 1171.93, 1364.76);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1029.43, 877.802, HTuple(-38.1341).TupleRad(),
					60.5467, 26.2166);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1013.52, 902.055, 1074.96, 1228.26);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1023.52, 1259.33, HTuple(21.5787).TupleRad(),
					47.8858, 33.0678);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 746.583, 614.467, 788.617, 691.205);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1204.16, 1354.34, HTuple(-53.6629).TupleRad(),
					68.1602, 29.5905);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1274.76, 1428.94, HTuple(-36.1685).TupleRad(),
					66.7048, 21.7443);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1263.75, 1463.74, 1327.92, 2565.17);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1341.34, 2517.17, HTuple(-132.357).TupleRad(),
					56.5479, 15.3687);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1375.63, 2458.25, 1969.41, 2512.41);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle1(&ho_TMP_Region, 2300.59, 2484.48, 2401.63, 4104.5);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -106.62769, 642.841, 772.536, 698.723);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_00);

				AffineTransRegion(ho_ROI_00, &ho_RegionAffineTrans1, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//提取检测区域
				GenRectangle1(&ho_ROI_0, 2.42571, 400.323, 2489.28, 4092.57);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);
				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);
				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 500000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);
				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 10);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
				FillUp(ho_RegionCount1, &ho_RegionCount1);
				Connection(ho_RegionCount1, &ho_ConnectedRegions7);
				SelectShape(ho_ConnectedRegions7, &ho_ConnectedRegions7, "area", "and", 150000,
					999999999);
				Union1(ho_ConnectedRegions7, &ho_RegionCount1);
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				//检测区域
				Difference(ho_RegionDifference, ho_RegionAffineTrans1, &ho_RegionDifference32
					);

				CreateDict(&hv_dd);
				//检测漏铣
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_76);
				SetDictTuple(hv_dd, "SJLC", hv___Tmp_Ctrl_Dict_Init_76);
				hv___Tmp_Ctrl_Dict_Init_76 = HTuple(HNULL);
				//检测镭雕
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_77);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_77);
				hv___Tmp_Ctrl_Dict_Init_77 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_78);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_78);
				hv___Tmp_Ctrl_Dict_Init_78 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
					(HTuple(0).Append(30)));
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_79);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_79);
				hv___Tmp_Ctrl_Dict_Init_79 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
					(HTuple(13).Append(9)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionDilation9, hv_dd.TupleGetDictTuple("SJLC"), "region");
				SetDictObject(ho_RegionDifference32, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//stop ()

				//检测果切
				GenRectangle1(&ho_ROI_0, 1237.47, 2460.9, 1834.51, 2575.03);
				ConcatObj(ho_ROI_0, ho_Reg, &ho_Reg);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced3);
				GrayOpeningRect(ho_ImageReduced3, &ho_ImageOpening2, 15, 1);
				GrayOpeningRect(ho_ImageOpening2, &ho_ImageOpening3, 11, 20);
				GrayOpeningRect(ho_ImageOpening3, &ho_ImageOpening3, 50, 5);

				MedianRect(ho_ImageOpening3, &ho_ImageMedian3, 3, 3);
				GrayClosingRect(ho_ImageMedian3, &ho_ImageClosing3, 11, 20);
				SubImage(ho_ImageMedian3, ho_ImageClosing3, &ho_ImageSub2, 3, 128);

				Threshold(ho_ImageSub2, &ho_Region4, 0, 30);
				Connection(ho_Region4, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "height", "and",
					300, 99999);
				CountObj(ho_SelectedRegions3, &hv_Number1);
				if (0 != (int(hv_Number1 == 0)))
				{
					GrayClosingRect(ho_ImageMedian3, &ho_ImageClosing3, 11, 40);
					SubImage(ho_ImageMedian3, ho_ImageClosing3, &ho_ImageSub2, 3, 128);
					Threshold(ho_ImageSub2, &ho_Region4, 0, 10);
					Connection(ho_Region4, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, "height", "and",
						300, 99999);
					AffineTransRegion(ho_SelectedRegions3, &ho_SelectedRegions3, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("81"), ho_SelectedRegions3, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "81");
				}
			}
			if (0 != (int(hv_ImageNum == 2)))
			{

				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2567.91, -33.6331, 2940.26, 4111.93);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1841.53, 425.601, 2557.43, 1435.27);
				//仿射变换
				CreateDict(&hv_at);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(2414).Append(742)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(2).Append(-190)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测焊缝毛刺
				GenRectangle1(&ho_ROI_0, 2296.86, 2109.65, 2483.76, 4094.17);

				GenCircle(&ho_ROI_1, 2173.31, 3378.7, 203.437);
				AffineTransRegion(ho_ROI_1, &ho_ROI_1, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				DilationCircle(ho_ROI_0, &ho_RegionDilation15, 5);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation15, &ho_ImageReduced17
					);
				GrayOpeningRect(ho_ImageReduced17, &ho_ImageOpening10, 5, 30);
				GrayClosingRect(ho_ImageOpening10, &ho_ImageClosing18, 1, 50);
				MedianRect(ho_ImageClosing18, &ho_ImageMedian4, 3, 3);
				ScaleImage(ho_ImageMedian4, &ho_ImageScaled6, 1.5, -110);
				Threshold(ho_ImageScaled6, &ho_Region20, 0, 150);
				ClosingRectangle1(ho_Region20, &ho_RegionClosing5, 130, 30);
				Connection(ho_RegionClosing5, &ho_ConnectedRegions16);
				HeightWidthRatio(ho_ROI_0, &hv_Height2, &hv_Width2, &hv_Ratio1);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions24, "width", "and",
					hv_Width2 - 200, 99999);
				ShapeTrans(ho_SelectedRegions24, &ho_RegionTrans10, "rectangle1");
				MoveRegion(ho_RegionTrans10, &ho_RegionMoved14, -45, 0);
				MoveRegion(ho_RegionMoved14, &ho_RegionMoved15, -30, 0);
				Difference(ho_RegionMoved14, ho_RegionMoved15, &ho_RegionDifference8);

				DilationRectangle1(ho_RegionDifference8, &ho_RegionDilation19, 10, 40);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation19, &ho_ImageReduced18
					);
				RankRect(ho_ImageReduced18, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Intersection(ho_Region21, ho_RegionDifference8, &ho_RegionIntersection6);
				Difference(ho_RegionIntersection6, ho_ROI_1, &ho_RegionIntersection6);
				//
				GenRectangle1(&ho_ROI_0, 552.748, 2357.93, 1339, 3727.61);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");


				Intensity(ho_ROI_0, ho_ImageAffineTrans, &hv_Mean1, &hv_Deviation1);
				Connection(ho_RegionIntersection6, &ho_ConnectedRegions23);
				SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions25, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(100).Append(3)), (HTuple(99999).Append(999)));
				hv_m = 100;
				hv_m1 = 120;
				if (0 != (int(hv_Mean1>100)))
				{
					hv_m = hv_Mean1 - 55;
					hv_m1 = hv_Mean1 - 15;
				}
				SelectGray(ho_SelectedRegions25, ho_ImageAffineTrans, &ho_SelectedRegions26,
					"mean", "and", 0, hv_m);

				SelectShape(ho_SelectedRegions25, &ho_SelectedRegions31, "area", "and", 500,
					999999);
				SelectGray(ho_SelectedRegions31, ho_ImageAffineTrans, &ho_SelectedRegions32,
					"mean", "and", 0, hv_m1);
				Union2(ho_SelectedRegions26, ho_SelectedRegions32, &ho_RegionUnion9);
				Connection(ho_RegionUnion9, &ho_ConnectedRegions24);


				AffineTransRegion(ho_ConnectedRegions24, &ho_ConnectedRegions24, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_ConnectedRegions24, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

				//检测大压伤
				GenRectangle1(&ho_ROI_0, 1828.86, 2991.95, 2391.65, 3703.69);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced32);
				GrayOpeningRect(ho_ImageReduced32, &ho_ImageOpening12, 9, 9);
				MedianRect(ho_ImageOpening12, &ho_ImageMedian24, 15, 15);
				ScaleImage(ho_ImageMedian24, &ho_ImageScaled15, 1.5, -100);
				Threshold(ho_ImageScaled15, &ho_Region36, 200, 255);
				FillUp(ho_Region36, &ho_RegionFillUp10);
				OpeningCircle(ho_RegionFillUp10, &ho_RegionOpening9, 60);
				Connection(ho_RegionOpening9, &ho_ConnectedRegions43);
				SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions42, "area", "and",
					30000, 999999);
				CountObj(ho_SelectedRegions42, &hv_Number11);
				ShapeTrans(ho_SelectedRegions42, &ho_SelectedRegions42, "outer_circle");

				SmallestRectangle1(ho_SelectedRegions42, &hv_Row1, &hv_Column1, &hv_Row2,
					&hv_Column2);
				GetImageSize(ho_Image, &hv_Width1, &hv_Height1);
				GenRectangle1(&ho_Rectangle, 0, 0, hv_Row2 - 30, hv_Width1);


				//检测焊缝
				MoveRegion(ho_Rectangle, &ho_RegionMoved77, 185, 0);
				MoveRegion(ho_RegionMoved77, &ho_RegionMoved78, -60, 0);
				Difference(ho_RegionMoved77, ho_RegionMoved78, &ho_RegionDifference45);
				DilationCircle(ho_RegionDifference45, &ho_RegionDilation10, 5);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation10, &ho_ImageReduced8);
				GrayOpeningRect(ho_ImageReduced8, &ho_ImageOpening25, 5, 5);
				GrayClosingRect(ho_ImageOpening25, &ho_ImageClosing33, 8, 20);
				ScaleImage(ho_ImageClosing33, &ho_ImageScaled11, 1.5, -150);
				Threshold(ho_ImageScaled11, &ho_Region11, 0, 30);
				Intersection(ho_Region11, ho_RegionDifference45, &ho_Region11);
				Connection(ho_Region11, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions79, "area", "and", 3000,
					99999999);
				AffineTransRegion(ho_SelectedRegions79, &ho_SelectedRegions79, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				//concat_obj (dt.['83'], SelectedRegions79, dt.['83'])

				ConcatObj(ho_Reg, ho_Rectangle, &ho_Reg);

				ShapeTrans(ho_SelectedRegions42, &ho_RegionTrans21, "outer_circle");
				//
				DilationCircle(ho_RegionTrans21, &ho_RegionDilation51, 55);

				MoveRegion(ho_RegionDilation51, &ho_RegionMoved61, -1550, -2000);
				ShapeTrans(ho_RegionMoved61, &ho_RegionTrans22, "rectangle1");
				//
				DilationRectangle1(ho_RegionTrans22, &ho_RegionDilation52, 200, 500);
				if (0 != (int(hv_Number11 == 1)))
				{
					ReduceDomain(ho_Image, ho_Rectangle, &ho_ImageReduced33);
					GrayOpeningRect(ho_ImageReduced33, &ho_ImageOpening13, 5, 5);
					ScaleImage(ho_ImageOpening13, &ho_ImageScaled16, 1.5, -80);
					Threshold(ho_ImageScaled16, &ho_Region37, 180, 255);
					Difference(ho_Region37, ho_RegionDilation51, &ho_RegionDifference29);
					Difference(ho_RegionDifference29, ho_RegionDilation52, &ho_RegionDifference30
						);
					Connection(ho_RegionDifference30, &ho_ConnectedRegions44);
					SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions43, "area", "and",
						400, 9999999);
					//concat_obj (dt.['82'], SelectedRegions43, dt.['82'])
				}
				//镭雕检测区域
				//屏蔽区域

				GenRectangle1(&ho_ROI_0, 103.254, 954.31, 939.159, 1575.01);
				GenRectangle2(&ho_TMP_Region, 63.1004, 813.253, HTuple(-36.6112).TupleRad(),
					180.491, 52.6968);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 77.5905, 1098.87, HTuple(30.3828).TupleRad(),
					69.5771, 39.6557);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 21.6999, 1138.2, 83.8006, 1525.24);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1299.44, 358.208, 1404.8, 557.205);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2148.65, 3355.18, 246.252);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//***
				GenRectangle1(&ho_ROI_0, 116.436, 3.8595, 2307.6, 4149.42);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 1.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
				FillUp(ho_RegionCount1, &ho_RegionFillUp3);
				ClosingRectangle1(ho_RegionFillUp3, &ho_RegionCount1, 100, 100);

				//检测区域
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Difference(ho_RegionDifference, ho_RegionDilation51, &ho_RegionDifference
					);

				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference10);
				//dev_display (ImageAffineTrans)
				//dev_display (RegionDifference10)
				//stop ()

				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_82);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_82);
				hv___Tmp_Ctrl_Dict_Init_82 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_83);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "YS", hv___Tmp_Ctrl_Dict_Init_83);
				hv___Tmp_Ctrl_Dict_Init_83 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_84);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_84);
				hv___Tmp_Ctrl_Dict_Init_84 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "g_o",
					(HTuple(5).Append(9)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					25);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_85);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_85);
				hv___Tmp_Ctrl_Dict_Init_85 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
					(HTuple(0).Append(35)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
					(HTuple(5).Append(7)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionDifference10, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 3)))
			{

				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2587.65, 1000.4898, 2993.1, 3500.17);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1901.73, 2253.54, 2692.8, 3759.78);
				//仿射变换
				CreateDict(&hv_at);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(2111).Append(3597)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测焊缝毛刺
				GenRectangle1(&ho_ROI_0, 2256.39, -13.2628, 2421.92, 1766.08);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				DilationCircle(ho_ROI_0, &ho_RegionDilation15, 5);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation15, &ho_ImageReduced17
					);
				GrayOpeningRect(ho_ImageReduced17, &ho_ImageOpening10, 5, 30);
				GrayClosingRect(ho_ImageOpening10, &ho_ImageClosing18, 1, 50);
				MedianRect(ho_ImageClosing18, &ho_ImageMedian4, 3, 3);
				ScaleImage(ho_ImageMedian4, &ho_ImageScaled6, 1.5, -110);
				Threshold(ho_ImageScaled6, &ho_Region20, 0, 150);
				ClosingRectangle1(ho_Region20, &ho_RegionClosing5, 130, 30);
				Connection(ho_RegionClosing5, &ho_ConnectedRegions16);
				HeightWidthRatio(ho_ROI_0, &hv_Height2, &hv_Width2, &hv_Ratio1);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions24, "width", "and",
					hv_Width2 - 200, 99999);
				OpeningRectangle1(ho_SelectedRegions24, &ho_SelectedRegions24, 30, 1);
				ShapeTrans(ho_SelectedRegions24, &ho_RegionTrans10, "rectangle1");
				//检测亮斑
				MoveRegion(ho_RegionTrans10, &ho_RegionMoved17, -20, 0);
				MoveRegion(ho_RegionMoved17, &ho_RegionMoved19, -50, 0);
				Difference(ho_RegionMoved17, ho_RegionMoved19, &ho_RegionDifference20);
				DilationCircle(ho_RegionDifference20, &ho_RegionDilation20, 10);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation20, &ho_ImageReduced19
					);
				GrayClosingRect(ho_ImageReduced19, &ho_ImageClosing20, 3, 5);
				GrayOpeningRect(ho_ImageClosing20, &ho_ImageOpening11, 3, 15);
				MedianRect(ho_ImageOpening11, &ho_ImageMedian5, 3, 3);
				GrayOpeningRect(ho_ImageMedian5, &ho_ImageOpening16, 10, 50);
				SubImage(ho_ImageOpening16, ho_ImageMedian5, &ho_ImageSub17, 1, 128);
				Threshold(ho_ImageSub17, &ho_Region22, 0, 30);
				Intersection(ho_Region22, ho_ROI_0, &ho_Region22);
				Connection(ho_Region22, &ho_ConnectedRegions25);
				SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions33, (HTuple("area").Append("width")),
					"and", (HTuple(130).Append(3)), (HTuple(99999).Append(100)));
				SelectGray(ho_SelectedRegions33, ho_ImageAffineTrans, &ho_SelectedRegions35,
					"mean", "and", 235, 255);
				AffineTransRegion(ho_SelectedRegions35, &ho_SelectedRegions35, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				//concat_obj (dt.['83'], SelectedRegions35, dt.['83'])
				//检测暗斑
				MoveRegion(ho_RegionTrans10, &ho_RegionMoved14, -40, 0);
				MoveRegion(ho_RegionMoved14, &ho_RegionMoved15, -30, 0);
				Difference(ho_RegionMoved14, ho_RegionMoved15, &ho_RegionDifference8);

				DilationRectangle1(ho_RegionDifference8, &ho_RegionDilation19, 10, 40);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation19, &ho_ImageReduced18
					);
				RankRect(ho_ImageReduced18, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Intersection(ho_Region21, ho_RegionDifference8, &ho_RegionIntersection6);

				//
				GenRectangle1(&ho_ROI_0, 1194.32, 223.76, 2141.96, 1432.06);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				Intensity(ho_ROI_0, ho_ImageAffineTrans, &hv_Mean1, &hv_Deviation1);
				Connection(ho_RegionIntersection6, &ho_ConnectedRegions23);
				SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions25, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(130).Append(3)), (HTuple(99999).Append(999)));
				hv_m = 100;
				hv_m1 = 120;
				if (0 != (int(hv_Mean1>100)))
				{
					hv_m = hv_Mean1 - 45;
					hv_m1 = hv_Mean1 - 15;
				}
				SelectGray(ho_SelectedRegions25, ho_ImageAffineTrans, &ho_SelectedRegions26,
					"mean", "and", 0, hv_m);

				SelectShape(ho_SelectedRegions25, &ho_SelectedRegions31, "area", "and", 500,
					999999);
				SelectGray(ho_SelectedRegions31, ho_ImageAffineTrans, &ho_SelectedRegions32,
					"mean", "and", 0, hv_m1);
				Union2(ho_SelectedRegions26, ho_SelectedRegions32, &ho_RegionUnion9);
				Connection(ho_RegionUnion9, &ho_ConnectedRegions24);


				AffineTransRegion(ho_ConnectedRegions24, &ho_ConnectedRegions24, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_ConnectedRegions24, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

				//LC检测区域
				GenRectangle1(&ho_ROI_0, -122.143, 1892.8, 2260.88, 4168.31);
				GenCircle(&ho_TMP_Region, -1474.09, -677.109, 3843.39);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2017.6, 2306.15, 2630.04, 3640.66);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2246.91, 1825.29, HTuple(-55.0975).TupleRad(),
					306.796, 122.205);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0lc, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//stop ()

				//检测下部区域
				GenRectangle1(&ho_ROI_0, 1944.45, 2148.91, 2672.6, 3696.25);
				//gen_rectangle1 (ROI_0, 1641.58, 2243.94, 2448.95, 3987.46)
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced40);
				MedianRect(ho_ImageReduced40, &ho_ImageMedian42, 15, 15);
				ScaleImage(ho_ImageMedian42, &ho_ImageScaled32, 2, -100);
				Threshold(ho_ImageScaled32, &ho_Region59, 0, 80);
				FillUp(ho_Region59, &ho_RegionFillUp9);
				OpeningCircle(ho_RegionFillUp9, &ho_RegionOpening39, 100);
				ShapeTrans(ho_RegionOpening39, &ho_RegionTrans32, "rectangle1");
				MoveRegion(ho_RegionTrans32, &ho_RegionMoved31, 100, 0);
				Difference(ho_RegionOpening39, ho_RegionMoved31, &ho_RegionDifference44);
				ShapeTrans(ho_RegionDifference44, &ho_RegionTrans9, "rectangle1");

				MoveRegion(ho_RegionTrans9, &ho_RegionMoved103, 205, -2100);
				DilationRectangle1(ho_RegionMoved103, &ho_RegionMoved103, 400, 1);


				ConcatObj(ho_Reg, ho_RegionMoved103, &ho_Reg);

				ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved103, &ho_ImageReduced111);


				GenRectangle1(&ho_ROI_0, 12.046, 1393.85, 587.51, 2062.87);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced14);
				GrayClosingRect(ho_ImageReduced14, &ho_ImageClosing16, 20, 20);
				ScaleImage(ho_ImageClosing16, &ho_ImageScaled5, 1.5, -50);
				Threshold(ho_ImageScaled5, &ho_Region18, 0, 30);
				Connection(ho_Region18, &ho_ConnectedRegions20);
				SelectShape(ho_ConnectedRegions20, &ho_SelectedRegions20, (HTuple("area").Append("circularity")),
					"and", (HTuple(3000).Append(0.7)), (HTuple(9999).Append(1)));
				CountObj(ho_SelectedRegions20, &hv_Number4);
				if (0 != (int(hv_Number4 == 1)))
				{

					ShapeTrans(ho_SelectedRegions20, &ho_RegionTrans24, "outer_circle");
					DilationCircle(ho_RegionTrans24, &ho_RegionDilation53, 235);
					ShapeTrans(ho_RegionDilation53, &ho_RegionTrans25, "rectangle1");

					//检测大压伤
					AreaCenter(ho_RegionTrans25, &hv_Area, &hv_Row, &hv_Column);
					GenRectangle1(&ho_Rectangle1, hv_Row - 100, 0, hv_Row + 1900, hv_Column);
					Difference(ho_Rectangle1, ho_RegionDilation53, &ho_RegionDifference19);
					CreateDict(&hv_dd);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_88);
					SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_88);
					hv___Tmp_Ctrl_Dict_Init_88 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_89);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_89);
					hv___Tmp_Ctrl_Dict_Init_89 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_90);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_90);
					hv___Tmp_Ctrl_Dict_Init_90 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_RegionDifference19, hv_dd.TupleGetDictTuple("LD"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

					//**检测螺纹孔
					ShapeTrans(ho_SelectedRegions20, &ho_RegionTrans7, "outer_circle");
					DilationCircle(ho_RegionTrans7, &ho_RegionDilation17, 15);
					DilationCircle(ho_RegionDilation17, &ho_RegionDilation18, 105);
					Difference(ho_RegionDilation18, ho_RegionDilation17, &ho_RegionDifference12
						);
					ConcatObj(ho_Reg, ho_RegionDifference12, &ho_Reg);
					ReduceDomain(ho_ImageAffineTrans, ho_RegionDifference12, &ho_ImageReduced15
						);

					GrayOpeningRect(ho_ImageReduced15, &ho_ImageOpening8, 15, 15);
					GrayClosingRect(ho_ImageOpening8, &ho_ImageClosing17, 13, 13);
					SubImage(ho_ImageOpening8, ho_ImageClosing17, &ho_ImageSub9, 1.5, 128);

					Threshold(ho_ImageSub9, &ho_Region19, 0, 30);
					Connection(ho_Region19, &ho_ConnectedRegions21);
					SelectShape(ho_ConnectedRegions21, &ho_SelectedRegions21, "area", "and",
						500, 99999);
					CountObj(ho_SelectedRegions21, &hv_Number5);
					if (0 != (int(hv_Number5 == 0)))
					{
						GrayClosingRect(ho_ImageOpening8, &ho_ImageClosing17, 40, 40);
						SubImage(ho_ImageOpening8, ho_ImageClosing17, &ho_ImageSub9, 1.5, 128);

						Threshold(ho_ImageSub9, &ho_Region19, 0, 30);
						Connection(ho_Region19, &ho_ConnectedRegions22);
						SelectShape(ho_ConnectedRegions22, &ho_SelectedRegions22, (HTuple("area").Append("inner_radius")),
							"and", (HTuple(1000).Append(10)), (HTuple(999999).Append(999)));
						AffineTransRegion(ho_SelectedRegions22, &ho_SelectedRegions22, hv_at.TupleGetDictTuple("hom_mat_rot"),
							"nearest_neighbor");
						ConcatObj((*hv_dt).TupleGetDictObject("86"), ho_SelectedRegions22, &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "86");
					}
				}

				//检测缺口
				GenRectangle1(&ho_ROI_0, -110.809, -135.788, 834.745, 2114.9);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				MoveRegion(ho_ROI_0, &ho_ROI_0, 200, -300);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced13);
				GrayOpeningRect(ho_ImageReduced13, &ho_ImageOpening7, 5, 5);
				GrayClosingRect(ho_ImageOpening7, &ho_ImageClosing15, 15, 15);
				MedianRect(ho_ImageClosing15, &ho_ImageMedian12, 15, 15);

				ScaleImage(ho_ImageMedian12, &ho_ImageScaled3, 1.5, -30);
				Threshold(ho_ImageScaled3, &ho_Region17, 70, 255);

				Connection(ho_Region17, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_SelectedRegions18, "area", "and",
					500000, 9999999);
				FillUp(ho_SelectedRegions18, &ho_RegionFillUp7);
				ShapeTrans(ho_RegionFillUp7, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved18, 0, -400);
				Intersection(ho_RegionFillUp7, ho_RegionMoved18, &ho_RegionIntersection4);
				ConcatObj(ho_Reg, ho_RegionIntersection4, &ho_Reg);
				ShapeTrans(ho_RegionIntersection4, &ho_RegionTrans6, "convex");
				Difference(ho_RegionTrans6, ho_RegionIntersection4, &ho_RegionDifference11
					);
				OpeningCircle(ho_RegionDifference11, &ho_RegionOpening4, 5);
				Connection(ho_RegionOpening4, &ho_ConnectedRegions18);
				SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions19, "area", "and",
					300, 9999999);
				AffineTransRegion(ho_SelectedRegions19, &ho_SelectedRegions19, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions19, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");

				CreateDict(&hv_dd);
				//检测LC
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_92);
				SetDictTuple(hv_dd, "LLC", hv___Tmp_Ctrl_Dict_Init_92);
				hv___Tmp_Ctrl_Dict_Init_92 = HTuple(HNULL);
				//检测镭雕

				//dd.LD.LB.s_g := [170,255]

				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ROI_0lc, hv_dd.TupleGetDictTuple("LLC"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2630.85, 70.5031, 3075.56, 1445.59);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 83.887, 2739.03, 723.205, 3283.37);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(587).Append(2872)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");
				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//下U1.2平面溢胶
				GenRectangle1(&ho_ROI_0, 2182.09, 3042.34, 2500.73, 3394.07);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_00, &ho_ImageReduced7);
				GrayClosingRect(ho_ImageReduced7, &ho_ImageClosing10, 10, 10);
				ScaleImage(ho_ImageClosing10, &ho_ImageScaled, 1.5, -100);
				Threshold(ho_ImageScaled, &ho_Region10, 128, 255);
				AreaCenter(ho_Region10, &hv_Area1, &hv_Row3, &hv_Column3);
				if (0 != (int(hv_Area1<35000)))
				{
					AffineTransRegion(ho_Region10, &ho_Region10, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("88"), ho_Region10, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "88");

				}

				//亮LC检测区域
				GenRectangle1(&ho_ROI_0, -7.14833, -2.78905, 2397.79, 1307.93);
				GenRectangle1(&ho_TMP_Region, 33.488, 1253.88, 1613.37, 1786.36);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00L, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//镭雕屏蔽区域
				GenRectangle2(&ho_ROI_0, 4.57159, 1954.34, HTuple(-67.2497).TupleRad(), 139.105,
					66.2092);
				GenRectangle1(&ho_TMP_Region, 71.7288, 1903.45, 2160.69, 2061.43);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2209.14, 2580.75, 188.416);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2111.83, 2667.05, 131.726);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1958.8, 2749.53, 2052.73, 2919.35);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1110.02, 2904.58, 2037.78, 3004.08);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle2(&ho_TMP_Region, 1935.15, 2850.62, HTuple(38.8557).TupleRad(),
					135.286, 62.6114);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 980.456, 3082.21, 220.92);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 758.12, 3092.67, 235.569);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 764.651, 2871.42, 978.298, 2962.14);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2119.99, 1988.41, 2260.47, 2503.46);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//镭雕区域检测
				GenRectangle1(&ho_ROI_0, -85.2013, 1706.75, 2215.78, 3212.72);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced27);
				GrayClosingRect(ho_ImageReduced27, &ho_ImageClosing26, 20, 20);
				SubImage(ho_ImageReduced27, ho_ImageClosing26, &ho_ImageSub13, 2, 128);
				Threshold(ho_ImageSub13, &ho_Region30, 0, 60);

				RankRegion(ho_Region30, &ho_RegionCount6, 15, 15, 70);
				RankRegion(ho_RegionCount6, &ho_RegionCount7, 30, 30, 800);
				FillUp(ho_RegionCount7, &ho_RegionCount7);
				Connection(ho_RegionCount7, &ho_ConnectedRegions35);
				SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions34, "area", "and",
					100000, 999999999);
				ConcatObj(ho_Reg, ho_SelectedRegions34, &ho_Reg);

				Difference(ho_SelectedRegions34, ho_ROI_00, &ho_RegionDifference3);

				//检测亮LD
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_95);
				SetDictTuple(hv_dd, "LLC", hv___Tmp_Ctrl_Dict_Init_95);
				hv___Tmp_Ctrl_Dict_Init_95 = HTuple(HNULL);
				//检测LD
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_96);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_96);
				hv___Tmp_Ctrl_Dict_Init_96 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_97);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_97);
				hv___Tmp_Ctrl_Dict_Init_97 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_98);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_98);
				hv___Tmp_Ctrl_Dict_Init_98 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
					(HTuple(7).Append(5)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					25);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ROI_00L, hv_dd.TupleGetDictTuple("LLC"), "region");
				SetDictObject(ho_RegionDifference3, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//stop ()
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, -16.1286, 3643.37, 3078.49, 4115.02);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1642.12, 2668.78, 2209.04, 3252.24);
				SetDictTuple(hv_at, "point", 1);
				SetDictTuple(hv_at, "rc", (HTuple(1901).Append(2799)));
				SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//屏蔽区域
				GenRectangle2(&ho_ROI_0, 1085.67, 2964.96, HTuple(24.8174).TupleRad(), 212.068,
					115.406);
				GenRectangle2(&ho_TMP_Region, 2025.88, 2969.46, HTuple(-23.8439).TupleRad(),
					206.469, 112.782);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				OpeningCircle(ho_ROI_0, &ho_ROI_0, 85);
				GenCircle(&ho_TMP_Region, 840.274, 3106.4, 155.55);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2206.3, 2119.86, 188.457);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2272.19, 3105.95, 150.206);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 3200.95, 3140.54, 267.859);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1143.03, -228.263, 1984.97, 1277.97);
				OpeningCircle(ho_TMP_Region, &ho_TMP_Region, 105);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1024.29, -5.85196, 1090.5, 1914.18);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 914.501, 1858.79, 169.89);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -50.3846, 1934.13, 901.388, 2045.86);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2031.82, -42.0635, 2128.4, 2065.3);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2291.85, 1956.01, 2565.09, 2042.93);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2542.33, 1975.95, 3080.54, 2069.09);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//提取检测区域
				GenRectangle1(&ho_ROI_0, 0.6829, 0.751, 3068.57, 3665.42);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 200);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions2, "width", "and", 1500,
					99999);
				DilationCircle(ho_SelectedRegions2, &ho_RegionDilation3, 30);

				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union2(ho_RegionDilation3, ho_SelectedRegions, &ho_SelectedRegions);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
				//检测区域
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference);
				ConcatObj(ho_Reg, ho_RegionDifference, &ho_Reg);
				//检测LD
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_101);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_101);
				hv___Tmp_Ctrl_Dict_Init_101 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_102);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_102);
				hv___Tmp_Ctrl_Dict_Init_102 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_103);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_103);
				hv___Tmp_Ctrl_Dict_Init_103 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
					(HTuple(7).Append(7)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "g_o",
					(HTuple(5).Append(7)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
					(HTuple(11).Append(5)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "thr",
					(HTuple(0).Append(35)));
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					25);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionDifference, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//stop ()
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2194.98, -27.8839, 2718.85, 1239.26);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1009.7, 2894.99, 2039.88, 4144.57);
				SetDictTuple(hv_at, "point", 1);
				SetDictTuple(hv_at, "rc", (HTuple(1162).Append(3048)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "rscal", (HTuple(3).Append(-100)));
				SetDictTuple(hv_at, "scal", (HTuple(3).Append(-150)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				//at.rotreg := ROI_0
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测LC压伤
				//屏蔽区域
				GenCircle(&ho_ROI_0, 2722.46, 1644.11, 250.885);

				GenRectangle1(&ho_Rectangle2, 1512, -500, 2522, 1394);
				Union2(ho_ROI_0, ho_Rectangle2, &ho_ROI_0);

				GenRectangle1(&ho_ROI_01, 2427.5, 1700.2, 2708.36, 2525.25);
				Union2(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				GrayClosingRect(ho_ImageAffineTrans, &ho_ImageClosing28, 20, 20);
				SubImage(ho_ImageAffineTrans, ho_ImageClosing28, &ho_ImageSub15, 4.5, 128);
				Threshold(ho_ImageSub15, &ho_Region33, 0, 60);
				RankRegion(ho_Region33, &ho_RegionCount8, 15, 15, 70);
				RankRegion(ho_RegionCount8, &ho_RegionCount9, 120, 120, 5000);
				FillUp(ho_RegionCount9, &ho_RegionFillUp9);
				Connection(ho_RegionFillUp9, &ho_ConnectedRegions40);
				SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions39, "area", "and",
					500000, 99999999);
				Union1(ho_SelectedRegions39, &ho_RegionUnion12);
				Difference(ho_RegionUnion12, ho_ROI_0, &ho_RegionUnion12);
				ErosionCircle(ho_RegionUnion12, &ho_RegionErosion7, 35);
				//
				ConcatObj(ho_RegionErosion7, ho_Reg, &ho_Reg);
				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_106);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_106);
				hv___Tmp_Ctrl_Dict_Init_106 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_107);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_107);
				hv___Tmp_Ctrl_Dict_Init_107 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionErosion7, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
						);
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

				//检测缺口
				//gen_rectangle1 (ROI_0, 1970.58, -177.742, 3368.95, 2238.43)
				//reduce_domain (ImageAffineTrans, ROI_0, ImageReduced13)
				//gray_opening_rect (ImageReduced13, ImageOpening7, 5, 5)
				//gray_closing_rect (ImageOpening7, ImageClosing15, 15, 15)
				//median_rect (ImageClosing15, ImageMedian12, 15, 15)

				//scale_image (ImageMedian12, ImageScaled3, 2.5, -30)
				//threshold (ImageScaled3, Region17, 70, 255)

				//connection (Region17, ConnectedRegions17)
				//select_shape (ConnectedRegions17, SelectedRegions18, 'area', 'and', 500000, 9999999)
				//fill_up (SelectedRegions18, RegionFillUp7)
				//shape_trans (RegionFillUp7, RegionTrans5, 'rectangle1')
				//move_region (RegionTrans5, RegionMoved18, 0, -400)
				//intersection (RegionFillUp7, RegionMoved18, RegionIntersection4)

				//shape_trans (RegionIntersection4, RegionTrans6, 'convex')
				//difference (RegionTrans6, RegionIntersection4, RegionDifference11)
				//opening_circle (RegionDifference11, RegionOpening4, 5)
				//connection (RegionOpening4, ConnectedRegions18)
				//select_shape (ConnectedRegions18, SelectedRegions19, 'area', 'and', 300, 9999999)
				//affine_trans_region (SelectedRegions19, SelectedRegions19, at.hom_mat_rot, 'nearest_neighbor')
				//concat_obj (dt.['85'], SelectedRegions19, dt.['85'])
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2357.81, 1752.68, 2726.45, 2811.79);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 2003.41, 1263.95, 2740.69, 2703.4);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(2503).Append(1450)));
				SetDictTuple(hv_at, "opening", (HTuple(300).Append(100)));
				SetDictTuple(hv_at, "move", (HTuple(-130).Append(0)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "rscal", (HTuple(2.5).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测镭雕区域大亮斑
				//检测区域

				GenRectangle1(&ho_ROI_0, -52.2276, -67.8844, 3116.86, 701.651);
				GenRectangle1(&ho_TMP_Region, 1023.44, 544.434, 3100.31, 1620.13);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2408.65, 1520.84, 3120.25, 4110.78);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1484.93, 453.641, 245.789);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenCircle(&ho_TMP_Region, 330.522, 395.529, 206.861);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2395.09, 925.171, 3185.48, 1599.67);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0L, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_110);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_110);
				hv___Tmp_Ctrl_Dict_Init_110 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_111);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_111);
				hv___Tmp_Ctrl_Dict_Init_111 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ROI_0L, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				//DefectDetectionAlgorithms (dd, dt)
				//dev_display (dd.image)
				//dev_display (dd.resreg)

				//镭雕检测区域
				GenRectangle1(&ho_ROI_0, -87.587, -101.84, 2767.07, 2281.24);
				GenRectangle1(&ho_TMP_Region, 1981.01, -209.41, 3197.34, 4069.96);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 4, 128);
				Threshold(ho_ImageSub, &ho_Region1, 80, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 150);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
				//镭雕屏蔽区域
				GenCircle(&ho_ROI_0, 320.672, 389.181, 150.894);
				GenRectangle2(&ho_TMP_Region, 221.311, 542.34, HTuple(27.9008).TupleRad(),
					79.6262, 40.1392);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -160.39186, 583.734, 217.171, 654.105);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 439.438, 249.188, HTuple(-136.541).TupleRad(),
					76.6382, 30.2082);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 434.38, -2.33844, 513.452, 223.107);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 447.862, 535.615, HTuple(-42.2845).TupleRad(),
					76.9876, 40.9355);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 469.014, 579.231, 2059.87, 635.151);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1304.5, -6.8194, 1408.01, 591.328);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1505.26, 454.666, 210.184);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2187.29, 491.167, HTuple(-132.685).TupleRad(),
					187.116, 32.3074);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2309.37, 0.363943, 2363.24, 380.346);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -160.341433, 721.495, 2030.29, 804.851);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1005.65, 840.281, HTuple(-40.5261).TupleRad(),
					74.9319, 25.8139);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 989.207, 871.618, 1063.73, 1393.19);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2093.43, 658.809, HTuple(-0).TupleRad(), 97.2766,
					33.1179);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2066.38, 721.023, HTuple(-126.374).TupleRad(),
					73.3391, 34.0104);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2158.31, 677.089, HTuple(-116.99).TupleRad(),
					87.0929, 32.1444);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2271.06, 662.45, HTuple(-88.8986).TupleRad(),
					76.1569, 30.7368);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2383.58, 698.149, HTuple(-56.8986).TupleRad(),
					56.8868, 28.4768);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2460.89, 758.446, HTuple(-38.4908).TupleRad(),
					51.5994, 25.9059);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2504.36, 844.545, HTuple(-20.9317).TupleRad(),
					75.3944, 29.5558);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2522.81, 965.708, HTuple(7.27676).TupleRad(),
					69.3633, 21.602);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2482.58, 1080.4, HTuple(24.7077).TupleRad(),
					80.5727, 28.9725);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2420.49, 1143.12, 2484.92, 1468.11);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2492.66, 942.193, 3117.52, 1562.89);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 59.4537, 1826.55, 2579.02, 4077.24);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Difference(ho_RegionDifference, ho_ROI_0, &ho_RegionDifference24);
				//dev_display (ImageAffineTrans)
				//dev_display (RegionDifference24)
				//stop ()
				//检测台阶及亮斑
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_113);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_113);
				hv___Tmp_Ctrl_Dict_Init_113 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_114);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_114);
				hv___Tmp_Ctrl_Dict_Init_114 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_115);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_115);
				hv___Tmp_Ctrl_Dict_Init_115 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					30);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionDifference24, hv_dd.TupleGetDictTuple("LD"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, -54.2096, -21.8826, 3131.43, 656.633);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1828.07, 1377.51, 2495.13, 2635.57);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(2358).Append(1607)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//镭雕屏蔽区域

				GenCircle(&ho_ROI_0, 49.435, 1295.58, 136.872);
				GenRectangle1(&ho_TMP_Region, 54.6478, 1158.76, 205.899, 1428.01);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -56.7464, 1363.45, 15.0036, 1593.29);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 15.4757, 1577.86, 121.56);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 67.9801, 1423.23, 111.909, 1503.74);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 41.0804, 1665.78, 96.7233, 1916.12);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -17.5242, 1880.96, 60.0829, 1933.66);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, -61.3076, 1682.69, -2.73619, 1931.56);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle2(&ho_TMP_Region, 48.4906, 2003.04, HTuple(-43.3196).TupleRad(),
					99.5687, 33.1179);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 501.887, 3424.87, HTuple(39.8124).TupleRad(),
					91.4783, 42.1445);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 430.362, 3476.91, 506.953, 4106.1);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1276.4, 3489.93, 1419.23, 4112.92);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1783.89, 807.105, 165.06);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1859.95, 905.153, 1927.31, 1124.74);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1613.16, 1146.87, 1826.95, 1224.46);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1857.7, 1141.02, HTuple(48.821).TupleRad(),
					77.8196, 34.0192);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1827.76, 941.808, 1873.15, 1009.15);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1921.98, 722.014, HTuple(-131.525).TupleRad(),
					68.4549, 23.4257);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1966.97, 648.335, 3079.1, 724.423);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1806.39, 3407.72, 2247.3, 3507.07);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2279.13, 3486.11, HTuple(-54.6954).TupleRad(),
					86.1249, 34.5965);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2292.31, 3528.45, 2356.74, 4103.77);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2315.17, 3469.02, 2497.5, 3518.73);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2522.17, 3472.86, HTuple(-128.843).TupleRad(),
					47.8831, 23.754);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2534.23, 3051.73, 2601.58, 3457.68);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2706.02, 1592.02, 253.447);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2726.78, 2980.34, 205.116);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2802.08, 3426.84, 209.492);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2530.72, 1748.88, 2633.15, 2975.05);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2881.57, 1301.57, 3078.22, 1392.64);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2854.66, 1371.94, HTuple(-122.615).TupleRad(),
					61.4391, 33.1179);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2659.55, 3210.79, HTuple(-4.51466).TupleRad(),
					157.788, 34.8716);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2844.57, 1702.57, 2923.59, 2917.04);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2933.7, 3528.35, 3070.32, 3604.93);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2919.2, 3631.83, HTuple(34.8285).TupleRad(),
					57.9918, 33.1179);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//镭雕检测区域
				GenRectangle1(&ho_ROI_0, -44.7706, 530.139, 3114.49, 4122.48);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 900);
				//
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);

				FillUpShape(ho_RegionDifference, &ho_RegionDifference, "area", 1, 10000);
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference7);
				if (HDevWindowStack::IsOpen())
					DispObj(ho_ImageAffineTrans, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(ho_RegionDifference7, HDevWindowStack::GetActive());
				//stop ()
				ConcatObj(ho_Reg, ho_RegionDifference7, &ho_Reg);


				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_118);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_118);
				hv___Tmp_Ctrl_Dict_Init_118 = HTuple(HNULL);

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_119);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_119);
				hv___Tmp_Ctrl_Dict_Init_119 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "g_o",
					(HTuple(20).Append(50)));
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_120);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_120);
				hv___Tmp_Ctrl_Dict_Init_120 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					30);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionDifference7, hv_dd.TupleGetDictTuple("LD"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

				//检测压伤
				GenRectangle1(&ho_ROI_0, 2.42571, 622.677, 3068.57, 4092.57);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);

				TextureLaws(ho_ImageReduced, &ho_ImageTexture, "el", 2, 5);
				TextureLaws(ho_ImageReduced, &ho_ImageTexture1, "le", 2, 5);
				AddImage(ho_ImageTexture, ho_ImageTexture1, &ho_ImageResult, 0.8, -30);

				Threshold(ho_ImageResult, &ho_Region2, 0, 60);
				RankRegion(ho_Region2, &ho_RegionCount4, 20, 20, 250);
				RankRegion(ho_RegionCount4, &ho_RegionCount5, 30, 30, 350);

				FillUpShape(ho_RegionCount5, &ho_RegionFillUp2, "area", 1, 20000);
				OpeningCircle(ho_RegionFillUp2, &ho_RegionFillUp2, 25);
				Connection(ho_RegionFillUp2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 2500000,
					9999999999999);
				CountObj(ho_SelectedRegions5, &hv_Number);
				if (0 != hv_Number)
				{
					DilationCircle(ho_SelectedRegions5, &ho_RegionDilation1, 20);
					DilationCircle(ho_RegionDilation1, &ho_RegionDilation7, 55);

					Difference(ho_RegionDilation7, ho_RegionDilation1, &ho_RegionDifference5
						);
					DilationCircle(ho_RegionDifference5, &ho_RegionDilation8, 5);
					//
					ConcatObj(ho_Reg, ho_RegionDilation8, &ho_Reg);

					ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation8, &ho_ImageReduced1
						);

					ZoomImageFactor(ho_ImageReduced1, &ho_ImageZoomed, 0.5, 0.5, "constant");
					MedianRect(ho_ImageZoomed, &ho_ImageMedian6, 7, 7);

					GrayClosingRect(ho_ImageMedian6, &ho_ImageClosing1, 30, 12);
					MedianRect(ho_ImageClosing1, &ho_ImageMedian7, 5, 5);
					GrayClosingRect(ho_ImageMedian7, &ho_ImageClosing6, 150, 30);
					SubImage(ho_ImageMedian7, ho_ImageClosing6, &ho_ImageSub4, 2, 128);
					Threshold(ho_ImageSub4, &ho_Region8, 0, 60);
					ZoomRegion(ho_Region8, &ho_RegionZoom, 2, 2);
					Intersection(ho_RegionZoom, ho_RegionDifference5, &ho_RegionIntersection1
						);
					Difference(ho_RegionIntersection1, ho_ROI_00, &ho_RegionIntersection1);
					Connection(ho_RegionIntersection1, &ho_ConnectedRegions6);
					SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions6, ((HTuple("area").Append("width")).Append("inner_radius")),
						"and", ((HTuple(150).Append(5)).Append(2.5)), ((HTuple(999999).Append(200)).Append(999)));
					AffineTransRegion(ho_SelectedRegions6, &ho_SelectedRegions6, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("84"), ho_SelectedRegions6, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "84");
				}
			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 162.052, 2545.59, 454.719, 3877.11);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 975.848, 2236.34, 2292.46, 2815.66);
				SetDictTuple(hv_at, "move", (HTuple(0).Append(180)));
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(2081).Append(2383)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(2).Append(-130)));
				SetDictTuple(hv_at, "area", (HTuple(60000).Append(99999999)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测焊缝毛刺
				GenRectangle1(&ho_ROI_0, 481.169, 3150.5, 574.32, 4108.77);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				DilationCircle(ho_ROI_00, &ho_RegionDilation21, 5);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation21, &ho_ImageReduced22
					);
				GrayOpeningRect(ho_ImageReduced22, &ho_ImageOpening19, 3, 5);
				MedianRect(ho_ImageOpening19, &ho_ImageMedian8, 3, 3);
				GrayClosingRect(ho_ImageMedian8, &ho_ImageClosing21, 3, 50);
				SubImage(ho_ImageMedian8, ho_ImageClosing21, &ho_ImageSub18, 1, 128);
				Threshold(ho_ImageSub18, &ho_Region23, 0, 30);
				Intersection(ho_Region23, ho_ROI_00, &ho_RegionIntersection7);
				OpeningCircle(ho_RegionIntersection7, &ho_RegionIntersection7, 1.5);
				Connection(ho_RegionIntersection7, &ho_ConnectedRegions26);
				SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions36, "area", "and",
					160, 99999);
				AffineTransRegion(ho_SelectedRegions36, &ho_SelectedRegions36, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("83"), ho_SelectedRegions36, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "83");

				//屏蔽区域
				GenCircle(&ho_ROI_0, 700.19, 2114.01, 178.706);
				GenRectangle1(&ho_TMP_Region, 531.793, 3036.84, 653.253, 4104.99);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 716.928, 933.451, 814.888, 1970.98);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1047.22, 594.08, 2428.61, 740.401);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 931.059, 836.174, HTuple(-120.299).TupleRad(),
					229.591, 59.9407);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2498.46, 1305.43, 145.349);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2488.21, 1161.96, 2656.61, 1448.89);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2466.8, 1593.43, 126.179);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2382.54, 1400.84, 2458.8, 1506.47);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2520.64, 1436.05, 2560.01, 1511.65);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2390.32, 1687.41, 2454.55, 1918.34);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2497.67, 1689.58, 2545.99, 1915.02);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2400.96, 1897.49, 2532.92, 1963.43);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2931.28, 3443.85, HTuple(34.6511).TupleRad(),
					69.2371, 26.7131);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle2(&ho_TMP_Region, 2487.1, 2003.23, HTuple(-43.9261).TupleRad(),
					109.759, 38.2011);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2866.32, 3481.46, 2932.22, 4113.88);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//检测区域
				GenRectangle1(&ho_ROI_0, 657.786, 628.529, 3068.57, 4092.57);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 600);
				//
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference14);
				//dev_display (ImageAffineTrans)
				//dev_display (RegionDifference14)
				//stop ()

				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_123);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_123);
				hv___Tmp_Ctrl_Dict_Init_123 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_124);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_124);
				hv___Tmp_Ctrl_Dict_Init_124 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "g_o",
					(HTuple(30).Append(50)));
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_125);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_125);
				hv___Tmp_Ctrl_Dict_Init_125 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "med",
					(HTuple(11).Append(7)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionDifference14, hv_dd.TupleGetDictTuple("LD"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 107.993, -0.4149, 526.535, 4119.07);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 357.808, 74.311, 1177.27, 917.122);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(450).Append(744)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测焊接变形
				GenRectangle1(&ho_ROI_0, 604.737, 964.479, 754.401, 3426.29);
				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				DilationCircle(ho_ROI_00, &ho_RegionDilation11, 10);
				ReduceDomain(ho_ImageAffineTrans, ho_RegionDilation11, &ho_ImageReduced12
					);
				GrayClosingRect(ho_ImageReduced12, &ho_ImageClosing13, 1, 10);
				GrayOpeningRect(ho_ImageClosing13, &ho_ImageOpening6, 5, 20);
				GrayClosingRect(ho_ImageOpening6, &ho_ImageClosing14, 3, 300);
				SubImage(ho_ImageOpening6, ho_ImageClosing14, &ho_ImageSub10, 1, 128);
				Threshold(ho_ImageSub10, &ho_Region14, 0, 30);
				Connection(ho_Region14, &ho_ConnectedRegions14);
				SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions16, (HTuple("area").Append("inner_radius")),
					"and", (HTuple(150).Append(3)), (HTuple(9999999).Append(999)));
				AffineTransRegion(ho_SelectedRegions16, &ho_SelectedRegions16, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("89"), ho_SelectedRegions16, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "89");
				//镭雕屏蔽区域
				GenRectangle1(&ho_ROI_0, 197.488, -32.6554, 811.888, 4137.1);
				GenRectangle1(&ho_TMP_Region, 778.227, 3754.36, 1374.12, 3895.05);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 800.081, 700.408, 3087.54, 794.053);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1070.42, 583.62, 1155.29, 745.058);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1018.4, 572.908, 2607.18, 655.696);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2654.75, 536.264, HTuple(43.9261).TupleRad(),
					109.759, 59.8034);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 2790.3, 387.665, 132.922);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2886.97, 254.642, HTuple(-131.976).TupleRad(),
					83.6107, 37.6382);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2915.75, -5.14925, 2985.76, 214.392);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 2920.05, 514.451, HTuple(-45.5179).TupleRad(),
					82.7646, 29.3595);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2936.63, 562.087, 3070.26, 621.115);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 4072.71, 4032.53, 2649.13);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//镭雕检测区域
				GenRectangle1(&ho_ROI_0, 562.344, -96.7, 3177.05, 4214.36);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled4, 2, -50);
				Threshold(ho_ImageScaled4, &ho_Region16, 0, 50);
				Connection(ho_Region16, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_ConnectedRegions19, (HTuple("area").Append("circularity")),
					"and", (HTuple(3000).Append(0.7)), (HTuple(9000).Append(1)));
				DilationCircle(ho_ConnectedRegions19, &ho_RegionDilation16, 105);
				Union1(ho_RegionDilation16, &ho_RegionUnion3);

				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 3.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 20);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 700);
				//
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference15);

				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_128);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_128);
				hv___Tmp_Ctrl_Dict_Init_128 = HTuple(HNULL);

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_129);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_129);
				hv___Tmp_Ctrl_Dict_Init_129 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_130);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_130);
				hv___Tmp_Ctrl_Dict_Init_130 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					30);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionDifference15, hv_dd.TupleGetDictTuple("LD"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 11)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 127.993, -84.4149, 566.535, 4119.07);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 335.502, 3249.81, 1179.49, 4193.11);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(997).Append(3475)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//镭雕屏蔽区域
				GenRectangle1(&ho_ROI_0, 814.584, 1348.06, 1534.31, 1535.3);
				GenRectangle2(&ho_TMP_Region, 785.327, 1529.45, HTuple(48.9909).TupleRad(),
					178.349, 93.6229);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle1(&ho_TMP_Region, 604.368, -40.124, 700.948, 1645.5);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 3756.8, 286.756, 2239.68);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//镭雕检测区域
				GenRectangle1(&ho_ROI_0, 562.344, -96.7, 3177.05, 4214.36);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);

				ScaleImage(ho_ImageClosing, &ho_ImageScaled4, 2, -50);
				Threshold(ho_ImageScaled4, &ho_Region16, 0, 20);
				Connection(ho_Region16, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_ConnectedRegions19, (HTuple("area").Append("circularity")),
					"and", (HTuple(3000).Append(0.7)), (HTuple(9000).Append(1)));
				DilationCircle(ho_ConnectedRegions19, &ho_RegionDilation16, 105);
				Union1(ho_RegionDilation16, &ho_RegionUnion3);

				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 300);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 700);
				//
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				FillUp(ho_RegionDifference, &ho_RegionFillUp1);
				ClosingCircle(ho_RegionFillUp1, &ho_RegionDifference, 30);
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference);
				Connection(ho_RegionDifference, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions50, "area", "and",
					15000, 99999999);
				Union1(ho_SelectedRegions50, &ho_RegionDifference);
				ConcatObj(ho_Reg, ho_RegionDifference, &ho_Reg);
				//检测镭雕
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_133);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_133);
				hv___Tmp_Ctrl_Dict_Init_133 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_134);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_134);
				hv___Tmp_Ctrl_Dict_Init_134 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionDifference, hv_dd.TupleGetDictTuple("LD"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				if (false)
				{

					//
					GenRectangle1(&ho_ROI_0, 340.502, 3220.48, 1180.55, 4035.67);
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced20);
					GrayClosingRect(ho_ImageReduced20, &ho_ImageClosing22, 50, 50);
					ScaleImage(ho_ImageClosing22, &ho_ImageScaled9, 1.5, -50);
					Threshold(ho_ImageScaled9, &ho_Region24, 0, 30);
					OpeningRectangle1(ho_Region24, &ho_RegionOpening6, 50, 50);
					ShapeTrans(ho_RegionOpening6, &ho_RegionTrans11, "rectangle1");

					MoveRegion(ho_RegionTrans11, &ho_RegionMoved22, -240, 0);
					MoveRegion(ho_RegionMoved22, &ho_RegionMoved23, -150, 0);
					Difference(ho_RegionMoved22, ho_RegionMoved23, &ho_RegionDifference16);
					MoveRegion(ho_RegionDifference16, &ho_RegionMoved24, 0, 500);
					Difference(ho_RegionDifference16, ho_RegionMoved24, &ho_RegionDifference17
						);

					MoveRegion(ho_RegionDifference17, &ho_RegionMoved25, 0, -2230);
					DilationRectangle1(ho_RegionMoved25, &ho_RegionDilation24, 600, 1);

					MoveRegion(ho_RegionDilation24, &ho_RegionMoved65, 0, -300);
					ConcatObj(ho_Reg, ho_RegionMoved65, &ho_Reg);
					ReduceDomain(ho_Image, ho_RegionDilation24, &ho_ImageReduced21);

					GrayOpeningRect(ho_ImageReduced21, &ho_ImageOpening9, 2, 20);
					GrayClosingRect(ho_ImageOpening9, &ho_ImageClosing23, 1, 500);

					ScaleImage(ho_ImageClosing23, &ho_ImageScaled10, 1.5, -150);
					Threshold(ho_ImageScaled10, &ho_Region25, 0, 30);
					//
					DilationRectangle1(ho_Region25, &ho_Region25, 1, 5);
					OpeningRectangle1(ho_Region25, &ho_RegionOpening7, 600, 1);
					ShapeTrans(ho_RegionOpening7, &ho_RegionTrans14, "rectangle1");
					Connection(ho_RegionTrans14, &ho_ConnectedRegions30);
					SelectShape(ho_ConnectedRegions30, &ho_SelectedRegions30, "area", "and",
						1, 9999999);
					CountObj(ho_SelectedRegions30, &hv_Number9);
					GenEmptyObj(&ho_EmptyObject);
					if (0 != hv_Number9)
					{
						Union1(ho_SelectedRegions30, &ho_RegionUnion7);
						ShapeTrans(ho_RegionUnion7, &ho_RegionTrans15, "rectangle1");
						DilationRectangle1(ho_RegionTrans15, &ho_RegionDilation27, 1, 100);
						MoveRegion(ho_RegionDilation27, &ho_RegionMoved30, 45, 0);

						Difference(ho_Region25, ho_RegionMoved30, &ho_EmptyObject);
						OpeningCircle(ho_EmptyObject, &ho_RegionOpening12, 1.5);
						Intersection(ho_RegionOpening12, ho_RegionMoved65, &ho_EmptyObject);
						Connection(ho_EmptyObject, &ho_ConnectedRegions31);
						SelectShape(ho_ConnectedRegions31, &ho_EmptyObject, "area", "and", 300,
							9999999);
					}


					ShapeTrans(ho_Region25, &ho_RegionTrans12, "rectangle1");
					DilationRectangle1(ho_RegionTrans12, &ho_RegionDilation25, 1, 200);
					MoveRegion(ho_RegionDilation25, &ho_RegionMoved26, 98, 0);

					SubImage(ho_ImageOpening9, ho_ImageClosing23, &ho_ImageSub11, 1, 128);
					Threshold(ho_ImageSub11, &ho_Region26, 0, 30);
					Difference(ho_Region26, ho_RegionMoved26, &ho_RegionDifference18);

					Connection(ho_RegionDifference18, &ho_ConnectedRegions27);
					SelectShape(ho_ConnectedRegions27, &ho_SelectedRegions27, "area", "and",
						150, 999999);
					Union2(ho_SelectedRegions27, ho_EmptyObject, &ho_RegionUnion8);
					AffineTransRegion(ho_RegionUnion8, &ho_RegionUnion8, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("74"), ho_RegionUnion8, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "74");

				}
			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 140.868, 65.7999, 491.954, 1306.3);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 395.182, -130.31, 1197.98, 957.985);

				SetDictTuple(hv_at, "rg_c", (HTuple(50).Append(50)));
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "rc", (HTuple(1020).Append(598)));
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-250)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测镭雕
				GenRectangle1(&ho_ROI_0, 622.677, 1342.4, 3068.57, 3378.7);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced);
				GrayClosingRect(ho_ImageReduced, &ho_ImageClosing, 15, 15);
				SubImage(ho_ImageReduced, ho_ImageClosing, &ho_ImageSub, 2.5, 128);

				Threshold(ho_ImageSub, &ho_Region1, 101, 255);
				RankRegion(ho_Region1, &ho_RegionCount2, 15, 15, 100);
				RankRegion(ho_RegionCount2, &ho_RegionCount3, 30, 30, 250);

				FillUpShape(ho_RegionCount3, &ho_RegionFillUp, "area", 1, 5000);
				Connection(ho_RegionFillUp, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 20000,
					999099999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);

				DilationCircle(ho_RegionUnion, &ho_RegionDilation, 5);

				Threshold(ho_ImageSub, &ho_Region, 0, 100);
				RankRegion(ho_Region, &ho_RegionCount, 15, 15, 120);
				RankRegion(ho_RegionCount, &ho_RegionCount1, 30, 30, 800);
				//检测区域
				Difference(ho_RegionCount1, ho_RegionDilation, &ho_RegionDifference);
				Connection(ho_RegionDifference, &ho_ConnectedRegions10);
				SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions7, "area", "and", 15000,
					99999999);
				Union1(ho_SelectedRegions7, &ho_RegionDifference);

				//大缺陷
				OpeningRectangle1(ho_RegionDifference, &ho_RegionOpening, 600, 100);
				//
				SelectShape(ho_RegionOpening, &ho_SelectedRegions85, "area", "and", 150,
					1500000);
				AffineTransRegion(ho_SelectedRegions85, &ho_SelectedRegions85, hv_at.TupleGetDictTuple("hom_mat_rot"),
					"nearest_neighbor");
				ConcatObj((*hv_dt).TupleGetDictObject("85"), ho_SelectedRegions85, &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "85");
				//镭雕屏蔽区域
				GenRectangle1(&ho_ROI_0, 1319.89, 2444.82, 2207.65, 2875.01);
				OpeningCircle(ho_ROI_0, &ho_ROI_0, 85);
				GenRectangle1(&ho_TMP_Region, 1444.76, 2517.98, 2017.41, 2798.92);
				OpeningCircle(ho_TMP_Region, &ho_TMP_Region, 65);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				GenRectangle1(&ho_TMP_Region, 714.106, 1941.61, 1115.06, 2035.26);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 990.544, 2255.16, 313.536);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 1095.23, 1655.53, HTuple(-44.3714).TupleRad(),
					532.575, 82.3106);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1400.4, 1911.66, 3062.21, 2069.65);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_00, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				Difference(ho_RegionDifference, ho_ROI_00, &ho_RegionDifference34);
				ConcatObj(ho_Reg, ho_RegionDifference34, &ho_Reg);

				//检测镭雕
				CreateDict(&hv_dd);

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_137);
				SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_137);
				hv___Tmp_Ctrl_Dict_Init_137 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_138);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "LB", hv___Tmp_Ctrl_Dict_Init_138);
				hv___Tmp_Ctrl_Dict_Init_138 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("LB"), "med",
					(HTuple(9).Append(7)));
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_139);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "TJ", hv___Tmp_Ctrl_Dict_Init_139);
				hv___Tmp_Ctrl_Dict_Init_139 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("TJ"), "dyn",
					30);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionDifference34, hv_dd.TupleGetDictTuple("LD"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 681.75, 181.265, 1008.66, 1195.08);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 812.508, -107.722, 1689.59, 984.522);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "rc", (HTuple(1502).Append(642)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//RT检测区域
				GenRectangle1(&ho_ROI_0, 688.997, -47.2222, 981.569, 2310.9);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced50);
				GrayClosingRect(ho_ImageReduced50, &ho_ImageClosing40, 1, 130);
				GrayOpeningRect(ho_ImageClosing40, &ho_ImageOpening21, 30, 110);
				SubImage(ho_ImageOpening21, ho_ImageClosing40, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region55, 0, 30);
				Connection(ho_Region55, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions61, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(99)));
				CountObj(ho_SelectedRegions61, &hv_Number17);
				if (0 != hv_Number17)
				{
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_142);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_142);
					hv___Tmp_Ctrl_Dict_Init_142 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_143);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_143);
					hv___Tmp_Ctrl_Dict_Init_143 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_144);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_144);
					hv___Tmp_Ctrl_Dict_Init_144 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_SelectedRegions61, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
				else
				{
					AffineTransRegion(ho_Region55, &ho_Region55, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					//concat_obj (dt.['72'], Region55, dt.['72'])
				}
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 584.023, -36.7498, 1146.68, 4141.91);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 807.684, 3218.57, 1643.4, 4186.7);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(1484).Append(3443)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测上基准面
				GenRectangle1(&ho_ROI_0, 681.742, -10.7075, 1120.28, 4310.03);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 120);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 35, 140);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(4000).Append(80)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域

					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_147);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_147);
						hv___Tmp_Ctrl_Dict_Init_147 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_148);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_148);
						hv___Tmp_Ctrl_Dict_Init_148 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_149);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_149);
						hv___Tmp_Ctrl_Dict_Init_149 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

						GrayClosingRect(ho_ImageOpening17, &ho_ImageClosing2, 20, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing2, &ho_ImageSub1, 1, 128);
						Threshold(ho_ImageSub1, &ho_Region3, 0, 30);
						Connection(ho_Region3, &ho_ConnectedRegions1);
						SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions1, &hv_Number3);
						if (0 != hv_Number3)
						{
							DilationRectangle1(ho_SelectedRegions1, &ho_RegionDilation2, 350, 60);
							MoveRegion(ho_RegionDilation2, &ho_RegionMoved5, -30, 0);
						}
						else
						{
							GenRectangle1(&ho_RegionMoved5, 322.387, 1029.83, 401.407, 3344.79);
						}
						Union2(ho_SelectedRegions8, ho_RegionMoved5, &ho_RegionUnion2);
						DilationRectangle1(ho_RegionUnion2, &ho_RegionDilation12, 1, 30);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
						Threshold(ho_ImageScaled2, &ho_Region32, 80, 255);
						Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 836.91, -4.91026, 951.929, 723.63);
					GenRectangle1(&ho_TMP_Region, 837.903, 724.561, 1036.51, 945.614);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 834.25, 943.789, 993.152, 4099.78);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 988.812, 3283.37, 1025.07, 3625.11);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 951.916, 694.395, 994.39, 731.676);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 989.256, 950.608, 1018.26, 988.924);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 989.04, 3249.76, 1017.01, 3284.97);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 988.843, 3623.39, 1007.49, 3658.59);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ErosionRectangle1(ho_RegionErosion, &ho_RegionErosion, 1, 15);
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_151);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_151);
				hv___Tmp_Ctrl_Dict_Init_151 = HTuple(HNULL);

				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 582.183, -4.62977, 1062.1, 4091.29);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 864.517, 173.146, 1634.03, 942.682);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(976).Append(772)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测上基准面
				GenRectangle1(&ho_ROI_0, 737.327, -13.8929, 1109.67, 4115.12);
				GenRectangle1(&ho_TMP_Region, 999.697, 1132.55, 1202.31, 2206.55);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1005.39, -11.8531, 1134.25, 216.52);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1045.22, 3289.31, 1139.84, 3446.24);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 80);

				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 140);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 120);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4050;
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", hv_w.TupleConcat((HTuple(50).Append(6000))), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 50, 10);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1.5, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_154);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_154);
						hv___Tmp_Ctrl_Dict_Init_154 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_155);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_155);
						hv___Tmp_Ctrl_Dict_Init_155 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_156);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_156);
						hv___Tmp_Ctrl_Dict_Init_156 = HTuple(HNULL);
						SetDictTuple((hv_dd.TupleGetDictTuple("RT")).TupleGetDictTuple("B"),
							"gray", (HTuple(0).Append(150)));
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"1", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));

						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 30);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
						Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
						Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 861.882, 2.43018, 967.492, 624.637);
					GenRectangle1(&ho_TMP_Region, 864.959, 616.398, 1008.46, 1038.01);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 867.198, 1035.84, 963.841, 2317.11);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 866.214, 2302.98, 1003.86, 2970.54);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 865.109, 2967.57, 1068.64, 3204.73);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 867.794, 3205.7, 980.544, 4096.72);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 975.848, 3198.13, 1018.37, 3239.89);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1006.12, 2937.31, 1038.46, 2974.02);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 963.88, 262.627, 1038.56, 556.877);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);


					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
					ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 8);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_158);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_158);
				hv___Tmp_Ctrl_Dict_Init_158 = HTuple(HNULL);

				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 669.433, 2296.87, 1008.76, 4067.93);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1201.2, 1968.4, 1719.22, 2550.76);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1361).Append(2430)));
				SetDictTuple(hv_at, "area", (HTuple(45000).Append(9999999)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测
				//检测小塑胶
				//gen_rectangle1 (ROI_0, 1582.29, 226.355, 1809.16, 386.869)
				//affine_trans_region (ROI_0, ROI_0, HomMat2DTranslate, 'nearest_neighbor')
				//**检测小塑胶
				//dd := dict{}
				//dd := dict{}
				//dd.image := ImageAffineTrans
				//dd.hom_mat := HomMat2DRotate1

				//dd.XSJ := dict {}
				//dd.XSJ.region := ROI_0
				//dd.XSJ.sub := 5
				//            DefectDetectionAlgorithms_COPY_1 (dd, dt)
				//dev_display (dd.image)
				//dev_display (dd.resreg)
				//平面溢胶

				GenRectangle1(&ho_ROI_0, 980.261, 1538.76, 1290.01, 1874.29);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing11, 10, 10);
				ScaleImage(ho_ImageClosing11, &ho_ImageScaled1, 1.5, -100);
				Threshold(ho_ImageScaled1, &ho_Region12, 200, 255);
				OpeningCircle(ho_Region12, &ho_RegionOpening1, 4.5);
				ShapeTrans(ho_RegionOpening1, &ho_RegionTrans1, "convex");
				AreaCenter(ho_RegionTrans1, &hv_Area2, &hv_Row4, &hv_Column4);
				AreaCenter(ho_ROI_0, &hv_Area3, &hv_Row5, &hv_Column5);
				if (0 != (int((hv_Column4 - hv_Column5)>25)))
				{
					AffineTransRegion(ho_RegionTrans1, &ho_RegionTrans1, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("88"), ho_RegionTrans1, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "88");
				}
				//检测转角
				GenRectangle1(&ho_ROI_0, 503.247, -62.8589, 2289.42, 1669.16);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_161);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_161);
				hv___Tmp_Ctrl_Dict_Init_161 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);

				//polar_trans_image_inv (PolarTransImage, XYTransImage, Row22+185, Column22+185, rad(90), rad(180), 0, 2000, Width, Height, 'nearest_neighbor')
				//*********
				GenRectangle1(&ho_ROI_0, 716.932, 3034.78, 972.039, 4111.71);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced37);
				GrayClosingRect(ho_ImageReduced37, &ho_ImageClosing31, 1, 30);
				ScaleImage(ho_ImageClosing31, &ho_ImageScaled18, 1.5, -100);
				Threshold(ho_ImageScaled18, &ho_Region46, 128, 255);
				OpeningRectangle1(ho_Region46, &ho_Region46, 50, 3);
				ClosingRectangle1(ho_Region46, &ho_RegionClosing8, 50, 1);
				Connection(ho_RegionClosing8, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions52, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(500).Append(20)), (HTuple(99999).Append(100)));
				CountObj(ho_SelectedRegions52, &hv_Number14);
				if (0 != hv_Number14)
				{
					ErosionCircle(ho_SelectedRegions52, &ho_RegionErosion4, 3.5);
					//****检测A基准
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_163);
					SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_163);
					hv___Tmp_Ctrl_Dict_Init_163 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_RegionErosion4, hv_dd.TupleGetDictTuple("AG"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//**
				}

				GrayOpeningRect(ho_ImageClosing31, &ho_ImageOpening18, 20, 10);
				//
				//检测边缘
				SubImage(ho_ImageOpening18, ho_ImageClosing31, &ho_ImageSub3, 1, 128);
				Threshold(ho_ImageSub3, &ho_Region41, 0, 40);
				Connection(ho_Region41, &ho_ConnectedRegions50);
				SelectShape(ho_ConnectedRegions50, &ho_SelectedRegions49, (HTuple("width").Append("inner_radius")),
					"and", (HTuple(700).Append(2)), (HTuple(99999).Append(20)));
				CountObj(ho_SelectedRegions49, &hv_Number13);
				if (0 != (int(hv_Number13 == 1)))
				{
					//***
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_165);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_165);
					hv___Tmp_Ctrl_Dict_Init_165 = HTuple(HNULL);

					CreateDict(&hv___Tmp_Ctrl_Dict_Init_166);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_166);
					hv___Tmp_Ctrl_Dict_Init_166 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_167);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_167);
					hv___Tmp_Ctrl_Dict_Init_167 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"2", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("2")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("2"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_SelectedRegions49, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
				}
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, -54.2096, -21.8826, 3131.43, 656.633);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1828.07, 1377.51, 2595.13, 2635.57);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(2335).Append(1623)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				if (false)
				{
					//检测黑斑
					GenRectangle1(&ho_ROI_0, -81.4464, 39.352, 3127.6, 577.2);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced121);
					GrayOpeningRect(ho_ImageReduced121, &ho_ImageOpening41, 10, 35);
					SubImage(ho_ImageOpening41, ho_ImageReduced121, &ho_ImageSub82, 1.5, 128);
					Threshold(ho_ImageSub82, &ho_Region153, 0, 20);
					ClosingRectangle1(ho_Region153, &ho_RegionClosing76, 1, 50);
					Connection(ho_RegionClosing76, &ho_ConnectedRegions213);
					SelectShape(ho_ConnectedRegions213, &ho_SelectedRegions220, (HTuple("height").Append("inner_radius")),
						"and", (HTuple(2500).Append(3)), (HTuple(99999).Append(25)));
					CountObj(ho_SelectedRegions220, &hv_Number24);
					if (0 != hv_Number24)
					{
						ShapeTrans(ho_SelectedRegions220, &ho_RegionTrans74, "rectangle1");
						DilationRectangle1(ho_RegionTrans74, &ho_RegionDilation145, 40, 1);
						DilationRectangle1(ho_RegionDilation145, &ho_RegionDilation146, 110,
							1);
						Difference(ho_RegionDilation146, ho_RegionDilation145, &ho_RegionDifference151
							);
						Connection(ho_RegionDifference151, &ho_ConnectedRegions214);
						SortRegion(ho_ConnectedRegions214, &ho_SortedRegions15, "first_point",
							"false", "column");
						SelectObj(ho_SortedRegions15, &ho_ObjectSelected13, 1);


						GenRectangle1(&ho_ROI_0, 1152.81, 213.74, 2469.39, 598.974);
						AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
							"nearest_neighbor");
						ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced23);

						MedianRect(ho_ImageReduced23, &ho_ImageMedian13, 15, 55);
						GrayOpeningRect(ho_ImageMedian13, &ho_ImageOpening28, 20, 10);
						GrayClosingRect(ho_ImageOpening28, &ho_ImageClosing55, 200, 125);
						SubImage(ho_ImageOpening28, ho_ImageClosing55, &ho_ImageSub114, 13, 128);
						Threshold(ho_ImageSub114, &ho_Region128, 0, 30);
						OpeningRectangle1(ho_Region128, &ho_Region128, 1, 150);
						Connection(ho_Region128, &ho_ConnectedRegions189);
						SelectShape(ho_ConnectedRegions189, &ho_SelectedRegions199, (HTuple("width").Append("height")),
							"and", (HTuple(80).Append(800)), (HTuple(120).Append(1200)));
						Union1(ho_SelectedRegions199, &ho_RegionUnion62);

						ClosingRectangle1(ho_RegionUnion62, &ho_RegionClosing69, 1, 400);
						OpeningCircle(ho_RegionClosing69, &ho_RegionClosing69, 10);
						Connection(ho_RegionClosing69, &ho_ConnectedRegions190);
						SortRegion(ho_ConnectedRegions190, &ho_SortedRegions11, "upper_left",
							"true", "column");
						SelectObj(ho_SortedRegions11, &ho_ObjectSelected7, 1);
						CountObj(ho_ObjectSelected7, &hv_Number52);
						if (0 != hv_Number52)
						{

							ShapeTrans(ho_ObjectSelected7, &ho_RegionTrans55, "convex");

							ReduceDomain(ho_ImageAffineTrans, ho_RegionTrans55, &ho_ImageReduced132
								);

							GrayOpeningRect(ho_ImageReduced132, &ho_ImageOpening42, 50, 1);
							SubImage(ho_ImageOpening42, ho_ImageReduced132, &ho_ImageSub115, 2,
								128);
							Threshold(ho_ImageSub115, &ho_Region159, 0, 60);
							Connection(ho_Region159, &ho_ConnectedRegions235);
							SelectShape(ho_ConnectedRegions235, &ho_SelectedRegions238, "area",
								"and", 150, 99999);
							AffineTransRegion(ho_SelectedRegions238, &ho_SelectedRegions238, hv_at.TupleGetDictTuple("hom_mat_rot"),
								"nearest_neighbor");
							ConcatObj((*hv_dt).TupleGetDictObject("76"), ho_SelectedRegions238,
								&ho___Tmp_Obj_0);
							SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "76");

							DilationCircle(ho_RegionTrans55, &ho_RegionDilation118, 8);
							//***
							ShapeTrans(ho_RegionDilation118, &ho_RegionTrans71, "rectangle1");
							MoveRegion(ho_RegionTrans71, &ho_RegionMoved39, -1050, 0);
							Difference(ho_RegionDilation118, ho_RegionMoved39, &ho_RegionDifference35
								);
							ShapeTrans(ho_RegionDifference35, &ho_RegionTrans71, "rectangle1");
							MoveRegion(ho_RegionTrans71, &ho_RegionMoved117, 400, 0);
							Difference(ho_RegionTrans71, ho_RegionMoved117, &ho_RegionDifference150
								);
							MoveRegion(ho_RegionDifference150, &ho_RegionMoved118, -600, -30);
							ReduceDomain(ho_ImageAffineTrans, ho_RegionMoved118, &ho_ImageReduced120
								);
							GrayClosingRect(ho_ImageReduced120, &ho_ImageClosing36, 10, 10);
							GrayClosingRect(ho_ImageClosing36, &ho_ImageClosing74, 60, 50);
							SubImage(ho_ImageClosing36, ho_ImageClosing74, &ho_ImageSub81, 8, 128);
							Threshold(ho_ImageSub81, &ho_Region152, 0, 30);
							OpeningCircle(ho_Region152, &ho_RegionOpening96, 8);
							ShapeTrans(ho_RegionOpening96, &ho_RegionTrans72, "convex");
							ShapeTrans(ho_RegionTrans72, &ho_RegionTrans73, "rectangle1");
							DilationRectangle1(ho_RegionTrans73, &ho_RegionDilation142, 20, 180);
							MoveRegion(ho_RegionDilation142, &ho_RegionMoved119, 80, 0);
							HeightWidthRatio(ho_RegionMoved119, &hv_Height12, &hv_Width12, &hv_Ratio13);
							if (0 != (int(hv_Height12 == 0)))
							{
								MoveRegion(ho_RegionMoved118, &ho_RegionOpening97, 0, 0);
								ErosionRectangle1(ho_RegionOpening97, &ho_RegionOpening97, 30, 80);
							}
							else
							{
								OpeningCircle(ho_RegionMoved119, &ho_RegionOpening97, (hv_Width12 / 2) - 1);

							}

							MoveRegion(ho_RegionOpening97, &ho_RegionMoved120, 0, 35);
							DilationCircle(ho_RegionMoved120, &ho_RegionDilation143, 35);
							DilationRectangle1(ho_RegionDilation143, &ho_RegionDilation144, 1,
								450);

							Union2(ho_ObjectSelected13, ho_RegionDilation144, &ho_RegionUnion71
								);

							DilationCircle(ho_RegionDifference35, &ho_RegionDilation119, 70);
							Union2(ho_RegionDilation119, ho_RegionUnion71, &ho_RegionUnion72);

							ShapeTrans(ho_RegionDilation119, &ho_RegionTrans56, "rectangle1");
							MoveRegion(ho_RegionTrans56, &ho_RegionMoved93, 0, -130);
							Difference(ho_RegionUnion72, ho_RegionMoved93, &ho_RegionDifference152
								);

							Difference(ho_RegionDilation119, ho_RegionMoved93, &ho_RegionDifference130
								);
							Difference(ho_RegionDifference130, ho_RegionDilation118, &ho_RegionDifference131
								);
							Difference(ho_RegionDifference152, ho_RegionDilation118, &ho_RegionDifference153
								);

							DilationCircle(ho_RegionOpening97, &ho_RegionDilation147, 10);
							Difference(ho_RegionDifference153, ho_RegionDilation147, &ho_RegionDifference154
								);
							ErosionCircle(ho_RegionDifference154, &ho_RegionErosion3, 8);

							//**
							ConcatObj(ho_Reg, ho_RegionErosion3, &ho_Reg);
							//检测塑胶
							CreateDict(&hv_dd);

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_170);
							SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_170);
							hv___Tmp_Ctrl_Dict_Init_170 = HTuple(HNULL);

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_171);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_171);
							hv___Tmp_Ctrl_Dict_Init_171 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_172);
							SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_172);
							hv___Tmp_Ctrl_Dict_Init_172 = HTuple(HNULL);
							CreateDict(&hv___Tmp_Ctrl_Dict_Init_173);
							SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_173);
							hv___Tmp_Ctrl_Dict_Init_173 = HTuple(HNULL);

							CreateDict(&hv___Tmp_Ctrl_Dict_Init_174);
							SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_174);
							hv___Tmp_Ctrl_Dict_Init_174 = HTuple(HNULL);
							SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
								"sub", 5);
							SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
								"ssname", "area");
							SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
								"ssmin", 90);
							SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
								"ssmax", 999999);
							if (0 != (int(hv_ac == -1)))
							{
								CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
								SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"0", hv___Tmp_Ctrl_0);
							}
							if (0 != (int(hv_ac == 1)))
							{
								GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
									"keys", HTuple(), &hv_GenParamValue4);
								if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
								{
									CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
										HTuple(), HTuple(), &hv_dd);
								}
							}

							SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
							GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
							if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
							{
								SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
							}
							else
							{
								SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
							}
							SetDictObject(ho_SelectedRegions220, hv_dd.TupleGetDictTuple("RT"),
								"region");
							SetDictObject(ho_RegionErosion3, hv_dd.TupleGetDictTuple("SJ"), "region");
							DefectDetectionAlgorithms(hv_dd, (*hv_dt));
							if (HDevWindowStack::IsOpen())
								DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
									);
							if (HDevWindowStack::IsOpen())
								DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
									);

						}
					}
					else
					{

					}
				}
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2098.81, 2622.79, 2504.25, 4037.75);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1401.59, 3383.85, 2056.95, 4267.41);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "move", (HTuple(-200).Append(0)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "rc", (HTuple(1873).Append(3628)));
				SetDictTuple(hv_at, "scal", (HTuple(2).Append(-130)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测塑胶
				GenRectangle1(&ho_ROI_0, 4.04353, 239.406, 219.326, 382.217);
				GenRectangle1(&ho_TMP_Region, 215.186, 241.476, 831.292, 342.892);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 810.055, 269.93, 1090.08, 350.705);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1090.08, 270.97, 1223.72, 384.883);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1221.58, 301.092, 1468.95, 389.115);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1218.23, 278.853, 1375.85, 307.427);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1453.07, 352.637, 1635.4, 448.945);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1416.29, 383.186, 1502.28, 423.573);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1465.5, 317.427, 1545.27, 354.708);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1542, 335.018, 1608.3, 357.8);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1632.79, 382.454, 1721.89, 457.016);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1634.87, 362.779, 1688.74, 381.419);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1720.38, 417.491, 1793.93, 484.803);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1793.03, 453.873, 1842.15, 523.477);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1843.63, 487.572, 1894.95, 554.245);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1891.68, 526.862, 1937.26, 621.099);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1937.26, 587.961, 1997.35, 669.771);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1999.1, 646.7, 2045.96, 750.639);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2042.32, 713.052, 2091.01, 830.072);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2088.06, 783.858, 2136.75, 914.341);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2117.37, 887.156, 2177.4, 1142.18);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2037.24, 1138.04, 2235.96, 1588.34);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2173.21, 1020.88, 2216.68, 1153.34);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2035.48, 1586.27, 2217.65, 2343.78);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2091.8, 1108.43, 2118.16, 1139.17);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2176.42, 971.624, 2207.5, 1021.33);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2133.95, 838.035, 2160.88, 888.778);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2091.47, 751.047, 2117.37, 786.256);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2042.97, 683.2, 2071.98, 717.374);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1990.61, 617.728, 2024.79, 655.009);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1935.3, 559.945, 1967.56, 587.786);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1973.78, 664.836, 1999.68, 710.401);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2065.87, 833.265, 2085.55, 867.439);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2024.55, 751.442, 2042.12, 790.968);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1805.6, 2368.58, 275.762);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				ClosingCircle(ho_ROI_0, &ho_RegionClosing2, 100);
				ErosionCircle(ho_RegionClosing2, &ho_RegionErosion1, 20);
				MoveRegion(ho_RegionErosion1, &ho_RegionMoved16, -15, 10);
				AffineTransRegion(ho_RegionMoved16, &ho_ROI_0s, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				//dilation_circle (ROI_0, RegionDilation13, 25)
				//reduce_domain (ImageAffineTrans, RegionDilation13, ImageReduced16)
				//rank_rect (ImageReduced16, ImageRank, 5, 5, 15)
				//median_rect (ImageRank, ImageMedian4, 30, 30)
				//dyn_threshold (ImageRank, ImageMedian4, RegionDynThresh, 8, 'dark')

				//derivate_gauss (ImageRank, DerivGauss, 7, 'none')
				//convert_image_type (DerivGauss, ImageConverted, 'byte')
				//sub_image (ImageRank, ImageConverted, ImageSub14, 10, 128)


				//**



				//检测转角
				GenRectangle1(&ho_ROI_0, 678.562, -184.391, 2483.34, 1669.11);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
					"row");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);


				//检测下基准面
				GenRectangle1(&ho_ROI_0, 1941.81, 2245.64, 2468.44, 4159.06);
				GenRectangle1(&ho_TMP_Region, 1825.5, 2650.46, 2129.78, 3481.37);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 120);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 120);
				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.2, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 60);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(1590).Append(100)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingRectangle1(ho_ObjectSelected5, &ho_ObjectSelected5, 100, 1);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2.5, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1600).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						//检测RT
						CreateDict(&hv_dd);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_177);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_177);
						hv___Tmp_Ctrl_Dict_Init_177 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_178);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_178);
						hv___Tmp_Ctrl_Dict_Init_178 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_179);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_179);
						hv___Tmp_Ctrl_Dict_Init_179 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}

						SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);


						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 50);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 5);
					}
					else
					{
						ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
						Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
						Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 1961.44, 2356.38, 2198.96, 2520.34);
					GenRectangle1(&ho_TMP_Region, 2120.85, 2508.49, 2202.39, 4093.33);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2105.86, 2510.87, 2129.88, 2821.82);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2022.63, 3608.2, 2164.84, 3935.93);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2080.91, 3937.99, 2125.95, 3983.22);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2076, 3572.39, 2123.81, 3614.38);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2075.69, 2519.65, 2111.81, 2556.65);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1854, 2317.83, 140.094);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
					MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, 75, 20);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测RT
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_181);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_181);
				hv___Tmp_Ctrl_Dict_Init_181 = HTuple(HNULL);
				//检测塑胶
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_182);
				SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_182);
				hv___Tmp_Ctrl_Dict_Init_182 = HTuple(HNULL);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_183);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_183);
				hv___Tmp_Ctrl_Dict_Init_183 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
					"sub", 9);

				//检测A基准
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_184);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_184);
				hv___Tmp_Ctrl_Dict_Init_184 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				SetDictObject(ho_ROI_0s, hv_dd.TupleGetDictTuple("SJ"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2054.65, 300.022, 2410.44, 2956.16);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1422.54, 517.379, 2066.41, 1459.69);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(1909).Append(775)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "rscal", (HTuple(2).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测下基准面
				GenRectangle1(&ho_ROI_0, 2012.71, 2.13382, 2352.59, 4122.87);
				GenRectangle1(&ho_TMP_Region, 1985.9, 199.677, 2122.53, 1075.17);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1958.84, 1564.76, 2119.81, 2439.77);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1957.09, 2657.92, 2106.35, 3565.11);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 120);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 100);
				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 3.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4050;
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", hv_w.TupleConcat((HTuple(90).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4090).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_187);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_187);
						hv___Tmp_Ctrl_Dict_Init_187 = HTuple(HNULL);

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_188);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_188);
						hv___Tmp_Ctrl_Dict_Init_188 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_189);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_189);
						hv___Tmp_Ctrl_Dict_Init_189 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);

						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 50);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
						Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
						Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 2072.38, 2.04244, 2253.5, 64.9914);
					GenRectangle1(&ho_TMP_Region, 2165.03, 65.9204, 2251.35, 4118.83);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2079.48, 1177.21, 2249.89, 1445.43);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2145.59, 2511.9, 2172.51, 3707.93);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2106.54, 3702.85, 2173, 4099.57);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2131.28, 1140.4, 2170.64, 1180.79);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2129.2, 1440.98, 2167.53, 1487.59);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2132.03, 67.9944, 2162.65, 109.474);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_191);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_191);
				hv___Tmp_Ctrl_Dict_Init_191 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2038.21, 1300.0516424, 2451.92, 3000.79);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1373.21, 2197.81, 2221.53, 3670.94);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1627).Append(3531)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测下基准面
				GenRectangle1(&ho_ROI_0, 1902.47, -58.8517, 2423.13, 4128.08);

				GenRectangle1(&ho_ROI_01, 1817.5, 3624.45, 2016.45, 4156.93);
				Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

				GenRectangle1(&ho_ROI_01, 1794.35, -41.3639, 2000.61, 471.749);
				Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

				//gen_rectangle1 (ROI_01, 2035.85, 394.785, 2093.81, 471.364)
				//difference (ROI_0, ROI_01, ROI_0)
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 70);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 70, 140);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 160);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(3800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 3.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 10);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(4000).Append(100)).Append(5000)), ((HTuple(99999).Append(4000)).Append(3500000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 128, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "lower_left", "false",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 130);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 130);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 2, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						//检测RT
						CreateDict(&hv_dd);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_194);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_194);
						hv___Tmp_Ctrl_Dict_Init_194 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_195);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_195);
						hv___Tmp_Ctrl_Dict_Init_195 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_196);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_196);
						hv___Tmp_Ctrl_Dict_Init_196 = HTuple(HNULL);
						if (0 != (int(hv_ac == -1)))
						{
							CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
							SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"0", hv___Tmp_Ctrl_0);
						}
						if (0 != (int(hv_ac == 1)))
						{
							GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
								"keys", HTuple(), &hv_GenParamValue4);
							if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
							{
								CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
									HTuple(), HTuple(), &hv_dd);
							}
						}

						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}
						SetDictObject(ho_SelectedRegions8, hv_dd.TupleGetDictTuple("RT"), "region");
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);

						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 55);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						ScaleImage(ho_ImageOpening17, &ho_ImageScaled2, 1.5, -100);
						Threshold(ho_ImageScaled2, &ho_Region32, 60, 255);
						Intersection(ho_ObjectSelected5, ho_Region32, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 2119.69, -1.83388, 2230.51, 340.725);
					GenRectangle1(&ho_TMP_Region, 2125.5, 339.458, 2234.74, 1751.75);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1973.54, 1780.71, 2232.48, 1906.41);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2111.31, 1872.96, 2233.57, 3513.96);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2121.89, 3503.8, 2233.67, 4099.88);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 2007.57, 2085.78, 168.685);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 2077.45, 2734.68, 2155.06, 3195.82);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 85);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_198);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_198);
				hv___Tmp_Ctrl_Dict_Init_198 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 2072.48, 84.032, 2499.63, 1289.43);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 83.887, 2739.03, 703.205, 3283.37);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(538).Append(2941)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(150)));
				SetDictTuple(hv_at, "scal", (HTuple(2).Append(-150)));
				SetDictTuple(hv_at, "rmove", (HTuple(-25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//塑胶区域
				GenRectangle1(&ho_ROI_0, 1992.11, 1714.37, 2161.85, 2494.65);
				GenRectangle1(&ho_TMP_Region, 2029.62, 2390.12, 2182.31, 2896.03);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2182.13, 2517.55, 2212.88, 2668.33);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2030.67, 2888.84, 2146.35, 3145.03);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2144.11, 2890.78, 2186.57, 3012.28);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2170.46, 2656.55, 2204.14, 2817.58);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2009.44, 3034.18, 2128.05, 3206.92);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 2008.96, 3206.33, 2092.43, 3301.48);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1992.86, 3294.16, 2047.29, 3371.75);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1950.51, 3348.17, 2014.74, 3435.16);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1855.2, 3394.77, 1963.97, 3493.15);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1782.95, 3460.28, 1877.07, 3580.78);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1706.96, 3524, 1798.12, 3644.12);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1616.66, 3589.77, 1717.69, 3698.1);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1501.83, 3634.55, 1624.83, 3739.95);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1322.45, 3653.56, 1507.53, 3777.71);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 738.319, 3650.74, 1340.91, 3812.18);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 933.065, 3812.11, 1089.5, 3842.14);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 14.3886, 3778.18, 772.238, 3871.83);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 679.988, 3728.45, 741.488, 3779.69);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenCircle(&ho_TMP_Region, 1156.01, 3565.58, 179.349);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1948.6, 1663.43, 2138.46, 1984.03);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				ClosingCircle(ho_ROI_0, &ho_RegionClosing3, 125);
				MoveRegion(ho_RegionClosing3, &ho_RegionMoved6, 5, -35);
				ErosionCircle(ho_RegionMoved6, &ho_RegionErosion2, 15);
				AffineTransRegion(ho_RegionErosion2, &ho_ROI_01, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");


				//Rt
				GenRectangle1(&ho_ROI_0, -21.6941, 3582.71, 829.99, 4238.07);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
				MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
				GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
				GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
				SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 1, 128);
				Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
				Connection(ho_Region135, &ho_ConnectedRegions186);
				SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
					"and", (HTuple(800).Append(1)), (HTuple(99999).Append(15)));
				CountObj(ho_SelectedRegions196, &hv_Number51);
				if (0 != (int(hv_Number51 == 1)))
				{
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_201);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_201);
					hv___Tmp_Ctrl_Dict_Init_201 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_202);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_202);
					hv___Tmp_Ctrl_Dict_Init_202 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_203);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_203);
					hv___Tmp_Ctrl_Dict_Init_203 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);
					//stop ()
				}
				//检测转角
				GenRectangle1(&ho_ROI_0, 850.148, 2425.7, 2541.21, 4233.79);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					3000, 9999999);
				SortRegion(ho_SelectedRegions29, &ho_SortedRegions2, "first_point", "false",
					"column");
				SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);

				//检测塑胶
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_205);
				SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_205);
				hv___Tmp_Ctrl_Dict_Init_205 = HTuple(HNULL);

				CreateDict(&hv___Tmp_Ctrl_Dict_Init_206);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "GAUSS", hv___Tmp_Ctrl_Dict_Init_206);
				hv___Tmp_Ctrl_Dict_Init_206 = HTuple(HNULL);
				SetDictTuple((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("GAUSS"),
					"sub", 8);
				//检测RT
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_207);
				SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_207);
				hv___Tmp_Ctrl_Dict_Init_207 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
				MoveRegion(ho_ROI_01, &ho_RegionMoved10, -5, 0);
				SetDictObject(ho_RegionMoved10, hv_dd.TupleGetDictTuple("SJ"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
				//stop ()
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, -16.1286, 3643.37, 3078.49, 4115.02);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1698.06, 2655.17, 2248.44, 3242.76);
				SetDictTuple(hv_at, "point", 1);
				SetDictTuple(hv_at, "rc", (HTuple(1892).Append(2783)));
				SetDictTuple(hv_at, "opening", (HTuple(30).Append(30)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(200)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测RT
				GenRectangle1(&ho_ROI_0, -47.9235, 3303.74, 3071.52, 4197.4);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
				MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
				GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
				GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
				SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 1, 128);
				Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
				Connection(ho_Region135, &ho_ConnectedRegions186);
				SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
					"and", (HTuple(2900).Append(1)), (HTuple(99999).Append(15)));
				CountObj(ho_SelectedRegions196, &hv_Number51);
				if (0 != (int(hv_Number51 == 1)))
				{

					//检测塑胶边缘

					GenRectangle1(&ho_ROI_0, 1188.77, 3681.28, 1856.05, 3772.48);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced5);
					GrayOpeningRect(ho_ImageReduced5, &ho_ImageOpening1, 10, 10);
					MedianRect(ho_ImageOpening1, &ho_ImageMedian, 5, 5);
					GrayClosingRect(ho_ImageMedian, &ho_ImageClosing8, 100, 2);
					SubImage(ho_ImageMedian, ho_ImageClosing8, &ho_ImageSub6, 6, 128);
					Threshold(ho_ImageSub6, &ho_Region7, 0, 60);
					Connection(ho_Region7, &ho_ConnectedRegions11);
					SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions9, "area", "and",
						500, 99999);
					AffineTransRegion(ho_SelectedRegions9, &ho_SelectedRegions9, hv_at.TupleGetDictTuple("hom_mat_rot"),
						"nearest_neighbor");
					ConcatObj((*hv_dt).TupleGetDictObject("78"), ho_SelectedRegions9, &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "78");

					//检测塑胶
					GenRectangle1(&ho_ROI_0, 30.051, 3764.08, 3102.62, 3866.13);
					GenRectangle1(&ho_TMP_Region, 736.492, 3731.56, 2366.99, 3765.51);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_ROI_0, 105);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					//dev_display (ImageAffineTrans)
					//dev_display (ROI_0)
					//stop ()
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_210);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_210);
					hv___Tmp_Ctrl_Dict_Init_210 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_211);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_211);
					hv___Tmp_Ctrl_Dict_Init_211 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_212);
					SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_212);
					hv___Tmp_Ctrl_Dict_Init_212 = HTuple(HNULL);
					//检测塑胶
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_213);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_213);
					hv___Tmp_Ctrl_Dict_Init_213 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_214);
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "CAP", hv___Tmp_Ctrl_Dict_Init_214);
					hv___Tmp_Ctrl_Dict_Init_214 = HTuple(HNULL);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_215);
					SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_215);
					hv___Tmp_Ctrl_Dict_Init_215 = HTuple(HNULL);

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("SJ"), "region");
					SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1365.26, 34.3714, 1745.88, 3559.34);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				GenRectangle1(&ho_ROI_0, 1310.5, -14.6707, 1709.71, 3636.18);

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
				Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_218);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_218);
				hv___Tmp_Ctrl_Dict_Init_218 = HTuple(HNULL);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				//dev_display (dd.image)
				//dev_display (dd.resreg)

			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1279.69, -41.1927, 1688.89, 3821.43);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1692.03, 4142.51);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
				Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_221);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_221);
				hv___Tmp_Ctrl_Dict_Init_221 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "ss_g", (HTuple(220).Append(255)));
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xs_g", (HTuple(240).Append(255)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
						);
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1070.71, 1511.72, 1714.89, 4039.54);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");


				GenRectangle1(&ho_ROI_0, 1245.98, 949.545, 1758.99, 4093.88);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -70);
				Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_224);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_224);
				hv___Tmp_Ctrl_Dict_Init_224 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "ss_g", (HTuple(200).Append(255)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
						);
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1177.01, -0.576, 1690.73, 4108.18);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				//检测边缘
				GenRectangle1(&ho_ROI_0, 1079.02, 100.54, 1792.03, 4100.51);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
				Threshold(ho_ImageScaled28, &ho_Region63, 80, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");
				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_227);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_227);
				hv___Tmp_Ctrl_Dict_Init_227 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xm", 30);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("image"), HDevWindowStack::GetActive()
						);
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 27)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1177.01, -0.576, 1690.73, 4108.18);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1692.03, 4100.51);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
				Threshold(ho_ImageScaled28, &ho_Region63, 100, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");

				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_230);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_230);
				hv___Tmp_Ctrl_Dict_Init_230 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "xm", 90);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 28)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 1369.91, -20.6837, 1750.26, 3302.93);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				GenRectangle1(&ho_ROI_0, 1079.02, -168.54, 1752.03, 3900.51);
				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced58);
				GrayClosingRect(ho_ImageReduced58, &ho_ImageClosing47, 3, 30);

				ScaleImage(ho_ImageClosing47, &ho_ImageScaled28, 2, -80);
				Threshold(ho_ImageScaled28, &ho_Region63, 80, 255);
				ClosingRectangle1(ho_Region63, &ho_RegionClosing16, 50, 1);
				OpeningRectangle1(ho_RegionClosing16, &ho_RegionOpening18, 50, 1);
				ShapeTrans(ho_RegionOpening18, &ho_RegionTrans34, "rectangle1");

				//检测侧拍基准面(暗)
				//**CGZB
				CreateDict(&hv_dd);


				CreateDict(&hv___Tmp_Ctrl_Dict_Init_233);
				SetDictTuple(hv_dd, "CGZB", hv___Tmp_Ctrl_Dict_Init_233);
				hv___Tmp_Ctrl_Dict_Init_233 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("CGZB"), "sm", 20);
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}

				SetDictObject(ho_RegionTrans34, hv_dd.TupleGetDictTuple("CGZB"), "region");

				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 29)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 434.748, -6.71404, 1126.79, 1701.9);
				//位置偏移检测区域

				GenRectangle1(&ho_ROI_1, 1048.58, -89.477, 1698.09, 712.169);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1205).Append(451)));
				SetDictTuple(hv_at, "scal", (HTuple(8.5).Append(-350)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "move", (HTuple(300).Append(0)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");
				if (false)
				{

					//检测转角
					GenRectangle1(&ho_ROI_0, 1016.79, -256.299, 3205.23, 1721.48);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SortRegion(ho_ConnectedRegions59, &ho_SortedRegions2, "first_point", "true",
						"row");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_236);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_236);
					hv___Tmp_Ctrl_Dict_Init_236 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"0", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
								HTuple(), HTuple(), &hv_dd);
						}
					}
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));

				}

				//检测下基准面
				GenRectangle1(&ho_ROI_0, 772.76, 0.432893, 1141.05, 1709.43);
				GenRectangle1(&ho_TMP_Region, 996.22, 559.063, 1281.75, 1407.35);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 50, 50);
				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 50);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(1500).Append(100)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 90, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					OpeningRectangle1(ho_RegionDifference1, &ho_RegionDifference1, 30, 30);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 3, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(1600).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved, &ho_RegionIntersection
							);
						//scale_image (ImageOpening17, ImageScaled2, 1.5, -100)
						//threshold (ImageScaled2, Region32, 60, 255)
						//intersection (ObjectSelected5, Region32, RegionIntersection2)
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection, &ho_RegionErosion, 3.5);
					}
				}
				else
				{
					GenRectangle1(&ho_ROI_0, 854.571, 9.76802, 940.342, 1707.1);
					GenRectangle1(&ho_TMP_Region, 942.029, 122.36, 1038.67, 450.28);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 932.647, 1256.29, 957.54, 1710.11);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 954.612, 1557.86, 1109.83, 1705.72);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1183.04, 1724.75, 97.8806);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
					ErosionRectangle1(ho_RegionClosing1, &ho_RegionClosing1, 1, 20);
					MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, -10, 0);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_238);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_238);
				hv___Tmp_Ctrl_Dict_Init_238 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"1", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 30)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 501.225, -0.1527, 1178.04, 4099.96);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 979.13, 2838.23, 1623.49, 3596.18);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1195).Append(3337)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(4).Append(-80)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测基准面
				GenRectangle1(&ho_ROI_0, 813.795, -41.9569, 1144.77, 4230.62);
				GenRectangle1(&ho_TMP_Region, 1020.19, 1635.48, 1247.79, 2545.84);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 1019.16, 3047.03, 1275.73, 3926);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 40);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 95, 50);
				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4070;
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", hv_w.TupleConcat((HTuple(50).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved1, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved1, &ho_RegionIntersection3
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection3, &ho_RegionErosion, 3.5);
					}
				}
				else
				{

					GenRectangle1(&ho_ROI_0, 893.403, -16.5021, 1047.3, 367.047);
					GenRectangle1(&ho_TMP_Region, 891.864, 368.345, 1016.28, 1559.85);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 892.394, 1560.62, 990.11, 2647.21);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 893.174, 2655.28, 1076.21, 2918.04);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 892.015, 2914.75, 988.652, 4036.35);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 891.02, 4036.35, 1081.64, 4112.99);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 988.667, 2614.37, 1030.11, 2651.65);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 987.631, 2911.57, 1029.07, 2954.03);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 989.032, 4008.87, 1027.15, 4042.57);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
					ErosionCircle(ho_RegionClosing1, &ho_RegionErosion5, 15);
					AffineTransRegion(ho_RegionErosion5, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");

				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_241);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_241);
				hv___Tmp_Ctrl_Dict_Init_241 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 31)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 587.02, -2.14637, 1118, 4068.95);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 785.35, 372.485, 1740.22, 1928.96);
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "rc", (HTuple(1511).Append(1747)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(5).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测基准面
				GenRectangle1(&ho_ROI_0, 827.732, -46.4556, 1266.27, 4115.66);

				GenRectangle1(&ho_ROI_01, 1129.22, -117.663, 1251.9, 438.359);
				Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

				GenRectangle1(&ho_ROI_01, 1120.72, 2539.25, 1378.14, 3685.99);
				Difference(ho_ROI_0, ho_ROI_01, &ho_ROI_0);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 40);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 40);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 5);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(4000).Append(50)).Append(5000)), ((HTuple(99999).Append(1250)).Append(3500000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 80, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 35);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved2, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved2, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{

					GenRectangle1(&ho_ROI_0, 944.38, 0.134597, 1056.26, 538.69);
					GenRectangle1(&ho_TMP_Region, 943.219, 548.695, 1074.79, 2173.16);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 942.787, 2181.64, 1198.67, 2336.65);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 944.35, 2345.16, 1049.06, 3800.67);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 944.677, 3817.56, 1098, 4100.98);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1152.17, 2031.75, 140.46);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenCircle(&ho_TMP_Region, 1188.92, 1985.27, 176.713);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1018.96, 850.534, 1124.38, 1357.05);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 95);
					MoveRegion(ho_RegionClosing1, &ho_RegionMoved11, -20, 0);
					AffineTransRegion(ho_RegionMoved11, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);


				CreateDict(&hv___Tmp_Ctrl_Dict_Init_244);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_244);
				hv___Tmp_Ctrl_Dict_Init_244 = HTuple(HNULL);

				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 32)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 676.864, 2651.97, 1103.09, 4104.41);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 804.092, 2199.39, 1420.33, 2791.13);
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "rc", (HTuple(1335).Append(2646)));
				SetDictTuple(hv_at, "move", (HTuple(0).Append(-180)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(5).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测基准面
				GenRectangle1(&ho_ROI_0, 837.363, 2462.31, 1109.54, 4098.19);

				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 65, 40);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(100000).Append(900)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 2, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 5);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, (((HTuple("width").Append("height")).Append("area")).Append("rectangularity")),
					"and", (((HTuple(1400).Append(50)).Append(5000)).Append(0)), (((HTuple(99999).Append(1250)).Append(3500000)).Append(0.8)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					OpeningRectangle1(ho_RegionDifference1, &ho_RegionDifference1, 20, 20);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 20);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved2, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved2, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{

					GenRectangle1(&ho_ROI_0, 931.344, 2446.49, 1043.51, 2485.32);
					GenRectangle1(&ho_TMP_Region, 932.111, 2482.71, 1002.56, 3119.94);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 935.744, 3116.83, 1059.02, 3340.52);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 935.465, 3339.36, 1046.78, 4101.48);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle2(&ho_TMP_Region, 996.251, 3058.59, HTuple(-26.5737).TupleRad(),
						74.1051, 34.6445);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1000.63, 2483.39, 1028.14, 2510.36);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 95);
					MoveRegion(ho_RegionClosing1, &ho_RegionClosing1, -15, 0);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_247);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_247);
				hv___Tmp_Ctrl_Dict_Init_247 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (false)
				{

					//Rt
					GenRectangle1(&ho_ROI_0, -21.6941, 3582.71, 1229.99, 4238.07);
					AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
					ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced100);
					MedianRect(ho_ImageReduced100, &ho_ImageMedian89, 3, 15);
					GrayClosingRect(ho_ImageMedian89, &ho_ImageMedian89, 100, 1);
					GrayOpeningRect(ho_ImageMedian89, &ho_ImageOpening30, 30, 40);
					SubImage(ho_ImageOpening30, ho_ImageMedian89, &ho_ImageSub117, 1, 128);
					Threshold(ho_ImageSub117, &ho_Region135, 0, 60);
					Connection(ho_Region135, &ho_ConnectedRegions186);
					SelectShape(ho_ConnectedRegions186, &ho_SelectedRegions196, (HTuple("height").Append("inner_radius")),
						"and", (HTuple(800).Append(1)), (HTuple(99999).Append(15)));
					CountObj(ho_SelectedRegions196, &hv_Number51);
					if (0 != (int(hv_Number51 == 1)))
					{
						//检测RT
						CreateDict(&hv_dd);
						SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
						GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
						if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
						{
							SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
						}
						else
						{
							SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
						}

						CreateDict(&hv___Tmp_Ctrl_Dict_Init_249);
						SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_249);
						hv___Tmp_Ctrl_Dict_Init_249 = HTuple(HNULL);

						SetDictObject(ho_SelectedRegions196, hv_dd.TupleGetDictTuple("RT"), "region");
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_250);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "L", hv___Tmp_Ctrl_Dict_Init_250);
						hv___Tmp_Ctrl_Dict_Init_250 = HTuple(HNULL);
						CreateDict(&hv___Tmp_Ctrl_Dict_Init_251);
						SetDictTuple(hv_dd.TupleGetDictTuple("RT"), "B", hv___Tmp_Ctrl_Dict_Init_251);
						hv___Tmp_Ctrl_Dict_Init_251 = HTuple(HNULL);
						DefectDetectionAlgorithms(hv_dd, (*hv_dt));
						if (HDevWindowStack::IsOpen())
							DispObj(ho_Image, HDevWindowStack::GetActive());
						if (HDevWindowStack::IsOpen())
							DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
								);
						//stop ()
					}

					//检测转角
					GenRectangle1(&ho_ROI_0, 1256.31, 2406.89, 2877.15, 4203.28);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
					GrayClosingRect(ho_ImageReduced43, &ho_ImageClosing36, 20, 20);
					Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
					Connection(ho_Region49, &ho_ConnectedRegions59);
					SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
						3000, 9999999);
					SortRegion(ho_SelectedRegions29, &ho_SortedRegions2, "first_point", "false",
						"column");
					SelectObj(ho_SortedRegions2, &ho_ObjectSelected1, 1);
					//检测RT
					CreateDict(&hv_dd);
					CreateDict(&hv___Tmp_Ctrl_Dict_Init_253);
					SetDictTuple(hv_dd, "RT", hv___Tmp_Ctrl_Dict_Init_253);
					hv___Tmp_Ctrl_Dict_Init_253 = HTuple(HNULL);
					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"1", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("1")) >= 0)))
						{
							CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("1"),
								HTuple(), HTuple(), &hv_dd);
						}
					}

					SetDictObject(ho_ObjectSelected1, hv_dd.TupleGetDictTuple("RT"), "region");
					SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
					GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
					if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
					{
						SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
					}
					else
					{
						SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
					}
					DefectDetectionAlgorithms(hv_dd, (*hv_dt));
					if (HDevWindowStack::IsOpen())
						DispObj(ho_Image, HDevWindowStack::GetActive());
					if (HDevWindowStack::IsOpen())
						DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
							);

				}
				//stop ()
			}
			if (0 != (int(hv_ImageNum == 33)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 680.772, 3196.82, 967.585, 4098.16);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 1151.78, 1999.22, 1764.09, 2541.49);
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(8).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1382).Append(2423)));
				SetDictTuple(hv_at, "area", (HTuple(45000).Append(999999)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//*********
				GenRectangle1(&ho_ROI_0, 932.768, 3065.62, 1004.2, 4102.2);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");
				//****检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_256);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_256);
				hv___Tmp_Ctrl_Dict_Init_256 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(100)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_ROI_0, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
				if (HDevWindowStack::IsOpen())
					DispObj(ho_Image, HDevWindowStack::GetActive());
				if (HDevWindowStack::IsOpen())
					DispObj(hv_dd.TupleGetDictObject("resreg"), HDevWindowStack::GetActive()
						);
			}
			if (0 != (int(hv_ImageNum == 34)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 558.411, -27.1131, 1112.79, 4093.63);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 827.06, 134.023, 1705.03, 936.796);
				SetDictTuple(hv_at, "point", 2);
				SetDictTuple(hv_at, "rc", (HTuple(1029).Append(758)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				SetDictTuple(hv_at, "area", (HTuple(150000).Append(9999999)));
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测上基准面
				GenRectangle1(&ho_ROI_0, 845.806, 2.25112, 1160.23, 4106.44);
				GenRectangle1(&ho_TMP_Region, 1041.77, 1130.49, 1281.68, 2218.86);
				Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 40);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				hv_w = (hv_at.TupleGetDictTuple("zoom")) * 4040;
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", hv_w.TupleConcat((HTuple(50).Append(5000))), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						DilationRectangle1(ho_SelectedRegions8, &ho_RegionDilation12, 1, 30);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved3, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved3, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{

					GenRectangle1(&ho_ROI_0, 923.219, -3.31768, 1021.24, 598.525);
					GenRectangle1(&ho_TMP_Region, 921.945, 586.179, 1058.64, 1022.15);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 921.742, 1020.02, 1013.94, 2295.95);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 922.417, 2294.89, 1060.06, 2969.76);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 923.938, 2969.99, 1118.69, 3202.76);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 923.995, 3203.11, 1036.27, 4102.32);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1031.92, 3201.24, 1068.18, 3238.52);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1057.83, 2936.2, 1086.42, 2977.23);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1014.69, 217.342, 1127.44, 548.19);
					Difference(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 105);
					ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 8);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_259);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_259);
				hv___Tmp_Ctrl_Dict_Init_259 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(110)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}

				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 35)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 656.637, -17.8174, 1086.91, 4136.02);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 852.201, 3193.8, 1683.1, 4141.73);
				SetDictTuple(hv_at, "point", 3);
				SetDictTuple(hv_at, "rc", (HTuple(1504).Append(3448)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测上基准面
				GenRectangle1(&ho_ROI_0, 760.33, -21.6497, 1158.07, 4090.16);
				AffineTransRegion(ho_ROI_0, &ho_ROI_0, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				ReduceDomain(ho_ImageAffineTrans, ho_ROI_0, &ho_ImageReduced2);
				GrayOpeningRect(ho_ImageReduced2, &ho_ImageOpening14, 1, 20);
				GrayClosingRect(ho_ImageOpening14, &ho_ImageClosing29, 55, 55);
				Threshold(ho_ImageClosing29, &ho_Region34, 0, 60);
				Connection(ho_Region34, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(30000).Append(300)), (HTuple(999999).Append(1800)));

				SubImage(ho_ImageOpening14, ho_ImageClosing29, &ho_ImageSub12, 1.5, 128);

				Threshold(ho_ImageSub12, &ho_Region27, 0, 30);
				Union2(ho_Region27, ho_SelectedRegions17, &ho_RegionUnion1);
				ClosingCircle(ho_RegionUnion1, &ho_Region27, 8);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				FillUp(ho_ConnectedRegions33, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions12, ((HTuple("width").Append("height")).Append("area")),
					"and", ((HTuple(4000).Append(50)).Append(5000)), ((HTuple(99999).Append(250)).Append(350000)));
				CountObj(ho_SelectedRegions12, &hv_Number27);
				if (0 != hv_Number27)
				{
					Threshold(ho_ImageClosing29, &ho_Region31, 60, 255);
					ErosionCircle(ho_Region31, &ho_Region31, 1.5);
					DilationCircle(ho_SelectedRegions12, &ho_SelectedRegions12, 1.5);
					Difference(ho_Region31, ho_SelectedRegions12, &ho_RegionDifference1);
					Connection(ho_RegionDifference1, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions28, "area", "and",
						100000, 9999999);
					SortRegion(ho_SelectedRegions28, &ho_SortedRegions4, "upper_left", "true",
						"row");
					SelectObj(ho_SortedRegions4, &ho_ObjectSelected5, 1);
					ClosingCircle(ho_ObjectSelected5, &ho_ObjectSelected5, 15);

					DilationRectangle1(ho_ObjectSelected5, &ho_RegionDilation4, 1, 30);
					ReduceDomain(ho_ImageReduced2, ho_RegionDilation4, &ho_ImageReduced11);
					GrayOpeningRect(ho_ImageReduced11, &ho_ImageOpening15, 1, 30);
					GrayClosingRect(ho_ImageOpening15, &ho_ImageClosing4, 1, 30);
					GrayOpeningRect(ho_ImageClosing4, &ho_ImageOpening17, 25, 10);
					SubImage(ho_ImageOpening17, ho_ImageClosing4, &ho_ImageSub16, 1, 128);
					Threshold(ho_ImageSub16, &ho_Region6, 0, 30);
					Connection(ho_Region6, &ho_ConnectedRegions3);
					//RT检测区域
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions8, (HTuple("width").Append("inner_radius")),
						"and", (HTuple(4000).Append(2)), (HTuple(99999).Append(16)));
					CountObj(ho_SelectedRegions8, &hv_Number28);
					if (0 != hv_Number28)
					{
						GrayClosingRect(ho_ImageOpening17, &ho_ImageClosing2, 20, 10);
						SubImage(ho_ImageOpening17, ho_ImageClosing2, &ho_ImageSub1, 1, 128);
						Threshold(ho_ImageSub1, &ho_Region3, 0, 30);
						Connection(ho_Region3, &ho_ConnectedRegions1);
						SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions1, (HTuple("width").Append("inner_radius")),
							"and", (HTuple(1500).Append(2)), (HTuple(99999).Append(16)));
						CountObj(ho_SelectedRegions1, &hv_Number3);
						if (0 != hv_Number3)
						{
							DilationRectangle1(ho_SelectedRegions1, &ho_RegionDilation2, 350, 60);
							MoveRegion(ho_RegionDilation2, &ho_RegionMoved5, -30, 0);
						}
						else
						{
							GenRectangle1(&ho_RegionMoved5, 322.387, 1029.83, 401.407, 3344.79);
						}
						Union2(ho_SelectedRegions8, ho_RegionMoved5, &ho_RegionUnion2);
						DilationRectangle1(ho_RegionUnion2, &ho_RegionDilation12, 1, 30);
						Difference(ho_ObjectSelected5, ho_RegionDilation12, &ho_RegionDifference2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionDifference2, &ho_RegionErosion, 3.5);
					}
					else
					{
						MoveRegion(ho_ObjectSelected5, &ho_RegionMoved4, 30, 0);
						Intersection(ho_ObjectSelected5, ho_RegionMoved4, &ho_RegionIntersection2
							);
						//A基准检测区域
						ErosionCircle(ho_RegionIntersection2, &ho_RegionErosion, 3.5);
					}
				}
				else
				{

					GenRectangle1(&ho_ROI_0, 891.758, -4.49128, 1001.47, 715.006);
					GenRectangle1(&ho_TMP_Region, 892.586, 713.54, 1091.99, 941.403);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 893.716, 939.815, 1044.97, 3292.04);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 894.193, 3287.91, 1076.96, 3633.55);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 896.189, 3629.46, 1043.3, 4094.43);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1000.29, 680.178, 1036.95, 727.07);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
					GenRectangle1(&ho_TMP_Region, 1040.59, 935.855, 1074.32, 976.885);
					Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);

					ClosingCircle(ho_ROI_0, &ho_RegionClosing1, 125);
					ErosionCircle(ho_RegionClosing1, &ho_RegionClosing1, 8);
					AffineTransRegion(ho_RegionClosing1, &ho_RegionErosion, hv_at.TupleGetDictTuple("hom_mat_tra"),
						"nearest_neighbor");
				}
				//dev_display (ImageAffineTrans)
				//dev_display (RegionErosion)
				//stop ()
				//检测A基准
				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_262);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_262);
				hv___Tmp_Ctrl_Dict_Init_262 = HTuple(HNULL);

				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(80)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				SetDictObject(ho_RegionErosion, hv_dd.TupleGetDictTuple("AG"), "region");
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 36)))
			{
				//仿射变换
				CreateDict(&hv_at);
				//角度偏移检测区域
				GenRectangle1(&ho_ROI_0, 626.114, 0.216084, 1056.83, 1396.12);
				//位置偏移检测区域
				GenRectangle1(&ho_ROI_1, 819.245, -54.9043, 1671.4, 884.479);
				SetDictTuple(hv_at, "point", 4);
				SetDictTuple(hv_at, "rc", (HTuple(1514).Append(635)));
				SetDictTuple(hv_at, "rmove", (HTuple(25).Append(0)));
				SetDictTuple(hv_at, "scal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "rscal", (HTuple(4).Append(-100)));
				SetDictTuple(hv_at, "zoom", hv_zoom);
				if (0 != hv_af)
				{

					if (0 != (int(hv_ac == -1)))
					{
						CopyDict(hv_at, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
						SetDictTuple((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"AffineTransformation", hv___Tmp_Ctrl_0);
					}
					if (0 != (int(hv_ac == 1)))
					{
						GetDictParam((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I),
							"keys", HTuple(), &hv_GenParamValue4);
						if (0 != (int((hv_GenParamValue4.TupleFind("AffineTransformation")) >= 0)))
						{
							CopyDict(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("AffineTransformation"),
								HTuple(), HTuple(), &hv_at);
						}
					}
				}
				SetDictObject(ho_Image, hv_at, "image");
				SetDictObject(ho_ROI_0, hv_at, "rotreg");
				SetDictObject(ho_ROI_1, hv_at, "trareg");

				AffineTransformation(hv_at);
				GenEmptyObj(&ho_ImageAffineTrans);
				ho_ImageAffineTrans = hv_at.TupleGetDictObject("afimage");

				//检测基准
				GenRectangle1(&ho_ROI_0, 904.643, 9.15763, 1053.68, 1058.35);
				GenRectangle1(&ho_TMP_Region, 907.334, 1038.61, 1090.7, 1241.58);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle1(&ho_TMP_Region, 906.319, 1239.94, 1080.36, 1438.77);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				ClosingCircle(ho_ROI_0, &ho_RegionClosing, 85);
				ErosionCircle(ho_RegionClosing, &ho_RegionClosing, 15);
				AffineTransRegion(ho_RegionClosing, &ho_RegionClosing, hv_at.TupleGetDictTuple("hom_mat_tra"),
					"nearest_neighbor");

				CreateDict(&hv_dd);
				CreateDict(&hv___Tmp_Ctrl_Dict_Init_265);
				SetDictTuple(hv_dd, "AG", hv___Tmp_Ctrl_Dict_Init_265);
				hv___Tmp_Ctrl_Dict_Init_265 = HTuple(HNULL);
				SetDictTuple(hv_dd.TupleGetDictTuple("AG"), "s_g", (HTuple(0).Append(90)));
				if (0 != (int(hv_ac == -1)))
				{
					CopyDict(hv_dd, HTuple(), HTuple(), &hv___Tmp_Ctrl_0);
					SetDictTuple(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"0", hv___Tmp_Ctrl_0);
				}
				if (0 != (int(hv_ac == 1)))
				{
					GetDictParam(((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms"),
						"keys", HTuple(), &hv_GenParamValue4);
					if (0 != (int((hv_GenParamValue4.TupleFind("0")) >= 0)))
					{
						CopyDict((((((((hv_AlgorithmConfig.TupleGetDictTuple("Station")).TupleGetDictTuple(hv_S)).TupleGetDictTuple("Camera")).TupleGetDictTuple(hv_C)).TupleGetDictTuple("Image")).TupleGetDictTuple(hv_I)).TupleGetDictTuple("DefectDetectionAlgorithms")).TupleGetDictTuple("0"),
							HTuple(), HTuple(), &hv_dd);
					}
				}
				SetDictObject(ho_RegionClosing, hv_dd.TupleGetDictTuple("AG"), "region");
				SetDictObject(ho_ImageAffineTrans, hv_dd, "image");
				GetDictParam(hv_at, "key_data_type", "hom_mat_rot", &hv___Tmp_Ctrl_Type);
				if (0 != (int(hv___Tmp_Ctrl_Type == HTuple("tuple"))))
				{
					SetDictTuple(hv_dd, "hom_mat", hv_at.TupleGetDictTuple("hom_mat_rot"));
				}
				else
				{
					SetDictObject(hv_at.TupleGetDictObject("hom_mat_rot"), hv_dd, "hom_mat");
				}
				DefectDetectionAlgorithms(hv_dd, (*hv_dt));
			}
		}
		//*************
		GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
		{
			HTuple end_val7562 = (hv_GenParamValue.TupleLength()) - 1;
			HTuple step_val7562 = 1;
			for (hv_Index10 = 0; hv_Index10.Continue(end_val7562, step_val7562); hv_Index10 += step_val7562)
			{
				Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
					&ho_ConnectedRegions167);
				SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
					1, 9999999);
				Union1(ho_SelectedRegions114, &ho_RegionUnion67);
				CountObj(ho_RegionUnion67, &hv_Number39);
				if (0 != (int(hv_Number39 == 0)))
				{
					RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
				else if (0 != hv_Number39)
				{
					Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
			}
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84GrayLumenDefects1Station error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::Det_Bjizhun_region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_Region3, ho_ConnectedRegions6;
	HObject  ho_SelectedRegions8, ho_ImageClosing, ho_DerivGaussImage;
	HObject  ho_ImageConverted, ho_ImageMedian, ho_ImageMedian1;
	HObject  ho_RegionDynThresh, ho_ImageOpening3, ho_ImageSub5;
	HObject  ho_Region23, ho_ConnectedRegions34, ho_SelectedRegions32;
	HObject  ho_SelectedRegions121, ho_Region1, ho_ConnectedRegions2;
	HObject  ho_SelectedRegions3, ho_Region2, ho_ConnectedRegions3;
	HObject  ho_SelectedRegions4, ho_RegionUnion1, ho_RegionClosing;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions5, ho_SelectedRegions6;
	HObject  ho_ImageReduced, ho_Region4, ho_ObjectSelected;
	HObject  ho_RegionDilation, ho_RegionDifference, ho_Region;
	HObject  ho_RegionOpening2, ho_ConnectedRegions1, ho_SelectedRegions2;
	HObject  ho_Region62, ho_ConnectedRegions62, ho_SelectedRegions63;
	HObject  ho_RegionOpening1, ho_ConnectedRegions, ho_SelectedRegions;
	HObject  ho_RegionUnion, ho_RegionClosing23, ho_RegionOpening;
	HObject  ho_RegionErosion4, ho_ImageReduced52, ho_ImageOpening4;
	HObject  ho_ImageSub7, ho_Region27, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions33, ho_SelectedRegions7, ho_RegionUnion2;
	HObject  ho_ConnectedRegions5, ho_SelectedRegions161, ho_SelectedRegions1;
	HObject  ho_SelectedRegions162, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Mean4, hv_Deviation4;
	HTuple  hv_Number1, hv_Number, hv_Number2, hv_Area, hv_Row;
	HTuple  hv_Column, hv_i, hv_Mean, hv_Deviation, hv_Mean1;
	HTuple  hv_Deviation1, hv_Abs, hv_Exception, hv___Tmp_Ctrl_Dict_Init_0;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_0, "comp", 0);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("Bjizhun")) >= 0)).TupleAnd(((hv_dd.TupleGetDictTuple("Bjizhun")).TupleConcat(hv___Tmp_Ctrl_Dict_Init_0)).TupleTestEqualDictItem((HTuple("mode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			Intensity(hv_dd.TupleGetDictObject("region"), ho_ImageReduced17, &hv_Mean4,
				&hv_Deviation4);

			if (0 != (int(hv_Mean4<110)))
			{
				ConcatObj(ho_ImageReduced17, hv_dt.TupleGetDictObject("44"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "44");
			}
			if (0 != (int(hv_Mean4 >= 110)))
			{

				//*检测点状压上和黑点
				Threshold(ho_ImageReduced17, &ho_Region3, 248, 255);
				Connection(ho_Region3, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions8, "area", "and", 70000,
					999999);
				CountObj(ho_SelectedRegions8, &hv_Number1);
				if (0 != (int(hv_Number1 == 0)))
				{
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing, 3, 1);

					DerivateGauss(ho_ImageReduced17, &ho_DerivGaussImage, 1, "none");
					ConvertImageType(ho_DerivGaussImage, &ho_ImageConverted, "byte");
					MedianRect(ho_ImageConverted, &ho_ImageMedian, 3, 3);
					MedianRect(ho_ImageConverted, &ho_ImageMedian1, 25, 25);
					DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, 12,
						"dark");

					GrayClosingRect(ho_ImageReduced17, &ho_ImageOpening3, 59, 81);
					SubImage(ho_ImageReduced17, ho_ImageOpening3, &ho_ImageSub5, 1.0, 128);
					Threshold(ho_ImageSub5, &ho_Region23, 0, 70);
					Connection(ho_Region23, &ho_ConnectedRegions34);
					SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, ((HTuple("area").Append("anisometry")).Append("circularity")),
						"and", ((HTuple(55).Append(1e-5)).Append(0.18)), ((HTuple(2200).Append(3.5)).Append(1)));
					SelectGray(ho_SelectedRegions32, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions121,
						"mean", "and", 0, 88);
					CountObj(ho_SelectedRegions121, &hv_Number);
					Threshold(ho_ImageSub5, &ho_Region1, 0, 40);
					Connection(ho_Region1, &ho_ConnectedRegions2);
					SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions3, ((HTuple("area").Append("anisometry")).Append("phi")),
						"and", (HTuple(12075).Append(0)).TupleConcat(HTuple(-40).TupleRad()),
						(HTuple(99999).Append(17.5)).TupleConcat(HTuple(40).TupleRad()));
					ConcatObj(ho_SelectedRegions3, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
					Threshold(ho_ImageSub5, &ho_Region2, 0, 15);
					Connection(ho_Region2, &ho_ConnectedRegions3);
					SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions4, (HTuple("area").Append("anisometry")),
						"and", (HTuple(30).Append(0)), (HTuple(2400).Append(7.8)));
					Union1(ho_SelectedRegions4, &ho_RegionUnion1);
					ClosingRectangle1(ho_RegionUnion1, &ho_RegionClosing, 10, 10);
					Connection(ho_RegionClosing, &ho_ConnectedRegions4);
					SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions5, (HTuple("area").Append("anisometry")),
						"and", (HTuple(85).Append(0)), (HTuple(99999).Append(7.7)));
					SelectGray(ho_SelectedRegions5, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions6,
						"mean", "and", 0, 117);
					ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_SelectedRegions6, &ho_ImageReduced
						);
					Threshold(ho_ImageReduced, &ho_Region4, 0, 85);
					CountObj(ho_Region4, &hv_Number2);

					if (0 != hv_Number2)
					{
						AreaCenter(ho_Region4, &hv_Area, &hv_Row, &hv_Column);
						if (0 != (int(hv_Area>2)))
						{
							ConcatObj(ho_SelectedRegions6, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
						}
					}
					{
						HTuple end_val61 = hv_Number;
						HTuple step_val61 = 1;
						for (hv_i = 1; hv_i.Continue(end_val61, step_val61); hv_i += step_val61)
						{
							SelectObj(ho_SelectedRegions121, &ho_ObjectSelected, hv_i);
							DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, 43, 6);
							Difference(ho_RegionDilation, ho_ObjectSelected, &ho_RegionDifference
								);
							Intensity(ho_ObjectSelected, hv_dd.TupleGetDictObject("image"), &hv_Mean,
								&hv_Deviation);
							Intensity(ho_RegionDifference, hv_dd.TupleGetDictObject("image"), &hv_Mean1,
								&hv_Deviation1);
							TupleAbs(hv_Mean1 - hv_Mean, &hv_Abs);
							if (0 != (int(hv_Abs>32)))
							{
								ConcatObj(ho_ObjectSelected, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
									);
								SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
							}
						}
					}
					//检测明显黑点
					Threshold(ho_ImageReduced17, &ho_Region, 0, 30);
					OpeningRectangle1(ho_Region, &ho_RegionOpening2, 2, 2);
					Connection(ho_RegionOpening2, &ho_ConnectedRegions1);
					SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions2, "area", "and",
						60, 99999);
					ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, hv_dt, "55");
				}
			}
		}
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_1, "comp", 1);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("Bjizhun")) >= 0)).TupleAnd(((hv_dd.TupleGetDictTuple("Bjizhun")).TupleConcat(hv___Tmp_Ctrl_Dict_Init_1)).TupleTestEqualDictItem((HTuple("mode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			Intensity(hv_dd.TupleGetDictObject("region"), ho_ImageReduced17, &hv_Mean4,
				&hv_Deviation4);
			if (0 != (int(hv_Mean4>135)))
			{
				ConcatObj(ho_ImageReduced17, hv_dt.TupleGetDictObject("44"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "44");
			}
			if (0 != (int(hv_Mean4 <= 135)))
			{

				Threshold(ho_ImageReduced17, &ho_Region62, 0, 110);
				Connection(ho_Region62, &ho_ConnectedRegions62);
				SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions63, "area", "and",
					18000, 9999999);
				OpeningRectangle1(ho_SelectedRegions63, &ho_RegionOpening1, 5, 5);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions, "area", "and", 1550,
					999999);
				Union1(ho_SelectedRegions, &ho_RegionUnion);
				ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing23, 100, 10);
				OpeningRectangle1(ho_RegionClosing23, &ho_RegionOpening, 20, 20);
				ErosionRectangle1(ho_RegionOpening, &ho_RegionErosion4, 10, 2);
				ReduceDomain(hv_dd.TupleGetDictObject("image"), ho_RegionErosion4, &ho_ImageReduced52
					);
				GrayOpeningRect(ho_ImageReduced52, &ho_ImageOpening4, 11, 11);
				SubImage(ho_ImageReduced52, ho_ImageOpening4, &ho_ImageSub7, 1.5, 128);
				Threshold(ho_ImageSub7, &ho_Region27, 220, 255);
				Connection(ho_Region27, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions33, (HTuple("area").Append("anisometry")),
					"and", (HTuple(25).Append(0)), (HTuple(1200).Append(6.2)));
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions7, ((HTuple("anisometry").Append("phi")).Append("area")),
					"and", (HTuple(6.5).TupleConcat(HTuple(-15).TupleRad())).TupleConcat(100),
					(HTuple(35).TupleConcat(HTuple(15).TupleRad())).TupleConcat(9999));
				Union2(ho_SelectedRegions7, ho_SelectedRegions33, &ho_RegionUnion2);
				Connection(ho_RegionUnion2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions161, ((HTuple("area").Append("anisometry")).Append("inner_radius")),
					"and", ((HTuple(240).Append(0)).Append(2)), ((HTuple(1200).Append(27.3)).Append(77)));
				SelectGray(ho_ConnectedRegions5, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions1,
					"mean", "and", 115, 255);
				CountObj(ho_SelectedRegions1, &hv_Number);
				{
					HTuple end_val117 = hv_Number;
					HTuple step_val117 = 1;
					for (hv_i = 1; hv_i.Continue(end_val117, step_val117); hv_i += step_val117)
					{
						SelectObj(ho_SelectedRegions1, &ho_ObjectSelected, hv_i);
						DilationRectangle1(ho_ObjectSelected, &ho_RegionDilation, 23, 6);
						Difference(ho_RegionDilation, ho_ObjectSelected, &ho_RegionDifference);
						Intensity(ho_ObjectSelected, hv_dd.TupleGetDictObject("image"), &hv_Mean,
							&hv_Deviation);
						Intensity(ho_RegionDifference, hv_dd.TupleGetDictObject("image"), &hv_Mean1,
							&hv_Deviation1);
						TupleAbs(hv_Mean1 - hv_Mean, &hv_Abs);
						if (0 != (HTuple(int(hv_Abs>70)).TupleAnd(int(hv_Mean1<100))))
						{
							ConcatObj(ho_ObjectSelected, hv_dt.TupleGetDictObject("58"), &ho___Tmp_Obj_0
								);
							SetDictObject(ho___Tmp_Obj_0, hv_dt, "58");
						}
					}
				}
				SelectGray(ho_SelectedRegions161, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions162,
					"mean", "and", 165, 255);

				//var_threshold (ImageReduced17, Region3, 45, 45, 0.2, 22, 'dark')
				//connection (Region3, ConnectedRegions5)
				//select_shape (ConnectedRegions5, SelectedRegions6, 'area', 'and', 50, 99999)
				//union2 (SelectedRegions1, SelectedRegions6, RegionUnion2)
				//closing_rectangle1 (RegionUnion2, RegionClosing1, 10, 10)
				//connection (RegionClosing1, ConnectedRegions6)
				//intersection (ConnectedRegions6, dt.['55'], RegionIntersection)



				ConcatObj(ho_SelectedRegions162, hv_dt.TupleGetDictObject("58"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "58");
			}
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_Bjizhun_region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::Det_LD_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_ImageMedian8, ho_ImageClosing10;
	HObject  ho_Regions, ho_ConnectedRegions72, ho_SelectedRegions72;
	HObject  ho_SelectedRegions74, ho_RegionUnion20, ho_ImageMedian;
	HObject  ho_ImageMedian1, ho_RegionDynThresh, ho_ConnectedRegions7;
	HObject  ho_SelectedRegions7, ho_SelectedRegions, ho_RegionDifference;
	HObject  ho_DerivGauss, ho_ImageConverted, ho_ImageRank;
	HObject  ho_ImageZoomed, ho_ImageMedian2, ho_ImageMedian3;
	HObject  ho_RegionZoom, ho_RegionErosion, ho_RegionDynThresh2;
	HObject  ho_RegionIntersection, ho_ConnectedRegions2, ho_SelectedRegions4;
	HObject  ho_RegionZoom1, ho_RegionDynThresh1, ho_ConnectedRegions4;
	HObject  ho_SelectedRegions2, ho_Region26, ho_ConnectedRegions92;
	HObject  ho_SelectedRegions106, ho_Region107, ho_ConnectedRegions152;
	HObject  ho_SelectedRegions179, ho_Region, ho_ConnectedRegions;
	HObject  ho_SelectedRegions1, ho_RegionUnion, ho_RegionClosing;
	HObject  ho_ConnectedRegions1, ho_SelectedRegions3, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Value5, hv_Number2;
	HTuple  hv_Exception;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测镭雕区域
		if (0 != (int((hv_GenParamValue.TupleFind("LD")) >= 0)))
		{
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
			GrayClosingRect(ho_ImageMedian8, &ho_ImageClosing10, 11, 11);
			//大面黑（未见光或者大的黑色缺陷）
			AutoThreshold(ho_ImageClosing10, &ho_Regions, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("auto_thre"));
			Connection(ho_Regions, &ho_ConnectedRegions72);
			SelectGray(ho_ConnectedRegions72, ho_ImageClosing10, &ho_SelectedRegions72,
				"mean", "and", 0, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_gray_mean_value"));
			SelectShape(ho_SelectedRegions72, &ho_SelectedRegions74, (HTuple("area").Append("ratio")),
				"and", (HTuple(500).Append(0.05)), (HTuple(9999999).Append(14)));
			Union1(ho_SelectedRegions74, &ho_RegionUnion20);
			RegionFeatures(ho_RegionUnion20, "area", &hv_Value5);
			if (0 != (HTuple(int(hv_Value5>1500)).TupleAnd(int(hv_Value5<6.5e6))))
			{
				ConcatObj(ho_SelectedRegions74, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			}
			//检测常规黑色缺陷（压伤）
			MedianRect(ho_ImageReduced17, &ho_ImageMedian, 3, 3);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian1, 95, 95);
			DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_black"),
				"dark");
			Connection(ho_RegionDynThresh, &ho_ConnectedRegions7);
			SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions7, ((HTuple("area").Append("ratio")).Append("anisometry")),
				"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_balck_area")).TupleConcat((HTuple(0).Append(0))),
				((HTuple(99999).Append(4.5)).Append(15)));
			SelectShape(ho_SelectedRegions7, &ho_SelectedRegions, "circularity", "and",
				0.6, 1);
			ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("49"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "49");
			Difference(ho_SelectedRegions7, ho_SelectedRegions, &ho_RegionDifference);
			ConcatObj(ho_RegionDifference, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 3, "none");
			ConvertImageType(ho_DerivGauss, &ho_ImageConverted, "byte");
			RankRect(ho_ImageConverted, &ho_ImageRank, 15, 15, 55);
			//检测大的压伤
			ZoomImageFactor(ho_ImageRank, &ho_ImageZoomed, 0.5, 0.5, "constant");
			MedianRect(ho_ImageZoomed, &ho_ImageMedian2, 3, 3);
			MedianRect(ho_ImageZoomed, &ho_ImageMedian3, 85, 85);
			ZoomRegion(hv_dd.TupleGetDictObject("region"), &ho_RegionZoom, 0.5, 0.5);
			ErosionRectangle1(ho_RegionZoom, &ho_RegionErosion, 21, 21);

			DynThreshold(ho_ImageMedian2, ho_ImageMedian3, &ho_RegionDynThresh2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("der_black_value"),
				"dark");
			Intersection(ho_RegionDynThresh2, ho_RegionErosion, &ho_RegionIntersection);
			Connection(ho_RegionIntersection, &ho_ConnectedRegions2);
			SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions4, "area", "and", 1200,
				99999);
			ZoomRegion(ho_SelectedRegions4, &ho_RegionZoom1, 2, 2);
			ConcatObj(ho_RegionZoom1, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");
			//检测白色缺陷
			DynThreshold(ho_ImageMedian, ho_ImageMedian1, &ho_RegionDynThresh1, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("dyn_light"),
				"light");
			Connection(ho_RegionDynThresh1, &ho_ConnectedRegions4);
			SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_white_area")).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("min_ratio_value")),
				HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("max_ratio_value")));
			ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("62"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "62");

			//检测大的亮白（灰度240+）
			Threshold(ho_ImageMedian, &ho_Region26, 240, 255);
			Connection(ho_Region26, &ho_ConnectedRegions92);
			SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions106, "area", "and", 550,
				99999);
			ConcatObj(ho_SelectedRegions106, hv_dt.TupleGetDictObject("51"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "51");
			//长浅黑
			VarThreshold(ho_ImageMedian, &ho_Region107, 50, 25, 0.2, 18, "dark");
			Connection(ho_Region107, &ho_ConnectedRegions152);
			SelectShape(ho_ConnectedRegions152, &ho_SelectedRegions179, (HTuple("area").Append("ratio")),
				"and", (HTuple(1080).Append(0)), (HTuple(99999).Append(20)));
			CountObj(ho_SelectedRegions179, &hv_Number2);
			if (0 != (int(hv_Number2>9)))
			{
				ConcatObj(ho_SelectedRegions179, hv_dt.TupleGetDictObject("42"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "42");
			}
			//长横黑
			VarThreshold(ho_ImageMedian, &ho_Region, 1, 35, 0.2, (hv_dd.TupleGetDictTuple("LD")).TupleGetDictTuple("var_dark_value"),
				"dark");
			Connection(ho_Region, &ho_ConnectedRegions);
			SelectShape(ho_ConnectedRegions, &ho_SelectedRegions1, (HTuple("area").Append("ratio")),
				"and", (HTuple(50).Append(0)), (HTuple(99999).Append(1.3)));
			Union1(ho_SelectedRegions1, &ho_RegionUnion);
			ClosingRectangle1(ho_RegionUnion, &ho_RegionClosing, 36, 1);
			Connection(ho_RegionClosing, &ho_ConnectedRegions1);
			SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions3, (HTuple("area").Append("width")),
				"and", (HTuple(150).Append(190)), (HTuple(99999).Append(9999)));
			ConcatObj(ho_SelectedRegions3, hv_dt.TupleGetDictObject("42"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "42");
			//脏污检测

		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_LD_Region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::Det_RT_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_Region84, ho_ConnectedRegions122;
	HObject  ho_SelectedRegions139, ho_RegionUnion46, ho_RegionClosing39;
	HObject  ho_RegionDifference45, ho_ConnectedRegions124, ho_SelectedRegions141;
	HObject  ho_SelectedRegions1, ho_SelectedRegions2, ho_SelectedRegions;
	HObject  ho_ImageScaled, ho_ImageMedian33, ho_Region116;
	HObject  ho_ConnectedRegions166, ho_SelectedRegions195, ho_RegionUnion57;
	HObject  ho_RegionClosing51, ho_RegionDifference66, ho_RegionOpening52;
	HObject  ho_ConnectedRegions168, ho_RegionIntersection, ho_SelectedRegions196;
	HObject  ho_RegionOpening53, ho_RegionDifference67, ho_ConnectedRegions169;
	HObject  ho_SelectedRegions197, ho_ImageClosing12, ho_ImageSub24;
	HObject  ho_Region88, ho_ConnectedRegions118, ho_SelectedRegions135;
	HObject  ho_SelectedRegions3, ho_ImageOpening10, ho_ImageSub23;
	HObject  ho_Region45, ho_ConnectedRegions29, ho_SelectedRegions47;
	HObject  ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Value12, hv_Mean;
	HTuple  hv_Deviation, hv_Exception, hv___Tmp_Ctrl_Dict_Init_0;
	HTuple  hv___Tmp_Ctrl_Dict_Init_1, hv___Tmp_Ctrl_Dict_Init_2;

	try
	{


		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测RT转角区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_0);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_0, "comp", 0);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_zhuanjiao")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_0)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_0 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			if (0 != ((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("mode")))
			{
				ScaleImage(ho_ImageReduced17, &ho_ImageReduced17, 2.01, 0);
			}
			Threshold(ho_ImageReduced17, &ho_Region84, (hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_thr"),
				255);

			Connection(ho_Region84, &ho_ConnectedRegions122);
			SelectShape(ho_ConnectedRegions122, &ho_SelectedRegions139, ((HTuple("area").Append("circularity")).Append("anisometry")),
				"and", (HTuple(68).Append(0)).TupleConcat((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_anisometry_value")),
				((HTuple(99999).Append(0.65)).Append(99)));
			Union1(ho_SelectedRegions139, &ho_RegionUnion46);
			ClosingCircle(ho_RegionUnion46, &ho_RegionClosing39, (hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("closing_cir_value"));
			Difference(ho_RegionClosing39, ho_SelectedRegions139, &ho_RegionDifference45
				);
			Connection(ho_RegionDifference45, &ho_ConnectedRegions124);
			SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions141, (HTuple("area").Append("anisometry")),
				"and", ((hv_dd.TupleGetDictTuple("RT_zhuanjiao")).TupleGetDictTuple("min_area")).TupleConcat(1e-5),
				(HTuple(99999).Append(9)));
			SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions1, (HTuple("area").Append("anisometry")),
				"and", (HTuple(50).Append(0)), (HTuple(99999).Append(17)));
			SelectGray(ho_SelectedRegions1, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions2,
				"mean", "and", 0, 130);
			SelectGray(ho_SelectedRegions141, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions,
				"mean", "and", 0, 137);

			//concat_obj (SelectedRegions, dt.['63'], dt.['63'])
			RegionFeatures(ho_RegionClosing39, "width", &hv_Value12);
			if (0 != (int(hv_Value12>100)))
			{
				ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
				ConcatObj(ho_SelectedRegions2, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
			}
		}
		//检测垂直区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_1);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_1, "comp", 1);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_chuizhi")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_1)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_1 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			//检测黑色内凹
			ScaleImage(ho_ImageReduced17, &ho_ImageScaled, 1.31, -25);
			MedianRect(ho_ImageScaled, &ho_ImageMedian33, 3, 3);
			Threshold(ho_ImageMedian33, &ho_Region116, 152, 255);
			Connection(ho_Region116, &ho_ConnectedRegions166);
			SelectShape(ho_ConnectedRegions166, &ho_SelectedRegions195, "area", "and",
				150, 99999);
			Union1(ho_SelectedRegions195, &ho_RegionUnion57);
			ClosingRectangle1(ho_RegionUnion57, &ho_RegionClosing51, 50, 120);
			Difference(ho_RegionClosing51, ho_RegionUnion57, &ho_RegionDifference66);
			OpeningRectangle1(ho_RegionDifference66, &ho_RegionOpening52, 2, 2);
			Connection(ho_RegionOpening52, &ho_ConnectedRegions168);
			Intersection(ho_ConnectedRegions168, hv_dd.TupleGetDictObject("region"), &ho_RegionIntersection
				);
			SelectShape(ho_RegionIntersection, &ho_SelectedRegions196, (HTuple("width").Append("anisometry")),
				"and", (HTuple(4).Append(0)), (HTuple(99999).Append(11)));
			Intensity(ho_SelectedRegions196, ho_ImageMedian33, &hv_Mean, &hv_Deviation);
			if (0 != (int(hv_Mean<135)))
			{
				ConcatObj(ho_SelectedRegions196, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
			}
			//检测外凸(多为白色)
			OpeningRectangle1(ho_RegionClosing51, &ho_RegionOpening53, 1, 200);
			Difference(ho_RegionClosing51, ho_RegionOpening53, &ho_RegionDifference67);
			Connection(ho_RegionDifference67, &ho_ConnectedRegions169);
			SelectShape(ho_ConnectedRegions169, &ho_SelectedRegions197, (HTuple("width").Append("area")),
				"and", ((hv_dd.TupleGetDictTuple("RT_chuizhi")).TupleGetDictTuple("min_width_value")).TupleConcat(100),
				(HTuple(55).Append(2999)));
			ConcatObj(ho_SelectedRegions197, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
		}
		//检测水平区域缺陷
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
		SetDictTuple(hv___Tmp_Ctrl_Dict_Init_2, "comp", 2);
		if (0 != (HTuple(int((hv_GenParamValue.TupleFind("RT_shuipin")) >= 0)).TupleAnd((hv_dd.TupleConcat(hv___Tmp_Ctrl_Dict_Init_2)).TupleTestEqualDictItem((HTuple("RTmode").Append("comp"))))))
		{
			hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			//threshold (ImageReduced17, Region, 168, 255)
			//connection (Region, ConnectedRegions)
			//select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999)
			//union1 (SelectedRegions, RegionUnion)

			GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing12, 1, 100);

			//黑
			SubImage(ho_ImageReduced17, ho_ImageClosing12, &ho_ImageSub24, 1, 128);
			Threshold(ho_ImageSub24, &ho_Region88, 0, 50);
			Connection(ho_Region88, &ho_ConnectedRegions118);
			SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, ((HTuple("area").Append("ratio")).Append("height")),
				"and", ((HTuple(15).Append(0.01)).Append(4)), ((HTuple(99999).Append(5)).Append(99)));
			SelectGray(ho_SelectedRegions135, hv_dd.TupleGetDictObject("image"), &ho_SelectedRegions3,
				"mean", "and", 0, 135);
			ConcatObj(ho_SelectedRegions3, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");

			//threshold (ImageReduced17, Region, 180, 255)
			//connection (Region, ConnectedRegions)
			//select_shape (ConnectedRegions, SelectedRegions, 'area', 'and', 150, 99999)
			//union1 (SelectedRegions, RegionUnion)
			//closing_rectangle1 (RegionUnion, RegionClosing, 10, 1)
			//opening_rectangle1 (RegionClosing, RegionOpening, 500, 1)
			//difference (RegionClosing, RegionOpening, RegionDifference)
			//opening_rectangle1 (RegionDifference, RegionOpening1, 1, 3)
			//connection (RegionOpening1, ConnectedRegions1)
			//select_shape (ConnectedRegions1, SelectedRegions1, ['area','column','height'], 'and', [50,0,4], [600,4000,99])
			//concat_obj (SelectedRegions1, dt.['63'], dt.['63'])
			GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening10, 1, 320);

			SubImage(ho_ImageOpening10, ho_ImageClosing12, &ho_ImageSub23, 1, 128);
			Threshold(ho_ImageSub23, &ho_Region45, 0, 60);

			Connection(ho_Region45, &ho_ConnectedRegions29);
			SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, ((HTuple("area").Append("ratio")).Append("height")),
				"and", ((HTuple(7).Append(0.053)).Append(3)), ((HTuple(800).Append(8)).Append(99)));
			ConcatObj(ho_SelectedRegions47, hv_dt.TupleGetDictObject("63"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "63");
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "HotRole error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::Det_SJ_Region(HTuple hv_dd, HTuple hv_dt)
{

	// Local iconic variables
	HObject  ho_ImageReduced17, ho_ImageMedian8, ho_Region73;
	HObject  ho_ConnectedRegions96, ho_SelectedRegions, ho_DerivGauss;
	HObject  ho_ImageMedian30, ho_ImageMedian31, ho_RegionDynThresh12;
	HObject  ho_ConnectedRegions155, ho_SelectedRegions182, ho_ImageClosing5;
	HObject  ho_ImageSub9, ho_Region40, ho_ConnectedRegions41;
	HObject  ho_SelectedRegions40, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_GenParamValue, hv_Exception;

	try
	{
		GetDictParam(hv_dd, "keys", HTuple(), &hv_GenParamValue);
		//检测塑胶区域
		if (0 != (int((hv_GenParamValue.TupleFind("SJ")) >= 0)))
		{
			ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0, 5, 11);
			SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
			ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
				&ho_ImageReduced17);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
			//大亮白(Bsj漏铁)
			Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
				255);
			Connection(ho_Region73, &ho_ConnectedRegions96);
			SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
				"and", (HTuple(15).Append(0.01)), (HTuple(99999).Append(16)));
			ConcatObj(ho_SelectedRegions, hv_dt.TupleGetDictObject("41"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "41");

			//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
			//connection (Region29, ConnectedRegions39)
			//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
			//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
			//小面积黑
			DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
			ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");
			MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
			MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 105, 105);

			DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"),
				"dark");
			Connection(ho_RegionDynThresh12, &ho_ConnectedRegions155);
			SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value")),
				HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value")));
			ConcatObj(ho_SelectedRegions182, hv_dt.TupleGetDictObject("61"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "61");

			//大面积黑
			GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
			SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
			Threshold(ho_ImageSub9, &ho_Region40, 0, 50);


			Connection(ho_Region40, &ho_ConnectedRegions41);
			SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
				"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0),
				(HTuple(999999).Append(7)));
			ConcatObj(ho_SelectedRegions40, hv_dt.TupleGetDictObject("61"), &ho___Tmp_Obj_0
				);
			SetDictObject(ho___Tmp_Obj_0, hv_dt, "61");
		}
		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = "Det_SJ_Region error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

int JSZCAlgorithmsDLLQ1::ImageProcessQ1_84GrayLumenDefects3Station(HObject ho_Image, HTuple hv_ProNum,
	HTuple hv_StaNum, HTuple hv_CamNum, HTuple hv_ImageNum, HTuple *hv_dt)
{

	// Local iconic variables
	HObject  ho_Reg, ho_e, ho_EmptyRegion, ho_ROI_0;
	HObject  ho_ImageReduced26, ho_Region26, ho_ConnectedRegions22;
	HObject  ho_SelectedRegions4, ho_Region71, ho_Region72, ho_Region73;
	HObject  ho_Region74, ho_Region75, ho_Region76, ho_RegionUnion50;
	HObject  ho_RegionUnion51, ho_RegionUnion58, ho_RegionUnion59;
	HObject  ho_RegionUnion60, ho_RegionMoved28, ho_ImageReduced31;
	HObject  ho_ImageClosing7, ho_Region34, ho_ConnectedRegions37;
	HObject  ho_SelectedRegions37, ho_RegionDilation9, ho_RegionMoved25;
	HObject  ho_RegionDifference22, ho_ImageReduced8, ho_Region8;
	HObject  ho_RegionOpening43, ho_ConnectedRegions12, ho_SelectedRegions12;
	HObject  ho_RegionClosing5, ho_RegionErosion5, ho_RegionMoved3;
	HObject  ho_ImageReduced9, ho_ImageClosing2, ho_ImageSub1;
	HObject  ho_Region9, ho_RegionClosing40, ho_ConnectedRegions19;
	HObject  ho_SelectedRegions22, ho_SelectedRegions100, ho_RegionDifference13;
	HObject  ho_RegionOpening9, ho_ConnectedRegions20, ho_SelectedRegions20;
	HObject  ho_ImageReduced11, ho_ImageClosing4, ho_ImageSub2;
	HObject  ho_Region10, ho_ConnectedRegions21, ho_SelectedRegions21;
	HObject  ho_SelectedRegions23, ho_ImageReduced54, ho_Region65;
	HObject  ho_RegionOpening20, ho_RegionClosing19, ho_ConnectedRegions75;
	HObject  ho_SelectedRegions77, ho_SelectedRegions102, ho_RegionDilation16;
	HObject  ho_RegionErosion25, ho_RegionMoved12, ho_ImageReduced67;
	HObject  ho_Region69, ho_RegionOpening32, ho_ConnectedRegions89;
	HObject  ho_SelectedRegions103, ho_RegionUnion33, ho_RegionClosing17;
	HObject  ho_RegionMoved5, ho_RegionMoved7, ho_RegionDifference20;
	HObject  ho_ImageReduced29, ho_Region28, ho_ConnectedRegions45;
	HObject  ho_SelectedRegions49, ho_RegionClosing18, ho_RegionTrans;
	HObject  ho_RegionDilation20, ho_RegionDifference21, ho_ConnectedRegions7;
	HObject  ho_SelectedRegions123, ho_ImageReduced30, ho_ImageRank;
	HObject  ho_ImageClosing19, ho_ImageSub14, ho_Region21, ho_ConnectedRegions113;
	HObject  ho_SelectedRegions119, ho_RegionUnion24, ho_RegionClosing39;
	HObject  ho_ConnectedRegions114, ho_SelectedRegions120, ho_SelectedRegions116;
	HObject  ho_RegionUnion40, ho_ImageReduced34, ho_Region77;
	HObject  ho_ConnectedRegions50, ho_SelectedRegions84, ho_RegionOpening38;
	HObject  ho_RegionTrans6, ho_RegionMoved, ho_RegionDifference2;
	HObject  ho_ConnectedRegions25, ho_SelectedRegions25, ho_RegionErosion26;
	HObject  ho_ImageReduced10, ho_ImageClosing12, ho_ImageSub24;
	HObject  ho_Region88, ho_ConnectedRegions118, ho_SelectedRegions135;
	HObject  ho_ImageOpening10, ho_ImageSub23, ho_Region45, ho_ConnectedRegions29;
	HObject  ho_SelectedRegions47, ho_RegionMoved8, ho_RegionDilation17;
	HObject  ho_RegionOpening41, ho_SelectedRegions136, ho_ImageReduced25;
	HObject  ho_ConnectedRegions98, ho_SelectedRegions111, ho_RegionUnion39;
	HObject  ho_Region33, ho_RegionClosing12, ho_ConnectedRegions36;
	HObject  ho_SelectedRegions54, ho_RegionUnion7, ho_RegionDilation35;
	HObject  ho_ImageReduced42, ho_ImageMedian5, ho_Region51;
	HObject  ho_ConnectedRegions56, ho_SelectedRegions56, ho_RegionDilation3;
	HObject  ho_RegionMoved29, ho_RegionDifference34, ho_RegionDifference55;
	HObject  ho_RegionIntersection1, ho_ImageReduced41, ho_RegionClosing46;
	HObject  ho_RegionDifference57, ho_ConnectedRegions125, ho_SelectedRegions153;
	HObject  ho_RegionUnion49, ho_RegionDilation45, ho_ImageReduced94;
	HObject  ho_ImageClosing22, ho_ImageSub7, ho_Region89, ho_RegionOpening14;
	HObject  ho_ConnectedRegions126, ho_SelectedRegions154, ho_ImageClosing21;
	HObject  ho_ImageClosing23, ho_ImageSub8, ho_Region90, ho_RegionOpening55;
	HObject  ho_RegionClosing48, ho_ConnectedRegions127, ho_SelectedRegions155;
	HObject  ho_SelectedRegions156, ho_ImageReduced64, ho_ImageClosing9;
	HObject  ho_Region78, ho_ConnectedRegions9, ho_SelectedRegions8;
	HObject  ho_RegionUnion, ho_RegionClosing6, ho_RegionOpening12;
	HObject  ho_ConnectedRegions, ho_SelectedRegions13, ho_RegionDilation4;
	HObject  ho_RegionMoved30, ho_RegionErosion12, ho_RegionDifference8;
	HObject  ho_ImageReduced7, ho_Region7, ho_RegionOpening3;
	HObject  ho_ConnectedRegions11, ho_SelectedRegions11, ho_RegionDilation1;
	HObject  ho_RegionDifference3, ho_RegionOpening35, ho_ImageReduced22;
	HObject  ho_RegionOpening15, ho_ConnectedRegions32, ho_SelectedRegions31;
	HObject  ho_RegionTrans7, ho_RegionOpening17, ho_RegionMoved24;
	HObject  ho_SelectedRegions3, ho_Region35, ho_RegionOpening23;
	HObject  ho_ConnectedRegions46, ho_SelectedRegions50, ho_SelectedRegions110;
	HObject  ho_ImageReduced46, ho_Region58, ho_ConnectedRegions55;
	HObject  ho_SelectedRegions55, ho_RegionErosion15, ho_RegionMoved14;
	HObject  ho_ImageReduced17, ho_ImageReduced82, ho_ImageMedian27;
	HObject  ho_ImageMedian28, ho_RegionDynThresh11, ho_ConnectedRegions130;
	HObject  ho_SelectedRegions149, ho_RegionOpening16, ho_RegionMoved9;
	HObject  ho_SelectedRegions99, ho_RegionDifference9, ho_RegionOpening8;
	HObject  ho_ConnectedRegions16, ho_SelectedRegions18, ho_RegionErosion;
	HObject  ho_RegionMoved22, ho_RegionDifference37, ho_ConnectedRegions94;
	HObject  ho_SelectedRegions108, ho_RegionErosion20, ho_RegionMoved27;
	HObject  ho_ConnectedRegions4, ho_SelectedRegions2, ho_ImageReduced68;
	HObject  ho_ConnectedRegions112, ho_SelectedRegions117, ho_SelectedRegions7;
	HObject  ho_ImageMedian21, ho_ImageClosing13, ho_ImageSub18;
	HObject  ho_ConnectedRegions148, ho_SelectedRegions173, ho_RegionUnion52;
	HObject  ho_RegionOpening34, ho_ConnectedRegions95, ho_SelectedRegions109;
	HObject  ho_SelectedRegions144, ho_RegionUnion37, ho_RegionOpening18;
	HObject  ho_RegionClosing14, ho_RegionDilation5, ho_RegionOpening52;
	HObject  ho_SelectedRegions36, ho_RegionClosing27, ho_RegionUnion10;
	HObject  ho_RegionErosion11, ho_RegionDifference12, ho_ImageReduced33;
	HObject  ho_Region36, ho_ConnectedRegions49, ho_SelectedRegions53;
	HObject  ho_RegionTrans11, ho_SelectedRegions57, ho_SelectedRegions58;
	HObject  ho_RegionUnion20, ho_RegionDifference26, ho_ImageReduced44;
	HObject  ho_Region55, ho_ConnectedRegions67, ho_SelectedRegions68;
	HObject  ho_RegionClosing15, ho_RegionErosion16, ho_ImageReduced45;
	HObject  ho_ImageClosing8, ho_ImageSub13, ho_Region56, ho_ConnectedRegions68;
	HObject  ho_SelectedRegions69, ho_ImageReduced15, ho_ImageMedian16;
	HObject  ho_Region16, ho_ConnectedRegions18, ho_SelectedRegions15;
	HObject  ho_RegionDilation8, ho_RegionMoved10, ho_RegionDifference19;
	HObject  ho_RegionOpening27, ho_ConnectedRegions71, ho_RegionMoved33;
	HObject  ho_RegionOpening42, ho_Region79, ho_RegionUnion13;
	HObject  ho_RegionUnion14, ho_RegionUnion16, ho_RegionMoved34;
	HObject  ho_ImageReduced65, ho_ImageClosing10, ho_Region64;
	HObject  ho_RegionClosing24, ho_SelectedRegions76, ho_RegionDilation6;
	HObject  ho_RegionOpening1, ho_RegionClosing, ho_RegionErosion17;
	HObject  ho_TMP_Region, ho_ROI_11, ho_ImageReduced69, ho_Region81;
	HObject  ho_ConnectedRegions74, ho_SelectedRegions96, ho_RegionDilation36;
	HObject  ho_ConnectedRegions96, ho_SelectedRegions80, ho_RegionErosion2;
	HObject  ho_ImageReduced57, ho_ImageMedian2, ho_ImageMedian6;
	HObject  ho_RegionDynThresh4, ho_ConnectedRegions72, ho_SelectedRegions81;
	HObject  ho_RegionUnion38, ho_RegionDifference29, ho_RegionDifference30;
	HObject  ho_RegionDifference1, ho_RegionDifference36, ho_ImageReduced18;
	HObject  ho_Region24, ho_RegionClosing8, ho_RegionErosion13;
	HObject  ho_ImageReduced23, ho_ImageClosing3, ho_ImageSub6;
	HObject  ho_Region25, ho_ConnectedRegions27, ho_SelectedRegions27;
	HObject  ho_ImageReduced39, ho_Region50, ho_RegionClosing36;
	HObject  ho_RegionErosion21, ho_ImageReduced70, ho_ImageClosing14;
	HObject  ho_ImageSub19, ho_ConnectedRegions99, ho_SelectedRegions112;
	HObject  ho_ImageReduced85, ho_Region92, ho_ConnectedRegions140;
	HObject  ho_SelectedRegions164, ho_RegionClosing42, ho_RegionErosion27;
	HObject  ho_RegionMoved31, ho_ImageReduced86, ho_ImageClosing16;
	HObject  ho_ImageSub25, ho_Region93, ho_ConnectedRegions132;
	HObject  ho_SelectedRegions151, ho_SelectedRegions152, ho_ImageReduced91;
	HObject  ho_Region98, ho_ConnectedRegions137, ho_SelectedRegions158;
	HObject  ho_SelectedRegions159, ho_RegionClosing45, ho_RegionErosion29;
	HObject  ho_ImageReduced92, ho_ImageClosing17, ho_ImageSub27;
	HObject  ho_Region99, ho_ConnectedRegions138, ho_SelectedRegions160;
	HObject  ho_RegionUnion42, ho_RegionClosing30, ho_RegionTrans3;
	HObject  ho_RegionDilation33, ho_RegionOpening48, ho_RegionClosing13;
	HObject  ho_RegionErosion6, ho_RegionUnion2, ho_ConnectedRegions8;
	HObject  ho_RegionErosion1, ho_RegionMoved36, ho_RegionMoved37;
	HObject  ho_ImageReduced1, ho_Region2, ho_ConnectedRegions5;
	HObject  ho_SelectedRegions5, ho_RegionClosing21, ho_RegionOpening30;
	HObject  ho_RegionMoved16, ho_RegionMoved17, ho_RegionDifference4;
	HObject  ho_RegionOpening56, ho_ConnectedRegions128, ho_SelectedRegions157;
	HObject  ho_ImageReduced20, ho_ImageClosing1, ho_Region60;
	HObject  ho_ConnectedRegions63, ho_SelectedRegions6, ho_RegionErosion7;
	HObject  ho_RegionMoved13, ho_ImageReduced32, ho_ImageOpening3;
	HObject  ho_ImageSub5, ho_Region23, ho_ConnectedRegions34;
	HObject  ho_SelectedRegions32, ho_SelectedRegions85, ho_RegionDifference15;
	HObject  ho_RegionOpening10, ho_ConnectedRegions23, ho_SelectedRegions30;
	HObject  ho_ImageReduced13, ho_Region14, ho_ConnectedRegions24;
	HObject  ho_SelectedRegions33, ho_ConnectedRegions35, ho_SelectedRegions34;
	HObject  ho_RegionMoved35, ho_RegionDifference58, ho_RegionErosion33;
	HObject  ho_ImageReduced99, ho_Region115, ho_RegionClosing16;
	HObject  ho_ConnectedRegions10, ho_SelectedRegions10, ho_ImageReduced36;
	HObject  ho_Region46, ho_RegionOpening26, ho_RegionUnion3;
	HObject  ho_RegionDilation37, ho_RegionDifference, ho_RegionUnion23;
	HObject  ho_RegionOpening29, ho_RegionMoved11, ho_RegionDifference40;
	HObject  ho_SelectedRegions19, ho_ImageReduced105, ho_Region29;
	HObject  ho_RegionOpening54, ho_ConnectedRegions39, ho_SelectedRegions198;
	HObject  ho_RegionClosing52, ho_RegionOpening51, ho_RegionDifference64;
	HObject  ho_ConnectedRegions164, ho_SelectedRegions193, ho_RegionUnion35;
	HObject  ho_ConnectedRegions85, ho_SelectedRegions91, ho_ConnectedRegions26;
	HObject  ho_SelectedRegions26, ho_RegionMoved6, ho_ImageReduced24;
	HObject  ho_Region30, ho_ConnectedRegions43, ho_SelectedRegions39;
	HObject  ho_RegionClosing10, ho_RegionOpening22, ho_RegionClosing28;
	HObject  ho_RegionMoved4, ho_SelectedRegions121, ho_RegionDifference32;
	HObject  ho_RegionOpening31, ho_ConnectedRegions87, ho_SelectedRegions1;
	HObject  ho_RegionErosion19, ho_ImageReduced66, ho_ImageClosing6;
	HObject  ho_ImageSub17, ho_Region68, ho_ConnectedRegions88;
	HObject  ho_SelectedRegions101, ho_ImageReduced102, ho_Region108;
	HObject  ho_ConnectedRegions153, ho_SelectedRegions180, ho_RegionClosing49;
	HObject  ho_RegionErosion34, ho_ImageReduced103, ho_ImageClosing20;
	HObject  ho_ImageSub30, ho_Region109, ho_ConnectedRegions154;
	HObject  ho_SelectedRegions181, ho_ImageReduced40, ho_Region32;
	HObject  ho_ConnectedRegions77, ho_SelectedRegions75, ho_RegionUnion55;
	HObject  ho_RegionClosing51, ho_RegionOpening4, ho_RegionOpening33;
	HObject  ho_RegionDifference70, ho_ConnectedRegions90, ho_SelectedRegions79;
	HObject  ho_RegionUnion57, ho_ImageReduced75, ho_Region40;
	HObject  ho_RegionOpening37, ho_ConnectedRegions92, ho_SelectedRegions104;
	HObject  ho_SelectedRegions129, ho_RegionClosing55, ho_RegionOpening39;
	HObject  ho_RegionTrans10, ho_RegionDifference71, ho_ConnectedRegions93;
	HObject  ho_SelectedRegions105, ho_RegionMoved19, ho_RegionMoved21;
	HObject  ho_RegionDifference54, ho_RegionDifference45, ho_RegionErosion10;
	HObject  ho_ImageReduced62, ho_ImageClosing15, ho_ImageSub3;
	HObject  ho_RegionErosion23, ho_RegionMoved46, ho_ImageReduced76;
	HObject  ho_Region66, ho_ConnectedRegions81, ho_SelectedRegions89;
	HObject  ho_ImageMedian7, ho_ImageMedian8, ho_RegionDynThresh5;
	HObject  ho_ConnectedRegions82, ho_SelectedRegions90, ho_SelectedRegions122;
	HObject  ho_RegionUnion46, ho_RegionUnion47, ho_RegionClosing34;
	HObject  ho_ConnectedRegions83, ho_SelectedRegions93, ho_RegionDifference49;
	HObject  ho_RegionDifference50, ho_ConnectedRegions84, ho_SelectedRegions92;
	HObject  ho_ObjectSelected, ho_RegionIntersection, ho_RegionIntersection8;
	HObject  ho_RegionUnion48, ho_SelectedRegions118, ho_ImageClosing5;
	HObject  ho_Region67, ho_RegionOpening45, ho_ConnectedRegions86;
	HObject  ho_SelectedRegions94, ho_ImageReduced4, ho_Region1;
	HObject  ho_ConnectedRegions1, ho_SelectedRegions, ho_RegionClosing4;
	HObject  ho_RegionErosion3, ho_ImageReduced5, ho_RegionOpening11;
	HObject  ho_RegionOpening21, ho_SelectedRegions126, ho_RegionUnion9;
	HObject  ho_RegionOpening44, ho_RegionOpening24, ho_ImageReduced6;
	HObject  ho_ImageScaled4, ho_Region11, ho_ConnectedRegions6;
	HObject  ho_SelectedRegions28, ho_RegionDilation11, ho_RegionMoved18;
	HObject  ho_RegionMoved20, ho_RegionMoved23, ho_RegionDifference10;
	HObject  ho_RegionErosion14, ho_ImageReduced16, ho_ImageScaled3;
	HObject  ho_Region5, ho_RegionOpening2, ho_ConnectedRegions3;
	HObject  ho_SelectedRegions24, ho_RegionDilation10, ho_RegionDifference5;
	HObject  ho_RegionErosion8, ho_ImageReduced19, ho_Region17;
	HObject  ho_RegionOpening6, ho_ConnectedRegions13, ho_SelectedRegions35;
	HObject  ho_RegionClosing7, ho_RegionDilation12, ho_RegionTrans9;
	HObject  ho_RegionDifference14, ho_RegionDifference27, ho_ConnectedRegions51;
	HObject  ho_SelectedRegions59, ho_ConnectedRegions78, ho_SelectedRegions86;
	HObject  ho_RegionTrans4, ho_RegionMoved26, ho_RegionUnion11;
	HObject  ho_ImageReduced3, ho_Region6, ho_RegionOpening;
	HObject  ho_ConnectedRegions14, ho_SelectedRegions16, ho_RegionUnion43;
	HObject  ho_RegionClosing2, ho_RegionOpening5, ho_RegionDilation2;
	HObject  ho_RegionOpening7, ho_RegionMoved1, ho_RegionDifference6;
	HObject  ho_ImageScaled, ho_Region37, ho_ConnectedRegions52;
	HObject  ho_SelectedRegions61, ho_RegionUnion21, ho_RegionClosing20;
	HObject  ho_ConnectedRegions53, ho_SelectedRegions62, ho_RegionOpening28;
	HObject  ho_RegionDilation21, ho_RegionUnion25, ho_Region39;
	HObject  ho_ConnectedRegions54, ho_SelectedRegions63, ho_RegionUnion26;
	HObject  ho_RegionUnion27, ho_RegionDilation23, ho_RegionDifference28;
	HObject  ho_ConnectedRegions57, ho_SelectedRegions64, ho_ImageReduced63;
	HObject  ho_Regions1, ho_ConnectedRegions124, ho_Region70;
	HObject  ho_ConnectedRegions91, ho_SelectedRegions95, ho_SelectedRegions148;
	HObject  ho_ImageReduced37, ho_Region41, ho_ConnectedRegions58;
	HObject  ho_SelectedRegions65, ho_RegionDilation24, ho_RegionClosing1;
	HObject  ho_ConnectedRegions2, ho_SelectedRegions9, ho_ImageReduced38;
	HObject  ho_Region42, ho_ConnectedRegions60, ho_SelectedRegions66;
	HObject  ho_RegionDifference31, ho_RegionErosion9, ho_ImageReduced53;
	HObject  ho_ImageReduced14, ho_Region15, ho_RegionClosing3;
	HObject  ho_ConnectedRegions28, ho_ImageReduced81, ho_Region54;
	HObject  ho_RegionClosing47, ho_ConnectedRegions109, ho_SelectedRegions125;
	HObject  ho_RegionTrans13, ho_RegionDilation22, ho_RegionDifference74;
	HObject  ho_ImageReduced43, ho_EdgeAmplitude3, ho_ImageScaled19;
	HObject  ho_Region31, ho_ConnectedRegions66, ho_SelectedRegions60;
	HObject  ho_RegionClosing50, ho_RegionTrans1, ho_RegionMoved32;
	HObject  ho_RegionDifference66, ho_ConnectedRegions69, ho_SelectedRegions67;
	HObject  ho_ImageReduced2, ho_ImageClosing36, ho_Region49;
	HObject  ho_ConnectedRegions59, ho_SelectedRegions29, ho_RegionUnion34;
	HObject  ho_RegionDilation61, ho_RegionClosing44, ho_ImageReduced47;
	HObject  ho_Region43, ho_ConnectedRegions61, ho_SelectedRegions70;
	HObject  ho_RegionDilation25, ho_RegionDifference38, ho_SelectedRegions140;
	HObject  ho_RegionClosing41, ho_RegionDifference33, ho_ImageReduced74;
	HObject  ho_SelectedRegions150, ho_RegionIntersection7, ho_ImageReduced93;
	HObject  ho_ImageClosing18, ho_Regions, ho_SelectedRegions146;
	HObject  ho_RegionDilation44, ho_RegionDilation32, ho_Region38;
	HObject  ho_ConnectedRegions40, ho_EdgeAmplitude4, ho_ImageScaled5;
	HObject  ho_RegionClosing25, ho_RegionOpening19, ho_DerivGauss;
	HObject  ho_ImageMedian30, ho_ImageMedian31, ho_RegionDynThresh12;
	HObject  ho_ConnectedRegions155, ho_SelectedRegions182, ho_ImageSub9;
	HObject  ho_ConnectedRegions41, ho_SelectedRegions40, ho_RegionUnion8;
	HObject  ho_RegionClosing38, ho_ConnectedRegions97, ho_SelectedRegions73;
	HObject  ho_SelectedRegions38, ho_Region20, ho_ConnectedRegions38;
	HObject  ho_SelectedRegions44, ho_RegionDilation15, ho_ImageReduced56;
	HObject  ho_Region57, ho_ConnectedRegions70, ho_SelectedRegions78;
	HObject  ho_RegionDilation31, ho_SelectedRegions87, ho_ImageReduced;
	HObject  ho_Region, ho_ConnectedRegions15, ho_SelectedRegions14;
	HObject  ho_RegionClosing33, ho_RegionDifference7, ho_ConnectedRegions17;
	HObject  ho_SelectedRegions17, ho_RegionMoved47, ho_RegionMoved49;
	HObject  ho_RegionDifference35, ho_RegionTrans8, ho_RegionMoved48;
	HObject  ho_RegionIntersection3, ho_ImageReduced77, ho_Region3;
	HObject  ho_RegionDifference46, ho_ImageReduced79, ho_Region82;
	HObject  ho_ConnectedRegions115, ho_SelectedRegions130, ho_RegionDilation39;
	HObject  ho_RegionMoved52, ho_RegionIntersection12, ho_ImageReduced84;
	HObject  ho_RegionMoved50, ho_RegionDifference51, ho_RegionMoved51;
	HObject  ho_RegionDilation38, ho_ImageReduced80, ho_Region83;
	HObject  ho_ConnectedRegions116, ho_SelectedRegions132, ho_RegionUnion12;
	HObject  ho_RegionClosing43, ho_ImageReduced83, ho_SelectedRegions138;
	HObject  ho_RegionDilation40, ho_RegionMoved53, ho_RegionDifference52;
	HObject  ho_RegionUnion41, ho_RegionIntersection9, ho_Region13;
	HObject  ho_RegionIntersection11, ho_RegionDifference42;
	HObject  ho_ConnectedRegions105, ho_SelectedRegions127, ho_ImageReduced78;
	HObject  ho_Region80, ho_ConnectedRegions108, ho_SelectedRegions128;
	HObject  ho_RegionOpening36, ho_ConnectedRegions103, ho_SelectedRegions124;
	HObject  ho_RegionDilation7, ho_RegionIntersection10, ho_RegionErosion18;
	HObject  ho_RegionDifference18, ho_RegionMoved40, ho_RegionIntersection6;
	HObject  ho_RegionDilation, ho_RegionMoved2, ho_ImageReduced12;
	HObject  ho_ConnectedRegions100, ho_RegionMoved38, ho_RegionDifference11;
	HObject  ho_RegionOpening46, ho_RegionIntersection2, ho_RegionMoved39;
	HObject  ho_RegionIntersection4, ho_RegionIntersection5;
	HObject  ho_ConnectedRegions102, ho_ConnectedRegions104;
	HObject  ho_SelectedRegions97, ho_RegionUnion17, ho_RegionClosing35;
	HObject  ho_RegionOpening47, ho_ConnectedRegions101, ho_SelectedRegions83;
	HObject  ho_RegionErosion28, ho_RegionTrans5, ho_RegionMoved45;
	HObject  ho_ImageReduced73, ho_ConnectedRegions111, ho_SelectedRegions115;
	HObject  ho_SelectedRegions131, ho_Region84, ho_ConnectedRegions117;
	HObject  ho_SelectedRegions133, ho_SelectedRegions134, ho_ImageReduced35;
	HObject  ho_Region4, ho_ConnectedRegions106, ho_SelectedRegions98;
	HObject  ho_RegionClosing37, ho_RegionMoved42, ho_RegionMoved43;
	HObject  ho_ImageReduced71, ho_ConnectedRegions110, ho_SelectedRegions106;
	HObject  ho_SelectedRegions107, ho_ImageClosing11, ho_Region12;
	HObject  ho_ConnectedRegions107, ho_SelectedRegions147, ho_ImageReduced72;
	HObject  ho_RegionOpening50, ho_RegionTrans2, ho_RegionMoved44;
	HObject  ho_Region85, ho_ConnectedRegions119, ho_SelectedRegions139;
	HObject  ho_RegionDilation41, ho_RegionDifference53, ho_ConnectedRegions120;
	HObject  ho_SelectedRegions141, ho_ImageReduced87, ho_SelectedRegions113;
	HObject  ho_RegionOpening25, ho_RegionDifference24, ho_ConnectedRegions48;
	HObject  ho_SelectedRegions52, ho_RegionDifference25, ho_ImageReduced21;
	HObject  ho_Region18, ho_ConnectedRegions30, ho_RegionUnion1;
	HObject  ho_RegionClosing9, ho_RegionDilation13, ho_RegionErosion24;
	HObject  ho_RegionUnion22, ho_RegionUnion45, ho_ImageReduced60;
	HObject  ho_Region62, ho_ConnectedRegions76, ho_RegionOpening40;
	HObject  ho_ConnectedRegions79, ho_RegionMoved15, ho_RegionUnion44;
	HObject  ho_RegionErosion4, ho_RegionOpening49, ho_RegionErosion22;
	HObject  ho_RegionMoved41, ho_ImageReduced61, ho_ImageClosing;
	HObject  ho_ImageSub, ho_Region63, ho_ConnectedRegions80;
	HObject  ho_SelectedRegions88, ho_RegionUnion19, ho_RegionOpening53;
	HObject  ho_RegionClosing22, ho_RegionClosing23, ho_ImageReduced48;
	HObject  ho_Region27, ho_ConnectedRegions42, ho_SelectedRegions46;
	HObject  ho_RegionDilation19, ho_ImageReduced49, ho_Region44;
	HObject  ho_ConnectedRegions44, ho_SelectedRegions48, ho_RegionDilation26;
	HObject  ho_RegionUnion5, ho_RegionUnion28, ho_RegionUnion29;
	HObject  ho_RegionDifference23, ho_ImageReduced50, ho_Region47;
	HObject  ho_ConnectedRegions47, ho_SelectedRegions51, ho_RegionUnion30;
	HObject  ho_RegionClosing26, ho_RegionDilation27, ho_RegionDifference39;
	HObject  ho_ImageReduced51, ho_Region48, ho_ConnectedRegions62;
	HObject  ho_SelectedRegions71, ho_RegionUnion31, ho_RegionDilation28;
	HObject  ho_RegionDifference41, ho_ImageReduced52, ho_Region52;
	HObject  ho_ConnectedRegions64, ho_SelectedRegions72, ho_RegionDilation29;
	HObject  ho_RegionDifference43, ho_ImageReduced55, ho_Region53;
	HObject  ho_ConnectedRegions65, ho_SelectedRegions74, ho_RegionUnion32;
	HObject  ho_RegionClosing29, ho_RegionDilation30, ho_RegionDifference44;
	HObject  ho_ImageReduced58, ho_Region59, ho_ImageReduced59;
	HObject  ho_Region61, ho_ConnectedRegions73, ho_SelectedRegions82;
	HObject  ho_RegionClosing32, ho_RegionDilation34, ho_RegionClosing53;
	HObject  ho_RegionClosing31, ho_RegionUnion36, ho_RegionDifference47;
	HObject  ho_RegionDifference48, ho_ImageReduced27, ho_Region19;
	HObject  ho_SelectedRegions43, ho_RegionUnion18, ho_RegionDilation14;
	HObject  ho_RegionOpening13, ho_RegionDifference16, ho_ConnectedRegions31;
	HObject  ho_SelectedRegions41, ho_RegionDifference17, ho_ConnectedRegions33;
	HObject  ho_SelectedRegions42, ho_RegionUnion6, ho_RegionUnion4;
	HObject  ho_ImageReduced28, ho_Region22, ho_SelectedRegions45;
	HObject  ho_RegionUnion15, ho_RegionClosing11, ho_RegionDilation18;
	HObject  ho_SelectedRegions137, ho_ImageReduced88, ho_ImageScaled1;
	HObject  ho_Region86, ho_ConnectedRegions121, ho_SelectedRegions142;
	HObject  ho_RegionDilation42, ho_RegionMoved54, ho_ImageReduced89;
	HObject  ho_RegionErosion30, ho_ImageScaled2, ho_SelectedRegions145;
	HObject  ho_ImageReduced90, ho_ImageOpening, ho_ImageSub4;
	HObject  ho_Region87, ho_ConnectedRegions122, ho_SelectedRegions143;
	HObject  ho_RegionDilation43, ho_RegionMoved55, ho_RegionDifference56;
	HObject  ho_ConnectedRegions123, ho_ConnectedRegions167;
	HObject  ho_SelectedRegions114, ho_RegionUnion67, ho___Tmp_Obj_0;

	// Local control variables
	HTuple  hv_Newtuple, hv_Newtuple1, hv_n, hv_Index;
	HTuple  hv_f, hv_c, hv_dd, hv_Area3, hv_Row3, hv_Column3;
	HTuple  hv_Number19, hv_R, hv_C, hv_R1, hv_C1, hv_R2, hv_C2;
	HTuple  hv_R3, hv_C3, hv_R4, hv_C4, hv_R5, hv_C5, hv_R6;
	HTuple  hv_C6, hv_Mean4, hv_Deviation4, hv_Number, hv_Value7;
	HTuple  hv_Max3, hv_Value8, hv_Value16, hv_Area4, hv_Row4;
	HTuple  hv_Column4, hv_Value11, hv_Number31, hv_Number33;
	HTuple  hv_Value22, hv_Max14, hv_Number32, hv_Area5, hv_Row5;
	HTuple  hv_Column5, hv_Value2, hv_Max1, hv_Area6, hv_Row6;
	HTuple  hv_Column6, hv_Value10, hv_Number2, hv_Row11, hv_Column11;
	HTuple  hv_Row21, hv_Column21, hv_Number14, hv_i, hv_R7;
	HTuple  hv_C7, hv_R8, hv_C8, hv_R9, hv_C9, hv_Value4, hv_Max5;
	HTuple  hv_Area, hv_Row, hv_Column, hv_Value18, hv_Min1;
	HTuple  hv_Mean, hv_Deviation, hv_Value, hv_Max, hv_Number1;
	HTuple  hv_Value3, hv_Value6, hv_Max2, hv_Value24, hv_Number28;
	HTuple  hv_Value19, hv_Max12, hv_Number11, hv_Number21;
	HTuple  hv_Number12, hv_Number13, hv_Area1, hv_Row1, hv_Column1;
	HTuple  hv_Area8, hv_Row8, hv_Column8, hv_Value12, hv_Number27;
	HTuple  hv_Value13, hv_Max6, hv_Value1, hv_Min, hv_Area2;
	HTuple  hv_Row2, hv_Column2, hv_Number3, hv_Number8, hv_Value26;
	HTuple  hv_Max8, hv_Number18, hv_Area7, hv_Row7, hv_Column7;
	HTuple  hv_Max4, hv_Number29, hv_Number7, hv_Number20, hv_Number4;
	HTuple  hv_Value9, hv_Max9, hv_Number25, hv_Number24, hv_Mean1;
	HTuple  hv_Deviation1, hv_Number23, hv_Value17, hv_Max10;
	HTuple  hv_Number22, hv_Area9, hv_Row9, hv_Column9, hv_Max11;
	HTuple  hv_Number9, hv_Number15, hv_Number16, hv_Value15;
	HTuple  hv_Number30, hv_Value21, hv_Number10, hv_Value14;
	HTuple  hv_Value5, hv_Max7, hv_Number17, hv_Number5, hv_Number6;
	HTuple  hv_Value20, hv_Max13, hv_Number26, hv_s, hv_g, hv_GenParamValue;
	HTuple  hv_Index10, hv_Number39, hv_Exception, hv___Tmp_Ctrl_Dict_Init_2;
	HTuple  hv___Tmp_Ctrl_Dict_Init_3, hv___Tmp_Ctrl_Dict_Init_4;
	HTuple  hv___Tmp_Ctrl_Dict_Init_5, hv___Tmp_Ctrl_Dict_Init_6;
	HTuple  hv___Tmp_Ctrl_Dict_Init_7;

	try
	{
		//[0]-T41=B基准塑胶漏贴
		//[1]-T42=BLC划伤
		//[2]-T43=打磨纹
		//[3]-T44=打磨痕
		//[4]-T45=BLC漏铁
		//[5]-T46=BLC漏镭雕
		//[6]-T47=LC划伤
		//[7]-T48=BLC未见光
		//[8]-T49=BLC气孔
		//[9]-T50=IO孔毛刺
		//[10]-T51=异色
		//[11]-T52=裂纹
		//[12]-T53=混金属压伤
		//[13]-T54=BLC刀纹
		//[14]-T55=B基准压伤亮
		//[15]-T56=BLC亮边
		//[16]-T57=毛边
		//[17]-T58=B基准压伤暗
		//[18]-T59=热钻孔脱落
		//[19]-T60=BLC过切
		//[20]-T61=B基准塑胶压伤
		//[21]-T62=BLC压伤
		//[22]-T63=BRT压伤
		//[23]-T64=BLC焊缝毛刺
		//[24]-T65=抓胶柱偏位
		//[26]-T66=拉胶柱缺失
		//[27]-T67=拉胶柱偏位
		GenEmptyObj(&ho_Reg);

		CreateDict(&(*hv_dt));
		TupleGenConst(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), "DT", &hv_Newtuple);
		TupleGenConst(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), "_T", &hv_Newtuple1);
		hv_n = (hv_Newtuple + HTuple::TupleGenSequence(41, 200, 1)) + hv_Newtuple1;
		//n := ['DT41_T','DT42_T','DT43_T','DT44_T','DT45_T','DT46_T','DT47_T','DT48_T','DT49_T','DT50_T','DT51_T','DT52_T','DT53_T','DT54_T','DT55_T','DT56_T','DT57_T','DT58_T','DT59_T','DT60_T','DT61_T','DT62_T','DT63_T']
		GenEmptyRegion(&ho_e);
		for (hv_Index = 41; hv_Index <= 70; hv_Index += 1)
		{
			hv_f = hv_Index + "";
			SetDictObject(ho_e, (*hv_dt), hv_f);
		}
		//dt := dict{}
		//n := ['DT41_T','DT42_T','DT43_T','DT44_T','DT45_T','DT46_T','DT47_T','DT48_T','DT49_T','DT50_T','DT51_T','DT52_T','DT53_T','DT54_T','DT55_T','DT56_T','DT57_T','DT58_T','DT59_T','DT60_T','DT61_T','DT62_T','DT63_T']
		//gen_empty_region (EmptyRegion)
		//for Index := 0 to |n|-1 by 1
		//dt.[n[Index]] := EmptyRegion
		//endfor
		//c==1检测B基准c==0不检测
		hv_c = 1;
		Rgb1ToGray(ho_Image, &ho_Image);

		CreateDict(&hv_dd);
		SetDictObject(ho_Image, hv_dd, "image");
		//**dd.region在每个检测区域都需要初始化
		//********镭雕区域缺陷检测*****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_2);
		SetDictTuple(hv_dd, "LD", hv___Tmp_Ctrl_Dict_Init_2);
		hv___Tmp_Ctrl_Dict_Init_2 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.8);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 64);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 150);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_white_area", 120);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_ratio_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_ratio_value", 8);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_aniso_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_aniso_value", 8);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 17);
		SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 9);
		//********塑胶区域缺陷检测****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_3);
		SetDictTuple(hv_dd, "SJ", hv___Tmp_Ctrl_Dict_Init_3);
		hv___Tmp_Ctrl_Dict_Init_3 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_light", 45);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 90);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_white_area", 160);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_ratio_value", 0.17);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "max_ratio_value", 6);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_aniso_value", 0);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "max_aniso_value", 8);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 1600);
		SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 190);
		//***dd.RTmode==0时，转角
		//***dd.RTmode==1时，垂直
		//***dd.RTmode==2时，水平
		//********RTzhuanjiao缺陷检测****************1-12,mode=1,13以后,mode=0
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_4);
		SetDictTuple(hv_dd, "RT_zhuanjiao", hv___Tmp_Ctrl_Dict_Init_4);
		hv___Tmp_Ctrl_Dict_Init_4 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 1);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 138);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value", 130);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
			4);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 60);
		//********RTshuiping缺陷检测****************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_5);
		SetDictTuple(hv_dd, "RT_shuipin", hv___Tmp_Ctrl_Dict_Init_5);
		hv___Tmp_Ctrl_Dict_Init_5 = HTuple(HNULL);


		//********RTchuizhi缺陷检测******************
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_6);
		SetDictTuple(hv_dd, "RT_chuizhi", hv___Tmp_Ctrl_Dict_Init_6);
		hv___Tmp_Ctrl_Dict_Init_6 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("RT_chuizhi"), "min_width_value", 7);
		//********B基准缺陷*****dd.bijizhun.mode==1检测白（1-12） dd.bijizhun.mode==0检测黑
		CreateDict(&hv___Tmp_Ctrl_Dict_Init_7);
		SetDictTuple(hv_dd, "Bjizhun", hv___Tmp_Ctrl_Dict_Init_7);
		hv___Tmp_Ctrl_Dict_Init_7 = HTuple(HNULL);
		SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "opening_width_value", 1560);
		if (0 != (HTuple(int(hv_StaNum == 3)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 1)))
			{
				//提取镭雕检测区域


				//提取定位点
				GenRectangle1(&ho_ROI_0, 633.252, 489.463, 1444.14, 1076.96);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced26);
				Threshold(ho_ImageReduced26, &ho_Region26, 177, 255);
				Connection(ho_Region26, &ho_ConnectedRegions22);
				SelectShape(ho_ConnectedRegions22, &ho_SelectedRegions4, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.7)), (HTuple(99999).Append(1)));
				AreaCenter(ho_SelectedRegions4, &hv_Area3, &hv_Row3, &hv_Column3);
				CountObj(ho_SelectedRegions4, &hv_Number19);
				if (0 != hv_Number19)
				{
					//pianwei
					hv_R = hv_Row3 - 1036;
					hv_C = hv_Column3 - 714;

					hv_R1.Clear();
					hv_R1[0] = 658;
					hv_R1[1] = 675;
					hv_R1[2] = 796;
					hv_R1[3] = 798;
					hv_R1[4] = 866;
					hv_R1[5] = 942;
					hv_R1[6] = 1273;
					hv_R1[7] = 1344;
					hv_R1[8] = 1380;
					hv_R1[9] = 1389;
					hv_R1[10] = 1441;
					hv_R1[11] = 1510;
					hv_R1[12] = 1794;
					hv_R1[13] = 1790;
					hv_R1[14] = 1153;
					hv_R1[15] = 1132;
					hv_R1[16] = 1083;
					hv_R1[17] = 978;
					hv_R1[18] = 953;
					hv_R1[19] = 923;
					hv_R1[20] = 915;
					hv_R1[21] = 943;
					hv_R1[22] = 970;
					hv_R1[23] = 977;
					hv_R1[24] = 1070;
					hv_R1[25] = 1106;
					hv_R1[26] = 1115;
					hv_R1[27] = 1092;
					hv_R1[28] = 1062;
					hv_R1[29] = 966;
					hv_R1[30] = 922;
					hv_R1[31] = 885;
					hv_R1[32] = 685;
					hv_R1[33] = 661;
					hv_R1[34] = 658;
					hv_C1.Clear();
					hv_C1[0] = 2668;
					hv_C1[1] = 4061;
					hv_C1[2] = 4061;
					hv_C1[3] = 3787;
					hv_C1[4] = 3685;
					hv_C1[5] = 3658;
					hv_C1[6] = 3652;
					hv_C1[7] = 3616;
					hv_C1[8] = 3543;
					hv_C1[9] = 2667;
					hv_C1[10] = 2585;
					hv_C1[11] = 2548;
					hv_C1[12] = 2540;
					hv_C1[13] = 1977;
					hv_C1[14] = 1971;
					hv_C1[15] = 2012;
					hv_C1[16] = 2035;
					hv_C1[17] = 2035;
					hv_C1[18] = 2022;
					hv_C1[19] = 1971;
					hv_C1[20] = 2196;
					hv_C1[21] = 2214;
					hv_C1[22] = 2263;
					hv_C1[23] = 2402;
					hv_C1[24] = 2402;
					hv_C1[25] = 2422;
					hv_C1[26] = 2574;
					hv_C1[27] = 2601;
					hv_C1[28] = 2608;
					hv_C1[29] = 2607;
					hv_C1[30] = 2569;
					hv_C1[31] = 2588;
					hv_C1[32] = 2599;
					hv_C1[33] = 2617;
					hv_C1[34] = 2668;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					hv_R2.Clear();
					hv_R2[0] = 2022;
					hv_R2[1] = 2101;
					hv_R2[2] = 2089;
					hv_R2[3] = 2031;
					hv_R2[4] = 2022;
					hv_C2.Clear();
					hv_C2[0] = 799;
					hv_C2[1] = 799;
					hv_C2[2] = 753;
					hv_C2[3] = 754;
					hv_C2[4] = 799;
					GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
					hv_R3.Clear();
					hv_R3[0] = 2024;
					hv_R3[1] = 2030;
					hv_R3[2] = 2276;
					hv_R3[3] = 2326;
					hv_R3[4] = 2398;
					hv_R3[5] = 3037;
					hv_R3[6] = 3037;
					hv_R3[7] = 2876;
					hv_R3[8] = 2839;
					hv_R3[9] = 2771;
					hv_R3[10] = 2024;
					hv_R3[11] = 2024;
					hv_C3.Clear();
					hv_C3[0] = 1158;
					hv_C3[1] = 1245;
					hv_C3[2] = 980;
					hv_C3[3] = 934;
					hv_C3[4] = 900;
					hv_C3[5] = 900;
					hv_C3[6] = 753;
					hv_C3[7] = 753;
					hv_C3[8] = 839;
					hv_C3[9] = 873;
					hv_C3[10] = 873;
					hv_C3[11] = 1158;
					GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
					hv_R4.Clear();
					hv_R4[0] = 2027;
					hv_R4[1] = 2671;
					hv_R4[2] = 2768;
					hv_R4[3] = 2803;
					hv_R4[4] = 2803;
					hv_R4[5] = 2918;
					hv_R4[6] = 2962;
					hv_R4[7] = 2956;
					hv_R4[8] = 2906;
					hv_R4[9] = 2803;
					hv_R4[10] = 2806;
					hv_R4[11] = 2783;
					hv_R4[12] = 2675;
					hv_R4[13] = 2664;
					hv_R4[14] = 2662;
					hv_R4[15] = 2714;
					hv_R4[16] = 2714;
					hv_R4[17] = 2822;
					hv_R4[18] = 2852;
					hv_R4[19] = 2859;
					hv_R4[20] = 2849;
					hv_R4[21] = 2815;
					hv_R4[22] = 2714;
					hv_R4[23] = 2714;
					hv_R4[24] = 2767;
					hv_R4[25] = 2882;
					hv_R4[26] = 2883;
					hv_R4[27] = 3037;
					hv_R4[28] = 3037;
					hv_R4[29] = 2456;
					hv_R4[30] = 2385;
					hv_R4[31] = 2087;
					hv_R4[32] = 2086;
					hv_R4[33] = 2027;
					hv_C4.Clear();
					hv_C4[0] = 1303;
					hv_C4[1] = 1311;
					hv_C4[2] = 1380;
					hv_C4[3] = 1461;
					hv_C4[4] = 1499;
					hv_C4[5] = 1496;
					hv_C4[6] = 1544;
					hv_C4[7] = 1689;
					hv_C4[8] = 1717;
					hv_C4[9] = 1713;
					hv_C4[10] = 2347;
					hv_C4[11] = 2419;
					hv_C4[12] = 2560;
					hv_C4[13] = 2617;
					hv_C4[14] = 3254;
					hv_C4[15] = 3255;
					hv_C4[16] = 3346;
					hv_C4[17] = 3341;
					hv_C4[18] = 3358;
					hv_C4[19] = 3380;
					hv_C4[20] = 3497;
					hv_C4[21] = 3517;
					hv_C4[22] = 3514;
					hv_C4[23] = 3565;
					hv_C4[24] = 3640;
					hv_C4[25] = 3639;
					hv_C4[26] = 3538;
					hv_C4[27] = 3538;
					hv_C4[28] = 941;
					hv_C4[29] = 935;
					hv_C4[30] = 952;
					hv_C4[31] = 1242;
					hv_C4[32] = 1260;
					hv_C4[33] = 1303;
					GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
					hv_R5.Clear();
					hv_R5[0] = 2220;
					hv_R5[1] = 2274;
					hv_R5[2] = 2501;
					hv_R5[3] = 2501;
					hv_R5[4] = 2220;
					hv_C5.Clear();
					hv_C5[0] = 3612;
					hv_C5[1] = 3646;
					hv_C5[2] = 3650;
					hv_C5[3] = 3611;
					hv_C5[4] = 3612;
					GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
					hv_R6.Clear();
					hv_R6[0] = 2270;
					hv_R6[1] = 2679;
					hv_R6[2] = 2746;
					hv_R6[3] = 2772;
					hv_R6[4] = 2291;
					hv_R6[5] = 2270;
					hv_C6.Clear();
					hv_C6[0] = 799;
					hv_C6[1] = 796;
					hv_C6[2] = 777;
					hv_C6[3] = 753;
					hv_C6[4] = 753;
					hv_C6[5] = 799;
					GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
					Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
					Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
					Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
					Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
					Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);

					GenRectangle1(&ho_ROI_0, 2658.97, 2740.89, 3027.61, 3203.16);
					MoveRegion(ho_ROI_0, &ho_RegionMoved28, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved28, &ho_ImageReduced31);
					GrayClosingRect(ho_ImageReduced31, &ho_ImageClosing7, 3, 3);
					Threshold(ho_ImageClosing7, &ho_Region34, 0, 67);
					Connection(ho_Region34, &ho_ConnectedRegions37);
					SelectShape(ho_ConnectedRegions37, &ho_SelectedRegions37, "area", "and",
						6150, 99999);
					DilationCircle(ho_SelectedRegions37, &ho_RegionDilation9, 28.5);

					MoveRegion(ho_RegionUnion60, &ho_RegionMoved25, hv_R, hv_C);
					ErosionRectangle1(ho_RegionMoved25, &ho_RegionMoved25, 56, 51);
					Difference(ho_RegionMoved25, ho_RegionDilation9, &ho_RegionDifference22
						);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
					SetDictObject(ho_RegionDifference22, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 23);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 15);
					Det_LD_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}

				//基准面压伤
				GenRectangle1(&ho_ROI_0, 351.637, 1707.8046, 710.268, 4098.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);

				Intensity(ho_ROI_0, ho_ImageReduced8, &hv_Mean4, &hv_Deviation4);
				if (0 != (int(hv_Mean4<120)))
				{
					if (0 != hv_c)
					{
						ConcatObj(ho_ImageReduced8, (*hv_dt).TupleGetDictObject("44"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "44");
					}
				}
				if (0 != (int(hv_Mean4 >= 120)))
				{

					Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
					OpeningRectangle1(ho_Region8, &ho_RegionOpening43, 4, 2);
					Connection(ho_RegionOpening43, &ho_ConnectedRegions12);
					SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
						1e5, 1e7);
					ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 100, 10);
					ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 10, 52);
					MoveRegion(ho_RegionErosion5, &ho_RegionMoved3, 20, 0);
					ReduceDomain(ho_ImageReduced8, ho_RegionMoved3, &ho_ImageReduced9);
					GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 11, 11);
					SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
					Threshold(ho_ImageSub1, &ho_Region9, 0, 35);
					ClosingRectangle1(ho_Region9, &ho_RegionClosing40, 49, 19);
					Connection(ho_Region9, &ho_ConnectedRegions19);
					SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (HTuple("area").Append("anisometry")),
						"and", (HTuple(30).Append(0)), (HTuple(1200).Append(5.5)));
					SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions100, "mean",
						"and", 0, 145);
					if (0 != hv_c)
					{
						ConcatObj(ho_SelectedRegions100, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}
					Difference(ho_RegionClosing5, ho_RegionMoved3, &ho_RegionDifference13);
					OpeningRectangle1(ho_RegionDifference13, &ho_RegionOpening9, 7, 43);
					Connection(ho_RegionOpening9, &ho_ConnectedRegions20);
					SelectShape(ho_ConnectedRegions20, &ho_SelectedRegions20, "area", "and",
						15000, 199999);
					ReduceDomain(ho_Image, ho_SelectedRegions20, &ho_ImageReduced11);
					GrayClosingRect(ho_ImageReduced11, &ho_ImageClosing4, 31, 31);
					SubImage(ho_ImageReduced11, ho_ImageClosing4, &ho_ImageSub2, 1, 128);
					Threshold(ho_ImageSub2, &ho_Region10, 0, 40);
					Connection(ho_Region10, &ho_ConnectedRegions21);
					SelectShape(ho_ConnectedRegions21, &ho_SelectedRegions21, "area", "and",
						20, 99999);
					SelectGray(ho_SelectedRegions21, ho_Image, &ho_SelectedRegions23, "mean",
						"and", 0, 100);
					ConcatObj(ho_SelectedRegions23, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//过切
				GenRectangle1(&ho_ROI_0, 457.429, 2642.64, 816.377, 4093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 40, 45, 0.2, 13, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 30, 1);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, (HTuple("width").Append("height")),
					"and", (HTuple(1050).Append(14)), (HTuple(99999).Append(999)));
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>2)))
				{
					ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
				}
				//kailie
				RegionFeatures(ho_SelectedRegions77, "row", &hv_Value7);
				TupleMax(hv_Value7, &hv_Max3);
				SelectShape(ho_SelectedRegions77, &ho_SelectedRegions102, "row", "and", hv_Max3,
					hv_Max3);
				DilationRectangle1(ho_SelectedRegions102, &ho_RegionDilation16, 1, 81);
				ErosionRectangle1(ho_RegionDilation16, &ho_RegionErosion25, 31, 1);
				MoveRegion(ho_RegionErosion25, &ho_RegionMoved12, 107, 0);
				ReduceDomain(ho_Image, ho_RegionMoved12, &ho_ImageReduced67);
				VarThreshold(ho_ImageReduced67, &ho_Region69, 30, 30, 0.2, 14, "dark");
				OpeningRectangle1(ho_Region69, &ho_RegionOpening32, 4, 2);
				Connection(ho_RegionOpening32, &ho_ConnectedRegions89);
				SelectShape(ho_ConnectedRegions89, &ho_SelectedRegions103, ((HTuple("area").Append("ratio")).Append("column")),
					"and", ((HTuple(150).Append(0)).Append(0)), ((HTuple(99999).Append(1.5)).Append(3500)));
				Union1(ho_SelectedRegions103, &ho_RegionUnion33);
				RegionFeatures(ho_RegionUnion33, "area", &hv_Value8);
				if (0 != (int(hv_Value8>750)))
				{
					ConcatObj(ho_RegionUnion33, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");
				}

				//焊缝毛刺
				ClosingRectangle1(ho_RegionClosing5, &ho_RegionClosing17, 1010, 10);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved5, 55, 0);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved7, 4, 0);
				Difference(ho_RegionMoved5, ho_RegionMoved7, &ho_RegionDifference20);
				ReduceDomain(ho_Image, ho_RegionDifference20, &ho_ImageReduced29);


				Threshold(ho_ImageReduced29, &ho_Region28, 220, 255);

				Connection(ho_Region28, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
					1500, 99999);
				ClosingRectangle1(ho_SelectedRegions49, &ho_RegionClosing18, 400, 400);
				ShapeTrans(ho_RegionClosing18, &ho_RegionTrans, "convex");
				DilationRectangle1(ho_RegionTrans, &ho_RegionDilation20, 151, 51);
				Difference(ho_RegionDifference20, ho_RegionDilation20, &ho_RegionDifference21
					);
				Connection(ho_RegionDifference21, &ho_ConnectedRegions7);
				SelectShape(ho_ConnectedRegions7, &ho_SelectedRegions123, "width", "and",
					800, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions123, &ho_ImageReduced30);
				RankRect(ho_ImageReduced30, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 35);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, (HTuple("area").Append("height")),
					"and", (HTuple(150).Append(15)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 120);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>500)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}

			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				//提取定位点

				GenRectangle1(&ho_ROI_0, 640.231, 2331.29, 1839.77, 3068.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced34);
				Threshold(ho_ImageReduced34, &ho_Region77, 0, 60);
				Connection(ho_Region77, &ho_ConnectedRegions50);
				SelectShape(ho_ConnectedRegions50, &ho_SelectedRegions84, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(15000).Append(200)).Append(0)), ((HTuple(199999).Append(800)).Append(600)));
				AreaCenter(ho_SelectedRegions84, &hv_Area4, &hv_Row4, &hv_Column4);
				hv_R = hv_Row4 - 1385;
				hv_C = hv_Column4 - 2695;
				//基准面压伤
				GenRectangle1(&ho_ROI_0, 270.637, -17.8046, 710.268, 4048.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);

				Threshold(ho_ImageReduced8, &ho_Region8, 168, 255);
				OpeningRectangle1(ho_Region8, &ho_RegionOpening38, 3, 3);
				Connection(ho_RegionOpening38, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
					3e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 100, 10);

				//碰伤
				ShapeTrans(ho_RegionClosing5, &ho_RegionTrans6, "rectangle2");
				MoveRegion(ho_RegionTrans6, &ho_RegionMoved, -50, 0);
				Difference(ho_RegionMoved, ho_RegionTrans6, &ho_RegionDifference2);
				Connection(ho_RegionDifference2, &ho_ConnectedRegions25);
				SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions25, "area", "and",
					15000, 299999);
				ErosionRectangle1(ho_SelectedRegions25, &ho_RegionErosion26, 1, 57);
				ReduceDomain(ho_Image, ho_RegionErosion26, &ho_ImageReduced10);
				GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing12, 1, 100);
				//黑
				SubImage(ho_ImageReduced10, ho_ImageClosing12, &ho_ImageSub24, 1, 128);
				Threshold(ho_ImageSub24, &ho_Region88, 0, 35);
				Connection(ho_Region88, &ho_ConnectedRegions118);
				SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, (HTuple("area").Append("ratio")),
					"and", (HTuple(450).Append(0.01)), (HTuple(99999).Append(5)));
				ConcatObj(ho_SelectedRegions135, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");

				GrayOpeningRect(ho_ImageClosing12, &ho_ImageOpening10, 1, 320);

				SubImage(ho_ImageOpening10, ho_ImageClosing12, &ho_ImageSub23, 1, 128);
				Threshold(ho_ImageSub23, &ho_Region45, 0, 60);
				Connection(ho_Region45, &ho_ConnectedRegions29);
				SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, (HTuple("area").Append("ratio")),
					"and", (HTuple(150).Append(0.01)), (HTuple(99999).Append(8)));
				ConcatObj(ho_SelectedRegions47, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");


				//
				ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 5, 57);
				MoveRegion(ho_RegionErosion5, &ho_RegionMoved8, 23, 0);
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved8, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 31, 11);
				SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 4, 128);
				Threshold(ho_ImageSub1, &ho_Region9, 0, 40);
				DilationRectangle1(ho_Region9, &ho_RegionDilation17, 3, 3);
				ErosionRectangle1(ho_RegionDilation17, &ho_RegionOpening41, 3, 3);
				Connection(ho_RegionOpening41, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (((HTuple("area").Append("ratio")).Append("inner_radius")).Append("anisometry")),
					"and", (((HTuple(50).Append(0.205)).Append(1.5)).Append(0)), (((HTuple(1500).Append(9)).Append(19)).Append(5.5)));
				SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions136, "mean",
					"and", 0, 180);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions136, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//提取镭雕检测区域

				GenRectangle1(&ho_ROI_0, 520.975, 0, 3080.57, 4157.21);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				//先检测白

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region75, 220, 255);
				Connection(ho_Region75, &ho_ConnectedRegions98);
				SelectShape(ho_ConnectedRegions98, &ho_SelectedRegions111, (HTuple("area").Append("ratio")),
					"and", (HTuple(450).Append(0.09)), (HTuple(99999).Append(7)));
				Union1(ho_SelectedRegions111, &ho_RegionUnion39);
				RegionFeatures(ho_RegionUnion39, "area", &hv_Value11);
				if (0 != (int(hv_Value11>500)))
				{
					ConcatObj(ho_RegionUnion39, (*hv_dt).TupleGetDictObject("42"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "42");
				}
				Threshold(ho_ImageReduced25, &ho_Region33, 0, 40);
				ClosingRectangle1(ho_Region33, &ho_RegionClosing12, 20, 1);
				Connection(ho_RegionClosing12, &ho_ConnectedRegions36);
				SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions54, "area", "and",
					55000, 9999999);
				Union1(ho_SelectedRegions54, &ho_RegionUnion7);
				DilationRectangle1(ho_RegionUnion7, &ho_RegionDilation35, 31, 31);


				GenRectangle1(&ho_ROI_0, 846.683, 3128.28, 1173.77, 3736.7);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced42);
				MedianRect(ho_ImageReduced42, &ho_ImageMedian5, 15, 25);
				Threshold(ho_ImageMedian5, &ho_Region51, 0, 70);
				Connection(ho_Region51, &ho_ConnectedRegions56);
				SelectShape(ho_ConnectedRegions56, &ho_SelectedRegions56, "area", "and",
					1500, 99999);
				DilationCircle(ho_SelectedRegions56, &ho_RegionDilation3, 35);
				//画提取框
				hv_R1.Clear();
				hv_R1[0] = 564;
				hv_R1[1] = 569;
				hv_R1[2] = 585;
				hv_R1[3] = 585;
				hv_R1[4] = 569;
				hv_R1[5] = 570;
				hv_R1[6] = 591;
				hv_R1[7] = 585;
				hv_R1[8] = 570;
				hv_R1[9] = 572;
				hv_R1[10] = 648;
				hv_R1[11] = 650;
				hv_R1[12] = 705;
				hv_R1[13] = 679;
				hv_R1[14] = 674;
				hv_R1[15] = 674;
				hv_R1[16] = 702;
				hv_R1[17] = 698;
				hv_R1[18] = 627;
				hv_R1[19] = 564;
				hv_R1[20] = 564;
				hv_C1.Clear();
				hv_C1[0] = 778;
				hv_C1[1] = 1506;
				hv_C1[2] = 1509;
				hv_C1[3] = 1559;
				hv_C1[4] = 1562;
				hv_C1[5] = 1681;
				hv_C1[6] = 1684;
				hv_C1[7] = 1773;
				hv_C1[8] = 1775;
				hv_C1[9] = 2073;
				hv_C1[10] = 2070;
				hv_C1[11] = 2095;
				hv_C1[12] = 2085;
				hv_C1[13] = 1974;
				hv_C1[14] = 1199;
				hv_C1[15] = 935;
				hv_C1[16] = 808;
				hv_C1[17] = 797;
				hv_C1[18] = 796;
				hv_C1[19] = 748;
				hv_C1[20] = 778;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 568;
				hv_R2[1] = 581;
				hv_R2[2] = 637;
				hv_R2[3] = 744;
				hv_R2[4] = 800;
				hv_R2[5] = 1384;
				hv_R2[6] = 1452;
				hv_R2[7] = 1508;
				hv_R2[8] = 1576;
				hv_R2[9] = 1959;
				hv_R2[10] = 1955;
				hv_R2[11] = 1927;
				hv_R2[12] = 965;
				hv_R2[13] = 888;
				hv_R2[14] = 779;
				hv_R2[15] = 732;
				hv_R2[16] = 725;
				hv_R2[17] = 570;
				hv_R2[18] = 568;
				hv_C2.Clear();
				hv_C2[0] = 262;
				hv_C2[1] = 655;
				hv_C2[2] = 716;
				hv_C2[3] = 733;
				hv_C2[4] = 776;
				hv_C2[5] = 768;
				hv_C2[6] = 726;
				hv_C2[7] = 610;
				hv_C2[8] = 556;
				hv_C2[9] = 533;
				hv_C2[10] = 458;
				hv_C2[11] = 451;
				hv_C2[12] = 452;
				hv_C2[13] = 434;
				hv_C2[14] = 336;
				hv_C2[15] = 257;
				hv_C2[16] = 14;
				hv_C2[17] = 14;
				hv_C2[18] = 262;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 579;
				hv_R3[1] = 592;
				hv_R3[2] = 1098;
				hv_R3[3] = 1083;
				hv_R3[4] = 780;
				hv_R3[5] = 711;
				hv_R3[6] = 699;
				hv_R3[7] = 654;
				hv_R3[8] = 647;
				hv_R3[9] = 585;
				hv_R3[10] = 579;
				hv_C3.Clear();
				hv_C3[0] = 2290;
				hv_C3[1] = 4080;
				hv_C3[2] = 4080;
				hv_C3[3] = 2134;
				hv_C3[4] = 2131;
				hv_C3[5] = 2152;
				hv_C3[6] = 2209;
				hv_C3[7] = 2201;
				hv_C3[8] = 2169;
				hv_C3[9] = 2241;
				hv_C3[10] = 2290;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 1131;
				hv_R4[1] = 1144;
				hv_R4[2] = 1309;
				hv_R4[3] = 1312;
				hv_R4[4] = 1342;
				hv_R4[5] = 1390;
				hv_R4[6] = 1409;
				hv_R4[7] = 1459;
				hv_R4[8] = 1578;
				hv_R4[9] = 1809;
				hv_R4[10] = 1968;
				hv_R4[11] = 1972;
				hv_R4[12] = 1940;
				hv_R4[13] = 1892;
				hv_R4[14] = 1131;
				hv_R4[15] = 1131;
				hv_C4.Clear();
				hv_C4[0] = 2235;
				hv_C4[1] = 4080;
				hv_C4[2] = 4080;
				hv_C4[3] = 3838;
				hv_C4[4] = 3613;
				hv_C4[5] = 3331;
				hv_C4[6] = 3324;
				hv_C4[7] = 3149;
				hv_C4[8] = 2858;
				hv_C4[9] = 2472;
				hv_C4[10] = 2279;
				hv_C4[11] = 2257;
				hv_C4[12] = 2227;
				hv_C4[13] = 2123;
				hv_C4[14] = 2128;
				hv_C4[15] = 2235;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
				hv_R5.Clear();
				hv_R5[0] = 1356;
				hv_R5[1] = 1356;
				hv_R5[2] = 3007;
				hv_R5[3] = 3001;
				hv_R5[4] = 2983;
				hv_R5[5] = 2760;
				hv_R5[6] = 2683;
				hv_R5[7] = 2642;
				hv_R5[8] = 2605;
				hv_R5[9] = 2555;
				hv_R5[10] = 2422;
				hv_R5[11] = 2391;
				hv_R5[12] = 2365;
				hv_R5[13] = 2227;
				hv_R5[14] = 2145;
				hv_R5[15] = 2143;
				hv_R5[16] = 2114;
				hv_R5[17] = 2057;
				hv_R5[18] = 1959;
				hv_R5[19] = 2022;
				hv_R5[20] = 2023;
				hv_R5[21] = 1910;
				hv_R5[22] = 1755;
				hv_R5[23] = 1554;
				hv_R5[24] = 1477;
				hv_R5[25] = 1411;
				hv_R5[26] = 1379;
				hv_R5[27] = 1356;
				hv_C5.Clear();
				hv_C5[0] = 4012;
				hv_C5[1] = 4080;
				hv_C5[2] = 4080;
				hv_C5[3] = 2193;
				hv_C5[4] = 1628;
				hv_C5[5] = 1728;
				hv_C5[6] = 1712;
				hv_C5[7] = 1656;
				hv_C5[8] = 1635;
				hv_C5[9] = 1643;
				hv_C5[10] = 1725;
				hv_C5[11] = 1764;
				hv_C5[12] = 1767;
				hv_C5[13] = 1881;
				hv_C5[14] = 1890;
				hv_C5[15] = 1999;
				hv_C5[16] = 2066;
				hv_C5[17] = 2112;
				hv_C5[18] = 2125;
				hv_C5[19] = 2215;
				hv_C5[20] = 2317;
				hv_C5[21] = 2452;
				hv_C5[22] = 2677;
				hv_C5[23] = 3069;
				hv_C5[24] = 3281;
				hv_C5[25] = 3532;
				hv_C5[26] = 3708;
				hv_C5[27] = 4012;
				GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
				hv_R6.Clear();
				hv_R6[0] = 1992;
				hv_R6[1] = 1999;
				hv_R6[2] = 2060;
				hv_R6[3] = 2092;
				hv_R6[4] = 2135;
				hv_R6[5] = 2144;
				hv_R6[6] = 2160;
				hv_R6[7] = 2190;
				hv_R6[8] = 2366;
				hv_R6[9] = 2519;
				hv_R6[10] = 2574;
				hv_R6[11] = 2658;
				hv_R6[12] = 2666;
				hv_R6[13] = 2697;
				hv_R6[14] = 2722;
				hv_R6[15] = 2975;
				hv_R6[16] = 3018;
				hv_R6[17] = 3017;
				hv_R6[18] = 2945;
				hv_R6[19] = 2929;
				hv_R6[20] = 2937;
				hv_R6[21] = 2967;
				hv_R6[22] = 3059;
				hv_R6[23] = 3059;
				hv_R6[24] = 2993;
				hv_R6[25] = 2995;
				hv_R6[26] = 2982;
				hv_R6[27] = 2904;
				hv_R6[28] = 2828;
				hv_R6[29] = 2735;
				hv_R6[30] = 1997;
				hv_R6[31] = 1992;
				hv_C6.Clear();
				hv_C6[0] = 528;
				hv_C6[1] = 554;
				hv_C6[2] = 568;
				hv_C6[3] = 593;
				hv_C6[4] = 680;
				hv_C6[5] = 1792;
				hv_C6[6] = 1821;
				hv_C6[7] = 1820;
				hv_C6[8] = 1677;
				hv_C6[9] = 1582;
				hv_C6[10] = 1568;
				hv_C6[11] = 1580;
				hv_C6[12] = 1532;
				hv_C6[13] = 1533;
				hv_C6[14] = 1563;
				hv_C6[15] = 1445;
				hv_C6[16] = 1381;
				hv_C6[17] = 1265;
				hv_C6[18] = 1110;
				hv_C6[19] = 975;
				hv_C6[20] = 897;
				hv_C6[21] = 815;
				hv_C6[22] = 714;
				hv_C6[23] = 14;
				hv_C6[24] = 14;
				hv_C6[25] = 208;
				hv_C6[26] = 270;
				hv_C6[27] = 373;
				hv_C6[28] = 434;
				hv_C6[29] = 452;
				hv_C6[30] = 453;
				hv_C6[31] = 528;
				GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
				Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
				MoveRegion(ho_RegionUnion60, &ho_RegionMoved29, hv_R, hv_C);
				Difference(ho_RegionMoved29, ho_RegionDilation35, &ho_RegionDifference34);
				Difference(ho_RegionDifference34, ho_RegionDilation3, &ho_RegionDifference55
					);
				Intersection(ho_RegionDifference55, ho_Image, &ho_RegionIntersection1);
				ErosionRectangle1(ho_RegionIntersection1, &ho_RegionIntersection1, 11, 33);
				ReduceDomain(ho_ImageReduced25, ho_RegionIntersection1, &ho_ImageReduced41
					);
				//*镭雕
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 35);
				SetDictObject(ho_RegionIntersection1, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 18);
				Det_LD_Region(hv_dd, (*hv_dt));


				//检测毛刺
				ClosingRectangle1(ho_RegionMoved29, &ho_RegionClosing46, 10, 90);
				Difference(ho_RegionClosing46, ho_RegionMoved29, &ho_RegionDifference57);
				Connection(ho_RegionDifference57, &ho_ConnectedRegions125);
				SelectShape(ho_ConnectedRegions125, &ho_SelectedRegions153, ((HTuple("area").Append("width")).Append("ratio")),
					"and", ((HTuple(150).Append(1000)).Append(0)), ((HTuple(199999).Append(9999)).Append(0.2)));
				Union1(ho_SelectedRegions153, &ho_RegionUnion49);
				DilationRectangle1(ho_RegionUnion49, &ho_RegionDilation45, 11, 57);
				ReduceDomain(ho_Image, ho_RegionDilation45, &ho_ImageReduced94);

				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing22, 1, 80);
				SubImage(ho_ImageReduced94, ho_ImageClosing22, &ho_ImageSub7, 1, 128);
				Threshold(ho_ImageSub7, &ho_Region89, 0, 30);
				OpeningRectangle1(ho_Region89, &ho_RegionOpening14, 4, 2);
				Connection(ho_RegionOpening14, &ho_ConnectedRegions126);
				SelectShape(ho_ConnectedRegions126, &ho_SelectedRegions154, (HTuple("area").Append("ratio")),
					"and", (HTuple(130).Append(0.1)), (HTuple(99999).Append(0.4)));
				CountObj(ho_SelectedRegions154, &hv_Number31);
				if (0 != (int(hv_Number31>10)))
				{
					ConcatObj(ho_SelectedRegions154, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing21, 1, 4);
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing23, 31, 31);
				SubImage(ho_ImageClosing21, ho_ImageClosing23, &ho_ImageSub8, 1, 128);
				VarThreshold(ho_ImageSub8, &ho_Region90, 35, 35, 0.2, 12, "dark");
				OpeningRectangle1(ho_Region90, &ho_RegionOpening55, 2, 2);
				ClosingRectangle1(ho_RegionOpening55, &ho_RegionClosing48, 10, 1);
				Connection(ho_RegionClosing48, &ho_ConnectedRegions127);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions155, "width", "and",
					530, 99999);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions156, "width", "and",
					150, 1000);
				CountObj(ho_SelectedRegions156, &hv_Number33);
				if (0 != hv_Number33)
				{
					RegionFeatures(ho_SelectedRegions156, "height", &hv_Value22);
					TupleMax(hv_Value22, &hv_Max14);
				}
				else
				{
					hv_Max14 = 0;
				}

				CountObj(ho_SelectedRegions155, &hv_Number32);
				if (0 != (HTuple(HTuple(int(hv_Number32>1)).TupleAnd(int(hv_Number33<5))).TupleAnd(int(hv_Max14<42))))
				{
					ConcatObj(ho_SelectedRegions155, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1927.55, 1313.15, 3029.8, 1880.73);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced64);
				GrayClosingRect(ho_ImageReduced64, &ho_ImageClosing9, 3, 3);
				Threshold(ho_ImageClosing9, &ho_Region78, 0, 66);
				Connection(ho_Region78, &ho_ConnectedRegions9);
				SelectShape(ho_ConnectedRegions9, &ho_SelectedRegions8, "area", "and", 30,
					99999);
				Union1(ho_SelectedRegions8, &ho_RegionUnion);
				ClosingCircle(ho_RegionUnion, &ho_RegionClosing6, 13.5);
				OpeningRectangle1(ho_RegionClosing6, &ho_RegionOpening12, 5, 5);
				Connection(ho_RegionOpening12, &ho_ConnectedRegions);
				SelectShape(ho_ConnectedRegions, &ho_SelectedRegions13, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.38)), (HTuple(39999).Append(1)));
				DilationCircle(ho_SelectedRegions13, &ho_RegionDilation4, 23.5);
				AreaCenter(ho_SelectedRegions13, &hv_Area5, &hv_Row5, &hv_Column5);
				hv_R = hv_Row5 - 2847;
				hv_C = hv_Column5 - 1703;
				hv_R1.Clear();
				hv_R1[0] = 602;
				hv_R1[1] = 608;
				hv_R1[2] = 648;
				hv_R1[3] = 655;
				hv_R1[4] = 950;
				hv_R1[5] = 1011;
				hv_R1[6] = 1022;
				hv_R1[7] = 1028;
				hv_R1[8] = 1028;
				hv_R1[9] = 998;
				hv_R1[10] = 949;
				hv_R1[11] = 660;
				hv_R1[12] = 656;
				hv_R1[13] = 617;
				hv_R1[14] = 620;
				hv_R1[15] = 3066;
				hv_R1[16] = 3066;
				hv_R1[17] = 2678;
				hv_R1[18] = 2429;
				hv_R1[19] = 2237;
				hv_R1[20] = 2096;
				hv_R1[21] = 2057;
				hv_R1[22] = 2057;
				hv_R1[23] = 2012;
				hv_R1[24] = 1895;
				hv_R1[25] = 1721;
				hv_R1[26] = 1531;
				hv_R1[27] = 1526;
				hv_R1[28] = 1429;
				hv_R1[29] = 1179;
				hv_R1[30] = 1092;
				hv_R1[31] = 1074;
				hv_R1[32] = 1075;
				hv_R1[33] = 1122;
				hv_R1[34] = 1111;
				hv_R1[35] = 1117;
				hv_R1[36] = 602;
				hv_R1[37] = 602;
				hv_C1.Clear();
				hv_C1[0] = 44;
				hv_C1[1] = 2400;
				hv_C1[2] = 2403;
				hv_C1[3] = 2426;
				hv_C1[4] = 2428;
				hv_C1[5] = 2491;
				hv_C1[6] = 2530;
				hv_C1[7] = 3336;
				hv_C1[8] = 3586;
				hv_C1[9] = 3653;
				hv_C1[10] = 3685;
				hv_C1[11] = 3687;
				hv_C1[12] = 3706;
				hv_C1[13] = 3709;
				hv_C1[14] = 4090;
				hv_C1[15] = 4090;
				hv_C1[16] = 2661;
				hv_C1[17] = 2477;
				hv_C1[18] = 2315;
				hv_C1[19] = 2160;
				hv_C1[20] = 2107;
				hv_C1[21] = 2049;
				hv_C1[22] = 1984;
				hv_C1[23] = 1954;
				hv_C1[24] = 1813;
				hv_C1[25] = 1554;
				hv_C1[26] = 1546;
				hv_C1[27] = 1690;
				hv_C1[28] = 1755;
				hv_C1[29] = 1756;
				hv_C1[30] = 1705;
				hv_C1[31] = 1640;
				hv_C1[32] = 1388;
				hv_C1[33] = 1316;
				hv_C1[34] = 1156;
				hv_C1[35] = 5;
				hv_C1[36] = 5;
				hv_C1[37] = 44;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 1113;
				hv_R2[1] = 1116;
				hv_R2[2] = 1137;
				hv_R2[3] = 1171;
				hv_R2[4] = 1405;
				hv_R2[5] = 1452;
				hv_R2[6] = 1486;
				hv_R2[7] = 1488;
				hv_R2[8] = 1433;
				hv_R2[9] = 1183;
				hv_R2[10] = 1129;
				hv_R2[11] = 1113;
				hv_C2.Clear();
				hv_C2[0] = 1449;
				hv_C2[1] = 1627;
				hv_C2[2] = 1674;
				hv_C2[3] = 1701;
				hv_C2[4] = 1706;
				hv_C2[5] = 1687;
				hv_C2[6] = 1634;
				hv_C2[7] = 1419;
				hv_C2[8] = 1349;
				hv_C2[9] = 1343;
				hv_C2[10] = 1385;
				hv_C2[11] = 1449;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 1152;
				hv_R3[1] = 1159;
				hv_R3[2] = 1460;
				hv_R3[3] = 1516;
				hv_R3[4] = 1530;
				hv_R3[5] = 1641;
				hv_R3[6] = 1692;
				hv_R3[7] = 1543;
				hv_R3[8] = 1426;
				hv_R3[9] = 1395;
				hv_R3[10] = 1334;
				hv_R3[11] = 1332;
				hv_R3[12] = 1153;
				hv_R3[13] = 1152;
				hv_C3.Clear();
				hv_C3[0] = 41;
				hv_C3[1] = 1305;
				hv_C3[2] = 1300;
				hv_C3[3] = 1379;
				hv_C3[4] = 1500;
				hv_C3[5] = 1501;
				hv_C3[6] = 1499;
				hv_C3[7] = 1216;
				hv_C3[8] = 898;
				hv_C3[9] = 769;
				hv_C3[10] = 358;
				hv_C3[11] = 5;
				hv_C3[12] = 5;
				hv_C3[13] = 41;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 1365;
				hv_R4[1] = 1377;
				hv_R4[2] = 1420;
				hv_R4[3] = 1469;
				hv_R4[4] = 1558;
				hv_R4[5] = 1672;
				hv_R4[6] = 1806;
				hv_R4[7] = 2073;
				hv_R4[8] = 2107;
				hv_R4[9] = 2156;
				hv_R4[10] = 2795;
				hv_R4[11] = 2797;
				hv_R4[12] = 2875;
				hv_R4[13] = 2972;
				hv_R4[14] = 3015;
				hv_R4[15] = 3041;
				hv_R4[16] = 3044;
				hv_R4[17] = 3027;
				hv_R4[18] = 1368;
				hv_R4[19] = 1365;
				hv_C4.Clear();
				hv_C4[0] = 167;
				hv_C4[1] = 398;
				hv_C4[2] = 672;
				hv_C4[3] = 867;
				hv_C4[4] = 1124;
				hv_C4[5] = 1371;
				hv_C4[6] = 1593;
				hv_C4[7] = 1940;
				hv_C4[8] = 1905;
				hv_C4[9] = 1891;
				hv_C4[10] = 1889;
				hv_C4[11] = 1877;
				hv_C4[12] = 1871;
				hv_C4[13] = 1839;
				hv_C4[14] = 1793;
				hv_C4[15] = 1731;
				hv_C4[16] = 1503;
				hv_C4[17] = 5;
				hv_C4[18] = 5;
				hv_C4[19] = 167;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);

				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				MoveRegion(ho_RegionUnion58, &ho_RegionMoved30, hv_R, hv_C);
				ErosionRectangle1(ho_RegionMoved30, &ho_RegionErosion12, 59, 45);
				Difference(ho_RegionErosion12, ho_RegionDilation4, &ho_RegionDifference8);


				//*镭雕
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 32);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 62);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
				SetDictObject(ho_RegionDifference8, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));
				//检测BLC毛刺
				//检测毛刺
				ClosingRectangle1(ho_RegionMoved30, &ho_RegionClosing46, 10, 90);
				Difference(ho_RegionClosing46, ho_RegionMoved30, &ho_RegionDifference57);
				Connection(ho_RegionDifference57, &ho_ConnectedRegions125);
				SelectShape(ho_ConnectedRegions125, &ho_SelectedRegions153, ((HTuple("area").Append("width")).Append("ratio")),
					"and", ((HTuple(150).Append(1000)).Append(0)), ((HTuple(199999).Append(9999)).Append(0.2)));
				Union1(ho_SelectedRegions153, &ho_RegionUnion49);
				DilationRectangle1(ho_RegionUnion49, &ho_RegionDilation45, 11, 91);
				ReduceDomain(ho_Image, ho_RegionDilation45, &ho_ImageReduced94);

				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing22, 1, 80);
				SubImage(ho_ImageReduced94, ho_ImageClosing22, &ho_ImageSub7, 1, 128);
				Threshold(ho_ImageSub7, &ho_Region89, 0, 30);
				OpeningRectangle1(ho_Region89, &ho_RegionOpening14, 4, 2);
				Connection(ho_RegionOpening14, &ho_ConnectedRegions126);
				SelectShape(ho_ConnectedRegions126, &ho_SelectedRegions154, (HTuple("area").Append("ratio")),
					"and", (HTuple(80).Append(0.1)), (HTuple(99999).Append(0.4)));
				CountObj(ho_SelectedRegions154, &hv_Number31);
				if (0 != (int(hv_Number31>12)))
				{
					ConcatObj(ho_SelectedRegions154, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing21, 1, 4);
				GrayClosingRect(ho_ImageReduced94, &ho_ImageClosing23, 31, 31);
				SubImage(ho_ImageClosing21, ho_ImageClosing23, &ho_ImageSub8, 1, 128);
				VarThreshold(ho_ImageSub8, &ho_Region90, 1, 30, 0.2, 12, "dark");
				ClosingRectangle1(ho_Region90, &ho_RegionClosing48, 10, 1);
				Connection(ho_RegionClosing48, &ho_ConnectedRegions127);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions155, "width", "and",
					350, 99999);
				CountObj(ho_SelectedRegions155, &hv_Number32);
				SelectShape(ho_ConnectedRegions127, &ho_SelectedRegions156, "width", "and",
					150, 99999);
				CountObj(ho_SelectedRegions156, &hv_Number33);
				RegionFeatures(ho_SelectedRegions156, "height", &hv_Value22);
				TupleMax(hv_Value22, &hv_Max14);
				if (0 != (HTuple(HTuple(int(hv_Number32>1)).TupleAnd(int(hv_Number33<4))).TupleAnd(int(hv_Max14<38))))
				{
					ConcatObj(ho_SelectedRegions155, (*hv_dt).TupleGetDictObject("54"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "54");
				}

				//kailie

				GenRectangle1(&ho_ROI_0, 557.036, 1843.48, 866.536, 2400.47);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced7);
				VarThreshold(ho_ImageReduced7, &ho_Region7, 60, 60, 0.2, 10, "dark");
				OpeningRectangle1(ho_Region7, &ho_RegionOpening3, 3, 3);
				Connection(ho_RegionOpening3, &ho_ConnectedRegions11);
				RegionFeatures(ho_ConnectedRegions11, "width", &hv_Value2);
				TupleMax(hv_Value2, &hv_Max1);
				SelectShape(ho_ConnectedRegions11, &ho_SelectedRegions11, "width", "and",
					hv_Max1, hv_Max1);
				DilationRectangle1(ho_SelectedRegions11, &ho_RegionDilation1, 11, 101);
				Difference(ho_ROI_0, ho_RegionDilation1, &ho_RegionDifference3);
				OpeningRectangle1(ho_RegionDifference3, &ho_RegionOpening35, 460, 10);
				ReduceDomain(ho_ImageReduced7, ho_RegionOpening35, &ho_ImageReduced22);
				VarThreshold(ho_ImageReduced22, &ho_Region21, 60, 60, 0.2, 22, "dark");
				OpeningRectangle1(ho_Region21, &ho_RegionOpening15, 2, 2);
				Connection(ho_RegionOpening15, &ho_ConnectedRegions32);
				SelectShape(ho_ConnectedRegions32, &ho_SelectedRegions31, (HTuple("area").Append("ratio")),
					"and", (HTuple(180).Append(0)), (HTuple(99999).Append(1.4)));
				ConcatObj(ho_SelectedRegions31, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");

				//基准面压伤
				GenRectangle1(&ho_ROI_0, 371.637, -17.8046, 710.268, 4108.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);
				Threshold(ho_ImageReduced8, &ho_Region8, 158, 255);
				Connection(ho_Region8, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
					1e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 90, 30);
				//碰伤(该点位蓝色区域不检测，银色区域可以检测)
				ShapeTrans(ho_RegionClosing5, &ho_RegionTrans7, "rectangle1");
				MoveRegion(ho_RegionTrans7, &ho_RegionMoved, -30, 0);
				Difference(ho_RegionMoved, ho_RegionTrans7, &ho_RegionDifference2);
				Connection(ho_RegionDifference2, &ho_ConnectedRegions25);
				SelectShape(ho_ConnectedRegions25, &ho_SelectedRegions25, "area", "and",
					15000, 299999);
				ReduceDomain(ho_Image, ho_SelectedRegions25, &ho_ImageReduced10);
				GrayClosingRect(ho_ImageReduced10, &ho_ImageClosing12, 1, 100);


				//
				OpeningRectangle1(ho_RegionClosing5, &ho_RegionOpening17, 100, 10);
				ErosionRectangle1(ho_RegionOpening17, &ho_RegionErosion5, 5, 54);
				MoveRegion(ho_RegionErosion5, &ho_RegionMoved24, 16, 0);
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved24, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 31, 31);
				SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
				Threshold(ho_ImageSub1, &ho_Region9, 0, 40);
				Connection(ho_Region9, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(67).Append(0.17)).Append(0)), ((HTuple(1800).Append(3)).Append(4)));
				SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions3, "mean",
					"and", 0, 165);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions3, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				//下侧缝隙出缺陷
				ClosingRectangle1(ho_RegionClosing5, &ho_RegionClosing17, 1010, 10);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved5, 65, 0);
				MoveRegion(ho_RegionClosing17, &ho_RegionMoved7, 4, 0);
				Difference(ho_RegionMoved5, ho_RegionMoved7, &ho_RegionDifference20);
				ReduceDomain(ho_Image, ho_RegionDifference20, &ho_ImageReduced29);


				Threshold(ho_ImageReduced29, &ho_Region28, 0, 40);
				Connection(ho_Region28, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
					1500, 99999);
				ClosingRectangle1(ho_SelectedRegions49, &ho_RegionClosing18, 400, 400);
				ShapeTrans(ho_RegionClosing18, &ho_RegionTrans, "convex");
				DilationRectangle1(ho_RegionTrans, &ho_RegionDilation20, 31, 41);
				Difference(ho_RegionDifference20, ho_RegionDilation20, &ho_RegionDifference21
					);
				ReduceDomain(ho_Image, ho_RegionDifference21, &ho_ImageReduced30);
				RankRect(ho_ImageReduced30, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 106);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, (HTuple("area").Append("height")),
					"and", (HTuple(150).Append(15)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 140);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>280)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}
				VarThreshold(ho_ImageReduced30, &ho_Region35, 150, 15, 0.2, 13, "dark");
				OpeningRectangle1(ho_Region35, &ho_RegionOpening23, 3, 3);
				Connection(ho_RegionOpening23, &ho_ConnectedRegions46);
				SelectShape(ho_ConnectedRegions46, &ho_SelectedRegions50, ((HTuple("area").Append("ratio")).Append("column")),
					"and", ((HTuple(720).Append(0.5)).Append(0)), ((HTuple(99999).Append(6)).Append(2950)));
				SelectGray(ho_SelectedRegions50, ho_Image, &ho_SelectedRegions110, "mean",
					"and", 0, 88);
				ConcatObj(ho_SelectedRegions110, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 142.86, 2974.95, 1166.86, 3659.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 188, 255);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.7)), (HTuple(99999).Append(1)));
				AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
				hv_R = hv_Row6 - 860;
				hv_C = hv_Column6 - 3306;
				CountObj(ho_SelectedRegions55, &hv_Number19);
				if (0 != hv_Number19)
				{

					hv_R1.Clear();
					hv_R1[0] = 673;
					hv_R1[1] = 676;
					hv_R1[2] = 710;
					hv_R1[3] = 853;
					hv_R1[4] = 912;
					hv_R1[5] = 940;
					hv_R1[6] = 941;
					hv_R1[7] = 1076;
					hv_R1[8] = 1118;
					hv_R1[9] = 1126;
					hv_R1[10] = 1138;
					hv_R1[11] = 1126;
					hv_R1[12] = 1148;
					hv_R1[13] = 1146;
					hv_R1[14] = 1213;
					hv_R1[15] = 2593;
					hv_R1[16] = 2636;
					hv_R1[17] = 2697;
					hv_R1[18] = 3032;
					hv_R1[19] = 3032;
					hv_R1[20] = 3017;
					hv_R1[21] = 3032;
					hv_R1[22] = 3028;
					hv_R1[23] = 3011;
					hv_R1[24] = 3023;
					hv_R1[25] = 2915;
					hv_R1[26] = 674;
					hv_R1[27] = 673;
					hv_C1.Clear();
					hv_C1[0] = 358;
					hv_C1[1] = 1429;
					hv_C1[2] = 1459;
					hv_C1[3] = 1477;
					hv_C1[4] = 1509;
					hv_C1[5] = 1584;
					hv_C1[6] = 1948;
					hv_C1[7] = 1959;
					hv_C1[8] = 2005;
					hv_C1[9] = 2577;
					hv_C1[10] = 2603;
					hv_C1[11] = 2775;
					hv_C1[12] = 2812;
					hv_C1[13] = 2928;
					hv_C1[14] = 3026;
					hv_C1[15] = 3009;
					hv_C1[16] = 2961;
					hv_C1[17] = 2927;
					hv_C1[18] = 2918;
					hv_C1[19] = 1034;
					hv_C1[20] = 1033;
					hv_C1[21] = 562;
					hv_C1[22] = 392;
					hv_C1[23] = 380;
					hv_C1[24] = 45;
					hv_C1[25] = 30;
					hv_C1[26] = 30;
					hv_C1[27] = 358;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					ErosionRectangle1(ho_Region71, &ho_RegionErosion15, 41, 11);
					MoveRegion(ho_RegionErosion15, &ho_RegionMoved14, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_RegionMoved14, &ho_ImageReduced17);
					//*镭雕
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 31);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 71);
					SetDictObject(ho_RegionMoved14, hv_dd, "region");
					Det_LD_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					ErosionRectangle1(ho_ROI_0, &ho_ROI_0, 121, 301);
					MoveRegion(ho_ROI_0, &ho_ROI_0, 70, 0);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}
				//裂伤
				GenRectangle1(&ho_ROI_0, 713.111, 25.8314, 1465.28, 1436.03);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced82);
				MedianRect(ho_ImageReduced82, &ho_ImageMedian27, 3, 3);
				MedianRect(ho_ImageReduced82, &ho_ImageMedian28, 80, 80);
				DynThreshold(ho_ImageMedian27, ho_ImageMedian28, &ho_RegionDynThresh11, 15,
					"dark");
				Connection(ho_RegionDynThresh11, &ho_ConnectedRegions130);
				SelectShape(ho_ConnectedRegions130, &ho_SelectedRegions149, "phi", "and",
					HTuple(30).TupleRad(), HTuple(70).TupleRad());


				//基准面压伤
				GenRectangle1(&ho_ROI_0, 411.637, -17.8046, 710.268, 2448.45);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced8);
				Threshold(ho_ImageReduced8, &ho_Region8, 148, 255);
				OpeningRectangle1(ho_Region8, &ho_RegionOpening16, 2, 2);
				Connection(ho_RegionOpening16, &ho_ConnectedRegions12);
				SelectShape(ho_ConnectedRegions12, &ho_SelectedRegions12, "area", "and",
					1e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions12, &ho_RegionClosing5, 60, 20);
				ErosionRectangle1(ho_RegionClosing5, &ho_RegionErosion5, 5, 57);
				MoveRegion(ho_RegionErosion5, &ho_RegionMoved9, 21, 0);
				ReduceDomain(ho_ImageReduced8, ho_RegionMoved9, &ho_ImageReduced9);
				GrayClosingRect(ho_ImageReduced9, &ho_ImageClosing2, 11, 11);
				SubImage(ho_ImageReduced9, ho_ImageClosing2, &ho_ImageSub1, 3, 128);
				Threshold(ho_ImageSub1, &ho_Region9, 0, 30);
				Connection(ho_Region9, &ho_ConnectedRegions19);
				SelectShape(ho_ConnectedRegions19, &ho_SelectedRegions22, (HTuple("area").Append("anisometry")),
					"and", (HTuple(70).Append(0)), (HTuple(1600).Append(4.5)));
				SelectGray(ho_SelectedRegions22, ho_Image, &ho_SelectedRegions99, "mean",
					"and", 0, 15);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions99, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				Difference(ho_RegionClosing5, ho_RegionMoved9, &ho_RegionDifference9);
				OpeningRectangle1(ho_RegionDifference9, &ho_RegionOpening8, 3, 3);
				Connection(ho_RegionOpening8, &ho_ConnectedRegions16);
				SelectShape(ho_ConnectedRegions16, &ho_SelectedRegions18, "area", "and",
					50000, 999999);
				ErosionRectangle1(ho_SelectedRegions18, &ho_RegionErosion, 2, 2);



				//下方缺陷
				//shape_trans (RegionClosing5, RegionClosing5, 'rectangle1')
				MoveRegion(ho_RegionClosing5, &ho_RegionMoved22, 65, 0);
				Difference(ho_RegionMoved22, ho_RegionClosing5, &ho_RegionDifference37);
				Connection(ho_RegionDifference37, &ho_ConnectedRegions94);
				SelectShape(ho_ConnectedRegions94, &ho_SelectedRegions108, "width", "and",
					1250, 99999);
				ErosionRectangle1(ho_SelectedRegions108, &ho_RegionErosion20, 181, 11);
				MoveRegion(ho_RegionErosion20, &ho_RegionMoved27, 0, -130);
				Connection(ho_RegionMoved27, &ho_ConnectedRegions4);
				SelectShape(ho_ConnectedRegions4, &ho_SelectedRegions2, "width", "and", 650,
					99999);
				ReduceDomain(ho_Image, ho_SelectedRegions2, &ho_ImageReduced68);
				RankRect(ho_ImageReduced68, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 85);
				Connection(ho_Region21, &ho_ConnectedRegions112);
				SelectShape(ho_ConnectedRegions112, &ho_SelectedRegions117, (HTuple("area").Append("height")),
					"and", (HTuple(450).Append(28)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions117, ho_Image, &ho_SelectedRegions7, "mean",
					"and", 0, 122);
				ConcatObj(ho_SelectedRegions7, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");


				MedianRect(ho_ImageReduced68, &ho_ImageMedian21, 7, 7);
				GrayClosingRect(ho_ImageMedian21, &ho_ImageClosing13, 41, 41);
				SubImage(ho_ImageMedian21, ho_ImageClosing13, &ho_ImageSub18, 2, 128);
				Threshold(ho_ImageSub18, &ho_Region72, 0, 40);
				Connection(ho_Region72, &ho_ConnectedRegions148);
				SelectShape(ho_ConnectedRegions148, &ho_SelectedRegions173, "ratio", "and",
					0.3, 5);
				Union1(ho_SelectedRegions173, &ho_RegionUnion52);
				OpeningRectangle1(ho_RegionUnion52, &ho_RegionOpening34, 4, 9);
				Connection(ho_RegionOpening34, &ho_ConnectedRegions95);
				SelectShape(ho_ConnectedRegions95, &ho_SelectedRegions109, (HTuple("area").Append("ratio")),
					"and", (HTuple(370).Append(0.4)), (HTuple(99999).Append(6)));
				SelectGray(ho_SelectedRegions109, ho_Image, &ho_SelectedRegions144, "mean",
					"and", 0, 70);
				Union1(ho_SelectedRegions144, &ho_RegionUnion37);
				RegionFeatures(ho_RegionUnion37, "area", &hv_Value10);
				if (0 != (int(hv_Value10>750)))
				{
					ConcatObj(ho_RegionUnion37, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}

			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				//提取定位点


				GenRectangle1(&ho_ROI_0, 306.7, 1594.01, 1769.56, 2606.31);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 66);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.4)), (HTuple(99999).Append(1)));
				AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
				DilationCircle(ho_SelectedRegions55, &ho_RegionDilation5, 23.5);
				hv_R = hv_Row6 - 990;
				hv_C = hv_Column6 - 2168;

				//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 55, 170)
				//opening_rectangle1 (Region33, RegionOpening52, 2, 2)
				//connection (RegionOpening52, ConnectedRegions36)

				//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 5e5, 9e6)
				//closing_rectangle1 (SelectedRegions36, RegionClosing27, 60, 20)
				//union1 (RegionClosing27, RegionUnion10)
				//erosion_rectangle1 (RegionUnion10, RegionErosion11, 61, 81)
				//get_region_polygon (RegionErosion11, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				hv_R1.Clear();
				hv_R1[0] = 43;
				hv_R1[1] = 145;
				hv_R1[2] = 185;
				hv_R1[3] = 254;
				hv_R1[4] = 714;
				hv_R1[5] = 771;
				hv_R1[6] = 823;
				hv_R1[7] = 849;
				hv_R1[8] = 849;
				hv_R1[9] = 867;
				hv_R1[10] = 898;
				hv_R1[11] = 1012;
				hv_R1[12] = 1018;
				hv_R1[13] = 1117;
				hv_R1[14] = 1154;
				hv_R1[15] = 1290;
				hv_R1[16] = 1328;
				hv_R1[17] = 1329;
				hv_R1[18] = 1236;
				hv_R1[19] = 1187;
				hv_R1[20] = 1071;
				hv_R1[21] = 1017;
				hv_R1[22] = 996;
				hv_R1[23] = 900;
				hv_R1[24] = 951;
				hv_R1[25] = 1216;
				hv_R1[26] = 1299;
				hv_R1[27] = 1362;
				hv_R1[28] = 1372;
				hv_R1[29] = 1922;
				hv_R1[30] = 1931;
				hv_R1[31] = 2003;
				hv_R1[32] = 2078;
				hv_R1[33] = 2372;
				hv_R1[34] = 2285;
				hv_R1[35] = 2274;
				hv_R1[36] = 2239;
				hv_R1[37] = 2207;
				hv_R1[38] = 2099;
				hv_R1[39] = 2047;
				hv_R1[40] = 1958;
				hv_R1[41] = 1959;
				hv_R1[42] = 2013;
				hv_R1[43] = 2133;
				hv_R1[44] = 2176;
				hv_R1[45] = 2278;
				hv_R1[46] = 2281;
				hv_R1[47] = 2336;
				hv_R1[48] = 2440;
				hv_R1[49] = 2461;
				hv_R1[50] = 2461;
				hv_R1[51] = 2568;
				hv_R1[52] = 3031;
				hv_R1[53] = 3031;
				hv_R1[54] = 2041;
				hv_R1[55] = 2047;
				hv_R1[56] = 2030;
				hv_R1[57] = 1991;
				hv_R1[58] = 1881;
				hv_R1[59] = 1306;
				hv_R1[60] = 1228;
				hv_R1[61] = 1209;
				hv_R1[62] = 1203;
				hv_R1[63] = 43;
				hv_R1[64] = 43;
				hv_C1.Clear();
				hv_C1[0] = 2994;
				hv_C1[1] = 2990;
				hv_C1[2] = 2941;
				hv_C1[3] = 2910;
				hv_C1[4] = 2912;
				hv_C1[5] = 2935;
				hv_C1[6] = 2989;
				hv_C1[7] = 3167;
				hv_C1[8] = 3092;
				hv_C1[9] = 3076;
				hv_C1[10] = 3061;
				hv_C1[11] = 3072;
				hv_C1[12] = 3025;
				hv_C1[13] = 2840;
				hv_C1[14] = 2825;
				hv_C1[15] = 2833;
				hv_C1[16] = 2877;
				hv_C1[17] = 3004;
				hv_C1[18] = 3195;
				hv_C1[19] = 3220;
				hv_C1[20] = 3221;
				hv_C1[21] = 3176;
				hv_C1[22] = 3227;
				hv_C1[23] = 3229;
				hv_C1[24] = 3249;
				hv_C1[25] = 3252;
				hv_C1[26] = 3279;
				hv_C1[27] = 3361;
				hv_C1[28] = 3498;
				hv_C1[29] = 3490;
				hv_C1[30] = 3358;
				hv_C1[31] = 3267;
				hv_C1[32] = 3243;
				hv_C1[33] = 3230;
				hv_C1[34] = 3215;
				hv_C1[35] = 3172;
				hv_C1[36] = 3207;
				hv_C1[37] = 3214;
				hv_C1[38] = 3213;
				hv_C1[39] = 3178;
				hv_C1[40] = 2997;
				hv_C1[41] = 2872;
				hv_C1[42] = 2822;
				hv_C1[43] = 2819;
				hv_C1[44] = 2838;
				hv_C1[45] = 3031;
				hv_C1[46] = 3075;
				hv_C1[47] = 3057;
				hv_C1[48] = 3057;
				hv_C1[49] = 3081;
				hv_C1[50] = 3150;
				hv_C1[51] = 3108;
				hv_C1[52] = 3105;
				hv_C1[53] = 30;
				hv_C1[54] = 30;
				hv_C1[55] = 1173;
				hv_C1[56] = 1220;
				hv_C1[57] = 1257;
				hv_C1[58] = 1274;
				hv_C1[59] = 1274;
				hv_C1[60] = 1223;
				hv_C1[61] = 1148;
				hv_C1[62] = 31;
				hv_C1[63] = 30;
				hv_C1[64] = 2994;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				ErosionRectangle1(ho_Region71, &ho_RegionErosion15, 41, 11);
				MoveRegion(ho_RegionErosion15, &ho_RegionMoved14, hv_R, hv_C);
				Difference(ho_RegionMoved14, ho_RegionDilation5, &ho_RegionDifference12);

				ReduceDomain(ho_Image, ho_RegionDifference12, &ho_ImageReduced17);

				//*镭雕
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictObject(ho_RegionDifference12, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 55);
				Det_LD_Region(hv_dd, (*hv_dt));
				//检测拉胶

				GenRectangle1(&ho_ROI_0, 1399.68, 3629.22, 1871.65, 3811.7);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced33);
				Threshold(ho_ImageReduced33, &ho_Region36, 190, 255);
				Connection(ho_Region36, &ho_ConnectedRegions49);
				SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions53, "area", "and",
					900, 4900);
				CountObj(ho_SelectedRegions53, &hv_Number2);
				if (0 != (int(hv_Number2<2)))
				{
					ConcatObj(ho_SelectedRegions53, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
				}
				//BLC
				if (0 != (int(hv_Number2 == 2)))
				{
					ShapeTrans(ho_SelectedRegions53, &ho_RegionTrans11, "rectangle2");
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions57, "phi", "and",
						HTuple(86.5).TupleRad(), HTuple(93.5).TupleRad());
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions58, "phi", "and",
						HTuple(-93.5).TupleRad(), HTuple(-86.5).TupleRad());
					Union2(ho_SelectedRegions57, ho_SelectedRegions58, &ho_RegionUnion20);
					Difference(ho_SelectedRegions53, ho_RegionUnion20, &ho_RegionDifference26
						);
					ConcatObj(ho_RegionDifference26, (*hv_dt).TupleGetDictObject("67"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "67");
				}
				GenRectangle1(&ho_ROI_0, 1317.94, 3445.29, 2034.97, 3603.32);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced44);
				Threshold(ho_ImageReduced44, &ho_Region55, 180, 255);
				Connection(ho_Region55, &ho_ConnectedRegions67);
				SelectShape(ho_ConnectedRegions67, &ho_SelectedRegions68, "area", "and",
					10050, 99999);
				ClosingRectangle1(ho_SelectedRegions68, &ho_RegionClosing15, 30, 30);
				ErosionRectangle1(ho_RegionClosing15, &ho_RegionErosion16, 11, 11);
				ReduceDomain(ho_ImageReduced44, ho_RegionErosion16, &ho_ImageReduced45);
				GrayClosingRect(ho_ImageReduced45, &ho_ImageClosing8, 11, 11);
				SubImage(ho_ImageReduced45, ho_ImageClosing8, &ho_ImageSub13, 1, 128);
				Threshold(ho_ImageSub13, &ho_Region56, 0, 40);
				Connection(ho_Region56, &ho_ConnectedRegions68);
				SelectShape(ho_ConnectedRegions68, &ho_SelectedRegions69, "area", "and",
					50, 99999);
				ConcatObj(ho_SelectedRegions69, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
			}
			if (0 != (int(hv_ImageNum == 6)))
			{


				GenRectangle1(&ho_ROI_0, 31.6829, 1365.81, 605.123, 1851.48);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 75);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.5)), (HTuple(99999).Append(1)));
				AreaCenter(ho_SelectedRegions55, &hv_Area6, &hv_Row6, &hv_Column6);
				DilationCircle(ho_SelectedRegions55, &ho_RegionDilation5, 23.5);
				hv_R = hv_Row6 - 393;
				hv_C = hv_Column6 - 1682;
				//镭雕区域
				GenRectangle1(&ho_ROI_0, 2.975, 0.47, 3200.57, 4157.21);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region33, 60, 170);
				Connection(ho_Region33, &ho_ConnectedRegions36);

				SelectShape(ho_ConnectedRegions36, &ho_SelectedRegions36, "area", "and",
					5e5, 9e6);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing27, 50, 20);
				Union1(ho_RegionClosing27, &ho_RegionUnion10);
				ErosionRectangle1(ho_RegionUnion10, &ho_RegionErosion11, 51, 61);

				GenRectangle1(&ho_ROI_0, 200.157, 1540.99, 610.861, 1886.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced15);
				MedianRect(ho_ImageReduced15, &ho_ImageMedian16, 19, 19);
				Threshold(ho_ImageMedian16, &ho_Region16, 0, 69);
				Connection(ho_Region16, &ho_ConnectedRegions18);
				SelectShape(ho_ConnectedRegions18, &ho_SelectedRegions15, (HTuple("area").Append("circularity")),
					"and", (HTuple(6150).Append(0.5)), (HTuple(99999).Append(1)));
				DilationCircle(ho_SelectedRegions15, &ho_RegionDilation8, 38.5);
				MoveRegion(ho_RegionDilation8, &ho_RegionMoved10, 0, 0);
				Difference(ho_RegionErosion11, ho_RegionMoved10, &ho_RegionDifference19);
				ReduceDomain(ho_Image, ho_RegionDifference19, &ho_ImageReduced17);
				//*镭雕
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictObject(ho_RegionDifference19, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));


			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, -32.6829, 40.46, 692.894, 619.751);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 45);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 3, 3);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					86150, 399999);
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);

				hv_R = hv_Row21 - 536;
				hv_C = hv_Column21 - 409;


				//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 85, 180)
				//opening_rectangle1 (Region33, RegionOpening27, 3, 3)
				//connection (RegionOpening27, ConnectedRegions36)

				//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 2e5, 9e6)
				//closing_rectangle1 (SelectedRegions36, RegionClosing27, 40, 30)
				//union1 (RegionClosing27, RegionUnion10)
				//erosion_rectangle1 (RegionUnion10, RegionErosion11, 30, 41)
				//connection (RegionErosion11, ConnectedRegions71)
				//select_shape (ConnectedRegions71, ConnectedRegions71, 'area', 'and', 150, 9999999)
				//count_obj (ConnectedRegions71, Number14)
				//for i := 1 to Number14 by 1
				//select_obj (ConnectedRegions71, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 23;
				hv_R1[1] = 102;
				hv_R1[2] = 213;
				hv_R1[3] = 536;
				hv_R1[4] = 558;
				hv_R1[5] = 557;
				hv_R1[6] = 501;
				hv_R1[7] = 474;
				hv_R1[8] = 481;
				hv_R1[9] = 519;
				hv_R1[10] = 577;
				hv_R1[11] = 667;
				hv_R1[12] = 754;
				hv_R1[13] = 935;
				hv_R1[14] = 984;
				hv_R1[15] = 925;
				hv_R1[16] = 727;
				hv_R1[17] = 714;
				hv_R1[18] = 558;
				hv_R1[19] = 545;
				hv_R1[20] = 411;
				hv_R1[21] = 326;
				hv_R1[22] = 23;
				hv_R1[23] = 23;
				hv_C1.Clear();
				hv_C1[0] = 1598;
				hv_C1[1] = 1563;
				hv_C1[2] = 1578;
				hv_C1[3] = 1417;
				hv_C1[4] = 1370;
				hv_C1[5] = 1233;
				hv_C1[6] = 1125;
				hv_C1[7] = 1026;
				hv_C1[8] = 881;
				hv_C1[9] = 788;
				hv_C1[10] = 718;
				hv_C1[11] = 660;
				hv_C1[12] = 640;
				hv_C1[13] = 655;
				hv_C1[14] = 626;
				hv_C1[15] = 599;
				hv_C1[16] = 390;
				hv_C1[17] = 17;
				hv_C1[18] = 15;
				hv_C1[19] = 239;
				hv_C1[20] = 392;
				hv_C1[21] = 423;
				hv_C1[22] = 430;
				hv_C1[23] = 1598;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 23;
				hv_R2[1] = 555;
				hv_R2[2] = 525;
				hv_R2[3] = 316;
				hv_R2[4] = 226;
				hv_R2[5] = 184;
				hv_R2[6] = 134;
				hv_R2[7] = 23;
				hv_R2[8] = 23;
				hv_C2.Clear();
				hv_C2[0] = 4077;
				hv_C2[1] = 4077;
				hv_C2[2] = 1588;
				hv_C2[3] = 1688;
				hv_C2[4] = 1682;
				hv_C2[5] = 1627;
				hv_C2[6] = 1602;
				hv_C2[7] = 1660;
				hv_C2[8] = 4077;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 259;
				hv_R3[1] = 292;
				hv_R3[2] = 529;
				hv_R3[3] = 549;
				hv_R3[4] = 603;
				hv_R3[5] = 719;
				hv_R3[6] = 954;
				hv_R3[7] = 1332;
				hv_R3[8] = 1750;
				hv_R3[9] = 2195;
				hv_R3[10] = 2466;
				hv_R3[11] = 2786;
				hv_R3[12] = 3051;
				hv_R3[13] = 3051;
				hv_R3[14] = 1061;
				hv_R3[15] = 997;
				hv_R3[16] = 864;
				hv_R3[17] = 750;
				hv_R3[18] = 677;
				hv_R3[19] = 614;
				hv_R3[20] = 564;
				hv_R3[21] = 531;
				hv_R3[22] = 530;
				hv_R3[23] = 610;
				hv_R3[24] = 598;
				hv_R3[25] = 527;
				hv_R3[26] = 386;
				hv_R3[27] = 259;
				hv_C3.Clear();
				hv_C3[0] = 1622;
				hv_C3[1] = 1642;
				hv_C3[2] = 1533;
				hv_C3[3] = 1498;
				hv_C3[4] = 1467;
				hv_C3[5] = 1463;
				hv_C3[6] = 1400;
				hv_C3[7] = 1346;
				hv_C3[8] = 1343;
				hv_C3[9] = 1407;
				hv_C3[10] = 1487;
				hv_C3[11] = 1624;
				hv_C3[12] = 1780;
				hv_C3[13] = 766;
				hv_C3[14] = 772;
				hv_C3[15] = 760;
				hv_C3[16] = 689;
				hv_C3[17] = 691;
				hv_C3[18] = 721;
				hv_C3[19] = 770;
				hv_C3[20] = 838;
				hv_C3[21] = 924;
				hv_C3[22] = 1019;
				hv_C3[23] = 1202;
				hv_C3[24] = 1441;
				hv_C3[25] = 1495;
				hv_C3[26] = 1550;
				hv_C3[27] = 1622;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 783;
				hv_R4[1] = 787;
				hv_R4[2] = 804;
				hv_R4[3] = 999;
				hv_R4[4] = 1118;
				hv_R4[5] = 1300;
				hv_R4[6] = 1338;
				hv_R4[7] = 1357;
				hv_R4[8] = 1359;
				hv_R4[9] = 1380;
				hv_R4[10] = 1445;
				hv_R4[11] = 1446;
				hv_R4[12] = 1565;
				hv_R4[13] = 1584;
				hv_R4[14] = 1601;
				hv_R4[15] = 1593;
				hv_R4[16] = 785;
				hv_R4[17] = 783;
				hv_C4.Clear();
				hv_C4[0] = 33;
				hv_C4[1] = 354;
				hv_C4[2] = 390;
				hv_C4[3] = 574;
				hv_C4[4] = 588;
				hv_C4[5] = 574;
				hv_C4[6] = 555;
				hv_C4[7] = 523;
				hv_C4[8] = 460;
				hv_C4[9] = 408;
				hv_C4[10] = 365;
				hv_C4[11] = 337;
				hv_C4[12] = 311;
				hv_C4[13] = 284;
				hv_C4[14] = 220;
				hv_C4[15] = 14;
				hv_C4[16] = 14;
				hv_C4[17] = 33;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
				hv_R5.Clear();
				hv_R5[0] = 986;
				hv_R5[1] = 1054;
				hv_R5[2] = 1142;
				hv_R5[3] = 3051;
				hv_R5[4] = 3051;
				hv_R5[5] = 2978;
				hv_R5[6] = 2969;
				hv_R5[7] = 2919;
				hv_R5[8] = 2899;
				hv_R5[9] = 2812;
				hv_R5[10] = 2774;
				hv_R5[11] = 2774;
				hv_R5[12] = 2630;
				hv_R5[13] = 2625;
				hv_R5[14] = 2563;
				hv_R5[15] = 2566;
				hv_R5[16] = 2533;
				hv_R5[17] = 2479;
				hv_R5[18] = 1050;
				hv_R5[19] = 986;
				hv_C5.Clear();
				hv_C5[0] = 685;
				hv_C5[1] = 724;
				hv_C5[2] = 731;
				hv_C5[3] = 719;
				hv_C5[4] = 189;
				hv_C5[5] = 182;
				hv_C5[6] = 127;
				hv_C5[7] = 104;
				hv_C5[8] = 137;
				hv_C5[9] = 137;
				hv_C5[10] = 124;
				hv_C5[11] = 68;
				hv_C5[12] = 58;
				hv_C5[13] = 23;
				hv_C5[14] = 24;
				hv_C5[15] = 532;
				hv_C5[16] = 589;
				hv_C5[17] = 620;
				hv_C5[18] = 632;
				hv_C5[19] = 685;
				GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
				hv_R6.Clear();
				hv_R6[0] = 1425;
				hv_R6[1] = 2443;
				hv_R6[2] = 2495;
				hv_R6[3] = 2512;
				hv_R6[4] = 2505;
				hv_R6[5] = 2471;
				hv_R6[6] = 2465;
				hv_R6[7] = 2427;
				hv_R6[8] = 2425;
				hv_R6[9] = 2425;
				hv_R6[10] = 2385;
				hv_R6[11] = 1896;
				hv_R6[12] = 1867;
				hv_R6[13] = 1846;
				hv_R6[14] = 1844;
				hv_R6[15] = 1717;
				hv_R6[16] = 1712;
				hv_R6[17] = 1634;
				hv_R6[18] = 1516;
				hv_R6[19] = 1596;
				hv_R6[20] = 1635;
				hv_R6[21] = 1653;
				hv_R6[22] = 1645;
				hv_R6[23] = 1598;
				hv_R6[24] = 1508;
				hv_R6[25] = 1467;
				hv_R6[26] = 1463;
				hv_R6[27] = 1444;
				hv_R6[28] = 1425;
				hv_C6.Clear();
				hv_C6[0] = 587;
				hv_C6[1] = 577;
				hv_C6[2] = 534;
				hv_C6[3] = 483;
				hv_C6[4] = 14;
				hv_C6[5] = 14;
				hv_C6[6] = 39;
				hv_C6[7] = 39;
				hv_C6[8] = 115;
				hv_C6[9] = 265;
				hv_C6[10] = 301;
				hv_C6[11] = 304;
				hv_C6[12] = 294;
				hv_C6[13] = 259;
				hv_C6[14] = 16;
				hv_C6[15] = 14;
				hv_C6[16] = 293;
				hv_C6[17] = 369;
				hv_C6[18] = 395;
				hv_C6[19] = 395;
				hv_C6[20] = 416;
				hv_C6[21] = 451;
				hv_C6[22] = 542;
				hv_C6[23] = 575;
				hv_C6[24] = 574;
				hv_C6[25] = 538;
				hv_C6[26] = 461;
				hv_C6[27] = 563;
				hv_C6[28] = 587;
				GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
				Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
				MoveRegion(ho_RegionUnion60, &ho_RegionMoved33, hv_R, hv_C);
				ErosionRectangle1(ho_RegionMoved33, &ho_RegionMoved33, 11, 21);

				ReduceDomain(ho_Image, ho_RegionMoved33, &ho_ImageReduced17);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 26);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 22);
				SetDictObject(ho_RegionMoved33, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 101.9, 1278.04, 1465.28, 2354.7);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				OpeningRectangle1(ho_Region58, &ho_RegionOpening18, 4, 4);
				ClosingCircle(ho_RegionOpening18, &ho_RegionClosing14, 23.5);
				Connection(ho_RegionClosing14, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					86150, 999999);
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				hv_R = hv_Row11 - 772;
				hv_C = hv_Column11 - 1628;

				//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 82, 150)
				//opening_rectangle1 (Region33, RegionOpening42, 1, 1)
				//connection (RegionOpening42, ConnectedRegions36)

				//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 2e4, 9e6)
				//closing_rectangle1 (SelectedRegions36, RegionClosing27, 50, 20)

				//erosion_rectangle1 (RegionClosing27, RegionErosion11, 51, 51)
				//count_obj (RegionErosion11, Number14)
				//for i := 1 to Number14 by 1
				//select_obj (RegionErosion11, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 28;
				hv_R1[1] = 294;
				hv_R1[2] = 347;
				hv_R1[3] = 362;
				hv_R1[4] = 28;
				hv_R1[5] = 28;
				hv_C1.Clear();
				hv_C1[0] = 819;
				hv_C1[1] = 810;
				hv_C1[2] = 763;
				hv_C1[3] = 699;
				hv_C1[4] = 702;
				hv_C1[5] = 819;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 28;
				hv_R2[1] = 1300;
				hv_R2[2] = 1283;
				hv_R2[3] = 1283;
				hv_R2[4] = 1310;
				hv_R2[5] = 1382;
				hv_R2[6] = 1351;
				hv_R2[7] = 424;
				hv_R2[8] = 419;
				hv_R2[9] = 337;
				hv_R2[10] = 28;
				hv_R2[11] = 28;
				hv_C2.Clear();
				hv_C2[0] = 892;
				hv_C2[1] = 890;
				hv_C2[2] = 857;
				hv_C2[3] = 757;
				hv_C2[4] = 741;
				hv_C2[5] = 739;
				hv_C2[6] = 695;
				hv_C2[7] = 701;
				hv_C2[8] = 800;
				hv_C2[9] = 878;
				hv_C2[10] = 881;
				hv_C2[11] = 892;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				hv_R3.Clear();
				hv_R3[0] = 28;
				hv_R3[1] = 265;
				hv_R3[2] = 350;
				hv_R3[3] = 377;
				hv_R3[4] = 377;
				hv_R3[5] = 479;
				hv_R3[6] = 513;
				hv_R3[7] = 513;
				hv_R3[8] = 499;
				hv_R3[9] = 450;
				hv_R3[10] = 381;
				hv_R3[11] = 382;
				hv_R3[12] = 342;
				hv_R3[13] = 266;
				hv_R3[14] = 243;
				hv_R3[15] = 247;
				hv_R3[16] = 280;
				hv_R3[17] = 368;
				hv_R3[18] = 413;
				hv_R3[19] = 413;
				hv_R3[20] = 398;
				hv_R3[21] = 363;
				hv_R3[22] = 291;
				hv_R3[23] = 245;
				hv_R3[24] = 234;
				hv_R3[25] = 312;
				hv_R3[26] = 314;
				hv_R3[27] = 796;
				hv_R3[28] = 811;
				hv_R3[29] = 882;
				hv_R3[30] = 1280;
				hv_R3[31] = 1275;
				hv_R3[32] = 1230;
				hv_R3[33] = 1192;
				hv_R3[34] = 1035;
				hv_R3[35] = 921;
				hv_R3[36] = 810;
				hv_R3[37] = 759;
				hv_R3[38] = 748;
				hv_R3[39] = 766;
				hv_R3[40] = 810;
				hv_R3[41] = 900;
				hv_R3[42] = 1023;
				hv_R3[43] = 1957;
				hv_R3[44] = 2045;
				hv_R3[45] = 2151;
				hv_R3[46] = 2639;
				hv_R3[47] = 2772;
				hv_R3[48] = 2887;
				hv_R3[49] = 2972;
				hv_R3[50] = 3015;
				hv_R3[51] = 3046;
				hv_R3[52] = 3046;
				hv_R3[53] = 2993;
				hv_R3[54] = 2964;
				hv_R3[55] = 2964;
				hv_R3[56] = 2976;
				hv_R3[57] = 2753;
				hv_R3[58] = 2729;
				hv_R3[59] = 2695;
				hv_R3[60] = 2680;
				hv_R3[61] = 2643;
				hv_R3[62] = 2590;
				hv_R3[63] = 1603;
				hv_R3[64] = 1532;
				hv_R3[65] = 1492;
				hv_R3[66] = 1480;
				hv_R3[67] = 1315;
				hv_R3[68] = 1244;
				hv_R3[69] = 1222;
				hv_R3[70] = 1222;
				hv_R3[71] = 1252;
				hv_R3[72] = 116;
				hv_R3[73] = 28;
				hv_R3[74] = 28;
				hv_C3.Clear();
				hv_C3[0] = 1323;
				hv_C3[1] = 1334;
				hv_C3[2] = 1404;
				hv_C3[3] = 1473;
				hv_C3[4] = 1534;
				hv_C3[5] = 1533;
				hv_C3[6] = 1560;
				hv_C3[7] = 1663;
				hv_C3[8] = 1691;
				hv_C3[9] = 1719;
				hv_C3[10] = 1719;
				hv_C3[11] = 2345;
				hv_C3[12] = 2451;
				hv_C3[13] = 2535;
				hv_C3[14] = 2617;
				hv_C3[15] = 3365;
				hv_C3[16] = 3340;
				hv_C3[17] = 3340;
				hv_C3[18] = 3379;
				hv_C3[19] = 3489;
				hv_C3[20] = 3508;
				hv_C3[21] = 3524;
				hv_C3[22] = 3524;
				hv_C3[23] = 3495;
				hv_C3[24] = 3542;
				hv_C3[25] = 3638;
				hv_C3[26] = 3660;
				hv_C3[27] = 3665;
				hv_C3[28] = 3525;
				hv_C3[29] = 3466;
				hv_C3[30] = 3463;
				hv_C3[31] = 3371;
				hv_C3[32] = 3317;
				hv_C3[33] = 3299;
				hv_C3[34] = 3298;
				hv_C3[35] = 3259;
				hv_C3[36] = 3159;
				hv_C3[37] = 3042;
				hv_C3[38] = 1908;
				hv_C3[39] = 1819;
				hv_C3[40] = 1738;
				hv_C3[41] = 1655;
				hv_C3[42] = 1607;
				hv_C3[43] = 1594;
				hv_C3[44] = 1554;
				hv_C3[45] = 1536;
				hv_C3[46] = 1535;
				hv_C3[47] = 1564;
				hv_C3[48] = 1632;
				hv_C3[49] = 1734;
				hv_C3[50] = 1828;
				hv_C3[51] = 2006;
				hv_C3[52] = 1399;
				hv_C3[53] = 1393;
				hv_C3[54] = 1358;
				hv_C3[55] = 1255;
				hv_C3[56] = 1235;
				hv_C3[57] = 1231;
				hv_C3[58] = 1242;
				hv_C3[59] = 1290;
				hv_C3[60] = 1411;
				hv_C3[61] = 1452;
				hv_C3[62] = 1475;
				hv_C3[63] = 1477;
				hv_C3[64] = 1456;
				hv_C3[65] = 1409;
				hv_C3[66] = 1211;
				hv_C3[67] = 1209;
				hv_C3[68] = 1165;
				hv_C3[69] = 1117;
				hv_C3[70] = 1015;
				hv_C3[71] = 958;
				hv_C3[72] = 957;
				hv_C3[73] = 960;
				hv_C3[74] = 1323;
				GenRegionPolygonFilled(&ho_Region73, hv_R3, hv_C3);
				hv_R4.Clear();
				hv_R4[0] = 28;
				hv_R4[1] = 220;
				hv_R4[2] = 188;
				hv_R4[3] = 171;
				hv_R4[4] = 147;
				hv_R4[5] = 29;
				hv_R4[6] = 28;
				hv_C4.Clear();
				hv_C4[0] = 3665;
				hv_C4[1] = 3665;
				hv_C4[2] = 3617;
				hv_C4[3] = 3588;
				hv_C4[4] = 3615;
				hv_C4[5] = 3615;
				hv_C4[6] = 3665;
				GenRegionPolygonFilled(&ho_Region74, hv_R4, hv_C4);
				hv_R5.Clear();
				hv_R5[0] = 621;
				hv_R5[1] = 653;
				hv_R5[2] = 654;
				hv_R5[3] = 803;
				hv_R5[4] = 800;
				hv_R5[5] = 621;
				hv_C5.Clear();
				hv_C5[0] = 3723;
				hv_C5[1] = 3804;
				hv_C5[2] = 4070;
				hv_C5[3] = 4070;
				hv_C5[4] = 3723;
				hv_C5[5] = 3723;
				GenRegionPolygonFilled(&ho_Region75, hv_R5, hv_C5);
				hv_R6.Clear();
				hv_R6[0] = 876;
				hv_R6[1] = 882;
				hv_R6[2] = 1681;
				hv_R6[3] = 1693;
				hv_R6[4] = 1690;
				hv_R6[5] = 1653;
				hv_R6[6] = 1542;
				hv_R6[7] = 1362;
				hv_R6[8] = 1353;
				hv_R6[9] = 1286;
				hv_R6[10] = 1280;
				hv_R6[11] = 906;
				hv_R6[12] = 881;
				hv_R6[13] = 876;
				hv_C6.Clear();
				hv_C6[0] = 3774;
				hv_C6[1] = 4070;
				hv_C6[2] = 4070;
				hv_C6[3] = 3858;
				hv_C6[4] = 3583;
				hv_C6[5] = 3571;
				hv_C6[6] = 3485;
				hv_C6[7] = 3482;
				hv_C6[8] = 3517;
				hv_C6[9] = 3541;
				hv_C6[10] = 3557;
				hv_C6[11] = 3555;
				hv_C6[12] = 3602;
				hv_C6[13] = 3774;
				GenRegionPolygonFilled(&ho_Region76, hv_R6, hv_C6);
				hv_R7.Clear();
				hv_R7[0] = 1286;
				hv_R7[1] = 1344;
				hv_R7[2] = 1480;
				hv_R7[3] = 1482;
				hv_R7[4] = 1448;
				hv_R7[5] = 1324;
				hv_R7[6] = 1286;
				hv_C7.Clear();
				hv_C7[0] = 1073;
				hv_C7[1] = 1137;
				hv_C7[2] = 1143;
				hv_C7[3] = 1033;
				hv_C7[4] = 958;
				hv_C7[5] = 1007;
				hv_C7[6] = 1073;
				GenRegionPolygonFilled(&ho_Region77, hv_R7, hv_C7);
				hv_R8.Clear();
				hv_R8[0] = 1813;
				hv_R8[1] = 1817;
				hv_R8[2] = 1928;
				hv_R8[3] = 1930;
				hv_R8[4] = 1958;
				hv_R8[5] = 2492;
				hv_R8[6] = 2525;
				hv_R8[7] = 2524;
				hv_R8[8] = 2593;
				hv_R8[9] = 2598;
				hv_R8[10] = 2493;
				hv_R8[11] = 2442;
				hv_R8[12] = 2426;
				hv_R8[13] = 1988;
				hv_R8[14] = 1920;
				hv_R8[15] = 1865;
				hv_R8[16] = 1816;
				hv_R8[17] = 1813;
				hv_C8.Clear();
				hv_C8[0] = 3899;
				hv_C8[1] = 4070;
				hv_C8[2] = 4070;
				hv_C8[3] = 3562;
				hv_C8[4] = 3519;
				hv_C8[5] = 3514;
				hv_C8[6] = 3557;
				hv_C8[7] = 4070;
				hv_C8[8] = 4070;
				hv_C8[9] = 3507;
				hv_C8[10] = 3507;
				hv_C8[11] = 3473;
				hv_C8[12] = 3440;
				hv_C8[13] = 3439;
				hv_C8[14] = 3461;
				hv_C8[15] = 3554;
				hv_C8[16] = 3597;
				hv_C8[17] = 3899;
				GenRegionPolygonFilled(&ho_Region78, hv_R8, hv_C8);
				hv_R9.Clear();
				hv_R9[0] = 2660;
				hv_R9[1] = 2662;
				hv_R9[2] = 3046;
				hv_R9[3] = 3046;
				hv_R9[4] = 2990;
				hv_R9[5] = 2948;
				hv_R9[6] = 2871;
				hv_R9[7] = 2778;
				hv_R9[8] = 2705;
				hv_R9[9] = 2695;
				hv_R9[10] = 2691;
				hv_R9[11] = 2665;
				hv_R9[12] = 2660;
				hv_C9.Clear();
				hv_C9[0] = 4037;
				hv_C9[1] = 4070;
				hv_C9[2] = 4069;
				hv_C9[3] = 3124;
				hv_C9[4] = 3125;
				hv_C9[5] = 3194;
				hv_C9[6] = 3271;
				hv_C9[7] = 3325;
				hv_C9[8] = 3344;
				hv_C9[9] = 3361;
				hv_C9[10] = 3443;
				hv_C9[11] = 3496;
				hv_C9[12] = 4037;
				GenRegionPolygonFilled(&ho_Region79, hv_R9, hv_C9);


				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				Union2(ho_RegionUnion50, ho_Region73, &ho_RegionUnion51);
				Union2(ho_RegionUnion51, ho_Region74, &ho_RegionUnion58);
				Union2(ho_RegionUnion58, ho_Region75, &ho_RegionUnion59);
				Union2(ho_RegionUnion59, ho_Region76, &ho_RegionUnion60);
				Union2(ho_RegionUnion60, ho_Region77, &ho_RegionUnion13);
				Union2(ho_RegionUnion13, ho_Region78, &ho_RegionUnion14);
				Union2(ho_RegionUnion14, ho_Region79, &ho_RegionUnion16);
				MoveRegion(ho_RegionUnion16, &ho_RegionMoved34, hv_R, hv_C);
				ErosionRectangle1(ho_RegionMoved34, &ho_RegionMoved34, 31, 21);
				GenRectangle1(&ho_ROI_0, 15.7425, 2780.8, 732.776, 3164.16);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced65);
				GrayClosingRect(ho_ImageReduced65, &ho_ImageClosing10, 3, 3);
				Threshold(ho_ImageClosing10, &ho_Region64, 0, 68);
				ClosingCircle(ho_Region64, &ho_RegionClosing24, 3.5);
				Connection(ho_RegionClosing24, &ho_ConnectedRegions71);
				SelectShape(ho_ConnectedRegions71, &ho_SelectedRegions76, (HTuple("area").Append("circularity")),
					"and", (HTuple(5150).Append(0.5)), (HTuple(99999).Append(1)));
				DilationCircle(ho_SelectedRegions76, &ho_RegionDilation6, 36.5);
				Difference(ho_RegionMoved34, ho_RegionDilation6, &ho_RegionMoved34);

				ReduceDomain(ho_Image, ho_RegionMoved34, &ho_ImageReduced17);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictObject(ho_RegionMoved34, hv_dd, "region");
				Det_LD_Region(hv_dd, (*hv_dt));



			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 1816.37, 1055.68, 2776.53, 1471.13);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 188, 255);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(7000).Append(0.5)), (HTuple(999999).Append(1)));
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				hv_R = hv_Row11 - 2411;
				hv_C = hv_Column11 - 1201;
				//gen_rectangle1 (ROI_0, 2.975, 0.47, 3200.57, 4157.21)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 70, 180)
				//opening_rectangle1 (Region33, RegionOpening1, 6, 3)
				//closing_rectangle1 (RegionOpening1, RegionClosing, 3, 1)
				//connection (RegionClosing, ConnectedRegions36)

				//select_shape (ConnectedRegions36, SelectedRegions36, 'area', 'and', 7e4, 9e6)
				//closing_rectangle1 (SelectedRegions36, RegionClosing27, 50, 20)
				//erosion_rectangle1 (RegionClosing27, RegionErosion17, 31, 31)
				//count_obj (RegionErosion17, Number14)
				//for i := 1 to Number14 by 1
				//select_obj (RegionErosion17, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 18;
				hv_R1[1] = 166;
				hv_R1[2] = 237;
				hv_R1[3] = 303;
				hv_R1[4] = 368;
				hv_R1[5] = 420;
				hv_R1[6] = 453;
				hv_R1[7] = 530;
				hv_R1[8] = 565;
				hv_R1[9] = 539;
				hv_R1[10] = 454;
				hv_R1[11] = 439;
				hv_R1[12] = 402;
				hv_R1[13] = 300;
				hv_R1[14] = 199;
				hv_R1[15] = 126;
				hv_R1[16] = 116;
				hv_R1[17] = 114;
				hv_R1[18] = 88;
				hv_R1[19] = 92;
				hv_R1[20] = 820;
				hv_R1[21] = 676;
				hv_R1[22] = 572;
				hv_R1[23] = 521;
				hv_R1[24] = 516;
				hv_R1[25] = 537;
				hv_R1[26] = 631;
				hv_R1[27] = 646;
				hv_R1[28] = 666;
				hv_R1[29] = 881;
				hv_R1[30] = 903;
				hv_R1[31] = 958;
				hv_R1[32] = 960;
				hv_R1[33] = 1095;
				hv_R1[34] = 1096;
				hv_R1[35] = 1257;
				hv_R1[36] = 1578;
				hv_R1[37] = 1584;
				hv_R1[38] = 1749;
				hv_R1[39] = 1861;
				hv_R1[40] = 1922;
				hv_R1[41] = 1939;
				hv_R1[42] = 1963;
				hv_R1[43] = 2152;
				hv_R1[44] = 2250;
				hv_R1[45] = 2314;
				hv_R1[46] = 2329;
				hv_R1[47] = 2314;
				hv_R1[48] = 2258;
				hv_R1[49] = 2157;
				hv_R1[50] = 2000;
				hv_R1[51] = 2340;
				hv_R1[52] = 2341;
				hv_R1[53] = 2380;
				hv_R1[54] = 2373;
				hv_R1[55] = 2345;
				hv_R1[56] = 2345;
				hv_R1[57] = 2368;
				hv_R1[58] = 2314;
				hv_R1[59] = 2312;
				hv_R1[60] = 2245;
				hv_R1[61] = 2249;
				hv_R1[62] = 2221;
				hv_R1[63] = 2223;
				hv_R1[64] = 2174;
				hv_R1[65] = 2144;
				hv_R1[66] = 2146;
				hv_R1[67] = 2203;
				hv_R1[68] = 2198;
				hv_R1[69] = 2073;
				hv_R1[70] = 2029;
				hv_R1[71] = 1984;
				hv_R1[72] = 1748;
				hv_R1[73] = 1678;
				hv_R1[74] = 595;
				hv_R1[75] = 601;
				hv_R1[76] = 588;
				hv_R1[77] = 541;
				hv_R1[78] = 491;
				hv_R1[79] = 188;
				hv_R1[80] = 132;
				hv_R1[81] = 109;
				hv_R1[82] = 104;
				hv_R1[83] = 82;
				hv_R1[84] = 18;
				hv_R1[85] = 18;
				hv_C1.Clear();
				hv_C1[0] = 1536;
				hv_C1[1] = 1562;
				hv_C1[2] = 1592;
				hv_C1[3] = 1638;
				hv_C1[4] = 1711;
				hv_C1[5] = 1808;
				hv_C1[6] = 1997;
				hv_C1[7] = 2175;
				hv_C1[8] = 2392;
				hv_C1[9] = 2693;
				hv_C1[10] = 2901;
				hv_C1[11] = 3045;
				hv_C1[12] = 3137;
				hv_C1[13] = 3252;
				hv_C1[14] = 3313;
				hv_C1[15] = 3329;
				hv_C1[16] = 3346;
				hv_C1[17] = 3420;
				hv_C1[18] = 3467;
				hv_C1[19] = 4080;
				hv_C1[20] = 4080;
				hv_C1[21] = 3914;
				hv_C1[22] = 3719;
				hv_C1[23] = 3545;
				hv_C1[24] = 3243;
				hv_C1[25] = 3115;
				hv_C1[26] = 2892;
				hv_C1[27] = 2889;
				hv_C1[28] = 2834;
				hv_C1[29] = 2603;
				hv_C1[30] = 2494;
				hv_C1[31] = 2420;
				hv_C1[32] = 2387;
				hv_C1[33] = 2362;
				hv_C1[34] = 2350;
				hv_C1[35] = 2361;
				hv_C1[36] = 2345;
				hv_C1[37] = 2363;
				hv_C1[38] = 2355;
				hv_C1[39] = 2400;
				hv_C1[40] = 2471;
				hv_C1[41] = 2573;
				hv_C1[42] = 2623;
				hv_C1[43] = 2819;
				hv_C1[44] = 2987;
				hv_C1[45] = 3178;
				hv_C1[46] = 3417;
				hv_C1[47] = 3569;
				hv_C1[48] = 3745;
				hv_C1[49] = 3920;
				hv_C1[50] = 4080;
				hv_C1[51] = 4080;
				hv_C1[52] = 3635;
				hv_C1[53] = 3390;
				hv_C1[54] = 3253;
				hv_C1[55] = 3118;
				hv_C1[56] = 3034;
				hv_C1[57] = 3013;
				hv_C1[58] = 2837;
				hv_C1[59] = 2362;
				hv_C1[60] = 2322;
				hv_C1[61] = 2162;
				hv_C1[62] = 2132;
				hv_C1[63] = 2034;
				hv_C1[64] = 2022;
				hv_C1[65] = 1987;
				hv_C1[66] = 1881;
				hv_C1[67] = 1837;
				hv_C1[68] = 1112;
				hv_C1[69] = 922;
				hv_C1[70] = 746;
				hv_C1[71] = 718;
				hv_C1[72] = 725;
				hv_C1[73] = 696;
				hv_C1[74] = 707;
				hv_C1[75] = 1119;
				hv_C1[76] = 1154;
				hv_C1[77] = 1204;
				hv_C1[78] = 1219;
				hv_C1[79] = 1220;
				hv_C1[80] = 1239;
				hv_C1[81] = 1271;
				hv_C1[82] = 1369;
				hv_C1[83] = 1415;
				hv_C1[84] = 1455;
				hv_C1[85] = 1536;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 2382;
				hv_R2[1] = 2385;
				hv_R2[2] = 2561;
				hv_R2[3] = 2556;
				hv_R2[4] = 2488;
				hv_R2[5] = 2397;
				hv_R2[6] = 2386;
				hv_R2[7] = 2415;
				hv_R2[8] = 2421;
				hv_R2[9] = 2385;
				hv_R2[10] = 2382;
				hv_C2.Clear();
				hv_C2[0] = 3823;
				hv_C2[1] = 4076;
				hv_C2[2] = 4080;
				hv_C2[3] = 3163;
				hv_C2[4] = 3116;
				hv_C2[5] = 3095;
				hv_C2[6] = 3073;
				hv_C2[7] = 3204;
				hv_C2[8] = 3423;
				hv_C2[9] = 3664;
				hv_C2[10] = 3823;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				GenRectangle1(&ho_ROI_0, 364.309, 1168.85, 604.217, 1414.61);
				GenRectangle1(&ho_TMP_Region, 1774.5, 2040.71, 2242.62, 2620);

				GenRectangle1(&ho_ROI_11, 643.318, 627.738, 2181.73, 2271.67);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				Union2(ho_ROI_0, ho_ROI_11, &ho_ROI_0);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced69);
				Threshold(ho_ImageReduced69, &ho_Region81, 0, 60);
				Connection(ho_Region81, &ho_ConnectedRegions74);
				SelectShape(ho_ConnectedRegions74, &ho_SelectedRegions96, "area", "and",
					1500, 3992999);
				DilationCircle(ho_SelectedRegions96, &ho_RegionDilation36, 35.5);
				ErosionRectangle1(ho_RegionUnion50, &ho_RegionUnion50, 31, 39);
				MoveRegion(ho_RegionUnion50, &ho_RegionUnion50, hv_R, hv_C);
				Difference(ho_RegionUnion50, ho_RegionDilation36, &ho_RegionUnion50);

				//单独检测裂纹
				Connection(ho_RegionUnion50, &ho_ConnectedRegions96);
				RegionFeatures(ho_ConnectedRegions96, "row", &hv_Value4);
				TupleMax(hv_Value4, &hv_Max5);
				SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions80, "row", "and", hv_Max5,
					hv_Max5);
				ErosionRectangle1(ho_SelectedRegions80, &ho_RegionErosion2, 25, 65);
				ReduceDomain(ho_Image, ho_RegionErosion2, &ho_ImageReduced57);
				MedianRect(ho_ImageReduced57, &ho_ImageMedian2, 3, 3);
				MedianRect(ho_ImageReduced57, &ho_ImageMedian6, 75, 75);
				DynThreshold(ho_ImageMedian2, ho_ImageMedian6, &ho_RegionDynThresh4, 23,
					"dark");
				Connection(ho_RegionDynThresh4, &ho_ConnectedRegions72);
				SelectShape(ho_ConnectedRegions72, &ho_SelectedRegions81, (HTuple("area").Append("ratio")),
					"and", (HTuple(100).Append(0.1)), (HTuple(99999).Append(3)));
				Union1(ho_SelectedRegions81, &ho_RegionUnion38);
				AreaCenter(ho_RegionUnion38, &hv_Area, &hv_Row, &hv_Column);
				if (0 != (int(hv_Area>270)))
				{
					ConcatObj(ho_RegionUnion38, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
				}


				//union1 (RegionClosing27, RegionUnion10)

				//gen_rectangle1 (ROI_0, 52.7887, 3294.63, 267.943, 3482.97)
				//difference (RegionUnion10, ROI_0, RegionDifference29)

				//gen_rectangle1 (ROI_0, 2228.72, 1633.83, 2316.52, 1996.71)
				//difference (RegionDifference29, ROI_0, RegionDifference30)
				//erosion_rectangle1 (RegionDifference30, RegionErosion11, 31, 61)
				//gen_rectangle1 (ROI_0, 2255.81, 2418.96, 2411.38, 2614.84)


				//gen_rectangle1 (ROI_11, 1904.75, 668.443, 2020.43, 1078.8)
				//difference (RegionErosion11, ROI_0, RegionDifference1)
				//difference (RegionDifference1, ROI_11, RegionDifference36)

				//gen_rectangle1 (ROI_0, 2619.81, 3123.37, 2704.74, 4085.17)
				//difference (RegionDifference36, ROI_0, RegionDifference36)
				ReduceDomain(ho_Image, ho_RegionUnion50, &ho_ImageReduced17);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 33);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "min_balck_area", 100);
				SetDictObject(ho_RegionUnion50, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
				Det_LD_Region(hv_dd, (*hv_dt));

				GenRectangle1(&ho_ROI_0, 1161.01, 435.431, 1694.01, 599.271);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced33);
				Threshold(ho_ImageReduced33, &ho_Region36, 190, 255);
				Connection(ho_Region36, &ho_ConnectedRegions49);
				SelectShape(ho_ConnectedRegions49, &ho_SelectedRegions53, "area", "and",
					3000, 30000);
				CountObj(ho_SelectedRegions53, &hv_Number2);
				if (0 != (int(hv_Number2<1)))
				{
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("66"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "66");
				}
				//BLC
				if (0 != (int(hv_Number2 == 1)))
				{
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions57, "phi", "and",
						HTuple(87).TupleRad(), HTuple(93).TupleRad());
					SelectShape(ho_SelectedRegions53, &ho_SelectedRegions58, "phi", "and",
						HTuple(-93).TupleRad(), HTuple(-87).TupleRad());
					Union2(ho_SelectedRegions57, ho_SelectedRegions58, &ho_RegionUnion20);
					Difference(ho_SelectedRegions53, ho_RegionUnion20, &ho_RegionDifference26
						);
					ConcatObj(ho_RegionDifference26, (*hv_dt).TupleGetDictObject("67"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "67");
				}

				//压伤

				GenRectangle1(&ho_ROI_0, 1204.74, 438.252, 1714.23, 637.734);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced18);
				Threshold(ho_ImageReduced18, &ho_Region24, 170, 255);
				ClosingRectangle1(ho_Region24, &ho_RegionClosing8, 50, 10);
				ErosionRectangle1(ho_RegionClosing8, &ho_RegionErosion13, 6, 3);
				ReduceDomain(ho_ImageReduced18, ho_RegionErosion13, &ho_ImageReduced23);
				GrayClosingRect(ho_ImageReduced23, &ho_ImageClosing3, 11, 11);
				SubImage(ho_ImageReduced23, ho_ImageClosing3, &ho_ImageSub6, 2, 128);
				Threshold(ho_ImageSub6, &ho_Region25, 0, 50);
				Connection(ho_Region25, &ho_ConnectedRegions27);
				SelectShape(ho_ConnectedRegions27, &ho_SelectedRegions27, "area", "and",
					30, 99999);
				ConcatObj(ho_SelectedRegions27, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");


				//B基准面压伤

				GenRectangle1(&ho_ROI_0, 2478.54, 1658.38, 2746.75, 2284.48);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced39);
				Threshold(ho_ImageReduced39, &ho_Region50, 158, 255);
				ClosingRectangle1(ho_Region50, &ho_RegionClosing36, 10, 10);
				ErosionRectangle1(ho_RegionClosing36, &ho_RegionErosion21, 11, 11);
				ReduceDomain(ho_ImageReduced39, ho_RegionErosion21, &ho_ImageReduced70);
				GrayClosingRect(ho_ImageReduced70, &ho_ImageClosing14, 11, 11);
				SubImage(ho_ImageReduced70, ho_ImageClosing14, &ho_ImageSub19, 1, 128);
				Threshold(ho_ImageSub19, &ho_Region76, 0, 60);
				Connection(ho_Region76, &ho_ConnectedRegions99);
				SelectShape(ho_ConnectedRegions99, &ho_SelectedRegions112, (HTuple("area").Append("anisometry")),
					"and", (HTuple(30).Append(0)), (HTuple(2100).Append(4)));
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions112, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}


				GenRectangle1(&ho_ROI_0, 2601.85, 3255.24, 2861.62, 4080.77);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced85);
				Threshold(ho_ImageReduced85, &ho_Region92, 168, 255);
				Connection(ho_Region92, &ho_ConnectedRegions140);
				SelectShape(ho_ConnectedRegions140, &ho_SelectedRegions164, "area", "and",
					33150, 99999);
				ClosingRectangle1(ho_SelectedRegions164, &ho_RegionClosing42, 70, 5);

				ErosionRectangle1(ho_RegionClosing42, &ho_RegionErosion27, 11, 21);
				MoveRegion(ho_RegionErosion27, &ho_RegionMoved31, -6, 0);
				ReduceDomain(ho_ImageReduced85, ho_RegionMoved31, &ho_ImageReduced86);
				GrayClosingRect(ho_ImageReduced86, &ho_ImageClosing16, 11, 11);
				SubImage(ho_ImageReduced86, ho_ImageClosing16, &ho_ImageSub25, 1, 128);
				Threshold(ho_ImageSub25, &ho_Region93, 0, 80);
				Connection(ho_Region93, &ho_ConnectedRegions132);
				SelectShape(ho_ConnectedRegions132, &ho_SelectedRegions151, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(35).Append(0.2)).Append(0)), ((HTuple(99999).Append(10)).Append(6)));
				SelectGray(ho_SelectedRegions151, ho_Image, &ho_SelectedRegions152, "mean",
					"and", 0, 180);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions152, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}


				//白色区域检测黑BLC压伤

				GenRectangle1(&ho_ROI_0, 2098.02, 759.969, 2400.11, 1691.36);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced91);
				Threshold(ho_ImageReduced91, &ho_Region98, 175, 255);
				Connection(ho_Region98, &ho_ConnectedRegions137);
				SelectShape(ho_ConnectedRegions137, &ho_SelectedRegions158, "area", "and",
					10000, 99999);
				RegionFeatures(ho_SelectedRegions158, "width", &hv_Value18);
				TupleMin(hv_Value18, &hv_Min1);
				SelectShape(ho_SelectedRegions158, &ho_SelectedRegions159, "width", "and",
					hv_Min1, hv_Min1);
				ClosingRectangle1(ho_SelectedRegions159, &ho_RegionClosing45, 30, 30);
				ErosionRectangle1(ho_RegionClosing45, &ho_RegionErosion29, 5, 5);
				ReduceDomain(ho_Image, ho_RegionErosion29, &ho_ImageReduced92);
				GrayClosingRect(ho_ImageReduced92, &ho_ImageClosing17, 31, 31);
				SubImage(ho_ImageReduced92, ho_ImageClosing17, &ho_ImageSub27, 1, 128);
				Threshold(ho_ImageSub27, &ho_Region99, 0, 50);
				Connection(ho_Region99, &ho_ConnectedRegions138);
				SelectShape(ho_ConnectedRegions138, &ho_SelectedRegions160, "area", "and",
					250, 99999);
				ConcatObj(ho_SelectedRegions160, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
			}
			if (0 != (int(hv_ImageNum == 10)))
			{

				GenRectangle1(&ho_ROI_0, 248.186, 8.27714, 2331.29, 698.746);
				//提取定位点
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					290000, 9995999);
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				hv_R = hv_Row21 - 2168;
				hv_C = hv_Column21 - 464;
				//过切

				GenRectangle1(&ho_ROI_0, 2410.429, 900.64, 2709.377, 4093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 30, 45, 0.2, 11, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 120, 1);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
					2750, 99999);
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>4)))
				{
					ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
				}

				Union1(ho_SelectedRegions77, &ho_RegionUnion42);
				ClosingRectangle1(ho_RegionUnion42, &ho_RegionClosing30, 10, 100);
				ShapeTrans(ho_RegionClosing30, &ho_RegionTrans3, "rectangle1");
				DilationRectangle1(ho_RegionTrans3, &ho_RegionDilation33, 901, 45);
				//提取镭雕检测区域

				GenRectangle1(&ho_ROI_0, 31.6829, 19.98, 2648.01, 4075.02);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);

				Threshold(ho_ImageReduced25, &ho_Region33, 75, 180);
				OpeningRectangle1(ho_Region33, &ho_RegionOpening48, 6, 3);
				Connection(ho_RegionOpening48, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 180, 80);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, (HTuple("area").Append("ratio")),
					"and", (HTuple(5e4).Append(0.15)), (HTuple(5e7).Append(9)));
				ErosionRectangle1(ho_SelectedRegions36, &ho_RegionErosion6, 21, 68);
				Difference(ho_RegionErosion6, ho_RegionDilation33, &ho_RegionErosion6);
				Union1(ho_RegionErosion6, &ho_RegionUnion2);
				Connection(ho_RegionUnion2, &ho_ConnectedRegions8);
				CountObj(ho_ConnectedRegions8, &hv_Number14);
				//for i := 1 to Number14 by 1
				//select_obj (ConnectedRegions8, ObjectSelected1, i)
				//get_region_polygon (ObjectSelected1, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)
				//endfor
				hv_R1.Clear();
				hv_R1[0] = 65;
				hv_R1[1] = 2049;
				hv_R1[2] = 2041;
				hv_R1[3] = 2064;
				hv_R1[4] = 2111;
				hv_R1[5] = 2189;
				hv_R1[6] = 2269;
				hv_R1[7] = 2348;
				hv_R1[8] = 2348;
				hv_R1[9] = 2195;
				hv_R1[10] = 2031;
				hv_R1[11] = 1966;
				hv_R1[12] = 1890;
				hv_R1[13] = 1817;
				hv_R1[14] = 1504;
				hv_R1[15] = 1079;
				hv_R1[16] = 1026;
				hv_R1[17] = 952;
				hv_R1[18] = 908;
				hv_R1[19] = 876;
				hv_R1[20] = 709;
				hv_R1[21] = 142;
				hv_R1[22] = 138;
				hv_R1[23] = 103;
				hv_R1[24] = 65;
				hv_R1[25] = 65;
				hv_C1.Clear();
				hv_C1[0] = 716;
				hv_C1[1] = 706;
				hv_C1[2] = 496;
				hv_C1[3] = 427;
				hv_C1[4] = 349;
				hv_C1[5] = 275;
				hv_C1[6] = 229;
				hv_C1[7] = 209;
				hv_C1[8] = 30;
				hv_C1[9] = 30;
				hv_C1[10] = 200;
				hv_C1[11] = 372;
				hv_C1[12] = 452;
				hv_C1[13] = 473;
				hv_C1[14] = 475;
				hv_C1[15] = 474;
				hv_C1[16] = 457;
				hv_C1[17] = 391;
				hv_C1[18] = 256;
				hv_C1[19] = 205;
				hv_C1[20] = 30;
				hv_C1[21] = 30;
				hv_C1[22] = 513;
				hv_C1[23] = 578;
				hv_C1[24] = 603;
				hv_C1[25] = 716;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				hv_R2.Clear();
				hv_R2[0] = 65;
				hv_R2[1] = 267;
				hv_R2[2] = 510;
				hv_R2[3] = 801;
				hv_R2[4] = 903;
				hv_R2[5] = 938;
				hv_R2[6] = 953;
				hv_R2[7] = 953;
				hv_R2[8] = 988;
				hv_R2[9] = 1141;
				hv_R2[10] = 1157;
				hv_R2[11] = 1378;
				hv_R2[12] = 1586;
				hv_R2[13] = 1740;
				hv_R2[14] = 1811;
				hv_R2[15] = 1834;
				hv_R2[16] = 2512;
				hv_R2[17] = 2512;
				hv_R2[18] = 2144;
				hv_R2[19] = 2011;
				hv_R2[20] = 65;
				hv_R2[21] = 65;
				hv_C2.Clear();
				hv_C2[0] = 1493;
				hv_C2[1] = 1574;
				hv_C2[2] = 1699;
				hv_C2[3] = 1895;
				hv_C2[4] = 1989;
				hv_C2[5] = 1989;
				hv_C2[6] = 2001;
				hv_C2[7] = 2033;
				hv_C2[8] = 2052;
				hv_C2[9] = 2223;
				hv_C2[10] = 2224;
				hv_C2[11] = 2513;
				hv_C2[12] = 2877;
				hv_C2[13] = 3299;
				hv_C2[14] = 3651;
				hv_C2[15] = 4065;
				hv_C2[16] = 4065;
				hv_C2[17] = 763;
				hv_C2[18] = 765;
				hv_C2[19] = 735;
				hv_C2[20] = 748;
				hv_C2[21] = 1493;
				GenRegionPolygonFilled(&ho_Region72, hv_R2, hv_C2);
				Union2(ho_Region71, ho_Region72, &ho_RegionUnion50);
				ErosionRectangle1(ho_RegionUnion50, &ho_RegionErosion1, 21, 21);
				MoveRegion(ho_RegionErosion1, &ho_RegionMoved36, hv_R, hv_C);
				Difference(ho_RegionMoved36, ho_RegionDilation33, &ho_RegionMoved36);
				ReduceDomain(ho_Image, ho_RegionMoved36, &ho_ImageReduced17);

				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 22);
				SetDictObject(ho_RegionMoved36, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 16);
				Det_LD_Region(hv_dd, (*hv_dt));


				//下侧镭雕缺陷
				GenRectangle1(&ho_ROI_0, 2581.94, -36.973, 2947.92, 4883.48);
				MoveRegion(ho_ROI_0, &ho_RegionMoved37, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				Threshold(ho_ImageReduced1, &ho_Region2, 159, 255);
				Connection(ho_Region2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 111150,
					9999999);
				ClosingRectangle1(ho_SelectedRegions5, &ho_RegionClosing21, 70, 20);
				OpeningRectangle1(ho_RegionClosing21, &ho_RegionOpening30, 80, 10);
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved16, -48, 0);
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved17, -10, 0);
				Difference(ho_RegionMoved16, ho_RegionMoved17, &ho_RegionDifference4);
				OpeningRectangle1(ho_RegionDifference4, &ho_RegionOpening56, 800, 10);
				Connection(ho_RegionOpening56, &ho_ConnectedRegions128);
				SelectShape(ho_ConnectedRegions128, &ho_SelectedRegions157, "area", "and",
					11150, 299999);
				ReduceDomain(ho_Image, ho_SelectedRegions157, &ho_ImageReduced20);

				RankRect(ho_ImageReduced20, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 106);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 22);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, (HTuple("area").Append("height")),
					"and", (HTuple(150).Append(15)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 118);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>230)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}








				GrayOpeningRect(ho_ImageReduced20, &ho_ImageClosing1, 30, 50);
				Threshold(ho_ImageClosing1, &ho_Region60, 0, 42);
				Connection(ho_Region60, &ho_ConnectedRegions63);
				SelectShape(ho_ConnectedRegions63, &ho_SelectedRegions6, (((HTuple("area").Append("column")).Append("ratio")).Append("height")),
					"and", (((HTuple(150).Append(1000)).Append(0.24)).Append(11)), (((HTuple(99999).Append(4300)).Append(9)).Append(90)));
				ConcatObj(ho_SelectedRegions6, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//B基准压伤
				ErosionRectangle1(ho_RegionOpening30, &ho_RegionErosion7, 11, 52);
				MoveRegion(ho_RegionErosion7, &ho_RegionMoved13, -20, 0);
				ReduceDomain(ho_Image, ho_RegionMoved13, &ho_ImageReduced32);
				//hei
				GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 19, 11);
				SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 2, 128);
				Threshold(ho_ImageSub5, &ho_Region23, 0, 50);
				Connection(ho_Region23, &ho_ConnectedRegions34);
				SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, ((HTuple("area").Append("ratio")).Append("anisometry")),
					"and", ((HTuple(35).Append(0.24)).Append(0)), ((HTuple(2000).Append(9)).Append(6)));
				SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions85, "mean",
					"and", 0, 180);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions85, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}
				Difference(ho_RegionClosing21, ho_RegionMoved13, &ho_RegionDifference15);
				OpeningRectangle1(ho_RegionDifference15, &ho_RegionOpening10, 8, 8);
				Connection(ho_RegionOpening10, &ho_ConnectedRegions23);
				SelectShape(ho_ConnectedRegions23, &ho_SelectedRegions30, "area", "and",
					15000, 799999);
				ReduceDomain(ho_Image, ho_SelectedRegions30, &ho_ImageReduced13);
				Threshold(ho_ImageReduced13, &ho_Region14, 0, 120);
				Connection(ho_Region14, &ho_ConnectedRegions24);
				SelectShape(ho_ConnectedRegions24, &ho_SelectedRegions33, (HTuple("area").Append("ratio")),
					"and", (HTuple(34).Append(0.07)), (HTuple(99999).Append(6)));
				ConcatObj(ho_SelectedRegions33, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				//bai
				//threshold (ImageOpening3, Region28, 245, 255)
				//connection (Region28, ConnectedRegions35)
				//select_shape (ConnectedRegions35, SelectedRegions34, ['area','column'], 'and', [20,440], [80,5000])
				//concat_obj (SelectedRegions34, dt.['63'], dt.['63'])
				//打磨痕
				Intensity(ho_ImageReduced32, ho_Image, &hv_Mean, &hv_Deviation);
				if (0 != (int(hv_Mean<118)))
				{
					if (0 != hv_c)
					{
						ConcatObj(ho_RegionErosion7, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					}
				}
				//RT缺陷
				MoveRegion(ho_RegionOpening30, &ho_RegionMoved35, 34, 0);
				Difference(ho_RegionMoved35, ho_RegionOpening30, &ho_RegionDifference58);
				ErosionRectangle1(ho_RegionDifference58, &ho_RegionErosion33, 11, 13);
				ReduceDomain(ho_Image, ho_RegionErosion33, &ho_ImageReduced99);
				GrayClosingRect(ho_ImageReduced99, &ho_ImageClosing12, 100, 1);
				//bai
				VarThreshold(ho_ImageClosing12, &ho_Region115, 95, 2, 0.2, 22, "light");
				Threshold(ho_ImageClosing12, &ho_Region88, 225, 255);
				Connection(ho_Region88, &ho_ConnectedRegions118);
				SelectShape(ho_ConnectedRegions118, &ho_SelectedRegions135, (HTuple("area").Append("ratio")),
					"and", (HTuple(80).Append(0.01)), (HTuple(99999).Append(5)));
				//concat_obj (SelectedRegions135, dt.['63'], dt.['63'])

				Threshold(ho_ImageReduced99, &ho_Region45, 75, 255);
				ClosingRectangle1(ho_Region45, &ho_RegionClosing16, 200, 2);
				Connection(ho_RegionClosing16, &ho_ConnectedRegions10);
				RegionFeatures(ho_ConnectedRegions10, "row", &hv_Value);
				TupleMax(hv_Value, &hv_Max);
				SelectShape(ho_ConnectedRegions10, &ho_SelectedRegions10, "row", "and", hv_Max,
					hv_Max);
				ReduceDomain(ho_ImageReduced99, ho_SelectedRegions10, &ho_ImageReduced36);
				Threshold(ho_ImageReduced36, &ho_Region46, 0, 80);
				OpeningRectangle1(ho_Region46, &ho_RegionOpening26, 3, 3);
				Connection(ho_RegionOpening26, &ho_ConnectedRegions29);
				SelectShape(ho_ConnectedRegions29, &ho_SelectedRegions47, (HTuple("area").Append("ratio")),
					"and", (HTuple(150).Append(0.1)), (HTuple(99999).Append(8)));
				ConcatObj(ho_SelectedRegions47, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
			}
			if (0 != (int(hv_ImageNum == 11)))
			{
				//提取定位点

				GenRectangle1(&ho_ROI_0, 1324.85, 3162.2, 2559.5, 4086.72);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 0, 50);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, "area", "and",
					90000, 995999);
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				hv_R = hv_Row11 - 2159;
				hv_C = hv_Column11 - 3468;

				//过切

				GenRectangle1(&ho_ROI_0, 2410.429, 13.64, 2739.377, 3093.05);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
				VarThreshold(ho_ImageReduced54, &ho_Region65, 40, 60, 0.2, 13, "dark");
				OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 1);
				ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 30, 1);
				Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
				SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
					2450, 99999);
				CountObj(ho_SelectedRegions77, &hv_Number);
				if (0 != (int(hv_Number>2)))
				{
					ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
				}

				//提取镭雕检测区域
				Union1(ho_SelectedRegions77, &ho_RegionUnion3);
				ClosingRectangle1(ho_RegionUnion3, &ho_RegionClosing, 50, 50);
				DilationRectangle1(ho_RegionClosing, &ho_RegionDilation37, 1311, 41);
				GenRectangle1(&ho_ROI_0, 0.6829, 19.98, 2598.01, 4075.02);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region33, 50, 160)
				//connection (Region33, ConnectedRegions36)
				//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 80, 80)
				//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 5e7)
				//erosion_rectangle1 (SelectedRegions36, RegionErosion6, 21, 21)
				//get_region_polygon (RegionErosion6, 10, Rows, Columns)
				//gen_region_polygon (Region73, Rows, Columns)

				hv_R1.Clear();
				hv_R1[0] = 11;
				hv_R1[1] = 2151;
				hv_R1[2] = 2154;
				hv_R1[3] = 2174;
				hv_R1[4] = 2245;
				hv_R1[5] = 2588;
				hv_R1[6] = 2588;
				hv_R1[7] = 1871;
				hv_R1[8] = 1850;
				hv_R1[9] = 1757;
				hv_R1[10] = 1597;
				hv_R1[11] = 1396;
				hv_R1[12] = 1108;
				hv_R1[13] = 770;
				hv_R1[14] = 387;
				hv_R1[15] = 11;
				hv_R1[16] = 11;
				hv_C1.Clear();
				hv_C1[0] = 4065;
				hv_C1[1] = 4065;
				hv_C1[2] = 3565;
				hv_C1[3] = 3512;
				hv_C1[4] = 3466;
				hv_C1[5] = 3456;
				hv_C1[6] = 30;
				hv_C1[7] = 30;
				hv_C1[8] = 490;
				hv_C1[9] = 914;
				hv_C1[10] = 1315;
				hv_C1[11] = 1655;
				hv_C1[12] = 2002;
				hv_C1[13] = 2295;
				hv_C1[14] = 2526;
				hv_C1[15] = 2676;
				hv_C1[16] = 4065;
				GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
				Difference(ho_Region71, ho_RegionDilation37, &ho_RegionDifference);
				MoveRegion(ho_RegionDifference, &ho_RegionDifference, hv_R, hv_C);
				ErosionRectangle1(ho_RegionDifference, &ho_RegionDifference, 11, 31);
				ReduceDomain(ho_Image, ho_RegionDifference, &ho_ImageReduced17);

				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
				SetDictObject(ho_RegionDifference, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_light", 60);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 59);
				SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 13);
				Det_LD_Region(hv_dd, (*hv_dt));

				//下侧镭雕缺陷
				GenRectangle1(&ho_ROI_0, 2631.94, -36.973, 2947.92, 4883.48);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced1);
				Threshold(ho_ImageReduced1, &ho_Region2, 160, 255);
				Connection(ho_Region2, &ho_ConnectedRegions5);
				SelectShape(ho_ConnectedRegions5, &ho_SelectedRegions5, "area", "and", 111150,
					9999999);
				Union1(ho_SelectedRegions5, &ho_RegionUnion23);
				ClosingRectangle1(ho_RegionUnion23, &ho_RegionClosing21, 100, 10);
				MoveRegion(ho_RegionClosing21, &ho_RegionMoved16, -57, 0);
				MoveRegion(ho_RegionClosing21, &ho_RegionMoved17, -15, 0);
				Difference(ho_RegionMoved16, ho_RegionMoved17, &ho_RegionDifference4);
				ReduceDomain(ho_Image, ho_RegionDifference4, &ho_ImageReduced20);
				RankRect(ho_ImageReduced20, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 106);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 22);
				Connection(ho_Region21, &ho_ConnectedRegions113);
				SelectShape(ho_ConnectedRegions113, &ho_SelectedRegions119, "area", "and",
					27, 99999);
				Union1(ho_SelectedRegions119, &ho_RegionUnion24);
				ClosingRectangle1(ho_RegionUnion24, &ho_RegionClosing39, 10, 10);
				Connection(ho_RegionClosing39, &ho_ConnectedRegions114);
				SelectShape(ho_ConnectedRegions114, &ho_SelectedRegions120, ((HTuple("area").Append("height")).Append("column")),
					"and", ((HTuple(150).Append(15)).Append(0)), ((HTuple(99999).Append(99)).Append(2800)));
				SelectGray(ho_SelectedRegions120, ho_Image, &ho_SelectedRegions116, "mean",
					"and", 0, 118);
				Union1(ho_SelectedRegions116, &ho_RegionUnion40);
				RegionFeatures(ho_RegionUnion40, "area", &hv_Value16);
				if (0 != (int(hv_Value16>230)))
				{
					ConcatObj(ho_RegionUnion40, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				}

				//B基准压伤
				if (0 != hv_c)
				{
					OpeningRectangle1(ho_RegionClosing21, &ho_RegionOpening29, 310, 10);
					ErosionRectangle1(ho_RegionOpening29, &ho_RegionErosion7, 11, 11);
					MoveRegion(ho_RegionErosion7, &ho_RegionMoved11, -24, 0);
					ReduceDomain(ho_Image, ho_RegionErosion7, &ho_ImageReduced32);
					GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 29, 21);
					SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 2, 128);
					Threshold(ho_ImageSub5, &ho_Region23, 0, 50);
					Connection(ho_Region23, &ho_ConnectedRegions34);

					GenRectangle1(&ho_ROI_0, 2623.66, 3376.04, 2689.9, 3661.27);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_ConnectedRegions34, ho_ROI_0, &ho_RegionDifference40);
					SelectShape(ho_RegionDifference40, &ho_SelectedRegions32, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", ((HTuple(35).Append(0.2)).Append(0)), ((HTuple(2000).Append(9)).Append(5)));
					SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions19, "mean",
						"and", 0, 160);
					CountObj(ho_SelectedRegions19, &hv_Number1);
					if (0 != (int(hv_Number1<35)))
					{
						ConcatObj(ho_SelectedRegions19, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
					}
					//打磨痕
					Intensity(ho_ImageReduced32, ho_Image, &hv_Mean, &hv_Deviation);
					if (0 != (int(hv_Mean<183)))
					{
						ConcatObj(ho_RegionErosion7, (*hv_dt).TupleGetDictObject("63"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "63");
					}
				}

				//过切

				GenRectangle1(&ho_ROI_0, 1968.51, 3056.87, 2610.01, 4092.57);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced105);
				Threshold(ho_ImageReduced105, &ho_Region29, 0, 55);
				OpeningRectangle1(ho_Region29, &ho_RegionOpening54, 1, 12);
				Connection(ho_RegionOpening54, &ho_ConnectedRegions39);
				SelectShape(ho_ConnectedRegions39, &ho_SelectedRegions198, "area", "and",
					15000, 999999);
				ClosingRectangle1(ho_SelectedRegions198, &ho_RegionClosing52, 5, 5);
				OpeningRectangle1(ho_RegionClosing52, &ho_RegionOpening51, 20, 70);
				Difference(ho_ConnectedRegions39, ho_RegionOpening51, &ho_RegionDifference64
					);
				Connection(ho_RegionDifference64, &ho_ConnectedRegions164);
				SelectShape(ho_ConnectedRegions164, &ho_SelectedRegions193, "area", "and",
					1300, 99999);
				ConcatObj(ho_SelectedRegions193, (*hv_dt).TupleGetDictObject("60"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "60");
			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 681.191, 3203.16, 2499.28, 3685.42);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced46);
				Threshold(ho_ImageReduced46, &ho_Region58, 179, 255);
				Connection(ho_Region58, &ho_ConnectedRegions55);
				SelectShape(ho_ConnectedRegions55, &ho_SelectedRegions55, (HTuple("area").Append("circularity")),
					"and", (HTuple(7000).Append(0.5)), (HTuple(999999).Append(1)));
				SmallestRectangle1(ho_SelectedRegions55, &hv_Row11, &hv_Column11, &hv_Row21,
					&hv_Column21);
				CountObj(ho_SelectedRegions55, &hv_Number19);
				if (0 != hv_Number19)
				{
					hv_R = hv_Row11 - 2100;
					hv_C = hv_Column11 - 3374;
					//过切
					GenRectangle1(&ho_ROI_0, 2260.429, 665.64, 2628.377, 1293.05);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced54);
					VarThreshold(ho_ImageReduced54, &ho_Region65, 2, 45, 0.2, 11, "dark");
					OpeningRectangle1(ho_Region65, &ho_RegionOpening20, 15, 2);
					ClosingRectangle1(ho_RegionOpening20, &ho_RegionClosing19, 40, 1);
					Connection(ho_RegionClosing19, &ho_ConnectedRegions75);
					SelectShape(ho_ConnectedRegions75, &ho_SelectedRegions77, "width", "and",
						100, 99999);
					CountObj(ho_SelectedRegions77, &hv_Number);
					Union1(ho_SelectedRegions77, &ho_RegionUnion35);
					RegionFeatures(ho_RegionUnion35, "area", &hv_Value3);
					if (0 != (HTuple(int(hv_Number>0)).TupleAnd(int(hv_Value3>1000))))
					{
						ConcatObj(ho_SelectedRegions77, (*hv_dt).TupleGetDictObject("62"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "62");
					}
					//开裂
					Connection(ho_Region65, &ho_ConnectedRegions85);
					SelectShape(ho_ConnectedRegions85, &ho_SelectedRegions91, (HTuple("area").Append("width")),
						"and", (HTuple(900).Append(120)), (HTuple(99999).Append(999)));
					ConcatObj(ho_SelectedRegions91, (*hv_dt).TupleGetDictObject("52"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "52");

					//提取镭雕检测区域

					//gen_rectangle1 (ROI_0, 31.6829, 19.98, 2618.01, 4075.02)

					//reduce_domain (Image, ROI_0, ImageReduced25)
					//threshold (ImageReduced25, Region33, 65, 160)
					//opening_rectangle1 (Region33, RegionOpening14, 2, 2)
					//connection (RegionOpening14, ConnectedRegions36)
					//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 30, 30)
					//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 5e7)
					//erosion_rectangle1 (SelectedRegions36, RegionErosion6, 51, 61)
					//connection (RegionErosion6, ConnectedRegions26)
					//select_shape (ConnectedRegions26, SelectedRegions26, 'area', 'and', 5e5, 5e7)
					//get_region_polygon (SelectedRegions26, 10, Rows, Columns)
					//gen_region_polygon (Region73, Rows, Columns)

					hv_R1.Clear();
					hv_R1[0] = 62;
					hv_R1[1] = 146;
					hv_R1[2] = 1349;
					hv_R1[3] = 1431;
					hv_R1[4] = 1477;
					hv_R1[5] = 1531;
					hv_R1[6] = 1839;
					hv_R1[7] = 1843;
					hv_R1[8] = 1866;
					hv_R1[9] = 1900;
					hv_R1[10] = 2170;
					hv_R1[11] = 2155;
					hv_R1[12] = 2155;
					hv_R1[13] = 2177;
					hv_R1[14] = 2203;
					hv_R1[15] = 2293;
					hv_R1[16] = 2340;
					hv_R1[17] = 2342;
					hv_R1[18] = 2369;
					hv_R1[19] = 2371;
					hv_R1[20] = 2396;
					hv_R1[21] = 2394;
					hv_R1[22] = 2337;
					hv_R1[23] = 2320;
					hv_R1[24] = 2317;
					hv_R1[25] = 2345;
					hv_R1[26] = 2388;
					hv_R1[27] = 2588;
					hv_R1[28] = 2588;
					hv_R1[29] = 2265;
					hv_R1[30] = 2203;
					hv_R1[31] = 2163;
					hv_R1[32] = 2141;
					hv_R1[33] = 2137;
					hv_R1[34] = 62;
					hv_R1[35] = 62;
					hv_C1.Clear();
					hv_C1[0] = 3112;
					hv_C1[1] = 3094;
					hv_C1[2] = 3091;
					hv_C1[3] = 3072;
					hv_C1[4] = 3010;
					hv_C1[5] = 2979;
					hv_C1[6] = 2969;
					hv_C1[7] = 2243;
					hv_C1[8] = 2207;
					hv_C1[9] = 2195;
					hv_C1[10] = 2197;
					hv_C1[11] = 2166;
					hv_C1[12] = 2081;
					hv_C1[13] = 2045;
					hv_C1[14] = 2031;
					hv_C1[15] = 2031;
					hv_C1[16] = 2049;
					hv_C1[17] = 1985;
					hv_C1[18] = 1942;
					hv_C1[19] = 1878;
					hv_C1[20] = 1830;
					hv_C1[21] = 1622;
					hv_C1[22] = 1599;
					hv_C1[23] = 1563;
					hv_C1[24] = 1337;
					hv_C1[25] = 1297;
					hv_C1[26] = 1276;
					hv_C1[27] = 1273;
					hv_C1[28] = 628;
					hv_C1[29] = 628;
					hv_C1[30] = 613;
					hv_C1[31] = 581;
					hv_C1[32] = 513;
					hv_C1[33] = 45;
					hv_C1[34] = 45;
					hv_C1[35] = 3112;
					GenRegionPolygonFilled(&ho_Region71, hv_R1, hv_C1);
					ErosionRectangle1(ho_Region71, &ho_RegionErosion17, 21, 21);
					MoveRegion(ho_RegionErosion17, &ho_RegionMoved6, hv_R, hv_C);

					ReduceDomain(ho_Image, ho_RegionMoved6, &ho_ImageReduced17);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "auto_thre", 1.4);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black", 30);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "var_dark_value", 20);
					SetDictObject(ho_RegionMoved6, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "dyn_black_zangwu", 19);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "max_gray_mean_value", 60);
					SetDictTuple(hv_dd.TupleGetDictTuple("LD"), "der_black_value", 14);
					Det_LD_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number19 == 0)))
				{
					ErosionRectangle1(ho_ROI_0, &ho_ROI_0, 121, 501);
					MoveRegion(ho_ROI_0, &ho_ROI_0, 270, 0);
					ConcatObj(ho_ROI_0, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}

				//B基准压伤

				GenRectangle1(&ho_ROI_0, 2566.31, 31.6829, 2896.65, 2524.39);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced24);
				Threshold(ho_ImageReduced24, &ho_Region30, 160, 255);
				Connection(ho_Region30, &ho_ConnectedRegions43);


				RegionFeatures(ho_ConnectedRegions43, "area", &hv_Value6);
				TupleMax(hv_Value6, &hv_Max2);
				SelectShape(ho_ConnectedRegions43, &ho_SelectedRegions39, "area", "and",
					hv_Max2, hv_Max2);
				//closing_rectangle1 (SelectedRegions39, RegionClosing10, 10, 30)
				OpeningRectangle1(ho_SelectedRegions39, &ho_RegionOpening22, 30, 30);
				ClosingRectangle1(ho_RegionOpening22, &ho_RegionClosing28, 60, 30);
				ErosionRectangle1(ho_RegionClosing28, &ho_RegionErosion7, 21, 51);
				MoveRegion(ho_RegionErosion7, &ho_RegionMoved4, -20, 0);
				ReduceDomain(ho_Image, ho_RegionMoved4, &ho_ImageReduced32);
				GrayClosingRect(ho_ImageReduced32, &ho_ImageOpening3, 29, 21);
				SubImage(ho_ImageReduced32, ho_ImageOpening3, &ho_ImageSub5, 1.8, 128);
				Threshold(ho_ImageSub5, &ho_Region23, 0, 70);
				Connection(ho_Region23, &ho_ConnectedRegions34);
				SelectShape(ho_ConnectedRegions34, &ho_SelectedRegions32, (HTuple("area").Append("anisometry")),
					"and", (HTuple(25).Append(0)), (HTuple(2000).Append(4.5)));
				SelectGray(ho_SelectedRegions32, ho_Image, &ho_SelectedRegions121, "mean",
					"and", 0, 175);
				if (0 != hv_c)
				{
					ConcatObj(ho_SelectedRegions121, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");
				}

				Difference(ho_RegionClosing28, ho_RegionMoved4, &ho_RegionDifference32);
				OpeningRectangle1(ho_RegionDifference32, &ho_RegionOpening31, 20, 10);
				Connection(ho_RegionOpening31, &ho_ConnectedRegions87);
				SelectShape(ho_ConnectedRegions87, &ho_SelectedRegions1, "area", "and", 10050,
					699999);
				ErosionRectangle1(ho_SelectedRegions1, &ho_RegionErosion19, 11, 3);
				ReduceDomain(ho_Image, ho_RegionErosion19, &ho_ImageReduced66);
				GrayClosingRect(ho_ImageReduced66, &ho_ImageClosing6, 21, 21);
				SubImage(ho_ImageReduced66, ho_ImageClosing6, &ho_ImageSub17, 1, 128);
				Threshold(ho_ImageSub17, &ho_Region68, 0, 30);
				Connection(ho_Region68, &ho_ConnectedRegions88);
				SelectShape(ho_ConnectedRegions88, &ho_SelectedRegions101, "area", "and",
					90, 99999);
				ConcatObj(ho_SelectedRegions101, (*hv_dt).TupleGetDictObject("55"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "55");


				//B基准塑胶压伤

				GenRectangle1(&ho_ROI_0, 2319.59, 1722.75, 2629.72, 2348.85);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced102);
				Threshold(ho_ImageReduced102, &ho_Region108, 220, 255);
				Connection(ho_Region108, &ho_ConnectedRegions153);
				SelectShape(ho_ConnectedRegions153, &ho_SelectedRegions180, "area", "and",
					15000, 99999);
				ClosingCircle(ho_SelectedRegions180, &ho_RegionClosing49, 33.5);
				ErosionRectangle1(ho_RegionClosing49, &ho_RegionErosion34, 8, 27);
				ReduceDomain(ho_ImageReduced102, ho_RegionErosion34, &ho_ImageReduced103);
				GrayClosingRect(ho_ImageReduced103, &ho_ImageClosing20, 11, 11);
				SubImage(ho_ImageReduced103, ho_ImageClosing20, &ho_ImageSub30, 1, 128);
				Threshold(ho_ImageSub30, &ho_Region109, 0, 60);
				Connection(ho_Region109, &ho_ConnectedRegions154);
				SelectShape(ho_ConnectedRegions154, &ho_SelectedRegions181, "area", "and",
					100, 99999);
				ConcatObj(ho_SelectedRegions181, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//BLC漏铁
				GenRectangle1(&ho_ROI_0, 1980.21, 93.1229, 2694.08, 894.769);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced40);
				Threshold(ho_ImageReduced40, &ho_Region32, 0, 40);
				Connection(ho_Region32, &ho_ConnectedRegions77);
				SelectShape(ho_ConnectedRegions77, &ho_SelectedRegions75, "area", "and",
					1500, 999999);
				Union1(ho_SelectedRegions75, &ho_RegionUnion55);
				ClosingRectangle1(ho_RegionUnion55, &ho_RegionClosing51, 100, 4);
				OpeningRectangle1(ho_RegionClosing51, &ho_RegionOpening4, 100, 10);
				OpeningRectangle1(ho_RegionOpening4, &ho_RegionOpening33, 10, 160);
				Difference(ho_RegionOpening4, ho_RegionOpening33, &ho_RegionDifference70);
				Connection(ho_RegionDifference70, &ho_ConnectedRegions90);
				SelectShape(ho_ConnectedRegions90, &ho_SelectedRegions79, (HTuple("area").Append("width")),
					"and", (HTuple(150).Append(5)), (HTuple(99999).Append(50)));
				Union1(ho_SelectedRegions79, &ho_RegionUnion57);
				RegionFeatures(ho_RegionUnion57, "area", &hv_Value24);
				if (0 != (int(hv_Value24>1600)))
				{
					ConcatObj(ho_RegionUnion57, (*hv_dt).TupleGetDictObject("45"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "45");
				}
				//焊缝过切
				GenRectangle1(&ho_ROI_0, 2580.81, 554.635, 2854.85, 1285.97);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced75);
				Threshold(ho_ImageReduced75, &ho_Region40, 177, 255);
				OpeningRectangle1(ho_Region40, &ho_RegionOpening37, 2, 2);
				Connection(ho_RegionOpening37, &ho_ConnectedRegions92);
				SelectShape(ho_ConnectedRegions92, &ho_SelectedRegions104, "area", "and",
					8500, 919999);
				CountObj(ho_SelectedRegions104, &hv_Number28);
				if (0 != hv_Number28)
				{
					RegionFeatures(ho_SelectedRegions104, "row", &hv_Value19);
					TupleMax(hv_Value19, &hv_Max12);
					SelectShape(ho_SelectedRegions104, &ho_SelectedRegions129, "row", "and",
						hv_Max12 - 5, hv_Max12 + 5);
					ClosingRectangle1(ho_SelectedRegions129, &ho_RegionClosing55, 20, 20);
					OpeningRectangle1(ho_RegionClosing55, &ho_RegionOpening39, 100, 6);
					ShapeTrans(ho_RegionOpening39, &ho_RegionTrans10, "rectangle2");
					Difference(ho_RegionTrans10, ho_RegionOpening39, &ho_RegionDifference71
						);
					Connection(ho_RegionDifference71, &ho_ConnectedRegions93);
					SelectShape(ho_ConnectedRegions93, &ho_SelectedRegions105, (HTuple("area").Append("height")),
						"and", (HTuple(1500).Append(10)), (HTuple(99999).Append(99)));
					ConcatObj(ho_SelectedRegions105, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					CountObj(ho_SelectedRegions105, &hv_Number11);
					if (0 != (int(hv_Number11 == 0)))
					{
						GenEmptyRegion(&ho_EmptyRegion);
						MoveRegion(ho_RegionTrans10, &ho_RegionMoved19, -44, 0);
						MoveRegion(ho_RegionTrans10, &ho_RegionMoved21, -5, 0);
						Difference(ho_RegionMoved19, ho_RegionMoved21, &ho_RegionDifference54
							);
						Difference(ho_RegionDifference54, ho_RegionClosing28, &ho_RegionDifference45
							);
						ErosionRectangle1(ho_RegionDifference45, &ho_RegionErosion10, 101, 5);
						ReduceDomain(ho_ImageReduced75, ho_RegionErosion10, &ho_ImageReduced62
							);
						//test*
						RankRect(ho_ImageReduced62, &ho_ImageRank, 10, 5, 30);
						GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
						SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
						Threshold(ho_ImageSub14, &ho_Region21, 0, 45);
						Connection(ho_Region21, &ho_ConnectedRegions112);
						SelectShape(ho_ConnectedRegions112, &ho_SelectedRegions117, (HTuple("area").Append("height")),
							"and", (HTuple(150).Append(6)), (HTuple(99999).Append(99)));
						SelectGray(ho_SelectedRegions117, ho_Image, &ho_SelectedRegions7, "mean",
							"and", 0, 105);
						ConcatObj(ho_SelectedRegions7, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

						//长横
						//gray_closing_rect (ImageRank, ImageClosing15, 1, 170)
						//sub_image (ImageRank, ImageClosing15, ImageSub3, 2, 128)
						//threshold (ImageSub3, Region21, 0, 45)
						//connection (Region21, ConnectedRegions112)
						//select_shape (ConnectedRegions112, SelectedRegions117, ['area','height','width'], 'and', [390,3,50], [1200,99,999])
						//select_gray (SelectedRegions117, Image, SelectedRegions7, 'mean', 'and', 0, 85)
						//concat_obj (SelectedRegions7, dt.['64'], dt.['64'])
						//end*

						ErosionRectangle1(ho_RegionErosion10, &ho_RegionErosion23, 41, 1);
						MoveRegion(ho_RegionErosion23, &ho_RegionMoved46, 0, -20);
						ReduceDomain(ho_Image, ho_RegionMoved46, &ho_ImageReduced76);
						VarThreshold(ho_ImageReduced76, &ho_Region66, 55, 3, 0.2, 31, "dark");
						Connection(ho_Region66, &ho_ConnectedRegions81);
						SelectShape(ho_ConnectedRegions81, &ho_SelectedRegions89, "area", "and",
							30, 99999);
						MedianRect(ho_ImageReduced76, &ho_ImageMedian7, 3, 3);
						MedianRect(ho_ImageReduced76, &ho_ImageMedian8, 65, 29);
						DynThreshold(ho_ImageMedian7, ho_ImageMedian8, &ho_RegionDynThresh5,
							58, "light");
						Connection(ho_RegionDynThresh5, &ho_ConnectedRegions82);
						SelectShape(ho_ConnectedRegions82, &ho_SelectedRegions90, (HTuple("area").Append("ratio")),
							"and", (HTuple(16).Append(0.6)), (HTuple(99999).Append(3)));
						SelectShape(ho_ConnectedRegions82, &ho_SelectedRegions122, (HTuple("area").Append("circularity")),
							"and", (HTuple(14).Append(0.4)), (HTuple(90).Append(1)));
						CountObj(ho_SelectedRegions122, &hv_Number21);
						if (0 != (int(hv_Number21<10)))
						{
							Union2(ho_SelectedRegions89, ho_SelectedRegions90, &ho_RegionUnion46
								);
							Union1(ho_RegionUnion46, &ho_RegionUnion47);
							ClosingRectangle1(ho_RegionUnion47, &ho_RegionClosing34, 5, 5);
							Connection(ho_RegionClosing34, &ho_ConnectedRegions83);
							SelectShape(ho_ConnectedRegions83, &ho_SelectedRegions93, "area", "and",
								110, 99999);
							Difference(ho_ConnectedRegions83, ho_SelectedRegions89, &ho_RegionDifference49
								);
							Difference(ho_RegionDifference49, ho_SelectedRegions90, &ho_RegionDifference50
								);
							Connection(ho_RegionDifference50, &ho_ConnectedRegions84);
							SelectShape(ho_ConnectedRegions84, &ho_SelectedRegions92, "area", "and",
								10, 99999);
							CountObj(ho_ConnectedRegions83, &hv_Number12);
							CountObj(ho_SelectedRegions92, &hv_Number13);
							if (0 != hv_Number13)
							{
								{
									HTuple end_val1806 = hv_Number12;
									HTuple step_val1806 = 1;
									for (hv_i = 1; hv_i.Continue(end_val1806, step_val1806); hv_i += step_val1806)
									{
										SelectObj(ho_ConnectedRegions83, &ho_ObjectSelected, hv_i);
										Intersection(ho_ObjectSelected, ho_SelectedRegions92, &ho_RegionIntersection
											);
										AreaCenter(ho_RegionIntersection, &hv_Area1, &hv_Row1, &hv_Column1);

										if (0 != hv_Area1)
										{
											Intersection(ho_ObjectSelected, ho_SelectedRegions89, &ho_RegionIntersection8
												);
											AreaCenter(ho_RegionIntersection8, &hv_Area8, &hv_Row8, &hv_Column8);
											if (0 != (int(hv_Area8>0)))
											{
												ConcatObj(ho_EmptyRegion, ho_ObjectSelected, &ho_EmptyRegion
													);
											}
										}
									}
								}
								Union1(ho_EmptyRegion, &ho_RegionUnion48);

								RegionFeatures(ho_RegionUnion48, "area", &hv_Value12);
								if (0 != (int(hv_Value12>200)))
								{
									SelectGray(ho_EmptyRegion, ho_Image, &ho_SelectedRegions118, "mean",
										"and", 0, 135);
									ConcatObj(ho_SelectedRegions118, (*hv_dt).TupleGetDictObject("64"),
										&ho___Tmp_Obj_0);
									SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
								}
								//hei
								GrayClosingRect(ho_ImageReduced62, &ho_ImageClosing5, 2, 2);
								RankRect(ho_ImageClosing5, &ho_ImageRank, 15, 15, 125);
								Threshold(ho_ImageRank, &ho_Region67, 0, 45);
								OpeningRectangle1(ho_Region67, &ho_RegionOpening45, 3, 6);
								Connection(ho_Region67, &ho_ConnectedRegions86);
								SelectShape(ho_ConnectedRegions86, &ho_SelectedRegions94, (HTuple("area").Append("height")),
									"and", (HTuple(150).Append(18)), (HTuple(99999).Append(99)));
								ConcatObj(ho_SelectedRegions94, (*hv_dt).TupleGetDictObject("64"),
									&ho___Tmp_Obj_0);
								SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
							}
						}
					}
				}
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//提取定位点



				GenRectangle1(&ho_ROI_0, 1857.33, 19.98, 2584.48, 2442.47);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 65, 255);
				Connection(ho_Region1, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 19, 17);

				GenRectangle1(&ho_ROI_0, 1950.88, 2316.88, 2478.88, 2472.06);

				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				GenRectangle1(&ho_ROI_0, 1857.33, 19.98, 2684.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 63, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening11, 15, 2);
				Connection(ho_RegionOpening11, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 80, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 18);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				GenRectangle1(&ho_ROI_0, 1857.33, 19.98, 2584.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 62, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening1, 7, 3);
				Connection(ho_RegionOpening1, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 23);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				GenRectangle1(&ho_ROI_0, 1857.33, 1219.98, 2484.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 62, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening21, 5, 3);
				Connection(ho_RegionOpening21, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 30);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 16);

				GenRectangle1(&ho_ROI_0, 2038.72, 1716.89, 2490.86, 1822.22);
				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				GenRectangle1(&ho_ROI_0, 1787.33, 1459.98, 2484.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 66, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening27, 5, 3);
				Connection(ho_RegionOpening27, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(30150).Append(100)), (HTuple(999999).Append(999)));
				CountObj(ho_SelectedRegions, &hv_Number27);
				if (0 != hv_Number27)
				{
					RegionFeatures(ho_SelectedRegions, "row", &hv_Value13);
					TupleMax(hv_Value13, &hv_Max6);
					SelectShape(ho_SelectedRegions, &ho_SelectedRegions126, "row", "and", hv_Max6,
						hv_Max6);
					ClosingRectangle1(ho_SelectedRegions126, &ho_RegionClosing4, 40, 40);
					ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 26);
					Union1(ho_RegionErosion3, &ho_RegionUnion9);

					SetDictObject(ho_RegionUnion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
					Det_Bjizhun_region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				GenRectangle1(&ho_ROI_0, 1797.33, 10.98, 2424.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 58, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening42, 5, 3);
				Connection(ho_RegionOpening42, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 70, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 16);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				GenRectangle1(&ho_ROI_0, 1897.33, 10.98, 2424.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 78, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening44, 7, 3);
				Connection(ho_RegionOpening44, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(150)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 12);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));

			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				GenRectangle1(&ho_ROI_0, 1837.33, 10.98, 2524.48, 4442.47);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced4);
				Threshold(ho_ImageReduced4, &ho_Region1, 68, 255);
				OpeningRectangle1(ho_Region1, &ho_RegionOpening24, 5, 2);
				Connection(ho_RegionOpening24, &ho_ConnectedRegions1);
				SelectShape(ho_ConnectedRegions1, &ho_SelectedRegions, (HTuple("area").Append("height")),
					"and", (HTuple(100150).Append(120)), (HTuple(999999).Append(999)));
				ClosingRectangle1(ho_SelectedRegions, &ho_RegionClosing4, 40, 40);
				ErosionRectangle1(ho_RegionClosing4, &ho_RegionErosion3, 16, 22);

				GenRectangle1(&ho_ROI_0, 2052.68, 2341.21, 2521.85, 2458.32);
				Difference(ho_RegionErosion3, ho_ROI_0, &ho_RegionErosion3);
				ReduceDomain(ho_Image, ho_RegionErosion3, &ho_ImageReduced5);
				SetDictObject(ho_RegionErosion3, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 0);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				GenRectangle1(&ho_ROI_0, 935.68, 1797.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(1200)), (HTuple(999999).Append(9999)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 36, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				ErosionRectangle1(ho_RegionDifference10, &ho_RegionErosion14, 1, 11);


				GenRectangle1(&ho_ROI_0, 1038.15, 1951.27, 1494.52, 2454.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 65000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionErosion14, ho_RegionDilation10, &ho_RegionDifference5
					);
				ErosionRectangle1(ho_RegionDifference5, &ho_RegionErosion8, 11, 11);
				SetDictObject(ho_RegionErosion8, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));

			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 955.68, 0.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, "area", "and", 60150,
					999999);
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 36, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				ErosionRectangle1(ho_RegionDifference10, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 925.68, 0.2, 1465.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1189.52, 2038.72, 2015.32, 3800);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 20);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					10050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans9, "convex");
				Difference(ho_RegionDifference10, ho_RegionTrans9, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 925.68, 0.2, 1465.28, 2500.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 150, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference27);
				GenRectangle1(&ho_ROI_0, 1138.15, 1501.27, 1494.52, 2454.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 15000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionDifference27, ho_RegionDilation10, &ho_RegionDifference5
					);
				Connection(ho_RegionDifference5, &ho_ConnectedRegions51);
				SelectShape(ho_ConnectedRegions51, &ho_SelectedRegions59, "width", "and",
					1500, 99999);
				ErosionRectangle1(ho_SelectedRegions59, &ho_RegionErosion8, 11, 11);
				SetDictObject(ho_RegionErosion8, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				GenRectangle1(&ho_ROI_0, 825.68, 0.2, 1525.28, 1992.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(50150).Append(1700)), (HTuple(99999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 39, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 85, 0);
				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);
				GenRectangle1(&ho_ROI_0, 1058.15, 1001.27, 1594.52, 1954.85);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced16);
				ScaleImage(ho_ImageReduced16, &ho_ImageScaled3, 2.01, -30);
				Threshold(ho_ImageScaled3, &ho_Region5, 0, 10);
				OpeningRectangle1(ho_Region5, &ho_RegionOpening2, 3, 3);
				Connection(ho_RegionOpening2, &ho_ConnectedRegions3);
				SelectShape(ho_ConnectedRegions3, &ho_SelectedRegions24, "area", "and", 15000,
					969999);
				DilationRectangle1(ho_SelectedRegions24, &ho_RegionDilation10, 11, 11);
				Difference(ho_RegionDifference10, ho_RegionDilation10, &ho_RegionDifference5
					);
				Connection(ho_RegionDifference5, &ho_ConnectedRegions45);
				SelectShape(ho_ConnectedRegions45, &ho_SelectedRegions49, "area", "and",
					15000, 999999);
				ErosionRectangle1(ho_RegionDifference5, &ho_SelectedRegions49, 11, 11);
				Connection(ho_SelectedRegions49, &ho_ConnectedRegions78);
				SelectShape(ho_ConnectedRegions78, &ho_SelectedRegions86, "area", "and",
					15000, 996999);
				SetDictObject(ho_SelectedRegions49, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 0.2, 1595.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 140, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1093.36, 3276.66, 1807.96, 4137.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 18);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans4, "rectangle1");
				MoveRegion(ho_RegionTrans4, &ho_RegionMoved26, 0, 380);
				Union2(ho_RegionDilation12, ho_RegionMoved26, &ho_RegionUnion11);
				Difference(ho_RegionDifference10, ho_RegionUnion11, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 27)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 0.2, 1495.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(30150).Append(2000)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 130, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 1093.36, 0.66, 1807.96, 940.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 18);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);
				ShapeTrans(ho_RegionDilation12, &ho_RegionTrans4, "rectangle1");

				Difference(ho_RegionDifference10, ho_RegionTrans4, &ho_RegionDifference14
					);
				ErosionRectangle1(ho_RegionDifference14, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 28)))
			{
				GenRectangle1(&ho_ROI_0, 755.68, 2000.2, 1495.28, 4092.57);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced6);
				ScaleImage(ho_ImageReduced6, &ho_ImageScaled4, 10.01, -100);
				Threshold(ho_ImageScaled4, &ho_Region11, 0, 20);
				Connection(ho_Region11, &ho_ConnectedRegions6);
				SelectShape(ho_ConnectedRegions6, &ho_SelectedRegions28, (HTuple("area").Append("width")),
					"and", (HTuple(10150).Append(1500)), (HTuple(9999999).Append(5000)));
				DilationRectangle1(ho_SelectedRegions28, &ho_RegionDilation11, 1, 500);
				MoveRegion(ho_RegionDilation11, &ho_RegionMoved18, -250, 0);
				MoveRegion(ho_RegionMoved18, &ho_RegionMoved20, 42, 0);
				MoveRegion(ho_RegionMoved20, &ho_RegionMoved23, 130, 0);

				Difference(ho_RegionMoved23, ho_RegionMoved20, &ho_RegionDifference10);

				GenRectangle1(&ho_ROI_0, 980.36, 1840.66, 1490.96, 2950.03);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced19);

				Threshold(ho_ImageReduced19, &ho_Region17, 0, 18);
				OpeningRectangle1(ho_Region17, &ho_RegionOpening6, 2, 2);
				Connection(ho_RegionOpening6, &ho_ConnectedRegions13);
				SelectShape(ho_ConnectedRegions13, &ho_SelectedRegions35, "area", "and",
					70050, 999999);
				ClosingRectangle1(ho_SelectedRegions35, &ho_RegionClosing7, 120, 130);
				DilationRectangle1(ho_RegionClosing7, &ho_RegionDilation12, 11, 15);

				Difference(ho_RegionDifference10, ho_RegionDilation12, &ho_RegionDifference14
					);

				GenRectangle1(&ho_ROI_0, 1097.91, 3249.6, 1721.29, 4118.74);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced3);
				Threshold(ho_ImageReduced3, &ho_Region6, 0, 30);
				OpeningRectangle1(ho_Region6, &ho_RegionOpening, 4, 5);
				Connection(ho_RegionOpening, &ho_ConnectedRegions14);
				SelectShape(ho_ConnectedRegions14, &ho_SelectedRegions16, (HTuple("area").Append("height")),
					"and", (HTuple(15000).Append(150)), (HTuple(999999).Append(999)));
				Union1(ho_SelectedRegions16, &ho_RegionUnion43);
				ClosingRectangle1(ho_RegionUnion43, &ho_RegionClosing2, 130, 150);
				OpeningRectangle1(ho_RegionClosing2, &ho_RegionOpening5, 200, 10);
				DilationRectangle1(ho_RegionOpening5, &ho_RegionDilation2, 360, 11);
				OpeningCircle(ho_RegionDilation2, &ho_RegionOpening7, 63.5);
				MoveRegion(ho_RegionOpening7, &ho_RegionMoved1, -60, -580);
				Difference(ho_RegionDifference14, ho_RegionMoved1, &ho_RegionDifference6);
				ErosionRectangle1(ho_RegionDifference6, &ho_RegionErosion14, 1, 11);
				SetDictObject(ho_RegionErosion14, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("Bjizhun"), "mode", 1);
				Det_Bjizhun_region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 29)))
			{

			}
			if (0 != (int(hv_ImageNum == 30)))
			{


			}
			if (0 != (int(hv_ImageNum == 31)))
			{

			}
			if (0 != (int(hv_ImageNum == 32)))
			{

			}
			if (0 != (int(hv_ImageNum == 33)))
			{

			}
			if (0 != (int(hv_ImageNum == 34)))
			{

			}

		}
		if (0 != (HTuple(int(hv_StaNum == 4)).TupleAnd(int(hv_CamNum == 1))))
		{
			if (0 != (int(hv_ImageNum == 1)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 0.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				//*test
				ScaleImage(ho_ImageReduced25, &ho_ImageScaled, 2.01, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 200, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 160, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 30);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 51, 51);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点

				GenRectangle1(&ho_ROI_0, 143.67, 353.083, 855.267, 844.734);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				AutoThreshold(ho_ImageReduced63, &ho_Regions1, 2.5);
				Connection(ho_Regions1, &ho_ConnectedRegions124);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 110);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions95, "area", "and",
					32600, 199999);
				SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions148, "mean",
					"and", 0, 110);
				AreaCenter(ho_SelectedRegions148, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 608;
				hv_C = hv_Column2 - 660;

				GenRectangle1(&ho_ROI_0, 662.364, 3060.78, 1100.61, 3680.95);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationRectangle1(ho_SelectedRegions65, &ho_RegionDilation24, 31, 31);
				//检测园内溢胶
				ClosingCircle(ho_SelectedRegions65, &ho_RegionClosing1, 53.5);
				Difference(ho_RegionClosing1, ho_SelectedRegions65, &ho_RegionDifference1
					);
				Connection(ho_RegionDifference1, &ho_ConnectedRegions2);
				SelectShape(ho_ConnectedRegions2, &ho_SelectedRegions9, (HTuple("area").Append("ratio")),
					"and", (HTuple(450).Append(0.18)), (HTuple(99999).Append(8)));
				ConcatObj(ho_SelectedRegions9, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");


				GenRectangle1(&ho_ROI_0, 1249.89, -27.1035, 1415.35, 420.859);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
				Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
				Connection(ho_Region42, &ho_ConnectedRegions60);
				SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
					1000, 99999);
				CountObj(ho_SelectedRegions66, &hv_Number3);
				if (0 != (int(hv_Number3 == 2)))
				{
					DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21, 21);
					Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
						);
				}
				Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
					);
				GenRectangle1(&ho_ROI_0, 932.803, 2881.33, 1161.01, 3217.31);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionDifference31, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 2.42571, 3706.38, 83.3857, 4069.17);

				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 1383.36, 2319.59, 1576.46, 2518.54);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 18);
				Det_SJ_Region(hv_dd, (*hv_dt));
				//检测圆周围

				GenRectangle1(&ho_ROI_0, 716.3, 3136.35, 1026.43, 3537.65);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced14);
				Threshold(ho_ImageReduced14, &ho_Region15, 188, 255);
				ClosingRectangle1(ho_Region15, &ho_RegionClosing3, 10, 10);
				Connection(ho_RegionClosing3, &ho_ConnectedRegions28);
				SelectShape(ho_ConnectedRegions28, &ho_SelectedRegions34, (HTuple("area").Append("circularity")),
					"and", (HTuple(1500).Append(0.1)), (HTuple(99999).Append(0.4)));
				ConcatObj(ho_SelectedRegions34, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				//横RT
				GenRectangle1(&ho_ROI_0, 1500.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 611.179, 2549.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					400, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					1);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 2)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 0.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				//*test
				ScaleImage(ho_ImageReduced25, &ho_ImageScaled, 1.31, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 180, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing44, 3, 3);
				Connection(ho_RegionClosing44, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 160, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 30);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 41, 41);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点

				GenRectangle1(&ho_ROI_0, 143.67, 353.083, 855.267, 824.734);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 120);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, "area", "and",
					38600, 199999);
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 608;
				hv_C = hv_Column2 - 660;
				GenRectangle1(&ho_ROI_0, 662.364, 3060.78, 1100.61, 3680.95);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);

				GenRectangle1(&ho_ROI_0, 1249.89, -27.1035, 1415.35, 420.859);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
				Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
				Connection(ho_Region42, &ho_ConnectedRegions60);
				SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
					1000, 99999);
				CountObj(ho_SelectedRegions66, &hv_Number3);
				if (0 != (int(hv_Number3 == 2)))
				{
					DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 30, 30);
					Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
						);
				}
				Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
					);


				GenRectangle1(&ho_ROI_0, 1362.83, 2275.72, 1547.21, 2483.49);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionDifference31, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 937.936, 2886.92, 1148.59, 3226.31);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				GenRectangle1(&ho_ROI_0, 0.42571, 3706.38, 63.3857, 4069.17);

				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 25);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 50000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 210);
				Det_SJ_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 3)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				//*test
				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 200, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 38);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 41, 41);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点
				GenRectangle1(&ho_ROI_0, 90.1971, 3220.71, 839.18, 3671.27);
				ReduceDomain(ho_ImageScaled, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 130);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, "area", "and",
					38600, 199999);
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 603;
				hv_C = hv_Column2 - 3432;
				GenRectangle1(&ho_ROI_0, 914.484, 737.978, 1212.36, 1140.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);


				GenRectangle1(&ho_ROI_0, 1232.92, 3589.58, 1396.76, 4092.8);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
				Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
				Connection(ho_Region42, &ho_ConnectedRegions60);
				SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
					1000, 99999);
				CountObj(ho_SelectedRegions66, &hv_Number3);
				if (0 != (int(hv_Number3 == 2)))
				{
					DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21, 21);
					Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
						);
				}
				Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
					);

				GenRectangle1(&ho_ROI_0, 60.138, 838.826, 396.012, 1158.14);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced47);
				Threshold(ho_ImageReduced47, &ho_Region43, 179, 255);
				Connection(ho_Region43, &ho_ConnectedRegions61);
				SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions70, "area", "and",
					6000, 99999);
				DilationRectangle1(ho_SelectedRegions70, &ho_RegionDilation25, 18, 18);
				Difference(ho_RegionDifference31, ho_RegionDilation25, &ho_RegionDifference38
					);

				GenRectangle1(&ho_ROI_0, -6.35143, 134.083, 46.3114, 388.883);
				Difference(ho_RegionDifference38, ho_ROI_0, &ho_RegionDifference38);

				ReduceDomain(ho_Image, ho_RegionDifference38, &ho_ImageReduced53);
				SetDictObject(ho_RegionDifference38, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 27);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 50000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 210);
				Det_SJ_Region(hv_dd, (*hv_dt));

				//横RT
				GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number8);
				if (0 != hv_Number8)
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 651.179, 50.46, 1608.47, 1760.27);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 8799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 210, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1700, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 8);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 4)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);

				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 170, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing41, 3, 3);
				Connection(ho_RegionClosing41, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);
				Difference(ho_Image, ho_RegionUnion25, &ho_RegionDifference33);
				ReduceDomain(ho_Image, ho_RegionDifference33, &ho_ImageReduced74);
				Threshold(ho_ImageReduced74, &ho_Region39, 0, 28);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 58, 58);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				//提取定位点
				GenRectangle1(&ho_ROI_0, 90.1971, 3220.71, 839.18, 3671.27);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				AutoThreshold(ho_ImageReduced63, &ho_Regions1, 2.5);
				Connection(ho_Regions1, &ho_ConnectedRegions124);
				//threshold (ImageReduced63, Region70, 0, 115)
				//connection (Region70, ConnectedRegions91)
				SelectShape(ho_ConnectedRegions124, &ho_SelectedRegions95, "area", "and",
					38600, 199999);
				SelectGray(ho_SelectedRegions95, ho_Image, &ho_SelectedRegions150, "mean",
					"and", 0, 110);
				AreaCenter(ho_SelectedRegions150, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 603;
				hv_C = hv_Column2 - 3432;

				GenRectangle1(&ho_ROI_0, 914.484, 737.978, 1252.36, 1160.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 31);
				Intersection(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionIntersection7
					);
				CountObj(ho_RegionIntersection7, &hv_Number18);
				if (0 != hv_Number18)
				{
					AreaCenter(ho_RegionIntersection7, &hv_Area7, &hv_Row7, &hv_Column7);
					TupleMax(hv_Area7, &hv_Max4);
					if (0 != (int(hv_Max4>200)))
					{

						GenRectangle1(&ho_ROI_0, 1232.92, 3589.58, 1396.76, 4092.8);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced38);
						Threshold(ho_ImageReduced38, &ho_Region42, 178, 255);
						Connection(ho_Region42, &ho_ConnectedRegions60);
						SelectShape(ho_ConnectedRegions60, &ho_SelectedRegions66, "area", "and",
							1000, 99999);
						CountObj(ho_SelectedRegions66, &hv_Number3);
						if (0 != (int(hv_Number3 == 2)))
						{
							DilationRectangle1(ho_SelectedRegions66, &ho_SelectedRegions66, 21,
								21);
							Difference(ho_SelectedRegions64, ho_SelectedRegions66, &ho_SelectedRegions64
								);
						}
						Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionDifference31
							);

						GenRectangle1(&ho_ROI_0, 60.138, 838.826, 396.012, 1178.14);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced47);
						Threshold(ho_ImageReduced47, &ho_Region43, 179, 255);
						Connection(ho_Region43, &ho_ConnectedRegions61);
						SelectShape(ho_ConnectedRegions61, &ho_SelectedRegions70, "area", "and",
							6000, 99999);
						DilationRectangle1(ho_SelectedRegions70, &ho_RegionDilation25, 18, 18);

						GenRectangle1(&ho_ROI_0, 452.986, 1038.13, 1494.54, 3741.49);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced93);
						GrayClosingRect(ho_ImageReduced93, &ho_ImageClosing18, 20, 20);
						AutoThreshold(ho_ImageClosing18, &ho_Regions, 2);
						Connection(ho_Regions, &ho_ConnectedRegions26);
						SelectShape(ho_ConnectedRegions26, &ho_SelectedRegions26, "area", "and",
							150000, 9999999999);
						SelectGray(ho_SelectedRegions26, ho_Image, &ho_SelectedRegions146, "mean",
							"and", 0, 35);
						CountObj(ho_SelectedRegions146, &hv_Number29);
						if (0 != (int(hv_Number29 == 1)))
						{
							DilationRectangle1(ho_SelectedRegions146, &ho_RegionDilation44, 31,
								31);
							Difference(ho_RegionDifference31, ho_RegionDilation44, &ho_RegionDifference31
								);
						}
						Difference(ho_RegionDifference31, ho_RegionDilation25, &ho_RegionDifference38
							);

						GenRectangle1(&ho_ROI_0, -6.35143, 134.083, 46.3114, 388.883);
						Difference(ho_RegionDifference38, ho_ROI_0, &ho_RegionErosion9);
						ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
						SetDictObject(ho_RegionErosion9, hv_dd, "region");
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 70);
						Det_SJ_Region(hv_dd, (*hv_dt));
					}
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number7);
				if (0 != hv_Number7)
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 661.179, 50.46, 1608.47, 1760.27);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 8799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 5)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 218.929, 1898.29, 1582.31, 2471.73);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				CountObj(ho_SelectedRegions95, &hv_Number20);
				if (0 != hv_Number20)
				{
					//偏移距离
					hv_R = hv_Row2 - 1047;
					hv_C = hv_Column2 - 2197;


					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);

					ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
					Threshold(ho_ImageScaled, &ho_Region37, 200, 255);
					Connection(ho_Region37, &ho_ConnectedRegions52);
					SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, (HTuple("width").Append("area")),
						"and", (HTuple(350).Append(10000)), (HTuple(99999).Append(100000)));
					Union1(ho_SelectedRegions61, &ho_RegionUnion21);
					ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
					DilationRectangle1(ho_RegionClosing20, &ho_RegionDilation32, 41, 41);

					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 65, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
						1e7);
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 51);

					GenRectangle1(&ho_ROI_0, 687.316, 906.41, 987.302, 1162.97);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

					GenRectangle2(&ho_ROI_0, 86.741, 493.454, HTuple(-42.2747).TupleRad(),
						123.034, 92.1363);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionDilation32, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
					ErosionRectangle1(hv_dd.TupleGetDictObject("region"), &ho___Tmp_Obj_0,
						5, 11);
					SetDictObject(ho___Tmp_Obj_0, hv_dd, "region");
					ReduceDomain(hv_dd.TupleGetDictObject("image"), hv_dd.TupleGetDictObject("region"),
						&ho_ImageReduced17);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian8, 15, 15);
					//大亮白(Bsj漏铁)
					Threshold(ho_ImageReduced17, &ho_Region73, (hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_loutie_white_area"),
						255);
					Connection(ho_Region73, &ho_ConnectedRegions96);
					SelectShape(ho_ConnectedRegions96, &ho_SelectedRegions, (HTuple("area").Append("anisometry")),
						"and", (HTuple(15).Append(0.01)), (HTuple(99999).Append(16)));
					ConcatObj(ho_SelectedRegions, (*hv_dt).TupleGetDictObject("41"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "41");

					//var_threshold (ImageReduced17, Region29, 35, 40, 0.2, 13, 'dark')
					//connection (Region29, ConnectedRegions39)
					//select_shape (ConnectedRegions39, SelectedRegions35, ['area','ratio'], 'and', [160,0.1], [99999,10])
					//concat_obj (SelectedRegions35, dt.['61'], dt.['61'])
					//小面积黑
					DerivateGauss(ho_ImageReduced17, &ho_DerivGauss, 2, "none");
					ConvertImageType(ho_DerivGauss, &ho_ImageReduced17, "byte");
					MedianRect(ho_ImageReduced17, &ho_ImageMedian30, 3, 3);
					MedianRect(ho_ImageReduced17, &ho_ImageMedian31, 105, 105);

					DynThreshold(ho_ImageMedian30, ho_ImageMedian31, &ho_RegionDynThresh12,
						(hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("dyn_black"), "dark");
					Connection(ho_RegionDynThresh12, &ho_ConnectedRegions155);
					SelectShape(ho_ConnectedRegions155, &ho_SelectedRegions182, ((HTuple("area").Append("ratio")).Append("anisometry")),
						"and", (((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_balck_area")).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_ratio_value"))).TupleConcat(1e-5),
						(HTuple(99999).TupleConcat((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("max_ratio_value"))).TupleConcat(9.1));
					ConcatObj(ho_SelectedRegions182, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");

					//大面积黑
					GrayClosingRect(ho_ImageReduced17, &ho_ImageClosing5, 30, 26);
					SubImage(ho_ImageReduced17, ho_ImageClosing5, &ho_ImageSub9, 2, 128);
					Threshold(ho_ImageSub9, &ho_Region40, 0, 50);


					Connection(ho_Region40, &ho_ConnectedRegions41);
					SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions40, (HTuple("area").Append("ratio")),
						"and", ((hv_dd.TupleGetDictTuple("SJ")).TupleGetDictTuple("min_black_big_area")).TupleConcat(0),
						(HTuple(999999).Append(7)));
					ConcatObj(ho_SelectedRegions40, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
				if (0 != (int(hv_Number20 == 0)))
				{
					SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
						"and", (HTuple(2200).Append(0.25)), (HTuple(99999).Append(1)));
					Union1(ho_SelectedRegions95, &ho_RegionUnion8);
					ClosingRectangle1(ho_RegionUnion8, &ho_RegionClosing38, 40, 80);
					Difference(ho_RegionClosing38, ho_RegionUnion8, &ho_RegionDifference30);
					Connection(ho_RegionDifference30, &ho_ConnectedRegions97);
					SelectShape(ho_ConnectedRegions97, &ho_SelectedRegions73, "area", "and",
						450, 99999);
					ConcatObj(ho_SelectedRegions73, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
				}
			}
			if (0 != (int(hv_ImageNum == 6)))
			{
				//gen_rectangle1 (ROI_0, 2.6829, 19.98, 3518.01, 4075.02)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (Image, Region37, 200, 255)
				//connection (Region37, ConnectedRegions52)
				//select_shape (ConnectedRegions52, SelectedRegions61, ['width','area'], 'and', [350,10000], [99999,100000])
				//union1 (SelectedRegions61, RegionUnion21)
				//closing_rectangle1 (RegionUnion21, RegionClosing20, 60, 60)
				//dilation_rectangle1 (RegionClosing20, RegionDilation32, 41, 41)
				//threshold (ImageReduced25, Region38, 50, 167)
				//connection (Region38, ConnectedRegions40)
				//select_shape (ConnectedRegions40, SelectedRegions38, 'area', 'and', 150000, 9999999)
				//opening_rectangle1 (SelectedRegions38, RegionOpening11, 10, 10)
				//sobel_amp (ImageReduced25, EdgeAmplitude4, 'sum_abs', 3)
				//scale_image (EdgeAmplitude4, ImageScaled5, 11.21, 0)
				//threshold (ImageScaled5, Region33, 76, 254)

				//connection (Region33, ConnectedRegions36)
				//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 20, 40)
				//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 1e7)
				//closing_rectangle1 (SelectedRegions36, RegionClosing25, 30, 30)
				//opening_rectangle1 (RegionClosing25, RegionOpening19, 20, 50)
				//erosion_rectangle1 (RegionOpening19, RegionErosion9, 66, 66)

				//gen_rectangle1 (ROI_0, 751.906, 903, 990.178, 1123.58)
				//difference (RegionErosion9, ROI_0, RegionErosion9)
				//difference (RegionErosion9, RegionDilation32, RegionErosion9)
				//reduce_domain (Image, RegionErosion9, ImageReduced53)
				//dd.region := RegionErosion9
				//dd.SJ.dyn_black := 27
				//dd.SJ.min_black_big_area := 50000
				//dd.SJ.min_loutie_white_area := 210
				//Det_SJ_Region (dd, dt)
			}
			if (0 != (int(hv_ImageNum == 7)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 19.98, 3068.57, 1500.39, 3606.91);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				CountObj(ho_SelectedRegions95, &hv_Number20);
				if (0 != hv_Number20)
				{
					//偏移距离
					hv_R = hv_Row2 - 764;
					hv_C = hv_Column2 - 3365;

					GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
					Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
					Connection(ho_Region20, &ho_ConnectedRegions38);
					SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
						"and", (HTuple(1000).Append(800)), (HTuple(99999).Append(9999)));
					DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
					Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
					Connection(ho_Region38, &ho_ConnectedRegions40);
					SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
					ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.01, 0);
					Threshold(ho_ImageScaled5, &ho_Region33, 65, 250);
					Connection(ho_Region33, &ho_ConnectedRegions36);
					ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 36);
					SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, (HTuple("area").Append("column")),
						"and", (HTuple(5e5).Append(2400)), (HTuple(1e7).Append(9999)));
					ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
					OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
					ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 51);

					GenRectangle1(&ho_ROI_0, 1206.9, 1309.59, 1468.47, 1694.96);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced56);
					Threshold(ho_ImageReduced56, &ho_Region57, 0, 50);
					Connection(ho_Region57, &ho_ConnectedRegions70);
					SelectShape(ho_ConnectedRegions70, &ho_SelectedRegions78, "area", "and",
						5150, 99999);
					DilationRectangle1(ho_SelectedRegions78, &ho_RegionDilation31, 16, 16);
					Difference(ho_RegionErosion9, ho_RegionDilation31, &ho_RegionErosion9);

					GenRectangle1(&ho_ROI_0, 1289.87, 2265.65, 1595.47, 2520.5);
					MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
					Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
					Difference(ho_RegionErosion9, ho_RegionDilation15, &ho_RegionErosion9);
					ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
					SetDictObject(ho_RegionErosion9, hv_dd, "region");
					SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
					Det_SJ_Region(hv_dd, (*hv_dt));
				}
				if (0 != (int(hv_Number20 == 0)))
				{
					SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
						"and", (HTuple(2200).Append(0.25)), (HTuple(99999).Append(1)));
					Union1(ho_SelectedRegions95, &ho_RegionUnion8);
					ClosingRectangle1(ho_RegionUnion8, &ho_RegionClosing38, 40, 80);
					Difference(ho_RegionClosing38, ho_RegionUnion8, &ho_RegionDifference30);
					Connection(ho_RegionDifference30, &ho_ConnectedRegions97);
					SelectShape(ho_ConnectedRegions97, &ho_SelectedRegions73, "area", "and",
						450, 99999);
					ConcatObj(ho_SelectedRegions73, (*hv_dt).TupleGetDictObject("61"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "61");
					hv_R = 0;
					hv_C = 0;
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1400.39, 8.27714, 1534.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(299999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number4);
				if (0 != (int(hv_Number4 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value9);
					TupleMax(hv_Value9, &hv_Max9);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions87, "row", "and",
						hv_Max9, hv_Max9);
					ShapeTrans(ho_SelectedRegions87, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//焊缝毛刺

				GenRectangle1(&ho_ROI_0, 1219.52, -50.8314, 1675.93, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced);
				Threshold(ho_ImageReduced, &ho_Region, 220, 255);
				Connection(ho_Region, &ho_ConnectedRegions15);
				SelectShape(ho_ConnectedRegions15, &ho_SelectedRegions14, "area", "and",
					65150, 929999);
				ClosingRectangle1(ho_SelectedRegions14, &ho_RegionClosing33, 900, 900);
				Difference(ho_RegionClosing33, ho_SelectedRegions14, &ho_RegionDifference7
					);
				Connection(ho_RegionDifference7, &ho_ConnectedRegions17);
				SelectShape(ho_ConnectedRegions17, &ho_SelectedRegions17, (HTuple("area").Append("width")),
					"and", (HTuple(150).Append(600)), (HTuple(99999).Append(9999)));
				//TEST
				MoveRegion(ho_SelectedRegions17, &ho_RegionMoved47, -60, 0);
				MoveRegion(ho_SelectedRegions17, &ho_RegionMoved49, -25, 0);
				Difference(ho_SelectedRegions17, ho_RegionMoved47, &ho_RegionDifference35
					);
				ShapeTrans(ho_RegionDifference35, &ho_RegionTrans8, "rectangle1");
				MoveRegion(ho_RegionTrans8, &ho_RegionMoved48, 0, 130);
				Difference(ho_RegionTrans8, ho_RegionMoved48, &ho_RegionDifference36);
				Intersection(ho_RegionDifference35, ho_RegionDifference36, &ho_RegionIntersection3
					);
				ReduceDomain(ho_Image, ho_RegionIntersection3, &ho_ImageReduced77);
				VarThreshold(ho_ImageReduced77, &ho_Region3, 55, 50, 0.2, 22, "dark");

				//增加一种检测方法
				Difference(ho_RegionIntersection3, ho_Region3, &ho_RegionDifference46);
				ReduceDomain(ho_Image, ho_RegionDifference46, &ho_ImageReduced79);
				Threshold(ho_ImageReduced79, &ho_Region82, 225, 255);
				Connection(ho_Region82, &ho_ConnectedRegions115);
				SelectShape(ho_ConnectedRegions115, &ho_SelectedRegions130, (HTuple("area").Append("width")),
					"and", (HTuple(800).Append(0)), (HTuple(99999).Append(73)));
				DilationRectangle1(ho_SelectedRegions130, &ho_RegionDilation39, 11, 1);
				MoveRegion(ho_RegionDilation39, &ho_RegionMoved52, 0, 5);
				Intersection(ho_RegionMoved52, ho_Region3, &ho_RegionIntersection12);
				ReduceDomain(ho_Image, ho_RegionIntersection12, &ho_ImageReduced84);
				CountObj(ho_ImageReduced84, &hv_Number25);
				if (0 != hv_Number25)
				{
					hv_Number24 = 0;
					Intensity(ho_RegionIntersection12, ho_Image, &hv_Mean1, &hv_Deviation1);
					if (0 != (int(hv_Mean1<135)))
					{
						hv_Number24 = 1;
					}

					MoveRegion(ho_RegionTrans8, &ho_RegionMoved50, 0, -130);
					Difference(ho_RegionTrans8, ho_RegionMoved50, &ho_RegionDifference51);
					MoveRegion(ho_RegionDifference51, &ho_RegionMoved51, -40, 0);
					DilationRectangle1(ho_RegionMoved51, &ho_RegionDilation38, 45, 21);
					ReduceDomain(ho_Image, ho_RegionDilation38, &ho_ImageReduced80);
					VarThreshold(ho_ImageReduced80, &ho_Region83, 55, 55, 0.2, 32, "dark");
					Connection(ho_Region83, &ho_ConnectedRegions116);
					SelectShape(ho_ConnectedRegions116, &ho_SelectedRegions132, "area", "and",
						1000, 99999);
					Union1(ho_SelectedRegions132, &ho_RegionUnion12);
					ClosingRectangle1(ho_RegionUnion12, &ho_RegionClosing43, 140, 140);
					ReduceDomain(ho_ImageReduced80, ho_RegionClosing43, &ho_ImageReduced83);
					Threshold(ho_ImageReduced83, &ho_Region82, 225, 255);
					Connection(ho_Region82, &ho_ConnectedRegions115);
					SelectShape(ho_ConnectedRegions115, &ho_SelectedRegions138, (HTuple("area").Append("width")),
						"and", (HTuple(1000).Append(0)), (HTuple(99999).Append(63)));

					CountObj(ho_SelectedRegions138, &hv_Number23);
					if (0 != (hv_Number23.TupleAnd(hv_Number24)))
					{
						DilationRectangle1(ho_SelectedRegions138, &ho_RegionDilation40, 6, 6);
						MoveRegion(ho_RegionDilation40, &ho_RegionMoved53, 3, -3);
						Difference(ho_RegionMoved53, ho_RegionDilation40, &ho_RegionDifference52
							);
						Union2(ho_RegionDifference52, ho_Region3, &ho_RegionUnion41);
						ConcatObj(ho_RegionUnion41, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					}
				}
				//增加结束
				Intersection(ho_Region3, ho_RegionMoved49, &ho_RegionIntersection9);
				VarThreshold(ho_ImageReduced77, &ho_Region13, 55, 55, 0.2, 32, "dark");
				Intersection(ho_Region13, ho_RegionMoved49, &ho_RegionIntersection11);
				Difference(ho_Region13, ho_RegionIntersection11, &ho_RegionDifference42);
				Connection(ho_RegionDifference42, &ho_ConnectedRegions105);
				RegionFeatures(ho_ConnectedRegions105, "area", &hv_Value17);
				TupleMax(hv_Value17, &hv_Max10);
				SelectShape(ho_ConnectedRegions105, &ho_SelectedRegions127, "area", "and",
					hv_Max10 - 5, hv_Max10 + 5);
				ReduceDomain(ho_Image, ho_SelectedRegions127, &ho_ImageReduced78);
				Threshold(ho_ImageReduced78, &ho_Region80, 0, 115);
				Connection(ho_Region80, &ho_ConnectedRegions108);
				SelectShape(ho_ConnectedRegions108, &ho_SelectedRegions128, "area", "and",
					150, 99999);
				Union1(ho_SelectedRegions128, &ho_SelectedRegions127);
				OpeningRectangle1(ho_RegionIntersection9, &ho_RegionOpening36, 1, 6);
				Connection(ho_RegionOpening36, &ho_ConnectedRegions103);
				SelectShape(ho_ConnectedRegions103, &ho_SelectedRegions124, (((HTuple("area").Append("height")).Append("ratio")).Append("circularity")),
					"and", (((HTuple(90).Append(19)).Append(0.4)).Append(0.2)), (((HTuple(99999).Append(99)).Append(6)).Append(1)));
				DilationRectangle1(ho_SelectedRegions124, &ho_RegionDilation7, 3, 15);
				Intersection(ho_RegionDilation7, ho_SelectedRegions127, &ho_RegionIntersection10
					);
				CountObj(ho_RegionIntersection10, &hv_Number22);
				if (0 != hv_Number22)
				{
					AreaCenter(ho_RegionIntersection10, &hv_Area9, &hv_Row9, &hv_Column9);
					TupleMax(hv_Area9, &hv_Max11);
					if (0 != (int(hv_Max11>3)))
					{
						ConcatObj(ho_SelectedRegions124, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					}
				}

				//ENDTEST
				ErosionRectangle1(ho_SelectedRegions17, &ho_RegionErosion18, 21, 21);
				Difference(ho_SelectedRegions17, ho_RegionErosion18, &ho_RegionDifference18
					);
				MoveRegion(ho_SelectedRegions17, &ho_RegionMoved40, 20, 0);
				Intersection(ho_RegionDifference18, ho_RegionMoved40, &ho_RegionIntersection6
					);
				DilationRectangle1(ho_RegionIntersection6, &ho_RegionIntersection6, 6, 6);

				DilationRectangle1(ho_SelectedRegions17, &ho_RegionDilation, 31, 41);
				MoveRegion(ho_RegionDilation, &ho_RegionMoved2, -15, 0);
				ReduceDomain(ho_Image, ho_RegionMoved2, &ho_ImageReduced12);
				VarThreshold(ho_ImageReduced12, &ho_Region3, 55, 50, 0.2, 22, "dark");
				Connection(ho_Region3, &ho_ConnectedRegions100);

				MoveRegion(ho_RegionMoved2, &ho_RegionMoved38, 0, 130);
				Difference(ho_RegionMoved2, ho_RegionMoved38, &ho_RegionDifference11);
				OpeningRectangle1(ho_RegionDifference11, &ho_RegionOpening46, 10, 70);
				Intersection(ho_ConnectedRegions100, ho_RegionOpening46, &ho_RegionIntersection2
					);
				MoveRegion(ho_RegionMoved2, &ho_RegionMoved39, 0, 38);
				Intersection(ho_RegionMoved39, ho_RegionMoved2, &ho_RegionIntersection4);
				Intersection(ho_RegionIntersection2, ho_RegionIntersection4, &ho_RegionIntersection5
					);
				Connection(ho_RegionIntersection5, &ho_ConnectedRegions102);
				Difference(ho_ConnectedRegions102, ho_RegionIntersection6, &ho_ConnectedRegions102
					);
				Connection(ho_ConnectedRegions102, &ho_ConnectedRegions104);
				SelectShape(ho_ConnectedRegions104, &ho_SelectedRegions97, "area", "and",
					380, 99999);

				Union1(ho_SelectedRegions97, &ho_RegionUnion17);
				ClosingRectangle1(ho_RegionUnion17, &ho_RegionClosing35, 7, 6);
				OpeningRectangle1(ho_RegionClosing35, &ho_RegionOpening47, 3, 11);
				Connection(ho_RegionOpening47, &ho_ConnectedRegions101);
				SelectShape(ho_ConnectedRegions101, &ho_SelectedRegions83, ((HTuple("area").Append("height")).Append("width")),
					"and", ((HTuple(150).Append(77)).Append(60)), ((HTuple(99999).Append(999)).Append(999)));

				ConcatObj(ho_SelectedRegions83, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				ErosionRectangle1(ho_SelectedRegions17, &ho_RegionErosion28, 231, 11);
				ShapeTrans(ho_RegionErosion28, &ho_RegionTrans5, "rectangle1");
				MoveRegion(ho_RegionTrans5, &ho_RegionMoved45, 5, 0);
				ReduceDomain(ho_Image, ho_RegionMoved45, &ho_ImageReduced73);
				RankRect(ho_ImageReduced73, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions111);
				SelectShape(ho_ConnectedRegions111, &ho_SelectedRegions115, (HTuple("area").Append("height")),
					"and", (HTuple(240).Append(9)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions115, ho_Image, &ho_SelectedRegions131, "mean",
					"and", 0, 133);
				ConcatObj(ho_SelectedRegions131, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//检测大的横缺陷
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing15, 1, 180);
				SubImage(ho_ImageRank, ho_ImageClosing15, &ho_ImageSub3, 2, 128);
				Threshold(ho_ImageSub3, &ho_Region84, 0, 25);
				Connection(ho_Region84, &ho_ConnectedRegions117);
				SelectShape(ho_ConnectedRegions117, &ho_SelectedRegions133, (HTuple("area").Append("height")),
					"and", (HTuple(555).Append(9)), (HTuple(99999).Append(99)));
				SelectGray(ho_SelectedRegions133, ho_Image, &ho_SelectedRegions134, "mean",
					"and", 0, 100);
				ConcatObj(ho_SelectedRegions134, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
				//转角RT
				GenRectangle1(&ho_ROI_0, 611.179, 2589.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					630);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 8)))
			{
				GenRectangle1(&ho_ROI_0, 1330.39, 8.27714, 1634.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(9000)));
				CountObj(ho_SelectedRegions125, &hv_Number9);
				if (0 != (int(hv_Number9 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 4);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}

				//检测焊缝毛刺
				GenRectangle1(&ho_ROI_0, 1049.83, 19.98, 1692.53, 3278.7);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced35);
				Threshold(ho_ImageReduced35, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					300050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);

				MoveRegion(ho_RegionClosing37, &ho_RegionMoved42, -10, 0);
				MoveRegion(ho_RegionClosing37, &ho_RegionMoved43, -55, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);
				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, (((HTuple("area").Append("ratio")).Append("column")).Append("height")),
					"and", (((HTuple(330).Append(0.22)).Append(750)).Append(16)), (((HTuple(2000).Append(3)).Append(9999)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);

				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");



				//黑
				//gray_closing_rect (ImageReduced71, ImageClosing11, 3, 3)
				//var_threshold (ImageClosing11, Region12, 35, 50, 0.2, 8, 'dark')
				//closing_rectangle1 (Region12, RegionClosing38, 17, 2)
				//connection (RegionClosing38, ConnectedRegions107)
				//select_shape (ConnectedRegions107, SelectedRegions106, ['area','ratio'], 'and', [130,0.22], [2000,3])
				//select_gray (SelectedRegions106, Image, SelectedRegions107, 'mean', 'and', 0, 120)
				//concat_obj (SelectedRegions107, dt.['64'], dt.['64'])

			}
			if (0 != (int(hv_ImageNum == 9)))
			{
				GenRectangle1(&ho_ROI_0, 1320.39, 8.27714, 1694.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(999999).Append(9000)));
				CountObj(ho_SelectedRegions125, &hv_Number15);
				if (0 != (int(hv_Number15 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					SelectShape(ho_SelectedRegions140, &ho_SelectedRegions147, "height", "and",
						0, 48);
					ShapeTrans(ho_SelectedRegions147, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//焊缝毛刺
				DilationRectangle1(ho_ROI_0, &ho_ROI_0, 11, 71);
				MoveRegion(ho_ROI_0, &ho_ROI_0, -100, 0);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced72);


				Threshold(ho_ImageReduced72, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					80050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);
				OpeningRectangle1(ho_RegionClosing37, &ho_RegionOpening50, 10, 50);
				ShapeTrans(ho_RegionOpening50, &ho_RegionTrans2, "rectangle1");
				MoveRegion(ho_RegionTrans2, &ho_RegionMoved44, 0, 80);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved42, -7, 0);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved43, -35, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);
				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				Threshold(ho_ImageRank, &ho_Region85, 0, 40);
				OpeningRectangle1(ho_Region85, &ho_RegionOpening52, 2, 4);
				Connection(ho_RegionOpening52, &ho_ConnectedRegions119);
				SelectShape(ho_ConnectedRegions119, &ho_SelectedRegions139, (HTuple("area").Append("width")),
					"and", (HTuple(1750).Append(200)), (HTuple(99999).Append(999)));
				DilationRectangle1(ho_SelectedRegions139, &ho_RegionDilation41, 101, 11);
				Difference(ho_ImageRank, ho_RegionDilation41, &ho_RegionDifference53);
				Connection(ho_RegionDifference53, &ho_ConnectedRegions120);
				SelectShape(ho_ConnectedRegions120, &ho_SelectedRegions141, "area", "and",
					1050, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions141, &ho_ImageReduced87);
				RankRect(ho_ImageReduced87, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, (((HTuple("area").Append("ratio")).Append("column")).Append("height")),
					"and", (((HTuple(330).Append(0.22)).Append(850)).Append(16)), (((HTuple(2000).Append(3)).Append(9999)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);

				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");

				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions113, "mean",
					"and", 0, 60);
				ConcatObj(ho_SelectedRegions113, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");


			}
			if (0 != (int(hv_ImageNum == 10)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 289.146, 1032.28, 1605.72, 1423.36);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 1179;
				hv_C = hv_Column2 - 1203;

				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 20.01, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 95, 250);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 21);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 25);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);

				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening25, 10, 200);
				Difference(ho_RegionClosing25, ho_RegionOpening25, &ho_RegionDifference24
					);
				Connection(ho_RegionDifference24, &ho_ConnectedRegions48);
				SelectShape(ho_ConnectedRegions48, &ho_SelectedRegions52, (HTuple("area").Append("column")),
					"and", (HTuple(3500).Append(0)), (HTuple(99999).Append(300)));
				Difference(ho_RegionOpening19, ho_SelectedRegions52, &ho_RegionDifference25
					);
				ErosionRectangle1(ho_RegionDifference25, &ho_RegionErosion9, 58, 66);
				GenRectangle1(&ho_ROI_0, 301.708, 330.663, 867.775, 640.379);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced21);
				VarThreshold(ho_ImageReduced21, &ho_Region18, 70, 80, 0.2, 7, "dark");
				Connection(ho_Region18, &ho_ConnectedRegions30);
				SelectShape(ho_ConnectedRegions30, &ho_SelectedRegions40, "area", "and",
					1500, 99999);
				Union1(ho_SelectedRegions40, &ho_RegionUnion1);
				ClosingRectangle1(ho_RegionUnion1, &ho_RegionClosing9, 600, 600);
				DilationRectangle1(ho_RegionClosing9, &ho_RegionDilation13, 11, 11);

				GenRectangle1(&ho_ROI_0, 1309.96, 1953.83, 1426.99, 2819.84);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_RegionDilation13, &ho_RegionErosion9);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				GenRectangle1(&ho_ROI_0, 931.453, 1134.08, 1042.53, 1957.78);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
				Det_SJ_Region(hv_dd, (*hv_dt));
				//横RT
				GenRectangle1(&ho_ROI_0, 1350.39, 2008.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(800)), (HTuple(99999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number16);
				if (0 != (int(hv_Number16 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}

				//焊缝毛刺
				DilationRectangle1(ho_ROI_0, &ho_ROI_0, 11, 31);
				MoveRegion(ho_ROI_0, &ho_ROI_0, -100, 0);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced72);
				Threshold(ho_ImageReduced72, &ho_Region4, 210, 255);
				Connection(ho_Region4, &ho_ConnectedRegions106);
				SelectShape(ho_ConnectedRegions106, &ho_SelectedRegions98, "area", "and",
					60050, 919999);
				ClosingRectangle1(ho_SelectedRegions98, &ho_RegionClosing37, 300, 50);
				OpeningRectangle1(ho_RegionClosing37, &ho_RegionOpening50, 10, 50);
				ErosionRectangle1(ho_RegionOpening50, &ho_RegionErosion24, 331, 1);
				MoveRegion(ho_RegionErosion24, &ho_RegionMoved44, 0, 80);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved42, -7, 0);
				MoveRegion(ho_RegionMoved44, &ho_RegionMoved43, -35, 0);
				Difference(ho_RegionMoved43, ho_RegionMoved42, &ho_RegionDifference29);
				ReduceDomain(ho_Image, ho_RegionDifference29, &ho_ImageReduced71);

				RankRect(ho_ImageReduced71, &ho_ImageRank, 10, 5, 30);
				GrayClosingRect(ho_ImageRank, &ho_ImageClosing19, 1, 90);
				SubImage(ho_ImageRank, ho_ImageClosing19, &ho_ImageSub14, 2, 128);
				Threshold(ho_ImageSub14, &ho_Region21, 0, 25);
				Connection(ho_Region21, &ho_ConnectedRegions110);
				SelectShape(ho_ConnectedRegions110, &ho_SelectedRegions106, ((HTuple("area").Append("ratio")).Append("height")),
					"and", ((HTuple(330).Append(0.22)).Append(16)), ((HTuple(2000).Append(3)).Append(99)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 120);

				ConcatObj(ho_SelectedRegions107, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");



				//黑
				GrayClosingRect(ho_ImageReduced71, &ho_ImageClosing11, 3, 3);
				VarThreshold(ho_ImageClosing11, &ho_Region12, 55, 30, 0.2, 14, "dark");

				Connection(ho_Region12, &ho_ConnectedRegions107);
				SelectShape(ho_ConnectedRegions107, &ho_SelectedRegions106, (HTuple("area").Append("ratio")),
					"and", (HTuple(130).Append(0.22)), (HTuple(2000).Append(3)));
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions107, "mean",
					"and", 0, 98);
				Union1(ho_SelectedRegions107, &ho_RegionUnion22);
				RegionFeatures(ho_RegionUnion22, "area", &hv_Value15);
				if (0 != (int(hv_Value15>550)))
				{
					//concat_obj (SelectedRegions107, dt.['64'], dt.['64'])
				}
				SelectGray(ho_SelectedRegions106, ho_Image, &ho_SelectedRegions113, "mean",
					"and", 0, 60);
				Union1(ho_SelectedRegions113, &ho_RegionUnion45);
				CountObj(ho_RegionUnion45, &hv_Number30);
				if (0 != hv_Number30)
				{
					RegionFeatures(ho_RegionUnion45, "area", &hv_Value21);
					if (0 != (int(hv_Value21>200)))
					{
						ConcatObj(ho_SelectedRegions113, (*hv_dt).TupleGetDictObject("64"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "64");
					}
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 651.179, 50.46, 1608.47, 1460.27);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 999999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 158, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 177);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 11)))
			{

			}
			if (0 != (int(hv_ImageNum == 12)))
			{
				GenRectangle1(&ho_ROI_0, 1217.1, 1409.61, 1726.34, 2738.21);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced60);
				Threshold(ho_ImageReduced60, &ho_Region62, 235, 255);
				Connection(ho_Region62, &ho_ConnectedRegions76);
				OpeningRectangle1(ho_ConnectedRegions76, &ho_RegionOpening40, 10, 10);
				Connection(ho_RegionOpening40, &ho_ConnectedRegions79);
				SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions38, (HTuple("area").Append("row")),
					"and", (HTuple(4000).Append(1300)), (HTuple(11000).Append(1560)));
				CountObj(ho_SelectedRegions38, &hv_Number10);
				if (0 != (int(hv_Number10 == 2)))
				{
					MoveRegion(ho_SelectedRegions38, &ho_RegionMoved15, 55, 0);
					Union1(ho_RegionMoved15, &ho_RegionUnion44);
					ErosionRectangle1(ho_RegionUnion44, &ho_RegionErosion4, 11, 8);
					OpeningRectangle1(ho_RegionErosion4, &ho_RegionOpening49, 80, 33);
					ErosionRectangle1(ho_RegionOpening49, &ho_RegionErosion22, 1, 20);
					MoveRegion(ho_RegionErosion22, &ho_RegionMoved41, -10, 0);
					ReduceDomain(ho_ImageReduced60, ho_RegionMoved41, &ho_ImageReduced61);
					GrayClosingRect(ho_ImageReduced61, &ho_ImageClosing, 11, 11);
					SubImage(ho_ImageReduced61, ho_ImageClosing, &ho_ImageSub, 2, 128);
					Threshold(ho_ImageSub, &ho_Region63, 0, 90);
					Connection(ho_Region63, &ho_ConnectedRegions80);
					SelectShape(ho_ConnectedRegions80, &ho_SelectedRegions88, "area", "and",
						8, 99999);
					Union1(ho_SelectedRegions88, &ho_RegionUnion19);
					RegionFeatures(ho_RegionUnion19, "area", &hv_Value14);
					if (0 != (int(hv_Value14>15)))
					{
						ConcatObj(ho_SelectedRegions88, (*hv_dt).TupleGetDictObject("59"), &ho___Tmp_Obj_0
							);
						SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "59");
					}
				}
			}
			if (0 != (int(hv_ImageNum == 13)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 137.009, 2389.81, 1564.76, 2822.81);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 998;
				hv_C = hv_Column2 - 2578;



				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 20.01, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 95, 250);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 71);
				GenRectangle2(&ho_ROI_0, 1057.04, 1619.62, HTuple(-42.3523).TupleRad(), 277.739,
					159.65);
				GenRectangle2(&ho_TMP_Region, 621.614, 2607.93, HTuple(49.2841).TupleRad(),
					373.79, 146.671);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 768.658, 944.174, 956.6, 1154.52);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle2(&ho_ROI_0, 48.0945, 3457.97, HTuple(-135).TupleRad(), 497.208,
					295.842);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 735.281, 2859.49, 931.233, 3133.35);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 15);
				Det_SJ_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 14)))
			{
				//gen_rectangle1 (ROI_0, 2.6829, 19.98, 3518.01, 4075.02)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region38, 80, 120)
				//connection (Region38, ConnectedRegions40)
				//sobel_amp (ImageReduced25, EdgeAmplitude4, 'sum_abs', 3)
				//scale_image (EdgeAmplitude4, ImageScaled5, 20.01, 0)
				//threshold (ImageScaled5, Region33, 95, 255)
				//opening_rectangle1 (Region33, RegionOpening53, 2, 2)
				//connection (RegionOpening53, ConnectedRegions36)
				//closing_rectangle1 (ConnectedRegions36, RegionClosing13, 20, 40)
				//select_shape (RegionClosing13, SelectedRegions36, 'area', 'and', 5e5, 1e7)
				//closing_rectangle1 (SelectedRegions36, RegionClosing25, 30, 30)
				//opening_rectangle1 (RegionClosing25, RegionOpening19, 20, 50)
				//erosion_rectangle1 (RegionOpening19, RegionErosion9, 61, 71)

				//reduce_domain (Image, RegionErosion9, ImageReduced53)
				//dd.region := RegionErosion9
				//dd.SJ.dyn_black := 15
				//Det_SJ_Region (dd, dt)
			}
			if (0 != (int(hv_ImageNum == 15)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 125.306, 3314.33, 833.329, 3677.12);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 440;
				hv_C = hv_Column2 - 3476;

				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 217, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					650, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 120, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 160);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 38);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					65000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				ClosingRectangle1(ho_RegionUnion26, &ho_RegionClosing22, 100, 70);
				Union2(ho_RegionUnion25, ho_RegionClosing22, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 45, 45);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					850000, 99999999);
				ClosingRectangle1(ho_SelectedRegions64, &ho_RegionClosing23, 70, 70);

				GenRectangle1(&ho_ROI_0, 335.957, 3373.07, 593.42, 3686.38);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 31);

				GenRectangle1(&ho_ROI_0, -39.42571, 3403.07, 195.523, 3858.52);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced48);
				Threshold(ho_ImageReduced48, &ho_Region27, 178, 255);
				Connection(ho_Region27, &ho_ConnectedRegions42);
				SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions46, "area", "and",
					1500, 99999);
				DilationRectangle1(ho_SelectedRegions46, &ho_RegionDilation19, 18, 18);
				GenRectangle1(&ho_ROI_0, 1152.71, 2182.56, 1348.25, 2688.23);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced49);
				Threshold(ho_ImageReduced49, &ho_Region44, 178, 255);
				Connection(ho_Region44, &ho_ConnectedRegions44);
				SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions48, "area", "and",
					8500, 99999);
				DilationRectangle1(ho_SelectedRegions48, &ho_RegionDilation26, 37, 37);
				Union2(ho_RegionDilation24, ho_RegionDilation26, &ho_RegionUnion5);
				Union2(ho_RegionUnion5, ho_RegionDilation19, &ho_RegionUnion28);

				GenRectangle1(&ho_ROI_0, 2.42571, 3619.57, 72.6429, 3864.37);
				Union2(ho_RegionUnion28, ho_ROI_0, &ho_RegionUnion29);
				Difference(ho_RegionClosing23, ho_RegionUnion29, &ho_RegionDifference23);

				GenRectangle1(&ho_ROI_0, 1014.83, 2561.11, 1362.44, 3207.33);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced50);
				VarThreshold(ho_ImageReduced50, &ho_Region47, 75, 75, 0.2, 10, "dark");
				Connection(ho_Region47, &ho_ConnectedRegions47);
				SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions51, "area", "and",
					2850, 99999);
				Union1(ho_SelectedRegions51, &ho_RegionUnion30);
				ClosingRectangle1(ho_RegionUnion30, &ho_RegionClosing26, 200, 210);
				DilationRectangle1(ho_RegionClosing26, &ho_RegionDilation27, 21, 21);
				Difference(ho_RegionDifference23, ho_RegionDilation27, &ho_RegionDifference39
					);

				GenRectangle1(&ho_ROI_0, 476.391, 3056.87, 1084.94, 3443.07);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced51);
				Threshold(ho_ImageReduced51, &ho_Region48, 178, 255);
				Connection(ho_Region48, &ho_ConnectedRegions62);
				SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions71, "area", "and",
					7500, 199999);
				Union1(ho_SelectedRegions71, &ho_RegionUnion31);
				DilationRectangle1(ho_RegionUnion31, &ho_RegionDilation28, 11, 11);
				Difference(ho_RegionDifference39, ho_RegionDilation28, &ho_RegionDifference41
					);

				GenRectangle1(&ho_ROI_0, 2.42571, 3205.82, 616.826, 3408.17);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced52);
				Threshold(ho_ImageReduced52, &ho_Region52, 178, 255);
				Connection(ho_Region52, &ho_ConnectedRegions64);
				SelectShape(ho_ConnectedRegions64, &ho_SelectedRegions72, "area", "and",
					15000, 999999);
				DilationRectangle1(ho_SelectedRegions72, &ho_RegionDilation29, 17, 17);
				Difference(ho_ImageReduced52, ho_RegionDilation29, &ho_RegionDifference43
					);
				ReduceDomain(ho_ImageReduced52, ho_RegionDifference43, &ho_ImageReduced55
					);
				VarThreshold(ho_ImageReduced55, &ho_Region53, 65, 65, 0.2, 11, "dark");
				Connection(ho_Region53, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions74, "area", "and",
					3500, 99999);
				Union1(ho_SelectedRegions74, &ho_RegionUnion32);
				ClosingRectangle1(ho_RegionUnion32, &ho_RegionClosing29, 20, 20);
				DilationRectangle1(ho_RegionClosing29, &ho_RegionDilation30, 11, 11);
				Difference(ho_RegionDifference41, ho_RegionDilation30, &ho_RegionDifference44
					);
				GenRectangle1(&ho_ROI_0, 997.169, 1681.79, 1190.27, 2547.8);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced58);
				Threshold(ho_ImageReduced58, &ho_Region59, 168, 255);
				DilationRectangle1(ho_Region59, &ho_RegionDilation33, 11, 11);
				Difference(ho_ImageReduced58, ho_RegionDilation33, &ho_RegionDifference25
					);
				Connection(ho_RegionDifference25, &ho_ConnectedRegions51);
				RegionFeatures(ho_ConnectedRegions51, "area", &hv_Value5);
				TupleMax(hv_Value5, &hv_Max7);
				SelectShape(ho_ConnectedRegions51, &ho_SelectedRegions78, "area", "and",
					hv_Max7 - 5, hv_Max7 + 5);
				ReduceDomain(ho_ImageReduced58, ho_SelectedRegions78, &ho_ImageReduced59);
				VarThreshold(ho_ImageReduced59, &ho_Region61, 15, 55, 0.2, 12, "dark");
				Connection(ho_Region61, &ho_ConnectedRegions73);
				SelectShape(ho_ConnectedRegions73, &ho_SelectedRegions82, "area", "and",
					10000, 99999);
				ClosingRectangle1(ho_SelectedRegions82, &ho_RegionClosing32, 10, 10);
				DilationRectangle1(ho_RegionClosing32, &ho_RegionDilation34, 11, 11);
				Difference(ho_RegionDifference44, ho_RegionDilation34, &ho_RegionDifference44
					);
				GenRectangle1(&ho_ROI_0, 1339.85, 2185.2, 1566.76, 2409.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionDifference44);
				SetDictObject(ho_RegionDifference44, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 23);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 212);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 85);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_ratio_value", 0.15);
				Det_SJ_Region(hv_dd, (*hv_dt));

				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 179, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 611.179, 2589.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 16)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 125.306, 3314.33, 833.329, 3677.12);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 447;
				hv_C = hv_Column2 - 3472;

				ScaleImage(ho_Image, &ho_ImageScaled, 1.71, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 190, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					550, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 120, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 160);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					65000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				ClosingRectangle1(ho_RegionUnion26, &ho_RegionClosing22, 100, 70);
				Union2(ho_RegionUnion25, ho_RegionClosing22, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 72, 72);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, "area", "and",
					540000, 99999999);
				ClosingRectangle1(ho_SelectedRegions64, &ho_RegionClosing23, 70, 70);

				GenRectangle1(&ho_ROI_0, 335.957, 3343.07, 593.42, 3666.38);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 28);

				GenRectangle1(&ho_ROI_0, 2.42571, 3383.07, 195.523, 3818.52);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced48);
				Threshold(ho_ImageReduced48, &ho_Region27, 178, 255);
				Connection(ho_Region27, &ho_ConnectedRegions42);
				SelectShape(ho_ConnectedRegions42, &ho_SelectedRegions46, "area", "and",
					1500, 99999);
				DilationRectangle1(ho_SelectedRegions46, &ho_RegionDilation19, 18, 18);
				GenRectangle1(&ho_ROI_0, 1172.71, 2152.56, 1348.25, 2688.23);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced49);
				Threshold(ho_ImageReduced49, &ho_Region44, 178, 255);
				Connection(ho_Region44, &ho_ConnectedRegions44);
				SelectShape(ho_ConnectedRegions44, &ho_SelectedRegions48, "area", "and",
					8500, 99999);
				DilationRectangle1(ho_SelectedRegions48, &ho_RegionDilation26, 37, 37);
				Union2(ho_RegionDilation24, ho_RegionDilation26, &ho_RegionUnion5);
				Union2(ho_RegionUnion5, ho_RegionDilation19, &ho_RegionUnion28);

				GenRectangle1(&ho_ROI_0, 2.42571, 3559.57, 72.6429, 3864.37);
				Union2(ho_RegionUnion28, ho_ROI_0, &ho_RegionUnion29);
				Difference(ho_RegionClosing23, ho_RegionUnion29, &ho_RegionDifference23);

				GenRectangle1(&ho_ROI_0, 1014.83, 2551.11, 1362.44, 3207.33);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced50);
				VarThreshold(ho_ImageReduced50, &ho_Region47, 75, 75, 0.2, 10, "dark");
				Connection(ho_Region47, &ho_ConnectedRegions47);
				SelectShape(ho_ConnectedRegions47, &ho_SelectedRegions51, "area", "and",
					2850, 99999);
				Union1(ho_SelectedRegions51, &ho_RegionUnion30);
				ClosingRectangle1(ho_RegionUnion30, &ho_RegionClosing26, 200, 210);
				DilationRectangle1(ho_RegionClosing26, &ho_RegionDilation27, 21, 21);
				Difference(ho_RegionDifference23, ho_RegionDilation27, &ho_RegionDifference39
					);

				GenRectangle1(&ho_ROI_0, 476.391, 3056.87, 1084.94, 3443.07);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced51);
				Threshold(ho_ImageReduced51, &ho_Region48, 178, 255);
				Connection(ho_Region48, &ho_ConnectedRegions62);
				SelectShape(ho_ConnectedRegions62, &ho_SelectedRegions71, "area", "and",
					7500, 199999);
				Union1(ho_SelectedRegions71, &ho_RegionUnion31);
				DilationRectangle1(ho_RegionUnion31, &ho_RegionDilation28, 11, 11);
				Difference(ho_RegionDifference39, ho_RegionDilation28, &ho_RegionDifference41
					);

				GenRectangle1(&ho_ROI_0, 2.42571, 3155.82, 616.826, 3358.17);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced52);
				Threshold(ho_ImageReduced52, &ho_Region52, 178, 255);
				Connection(ho_Region52, &ho_ConnectedRegions64);
				SelectShape(ho_ConnectedRegions64, &ho_SelectedRegions72, "area", "and",
					15000, 999999);
				DilationRectangle1(ho_SelectedRegions72, &ho_RegionDilation29, 17, 17);
				Difference(ho_ImageReduced52, ho_RegionDilation29, &ho_RegionDifference43
					);
				ReduceDomain(ho_ImageReduced52, ho_RegionDifference43, &ho_ImageReduced55
					);
				VarThreshold(ho_ImageReduced55, &ho_Region53, 95, 95, 0.2, 10, "dark");
				Connection(ho_Region53, &ho_ConnectedRegions65);
				SelectShape(ho_ConnectedRegions65, &ho_SelectedRegions74, "area", "and",
					3500, 99999);
				Union1(ho_SelectedRegions74, &ho_RegionUnion32);
				ClosingRectangle1(ho_RegionUnion32, &ho_RegionClosing29, 20, 20);
				DilationRectangle1(ho_RegionClosing29, &ho_RegionDilation30, 11, 11);
				Difference(ho_RegionDifference41, ho_RegionDilation30, &ho_RegionDifference44
					);
				GenRectangle1(&ho_ROI_0, 1325.59, 2175.68, 1589.63, 2434.8);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionDifference44, ho_ROI_0, &ho_RegionErosion9);


				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 19);
				Det_SJ_Region(hv_dd, (*hv_dt));

				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 581.179, 2589.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 7);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 17)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 31.6829, 540.757, 1424.32, 985.466);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 998;
				hv_C = hv_Column2 - 757;

				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 185, 255);
				ClosingRectangle1(ho_Region37, &ho_RegionClosing53, 2, 3);
				Connection(ho_RegionClosing53, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_Image, &ho_Region39, 0, 26);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				ClosingRectangle1(ho_SelectedRegions63, &ho_RegionClosing31, 100, 800);
				Union1(ho_RegionClosing31, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 41, 41);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, (HTuple("area").Append("column")),
					"and", (HTuple(850000).Append(0)), (HTuple(99999999).Append(1900)));

				GenRectangle1(&ho_ROI_0, 884.484, 627.978, 1182.36, 960.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 41);
				Intersection(ho_SelectedRegions64, ho_RegionDilation24, &ho_RegionIntersection7
					);
				CountObj(ho_RegionIntersection7, &hv_Number18);
				if (0 != hv_Number18)
				{
					AreaCenter(ho_RegionIntersection7, &hv_Area7, &hv_Row7, &hv_Column7);
					TupleMax(hv_Area7, &hv_Max4);
					if (0 != hv_Max4)
					{
						GenRectangle1(&ho_ROI_0, 681.923, 747.66, 963.606, 1449.63);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						Union2(ho_RegionDilation24, ho_ROI_0, &ho_RegionUnion36);
						Difference(ho_SelectedRegions64, ho_RegionUnion36, &ho_RegionDifference47
							);


						GenRectangle1(&ho_ROI_0, -6.35143, 110.677, 89.7171, 338.666);
						Difference(ho_RegionDifference47, ho_ROI_0, &ho_RegionDifference48);
						GenRectangle1(&ho_ROI_0, 883.088, 1408.21, 1468.23, 2673.61);
						MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
						ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced27);
						VarThreshold(ho_ImageReduced27, &ho_Region19, 65, 65, 0.2, 8, "dark");
						Connection(ho_Region19, &ho_ConnectedRegions35);
						SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions43, "area", "and",
							3000, 699999);
						Union1(ho_SelectedRegions43, &ho_RegionUnion18);
						ClosingRectangle1(ho_RegionUnion18, &ho_RegionClosing10, 700, 700);
						DilationRectangle1(ho_RegionClosing10, &ho_RegionDilation14, 6, 6);
						Difference(ho_RegionDifference48, ho_RegionDilation14, &ho_RegionErosion9
							);
						ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
						SetDictObject(ho_RegionErosion9, hv_dd, "region");
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 16);
						SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 20000);
						Det_SJ_Region(hv_dd, (*hv_dt));
					}
				}
				//横RT
				GenRectangle1(&ho_ROI_0, 1460.39, 1600.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1320)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 660.035, 40.39, 1649.82, 1605.68);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 7999999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 158, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1030, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 6);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 18)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 31.6829, 540.757, 1424.32, 1125.466);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 995;
				hv_C = hv_Column2 - 755;

				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 11.51, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 65, 254);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 60);
				OpeningRectangle1(ho_RegionOpening19, &ho_RegionOpening13, 10, 600);
				Difference(ho_RegionOpening19, ho_RegionOpening13, &ho_RegionDifference16
					);
				Connection(ho_RegionDifference16, &ho_ConnectedRegions31);
				SelectShape(ho_ConnectedRegions31, &ho_SelectedRegions41, ((HTuple("area").Append("row")).Append("column")),
					"and", ((HTuple(3000).Append(0)).Append(40)), ((HTuple(99999).Append(800)).Append(330)));
				Difference(ho_RegionClosing25, ho_SelectedRegions41, &ho_RegionDifference17
					);
				Connection(ho_RegionDifference17, &ho_ConnectedRegions33);
				SelectShape(ho_ConnectedRegions33, &ho_SelectedRegions42, "area", "and",
					150000, 9999999);
				ErosionRectangle1(ho_SelectedRegions42, &ho_RegionErosion9, 60, 61);

				GenRectangle1(&ho_ROI_0, 698.746, 758.22, 932.803, 1441.88);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 883.088, 1408.21, 1468.23, 2673.61);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced27);
				VarThreshold(ho_ImageReduced27, &ho_Region19, 65, 65, 0.2, 10, "dark");
				Connection(ho_Region19, &ho_ConnectedRegions35);
				SelectShape(ho_ConnectedRegions35, &ho_SelectedRegions43, "area", "and",
					5000, 699999);
				Union1(ho_SelectedRegions43, &ho_RegionUnion6);
				ClosingRectangle1(ho_RegionUnion6, &ho_RegionClosing10, 700, 700);
				DilationRectangle1(ho_RegionClosing10, &ho_RegionDilation14, 11, 11);
				Difference(ho_RegionErosion9, ho_RegionDilation14, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 26);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 202);
				Det_SJ_Region(hv_dd, (*hv_dt));
				//横RT
				GenRectangle1(&ho_ROI_0, 1450.39, 1600.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(99999).Append(3000)));
				ShapeTrans(ho_SelectedRegions125, &ho_RegionTrans13, "rectangle2");
				DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
				SetDictTuple(hv_dd, "RTmode", 2);
				SetDictObject(ho_RegionDilation22, hv_dd, "region");
				Det_RT_Region(hv_dd, (*hv_dt));

				//转角RT
				GenRectangle1(&ho_ROI_0, 640.035, 40.39, 1649.82, 1605.68);

				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 7999999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 168, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					2900, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 8);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 19)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 335.957, 1921.69, 1523.8, 2419.07);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 1175;
				hv_C = hv_Column2 - 2168;


				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
				Connection(ho_Region20, &ho_ConnectedRegions38);
				SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
					"and", (HTuple(2000).Append(800)), (HTuple(99999).Append(9999)));
				DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
				Union1(ho_RegionDilation15, &ho_RegionUnion4);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 11.51, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 55, 254);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 20, 20);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 60, 66);

				GenRectangle2(&ho_ROI_0, 816.236, 2239.51, HTuple(40.1792).TupleRad(), 344.639,
					180.444);


				GenRectangle2(&ho_TMP_Region, 380.982, 3144.93, HTuple(41.9591).TupleRad(),
					606.548, 303.163);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 260.35, 852.721, HTuple(40.9144).TupleRad(),
					232.295, 148.28);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 818.008, 1002, 1022.87, 1250.75);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				Difference(ho_RegionErosion9, ho_RegionUnion4, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 28);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 222);
				Det_SJ_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 20)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 335.957, 1921.69, 1523.8, 2419.07);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.45)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 1185;
				hv_C = hv_Column2 - 2162;

				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region20, 178, 255);
				Connection(ho_Region20, &ho_ConnectedRegions38);
				SelectShape(ho_ConnectedRegions38, &ho_SelectedRegions44, (HTuple("width").Append("height")),
					"and", (HTuple(1500).Append(500)), (HTuple(99999).Append(9999)));
				DilationRectangle1(ho_SelectedRegions44, &ho_RegionDilation15, 41, 41);
				Union1(ho_RegionDilation15, &ho_RegionUnion4);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 15.51, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 55, 254);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 70, 71);

				GenRectangle2(&ho_ROI_0, 816.236, 2239.51, HTuple(40.1792).TupleRad(), 344.639,
					170.444);


				GenRectangle2(&ho_TMP_Region, 360.982, 3194.93, HTuple(41.9591).TupleRad(),
					656.548, 283.163);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				GenRectangle2(&ho_TMP_Region, 260.35, 852.721, HTuple(40.9144).TupleRad(),
					232.295, 148.28);
				Union2(ho_ROI_0, ho_TMP_Region, &ho_ROI_0);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 818.008, 1002, 1022.87, 1210.75);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				Difference(ho_RegionErosion9, ho_RegionUnion4, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 16);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_black_big_area", 102000);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_loutie_white_area", 190);
				Det_SJ_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 21)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 119.454, 3103.68, 1418.47, 3583.5);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 158, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 910;
				hv_C = hv_Column2 - 3340;



				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region38, 80, 120);
				Connection(ho_Region38, &ho_ConnectedRegions40);
				SobelAmp(ho_ImageReduced25, &ho_EdgeAmplitude4, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude4, &ho_ImageScaled5, 18.01, 0);
				Threshold(ho_ImageScaled5, &ho_Region33, 75, 250);
				Connection(ho_Region33, &ho_ConnectedRegions36);
				ClosingRectangle1(ho_ConnectedRegions36, &ho_RegionClosing13, 20, 40);
				SelectShape(ho_RegionClosing13, &ho_SelectedRegions36, "area", "and", 5e5,
					1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 30, 30);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 71);
				GenRectangle1(&ho_ROI_0, 322.099, 3009.45, 909.715, 3361.87);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 1114.2, 1558.91, 1418.47, 1898.29);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, -82.0603, 3146.17, 269.025, 3778.12);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced28);
				VarThreshold(ho_ImageReduced28, &ho_Region22, 80, 70, 0.2, 9, "dark");
				Connection(ho_Region22, &ho_ConnectedRegions41);
				SelectShape(ho_ConnectedRegions41, &ho_SelectedRegions45, "area", "and",
					800, 99999);
				Union1(ho_SelectedRegions45, &ho_RegionUnion15);
				ClosingRectangle1(ho_RegionUnion15, &ho_RegionClosing11, 700, 700);
				DilationRectangle1(ho_RegionClosing11, &ho_RegionDilation18, 15, 15);
				Difference(ho_RegionErosion9, ho_RegionDilation18, &ho_RegionErosion9);

				GenRectangle1(&ho_ROI_0, 1360.62, 2287.68, 1582.11, 2538.12);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 14);
				Det_SJ_Region(hv_dd, (*hv_dt));
				//横RT
				GenRectangle1(&ho_ROI_0, 1500.39, 8.27714, 1634.97, 2231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(399999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number17);
				if (0 != (int(hv_Number17 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 641.179, 2509.46, 1608.47, 3963.27);

				GenRectangle1(&ho_ROI_11, 487.035, 2407.39, 1049.82, 3255.68);
				Difference(ho_ROI_0, ho_ROI_11, &ho_RegionDifference74);
				MoveRegion(ho_RegionDifference74, &ho_RegionDifference74, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_RegionDifference74, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, -100);
				Difference(ho_RegionDifference74, ho_RegionMoved32, &ho_RegionDifference66
					);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 10, 10);
				Threshold(ho_ImageClosing36, &ho_Region49, 128, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 15);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 22)))
			{
				GenRectangle1(&ho_ROI_0, 1430.39, 8.27714, 1794.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(499999).Append(9000)));
				RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
				CountObj(ho_SelectedRegions125, &hv_Number5);
				if (0 != (int(hv_Number5 == 2)))
				{
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 23)))
			{
				GenRectangle1(&ho_ROI_0, 1430.39, 8.27714, 1694.97, 4231.82);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 53, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(992999).Append(9000)));
				RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
				CountObj(ho_SelectedRegions125, &hv_Number6);
				if (0 != (int(hv_Number6 == 2)))
				{
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 11);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
			}
			if (0 != (int(hv_ImageNum == 24)))
			{
				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);

				ScaleImage(ho_Image, &ho_ImageScaled, 1.41, -30);
				Threshold(ho_ImageScaled, &ho_Region37, 170, 255);
				Connection(ho_Region37, &ho_ConnectedRegions52);
				SelectShape(ho_ConnectedRegions52, &ho_SelectedRegions61, "width", "and",
					350, 99999);
				Union1(ho_SelectedRegions61, &ho_RegionUnion21);
				ClosingRectangle1(ho_RegionUnion21, &ho_RegionClosing20, 60, 60);
				Connection(ho_RegionClosing20, &ho_ConnectedRegions53);
				RegionFeatures(ho_ConnectedRegions53, "area", &hv_Value1);
				TupleMin(hv_Value1, &hv_Min);
				SelectShape(ho_ConnectedRegions53, &ho_SelectedRegions62, "area", "and",
					hv_Min - 5, hv_Min + 5);
				OpeningRectangle1(ho_SelectedRegions62, &ho_RegionOpening28, 1, 100);
				DilationRectangle1(ho_RegionOpening28, &ho_RegionDilation21, 11, 511);
				Union2(ho_RegionClosing20, ho_RegionDilation21, &ho_RegionUnion25);

				Threshold(ho_ImageScaled, &ho_Region39, 0, 28);
				Connection(ho_Region39, &ho_ConnectedRegions54);
				SelectShape(ho_ConnectedRegions54, &ho_SelectedRegions63, "area", "and",
					15000, 999999999);
				Union1(ho_SelectedRegions63, &ho_RegionUnion26);
				Union2(ho_RegionUnion25, ho_RegionUnion26, &ho_RegionUnion27);
				DilationRectangle1(ho_RegionUnion27, &ho_RegionDilation23, 51, 41);
				Difference(ho_Image, ho_RegionDilation23, &ho_RegionDifference28);
				Connection(ho_RegionDifference28, &ho_ConnectedRegions57);
				SelectShape(ho_ConnectedRegions57, &ho_SelectedRegions64, (HTuple("area").Append("column")),
					"and", (HTuple(850000).Append(0)), (HTuple(99999999).Append(2200)));
				//提取定位点
				GenRectangle1(&ho_ROI_0, 406.174, 646.083, 1553.05, 1014.72);
				ReduceDomain(ho_ImageScaled, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 175, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				AreaCenter(ho_SelectedRegions95, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 1082;
				hv_C = hv_Column2 - 834;

				GenRectangle1(&ho_ROI_0, 914.484, 707.978, 1212.36, 990.69);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced37);
				Threshold(ho_ImageReduced37, &ho_Region41, 168, 255);
				Connection(ho_Region41, &ho_ConnectedRegions58);
				SelectShape(ho_ConnectedRegions58, &ho_SelectedRegions65, (HTuple("circularity").Append("area")),
					"and", (HTuple(0.5).Append(1000)), (HTuple(1).Append(99999)));
				DilationCircle(ho_SelectedRegions65, &ho_RegionDilation24, 31);
				Difference(ho_SelectedRegions64, ho_RegionDilation24, &ho_SelectedRegions64
					);

				GenRectangle1(&ho_ROI_0, 546.609, 540.757, 915.249, 815.774);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_SelectedRegions64, ho_ROI_0, &ho_SelectedRegions64);
				SetDictObject(ho_SelectedRegions64, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 17);
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "min_balck_area", 70);
				Det_SJ_Region(hv_dd, (*hv_dt));
				//横RT
				GenRectangle1(&ho_ROI_0, 1440.39, 1708.27714, 1634.97, 4231.82);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced81);
				Threshold(ho_ImageReduced81, &ho_Region54, 128, 255);
				ClosingRectangle1(ho_Region54, &ho_RegionClosing47, 63, 1);
				Connection(ho_RegionClosing47, &ho_ConnectedRegions109);
				SelectShape(ho_ConnectedRegions109, &ho_SelectedRegions125, (HTuple("area").Append("width")),
					"and", (HTuple(1500).Append(1500)), (HTuple(969999).Append(3000)));
				CountObj(ho_SelectedRegions125, &hv_Number7);
				if (0 != (int(hv_Number7 == 2)))
				{
					RegionFeatures(ho_SelectedRegions125, "row", &hv_Value26);
					TupleMax(hv_Value26, &hv_Max8);
					SelectShape(ho_SelectedRegions125, &ho_SelectedRegions140, "row", "and",
						hv_Max8, hv_Max8);
					ShapeTrans(ho_SelectedRegions140, &ho_RegionTrans13, "rectangle2");
					DilationRectangle1(ho_RegionTrans13, &ho_RegionDilation22, 1, 8);
					SetDictTuple(hv_dd, "RTmode", 2);
					SetDictObject(ho_RegionDilation22, hv_dd, "region");
					Det_RT_Region(hv_dd, (*hv_dt));
				}
				//转角RT
				GenRectangle1(&ho_ROI_0, 661.179, 50.46, 1608.47, 1560.27);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced43);
				SobelAmp(ho_ImageReduced43, &ho_EdgeAmplitude3, "sum_abs", 3);
				ScaleImage(ho_EdgeAmplitude3, &ho_ImageScaled19, 20.01, 0);
				Threshold(ho_ImageScaled19, &ho_Region31, 78, 255);
				Connection(ho_Region31, &ho_ConnectedRegions66);
				SelectShape(ho_ConnectedRegions66, &ho_SelectedRegions60, "area", "and",
					75000, 8799999);
				ClosingRectangle1(ho_SelectedRegions60, &ho_RegionClosing50, 540, 540);
				ShapeTrans(ho_RegionClosing50, &ho_RegionTrans1, "convex");
				MoveRegion(ho_RegionTrans1, &ho_RegionMoved32, -100, 100);
				Difference(ho_ROI_0, ho_RegionMoved32, &ho_RegionDifference66);
				Connection(ho_RegionDifference66, &ho_ConnectedRegions69);
				SelectShape(ho_ConnectedRegions69, &ho_SelectedRegions67, "width", "and",
					1000, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions67, &ho_ImageReduced2);
				GrayClosingRect(ho_ImageReduced2, &ho_ImageClosing36, 3, 3);
				Threshold(ho_ImageClosing36, &ho_Region49, 188, 255);
				Connection(ho_Region49, &ho_ConnectedRegions59);
				SelectShape(ho_ConnectedRegions59, &ho_SelectedRegions29, "area", "and",
					1000, 9999999);
				Union1(ho_SelectedRegions29, &ho_RegionUnion34);

				DilationCircle(ho_RegionUnion34, &ho_RegionDilation61, 7);
				SetDictTuple(hv_dd, "RTmode", 0);
				SetDictObject(ho_RegionDilation61, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "mode", 0);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_anisometry_value",
					3);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_thr", 167);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "min_area", 11);
				SetDictTuple(hv_dd.TupleGetDictTuple("RT_zhuanjiao"), "closing_cir_value",
					330);
				Det_RT_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 25)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 593.42, 2062.13, 1541.35, 2465.88);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 175, 255);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.48)), (HTuple(199999).Append(1)));
				RegionFeatures(ho_SelectedRegions95, "row", &hv_Value20);
				TupleMax(hv_Value20, &hv_Max13);
				SelectShape(ho_SelectedRegions95, &ho_SelectedRegions137, "row", "and", hv_Max13,
					hv_Max13);
				AreaCenter(ho_SelectedRegions137, &hv_Area2, &hv_Row2, &hv_Column2);
				//偏移距离
				hv_R = hv_Row2 - 1172;
				hv_C = hv_Column2 - 2267;

				GenRectangle1(&ho_ROI_0, 2.6829, 19.98, 3518.01, 4075.02);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced25);
				Threshold(ho_ImageReduced25, &ho_Region38, 39, 130);
				OpeningRectangle1(ho_Region38, &ho_RegionOpening53, 5, 5);
				Connection(ho_RegionOpening53, &ho_ConnectedRegions40);

				SelectShape(ho_ConnectedRegions40, &ho_SelectedRegions36, "area", "and",
					5e5, 1e7);
				ClosingRectangle1(ho_SelectedRegions36, &ho_RegionClosing25, 40, 20);
				OpeningRectangle1(ho_RegionClosing25, &ho_RegionOpening19, 20, 50);
				ErosionRectangle1(ho_RegionOpening19, &ho_RegionErosion9, 61, 71);

				GenRectangle2(&ho_ROI_0, 1049.74, 1924.82, HTuple(-43.4542).TupleRad(), 193.19,
					116.243);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				Difference(ho_RegionErosion9, ho_ROI_0, &ho_RegionErosion9);
				ReduceDomain(ho_Image, ho_RegionErosion9, &ho_ImageReduced53);
				SetDictObject(ho_RegionErosion9, hv_dd, "region");
				SetDictTuple(hv_dd.TupleGetDictTuple("SJ"), "dyn_black", 18);
				Det_SJ_Region(hv_dd, (*hv_dt));
			}
			if (0 != (int(hv_ImageNum == 26)))
			{
				//gen_rectangle1 (ROI_0, 2.6829, 19.98, 3518.01, 4075.02)
				//reduce_domain (Image, ROI_0, ImageReduced25)
				//threshold (ImageReduced25, Region38, 73, 170)
				//opening_rectangle1 (Region38, RegionOpening53, 5, 5)
				//connection (RegionOpening53, ConnectedRegions40)

				//select_shape (ConnectedRegions40, SelectedRegions36, 'area', 'and', 5e5, 1e7)
				//closing_rectangle1 (SelectedRegions36, RegionClosing25, 40, 40)
				//opening_rectangle1 (RegionClosing25, RegionOpening19, 20, 50)
				//erosion_rectangle1 (RegionOpening19, RegionErosion9, 61, 71)
				//gen_rectangle2 (ROI_0, 1059.74, 1884.82, rad(-43.4542), 153.19, 116.243)
				//difference (RegionErosion9, ROI_0, RegionErosion9)
				//reduce_domain (Image, RegionErosion9, ImageReduced53)
				//dd.region := RegionErosion9
				//dd.SJ.dyn_black := 28
				//dd.SJ.min_black_big_area := 102000
				//dd.SJ.min_loutie_white_area := 210
				//Det_SJ_Region (dd, dt)
			}
			if (0 != (int(hv_ImageNum == 27)))
			{

			}
			if (0 != (int(hv_ImageNum == 28)))
			{

			}
			if (0 != (int(hv_ImageNum == 29)))
			{

				GenRectangle1(&ho_ROI_0, 1406.77, 1570.61, 1851.48, 2805.26);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced60);
				Threshold(ho_ImageReduced60, &ho_Region62, 235, 255);
				Connection(ho_Region62, &ho_ConnectedRegions76);
				OpeningRectangle1(ho_ConnectedRegions76, &ho_RegionOpening40, 10, 10);
				Connection(ho_RegionOpening40, &ho_ConnectedRegions79);
				SelectShape(ho_ConnectedRegions79, &ho_SelectedRegions38, (HTuple("area").Append("row")),
					"and", (HTuple(5000).Append(1300)), (HTuple(11000).Append(1600)));
				CountObj(ho_SelectedRegions38, &hv_Number10);
				if (0 != hv_Number10)
				{
					MoveRegion(ho_SelectedRegions38, &ho_RegionMoved15, 55, 0);
					Union1(ho_RegionMoved15, &ho_RegionUnion44);
					ErosionRectangle1(ho_RegionUnion44, &ho_RegionErosion4, 11, 11);
					ReduceDomain(ho_ImageReduced60, ho_RegionErosion4, &ho_ImageReduced61);
					Threshold(ho_ImageReduced61, &ho_Region63, 0, 70);
					Connection(ho_Region63, &ho_ConnectedRegions80);
					SelectShape(ho_ConnectedRegions80, &ho_SelectedRegions88, "area", "and",
						1450, 99999);
					ConcatObj(ho_SelectedRegions88, (*hv_dt).TupleGetDictObject("59"), &ho___Tmp_Obj_0
						);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "59");
				}
			}
			if (0 != (int(hv_ImageNum == 30)))
			{
				//提取定位点
				GenRectangle1(&ho_ROI_0, 8.27714, 967.911, 827.477, 1962.65);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced63);
				Threshold(ho_ImageReduced63, &ho_Region70, 0, 40);
				Connection(ho_Region70, &ho_ConnectedRegions91);
				SelectShape(ho_ConnectedRegions91, &ho_SelectedRegions95, (HTuple("area").Append("circularity")),
					"and", (HTuple(8600).Append(0.38)), (HTuple(49999).Append(1)));
				CountObj(ho_SelectedRegions95, &hv_Number26);
				if (0 != hv_Number26)
				{
					RegionFeatures(ho_SelectedRegions95, "row", &hv_Value20);
					TupleMax(hv_Value20, &hv_Max13);
					SelectShape(ho_SelectedRegions95, &ho_SelectedRegions137, "row", "and",
						hv_Max13, hv_Max13);
					AreaCenter(ho_SelectedRegions137, &hv_Area2, &hv_Row2, &hv_Column2);
					//偏移距离
					hv_R = hv_Row2 - 582;
					hv_C = hv_Column2 - 1595;
				}
				if (0 != (int(hv_Number26 == 0)))
				{
					hv_R = 0;
					hv_C = 0;
				}
				GenRectangle1(&ho_ROI_0, 1003.02, 1207.82, 1898.29, 3039.32);
				MoveRegion(ho_ROI_0, &ho_ROI_0, hv_R, hv_C);
				ReduceDomain(ho_Image, ho_ROI_0, &ho_ImageReduced88);
				ScaleImage(ho_ImageReduced88, &ho_ImageScaled1, 2.01, -10);
				Threshold(ho_ImageScaled1, &ho_Region86, 245, 255);
				Connection(ho_Region86, &ho_ConnectedRegions121);
				SelectShape(ho_ConnectedRegions121, &ho_SelectedRegions142, (HTuple("area").Append("ratio")),
					"and", (HTuple(1850).Append(0)), (HTuple(39999).Append(0.1)));
				DilationRectangle1(ho_SelectedRegions142, &ho_RegionDilation42, 11, 174);
				MoveRegion(ho_RegionDilation42, &ho_RegionMoved54, -88, 0);
				ReduceDomain(ho_Image, ho_RegionMoved54, &ho_ImageReduced89);
				ErosionRectangle1(ho_RegionMoved54, &ho_RegionErosion30, 1, 16);
				ScaleImage(ho_ImageReduced89, &ho_ImageScaled2, 2.21, -20);
				//检测方法一
				//texture_laws (ImageScaled2, ImageTexture, 'el', 2, 5)
				//threshold (ImageTexture, Region89, 178, 255)
				//closing_rectangle1 (Region89, RegionClosing44, 13, 1)
				//intersection (RegionClosing44, RegionErosion30, RegionIntersection13)
				//connection (RegionIntersection13, ConnectedRegions124)
				//select_shape (ConnectedRegions124, SelectedRegions146, 'width', 'and', 500, 99999)
				//opening_rectangle1 (SelectedRegions146, RegionOpening55, 16, 1)
				//count_obj (RegionOpening55, Number27)
				//if (Number27==2)
				//union1 (SelectedRegions146, RegionUnion45)
				//closing_rectangle1 (RegionUnion45, RegionClosing46, 10, 170)
				//dilation_rectangle1 (RegionClosing46, RegionDilation44, 111, 1)
				//difference (RegionMoved54, RegionDilation44, RegionDifference57)
				//connection (RegionDifference57, ConnectedRegions125)
				//select_shape (ConnectedRegions125, SelectedRegions145, 'height', 'and', 20, 99999)
				//reduce_domain (Image, SelectedRegions145, ImageReduced90)
				//gray_opening_rect (ImageReduced90, ImageOpening, 31, 21)
				//sub_image (ImageReduced90, ImageOpening, ImageSub4, 1.5, 128)
				//threshold (ImageSub4, Region87, 155, 255)
				//connection (Region87, ConnectedRegions122)
				//select_shape (ConnectedRegions122, SelectedRegions143, ['area','ratio'], 'and', [45,0.15], [99999,4])
				//concat_obj (SelectedRegions143, dt.['50'], dt.['50'])
				//endif
				//检测方法二
				DilationRectangle1(ho_SelectedRegions142, &ho_RegionDilation43, 11, 126);
				MoveRegion(ho_RegionDilation43, &ho_RegionMoved55, -65, 0);
				Difference(ho_RegionMoved54, ho_RegionMoved55, &ho_RegionDifference56);
				Connection(ho_RegionDifference56, &ho_ConnectedRegions123);
				SelectShape(ho_ConnectedRegions123, &ho_SelectedRegions145, "height", "and",
					20, 99999);
				ReduceDomain(ho_Image, ho_SelectedRegions145, &ho_ImageReduced90);
				GrayOpeningRect(ho_ImageReduced90, &ho_ImageOpening, 31, 21);
				SubImage(ho_ImageReduced90, ho_ImageOpening, &ho_ImageSub4, 1.5, 128);
				Threshold(ho_ImageSub4, &ho_Region87, 155, 255);
				Connection(ho_Region87, &ho_ConnectedRegions122);
				SelectShape(ho_ConnectedRegions122, &ho_SelectedRegions143, (HTuple("area").Append("ratio")),
					"and", (HTuple(51).Append(0.15)), (HTuple(99999).Append(4)));
				ConcatObj(ho_SelectedRegions143, (*hv_dt).TupleGetDictObject("50"), &ho___Tmp_Obj_0
					);
				SetDictObject(ho___Tmp_Obj_0, (*hv_dt), "50");
			}
		}
		//dev_display (Image)
		//dev_set_line_width (2)
		//dev_display (Reg)
		//stop ()
		//**************
		//面积限度
		hv_s = HTuple(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), 7);
		//灰度限度
		hv_g = HTuple(HTuple::TupleGenSequence(41, 200, 1).TupleLength(), 255);


		GetDictParam((*hv_dt), "keys", HTuple(), &hv_GenParamValue);
		{
			HTuple end_val4599 = (hv_GenParamValue.TupleLength()) - 1;
			HTuple step_val4599 = 1;
			for (hv_Index10 = 0; hv_Index10.Continue(end_val4599, step_val4599); hv_Index10 += step_val4599)
			{
				Connection((*hv_dt).TupleGetDictObject(HTuple(hv_GenParamValue[hv_Index10])),
					&ho_ConnectedRegions167);
				SelectShape(ho_ConnectedRegions167, &ho_SelectedRegions114, "area", "and",
					HTuple(hv_s[hv_Index10]), 9999999);
				//select_gray (SelectedRegions114, Image, SelectedRegions174, 'mean', 'and', 0, g[Index10])
				if (0 != (int(hv_Index10 == 12)))
				{
					SelectShape(ho_SelectedRegions114, &ho_SelectedRegions114, "width", "and",
						10, 99999);
				}
				Union1(ho_SelectedRegions114, &ho_RegionUnion67);
				CountObj(ho_RegionUnion67, &hv_Number39);
				if (0 != (int(hv_Number39 == 0)))
				{
					RemoveDictKey((*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
				else if (0 != hv_Number39)
				{
					Connection(ho_RegionUnion67, &ho___Tmp_Obj_0);
					SetDictObject(ho___Tmp_Obj_0, (*hv_dt), HTuple(hv_GenParamValue[hv_Index10]));
				}
			}
		}

		return 1;
	}
	catch (HException& ExceptionHandler)
	{
		HTuple err;
		ExceptionHandler.ToHTuple(&err);
		string strErr = err.ToString();
		string strerr = std::to_string(hv_ProNum.I()) + "-" + std::to_string(hv_StaNum.I()) + "_" + std::to_string(hv_CamNum.I()) + "_" + std::to_string(hv_ImageNum.I()) + "ImageProcessQ1_84GrayLumenDefects1Station error:" + strErr;
		VeErrMessage.push_back(QString::fromStdString(strerr));
	}
	reg = -1;
	return -1;
}

#pragma endregion


















































